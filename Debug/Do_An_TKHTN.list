
Do_An_TKHTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000131e0  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b4c  08017b4c  00019080  2**0
                  CONTENTS
  4 .ARM          00000008  08017b4c  08017b4c  00018b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b54  08017b54  00019080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b54  08017b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017b58  08017b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08017b5c  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00019080  2**0
                  CONTENTS
 10 .bss          00000614  20000080  20000080  00019080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000694  20000694  00019080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00019080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd8b  00000000  00000000  000190b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002055  00000000  00000000  00024e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  00026e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200a4  00000000  00000000  00027928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd2e  00000000  00000000  000479cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9988  00000000  00000000  000546fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e082  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000007f8  00000000  00000000  0011e0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f58  00000000  00000000  0011e8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00121818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004954 	.word	0x08004954

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08004954 	.word	0x08004954

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8000576:	2300      	movs	r3, #0
 8000578:	9301      	str	r3, [sp, #4]
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2300      	movs	r3, #0
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	2000      	movs	r0, #0
 8000586:	f000 ffb7 	bl	80014f8 <lcdBuildMemoryAccessControlConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4bae      	ldr	r3, [pc, #696]	@ (8000848 <lcdInit+0x2d8>)
 8000590:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8000592:	2300      	movs	r3, #0
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2301      	movs	r3, #1
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2201      	movs	r2, #1
 800059e:	2100      	movs	r1, #0
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 ffa9 	bl	80014f8 <lcdBuildMemoryAccessControlConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4ba8      	ldr	r3, [pc, #672]	@ (800084c <lcdInit+0x2dc>)
 80005ac:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80005ae:	2300      	movs	r3, #0
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2200      	movs	r2, #0
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 ff9b 	bl	80014f8 <lcdBuildMemoryAccessControlConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4ba2      	ldr	r3, [pc, #648]	@ (8000850 <lcdInit+0x2e0>)
 80005c8:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80005ca:	2300      	movs	r3, #0
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	2201      	movs	r2, #1
 80005d6:	2101      	movs	r1, #1
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 ff8d 	bl	80014f8 <lcdBuildMemoryAccessControlConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b9c      	ldr	r3, [pc, #624]	@ (8000854 <lcdInit+0x2e4>)
 80005e4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80005e6:	f000 ff5d 	bl	80014a4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80005ea:	2028      	movs	r0, #40	@ 0x28
 80005ec:	f000 ff64 	bl	80014b8 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80005f0:	20cf      	movs	r0, #207	@ 0xcf
 80005f2:	f000 ff61 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 ff6e 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x83);
 80005fc:	2083      	movs	r0, #131	@ 0x83
 80005fe:	f000 ff6b 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x30);
 8000602:	2030      	movs	r0, #48	@ 0x30
 8000604:	f000 ff68 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xED);
 8000608:	20ed      	movs	r0, #237	@ 0xed
 800060a:	f000 ff55 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x64);
 800060e:	2064      	movs	r0, #100	@ 0x64
 8000610:	f000 ff62 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x03);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 ff5f 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x12);
 800061a:	2012      	movs	r0, #18
 800061c:	f000 ff5c 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x81);
 8000620:	2081      	movs	r0, #129	@ 0x81
 8000622:	f000 ff59 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xE8);
 8000626:	20e8      	movs	r0, #232	@ 0xe8
 8000628:	f000 ff46 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x85);
 800062c:	2085      	movs	r0, #133	@ 0x85
 800062e:	f000 ff53 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x01);
 8000632:	2001      	movs	r0, #1
 8000634:	f000 ff50 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x79);
 8000638:	2079      	movs	r0, #121	@ 0x79
 800063a:	f000 ff4d 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xCB);
 800063e:	20cb      	movs	r0, #203	@ 0xcb
 8000640:	f000 ff3a 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x39);
 8000644:	2039      	movs	r0, #57	@ 0x39
 8000646:	f000 ff47 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x2C);
 800064a:	202c      	movs	r0, #44	@ 0x2c
 800064c:	f000 ff44 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 8000650:	2000      	movs	r0, #0
 8000652:	f000 ff41 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x34);
 8000656:	2034      	movs	r0, #52	@ 0x34
 8000658:	f000 ff3e 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x02);
 800065c:	2002      	movs	r0, #2
 800065e:	f000 ff3b 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8000662:	20f7      	movs	r0, #247	@ 0xf7
 8000664:	f000 ff28 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x20);
 8000668:	2020      	movs	r0, #32
 800066a:	f000 ff35 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xEA);
 800066e:	20ea      	movs	r0, #234	@ 0xea
 8000670:	f000 ff22 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 ff2f 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 800067a:	2000      	movs	r0, #0
 800067c:	f000 ff2c 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8000680:	20c0      	movs	r0, #192	@ 0xc0
 8000682:	f000 ff19 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x26);
 8000686:	2026      	movs	r0, #38	@ 0x26
 8000688:	f000 ff26 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800068c:	20c1      	movs	r0, #193	@ 0xc1
 800068e:	f000 ff13 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x11);
 8000692:	2011      	movs	r0, #17
 8000694:	f000 ff20 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8000698:	20c5      	movs	r0, #197	@ 0xc5
 800069a:	f000 ff0d 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x35);
 800069e:	2035      	movs	r0, #53	@ 0x35
 80006a0:	f000 ff1a 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x3E);
 80006a4:	203e      	movs	r0, #62	@ 0x3e
 80006a6:	f000 ff17 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 80006aa:	20c7      	movs	r0, #199	@ 0xc7
 80006ac:	f000 ff04 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0xBE);
 80006b0:	20be      	movs	r0, #190	@ 0xbe
 80006b2:	f000 ff11 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80006b6:	2036      	movs	r0, #54	@ 0x36
 80006b8:	f000 fefe 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80006bc:	4b62      	ldr	r3, [pc, #392]	@ (8000848 <lcdInit+0x2d8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 ff09 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80006c6:	203a      	movs	r0, #58	@ 0x3a
 80006c8:	f000 fef6 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x55);
 80006cc:	2055      	movs	r0, #85	@ 0x55
 80006ce:	f000 ff03 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80006d2:	20b1      	movs	r0, #177	@ 0xb1
 80006d4:	f000 fef0 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fefd 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x1B);
 80006de:	201b      	movs	r0, #27
 80006e0:	f000 fefa 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80006e4:	20f2      	movs	r0, #242	@ 0xf2
 80006e6:	f000 fee7 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x08);
 80006ea:	2008      	movs	r0, #8
 80006ec:	f000 fef4 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80006f0:	2026      	movs	r0, #38	@ 0x26
 80006f2:	f000 fee1 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x01);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 feee 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80006fc:	20e0      	movs	r0, #224	@ 0xe0
 80006fe:	f000 fedb 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x1F);
 8000702:	201f      	movs	r0, #31
 8000704:	f000 fee8 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x1A);
 8000708:	201a      	movs	r0, #26
 800070a:	f000 fee5 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x18);
 800070e:	2018      	movs	r0, #24
 8000710:	f000 fee2 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x0A);
 8000714:	200a      	movs	r0, #10
 8000716:	f000 fedf 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x0F);
 800071a:	200f      	movs	r0, #15
 800071c:	f000 fedc 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x06);
 8000720:	2006      	movs	r0, #6
 8000722:	f000 fed9 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x45);
 8000726:	2045      	movs	r0, #69	@ 0x45
 8000728:	f000 fed6 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x87);
 800072c:	2087      	movs	r0, #135	@ 0x87
 800072e:	f000 fed3 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x32);
 8000732:	2032      	movs	r0, #50	@ 0x32
 8000734:	f000 fed0 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x0A);
 8000738:	200a      	movs	r0, #10
 800073a:	f000 fecd 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x07);
 800073e:	2007      	movs	r0, #7
 8000740:	f000 feca 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x02);
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fec7 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x07);
 800074a:	2007      	movs	r0, #7
 800074c:	f000 fec4 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x05);
 8000750:	2005      	movs	r0, #5
 8000752:	f000 fec1 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 febe 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 800075c:	20e1      	movs	r0, #225	@ 0xe1
 800075e:	f000 feab 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 8000762:	2000      	movs	r0, #0
 8000764:	f000 feb8 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x25);
 8000768:	2025      	movs	r0, #37	@ 0x25
 800076a:	f000 feb5 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x27);
 800076e:	2027      	movs	r0, #39	@ 0x27
 8000770:	f000 feb2 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x05);
 8000774:	2005      	movs	r0, #5
 8000776:	f000 feaf 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x10);
 800077a:	2010      	movs	r0, #16
 800077c:	f000 feac 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x09);
 8000780:	2009      	movs	r0, #9
 8000782:	f000 fea9 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x3A);
 8000786:	203a      	movs	r0, #58	@ 0x3a
 8000788:	f000 fea6 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x78);
 800078c:	2078      	movs	r0, #120	@ 0x78
 800078e:	f000 fea3 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x4D);
 8000792:	204d      	movs	r0, #77	@ 0x4d
 8000794:	f000 fea0 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x05);
 8000798:	2005      	movs	r0, #5
 800079a:	f000 fe9d 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x18);
 800079e:	2018      	movs	r0, #24
 80007a0:	f000 fe9a 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x0D);
 80007a4:	200d      	movs	r0, #13
 80007a6:	f000 fe97 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x38);
 80007aa:	2038      	movs	r0, #56	@ 0x38
 80007ac:	f000 fe94 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x3A);
 80007b0:	203a      	movs	r0, #58	@ 0x3a
 80007b2:	f000 fe91 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x1F);
 80007b6:	201f      	movs	r0, #31
 80007b8:	f000 fe8e 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80007bc:	202a      	movs	r0, #42	@ 0x2a
 80007be:	f000 fe7b 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007c2:	2000      	movs	r0, #0
 80007c4:	f000 fe88 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f000 fe85 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 fe82 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0xEF);
 80007d4:	20ef      	movs	r0, #239	@ 0xef
 80007d6:	f000 fe7f 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80007da:	202b      	movs	r0, #43	@ 0x2b
 80007dc:	f000 fe6c 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x00);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fe79 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f000 fe76 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x01);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 fe73 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x3F);
 80007f2:	203f      	movs	r0, #63	@ 0x3f
 80007f4:	f000 fe70 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80007f8:	20b7      	movs	r0, #183	@ 0xb7
 80007fa:	f000 fe5d 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x07);
 80007fe:	2007      	movs	r0, #7
 8000800:	f000 fe6a 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8000804:	20b6      	movs	r0, #182	@ 0xb6
 8000806:	f000 fe57 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData(0x0A);
 800080a:	200a      	movs	r0, #10
 800080c:	f000 fe64 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x82);
 8000810:	2082      	movs	r0, #130	@ 0x82
 8000812:	f000 fe61 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x27);
 8000816:	2027      	movs	r0, #39	@ 0x27
 8000818:	f000 fe5e 	bl	80014d8 <lcdWriteData>
  lcdWriteData(0x00);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fe5b 	bl	80014d8 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8000822:	2011      	movs	r0, #17
 8000824:	f000 fe48 	bl	80014b8 <lcdWriteCommand>
  HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	@ 0x64
 800082a:	f001 fa67 	bl	8001cfc <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 800082e:	2029      	movs	r0, #41	@ 0x29
 8000830:	f000 fe42 	bl	80014b8 <lcdWriteCommand>
  HAL_Delay(100);
 8000834:	2064      	movs	r0, #100	@ 0x64
 8000836:	f001 fa61 	bl	8001cfc <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800083a:	202c      	movs	r0, #44	@ 0x2c
 800083c:	f000 fe3c 	bl	80014b8 <lcdWriteCommand>
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000a0 	.word	0x200000a0
 800084c:	200000a1 	.word	0x200000a1
 8000850:	200000a2 	.word	0x200000a2
 8000854:	200000a3 	.word	0x200000a3

08000858 <drawInterface>:

void drawInterface(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800085e:	4b5b      	ldr	r3, [pc, #364]	@ (80009cc <drawInterface+0x174>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	3b01      	subs	r3, #1
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b59      	ldr	r3, [pc, #356]	@ (80009cc <drawInterface+0x174>)
 8000868:	885b      	ldrh	r3, [r3, #2]
 800086a:	3b01      	subs	r3, #1
 800086c:	b29b      	uxth	r3, r3
 800086e:	2100      	movs	r1, #0
 8000870:	2000      	movs	r0, #0
 8000872:	f000 fd9f 	bl	80013b4 <lcdSetWindow>
	lcdDrawImage(0, 60, &imageNhaTrang);
 8000876:	4a56      	ldr	r2, [pc, #344]	@ (80009d0 <drawInterface+0x178>)
 8000878:	213c      	movs	r1, #60	@ 0x3c
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fa64 	bl	8000d48 <lcdDrawImage>
	drawAlignedText("Nha Trang", 60, lcdProperties.width, 0);
 8000880:	4b52      	ldr	r3, [pc, #328]	@ (80009cc <drawInterface+0x174>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	2300      	movs	r3, #0
 8000888:	213c      	movs	r1, #60	@ 0x3c
 800088a:	4852      	ldr	r0, [pc, #328]	@ (80009d4 <drawInterface+0x17c>)
 800088c:	f000 f8b4 	bl	80009f8 <drawAlignedText>
	//Filling top half section with colors
	for (int y = 0; y < 60; y++)
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e017      	b.n	80008c6 <drawInterface+0x6e>
	{
	    for (int x = 0; x < lcdProperties.width; x++)
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	e00b      	b.n	80008b4 <drawInterface+0x5c>
	    {
	        lcdDrawPixel(x, y, COLOR_CYAN);
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	b291      	uxth	r1, r2
 80008a4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f901 	bl	8000ab0 <lcdDrawPixel>
	    for (int x = 0; x < lcdProperties.width; x++)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b45      	ldr	r3, [pc, #276]	@ (80009cc <drawInterface+0x174>)
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	461a      	mov	r2, r3
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	4293      	cmp	r3, r2
 80008be:	dbed      	blt.n	800089c <drawInterface+0x44>
	for (int y = 0; y < 60; y++)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	2b3b      	cmp	r3, #59	@ 0x3b
 80008ca:	dde4      	ble.n	8000896 <drawInterface+0x3e>
	    }
	}
	//Filling bottom half section with colors
	for (int y = 220; y < lcdProperties.height; y++)
 80008cc:	23dc      	movs	r3, #220	@ 0xdc
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	e017      	b.n	8000902 <drawInterface+0xaa>
	{
		for (int x = 0; x < lcdProperties.width; x++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	e00b      	b.n	80008f0 <drawInterface+0x98>
		{
		    lcdDrawPixel(x, y, COLOR_CYAN);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	b291      	uxth	r1, r2
 80008e0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f8e3 	bl	8000ab0 <lcdDrawPixel>
		for (int x = 0; x < lcdProperties.width; x++)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <drawInterface+0x174>)
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	dbed      	blt.n	80008d8 <drawInterface+0x80>
	for (int y = 220; y < lcdProperties.height; y++)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3301      	adds	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b32      	ldr	r3, [pc, #200]	@ (80009cc <drawInterface+0x174>)
 8000904:	885b      	ldrh	r3, [r3, #2]
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4293      	cmp	r3, r2
 800090c:	dbe1      	blt.n	80008d2 <drawInterface+0x7a>
		}
	}

	//Coordinates for locating weather icons
	lcdSetTextFont(&Font12);
 800090e:	4832      	ldr	r0, [pc, #200]	@ (80009d8 <drawInterface+0x180>)
 8000910:	f000 fcbc 	bl	800128c <lcdSetTextFont>
	drawClearDay(120, 16);
 8000914:	2110      	movs	r1, #16
 8000916:	2078      	movs	r0, #120	@ 0x78
 8000918:	f000 f896 	bl	8000a48 <drawClearDay>

	drawClearDay(40, 248);
 800091c:	21f8      	movs	r1, #248	@ 0xf8
 800091e:	2028      	movs	r0, #40	@ 0x28
 8000920:	f000 f892 	bl	8000a48 <drawClearDay>
	lcdSetCursor(28, 220);
 8000924:	21dc      	movs	r1, #220	@ 0xdc
 8000926:	201c      	movs	r0, #28
 8000928:	f000 fd2a 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("6/11");
 800092c:	482b      	ldr	r0, [pc, #172]	@ (80009dc <drawInterface+0x184>)
 800092e:	f000 fc27 	bl	8001180 <lcdPrintfNoBackColor>
	drawClearDay(90, 248);
 8000932:	21f8      	movs	r1, #248	@ 0xf8
 8000934:	205a      	movs	r0, #90	@ 0x5a
 8000936:	f000 f887 	bl	8000a48 <drawClearDay>
	lcdSetCursor(78, 220);
 800093a:	21dc      	movs	r1, #220	@ 0xdc
 800093c:	204e      	movs	r0, #78	@ 0x4e
 800093e:	f000 fd1f 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("7/11");
 8000942:	4827      	ldr	r0, [pc, #156]	@ (80009e0 <drawInterface+0x188>)
 8000944:	f000 fc1c 	bl	8001180 <lcdPrintfNoBackColor>
	drawClearDay(150, 248);
 8000948:	21f8      	movs	r1, #248	@ 0xf8
 800094a:	2096      	movs	r0, #150	@ 0x96
 800094c:	f000 f87c 	bl	8000a48 <drawClearDay>
	lcdSetCursor(138, 220);
 8000950:	21dc      	movs	r1, #220	@ 0xdc
 8000952:	208a      	movs	r0, #138	@ 0x8a
 8000954:	f000 fd14 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("8/11");
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <drawInterface+0x18c>)
 800095a:	f000 fc11 	bl	8001180 <lcdPrintfNoBackColor>
	drawClearDay(200, 248);
 800095e:	21f8      	movs	r1, #248	@ 0xf8
 8000960:	20c8      	movs	r0, #200	@ 0xc8
 8000962:	f000 f871 	bl	8000a48 <drawClearDay>
	lcdSetCursor(188, 220);
 8000966:	21dc      	movs	r1, #220	@ 0xdc
 8000968:	20bc      	movs	r0, #188	@ 0xbc
 800096a:	f000 fd09 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("9/11");
 800096e:	481e      	ldr	r0, [pc, #120]	@ (80009e8 <drawInterface+0x190>)
 8000970:	f000 fc06 	bl	8001180 <lcdPrintfNoBackColor>

	drawClearDay(65, 301);
 8000974:	f240 112d 	movw	r1, #301	@ 0x12d
 8000978:	2041      	movs	r0, #65	@ 0x41
 800097a:	f000 f865 	bl	8000a48 <drawClearDay>
	lcdSetCursor(45, 273);
 800097e:	f240 1111 	movw	r1, #273	@ 0x111
 8000982:	202d      	movs	r0, #45	@ 0x2d
 8000984:	f000 fcfc 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("10/11");
 8000988:	4818      	ldr	r0, [pc, #96]	@ (80009ec <drawInterface+0x194>)
 800098a:	f000 fbf9 	bl	8001180 <lcdPrintfNoBackColor>
	drawClearDay(120, 301);
 800098e:	f240 112d 	movw	r1, #301	@ 0x12d
 8000992:	2078      	movs	r0, #120	@ 0x78
 8000994:	f000 f858 	bl	8000a48 <drawClearDay>
	lcdSetCursor(100, 273);
 8000998:	f240 1111 	movw	r1, #273	@ 0x111
 800099c:	2064      	movs	r0, #100	@ 0x64
 800099e:	f000 fcef 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("11/11");
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <drawInterface+0x198>)
 80009a4:	f000 fbec 	bl	8001180 <lcdPrintfNoBackColor>
	drawClearDay(175, 301);
 80009a8:	f240 112d 	movw	r1, #301	@ 0x12d
 80009ac:	20af      	movs	r0, #175	@ 0xaf
 80009ae:	f000 f84b 	bl	8000a48 <drawClearDay>
	lcdSetCursor(155, 273);
 80009b2:	f240 1111 	movw	r1, #273	@ 0x111
 80009b6:	209b      	movs	r0, #155	@ 0x9b
 80009b8:	f000 fce2 	bl	8001380 <lcdSetCursor>
	lcdPrintfNoBackColor("12/11");
 80009bc:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <drawInterface+0x19c>)
 80009be:	f000 fbdf 	bl	8001180 <lcdPrintfNoBackColor>
}
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	08017680 	.word	0x08017680
 80009d4:	0800496c 	.word	0x0800496c
 80009d8:	20000000 	.word	0x20000000
 80009dc:	08004978 	.word	0x08004978
 80009e0:	08004980 	.word	0x08004980
 80009e4:	08004988 	.word	0x08004988
 80009e8:	08004990 	.word	0x08004990
 80009ec:	08004998 	.word	0x08004998
 80009f0:	080049a0 	.word	0x080049a0
 80009f4:	080049a8 	.word	0x080049a8

080009f8 <drawAlignedText>:

//Function for drawing aligned text
void drawAlignedText(char *text, int yPosition, int sectionWidth, bool BackColor)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	70fb      	strb	r3, [r7, #3]
    int textWidth = getTextWidth(text);
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f000 f83e 	bl	8000a88 <getTextWidth>
 8000a0c:	6178      	str	r0, [r7, #20]
    int xPosition = (sectionWidth - textWidth) / 2;
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	0fda      	lsrs	r2, r3, #31
 8000a16:	4413      	add	r3, r2
 8000a18:	105b      	asrs	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
    lcdSetCursor(xPosition, yPosition);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	b292      	uxth	r2, r2
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fcaa 	bl	8001380 <lcdSetCursor>
    if (BackColor)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <drawAlignedText+0x42>
    {
    	lcdPrintf(text);
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f000 fb18 	bl	8001068 <lcdPrintf>
    }
    else
    {
    	lcdPrintfNoBackColor(text);
    }
}
 8000a38:	e002      	b.n	8000a40 <drawAlignedText+0x48>
    	lcdPrintfNoBackColor(text);
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 fba0 	bl	8001180 <lcdPrintfNoBackColor>
}
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <drawClearDay>:

void drawClearDay(uint16_t xPosition, uint16_t yPosition)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	80fb      	strh	r3, [r7, #6]
 8000a54:	4613      	mov	r3, r2
 8000a56:	80bb      	strh	r3, [r7, #4]
	uint8_t sunRadius = 12;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	73fb      	strb	r3, [r7, #15]

	// Draw the sun (filled yellow circle)
	lcdFillCircle(xPosition, yPosition, sunRadius, COLOR_YELLOW);
 8000a5c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a60:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a6c:	f000 f894 	bl	8000b98 <lcdFillCircle>

	drawAlignedText("27C", 31, 240, 1);
 8000a70:	2301      	movs	r3, #1
 8000a72:	22f0      	movs	r2, #240	@ 0xf0
 8000a74:	211f      	movs	r1, #31
 8000a76:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <drawClearDay+0x3c>)
 8000a78:	f7ff ffbe 	bl	80009f8 <drawAlignedText>
}
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	080049b0 	.word	0x080049b0

08000a88 <getTextWidth>:
	    HAL_Delay(1000);
	}
}

int getTextWidth(const char *text)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    int characterWidth = 6;  // Adjust this value based on your Font 12 specifications
 8000a90:	2306      	movs	r3, #6
 8000a92:	60fb      	str	r3, [r7, #12]
    int length = strlen(text);  // Get the number of characters in the string
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fb9b 	bl	80001d0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	60bb      	str	r3, [r7, #8]

    return length * characterWidth;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	fb02 f303 	mul.w	r3, r2, r3
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	460b      	mov	r3, r1
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <lcdDrawPixel+0x44>)
 8000ac4:	881b      	ldrh	r3, [r3, #0]
 8000ac6:	88fa      	ldrh	r2, [r7, #6]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d20f      	bcs.n	8000aec <lcdDrawPixel+0x3c>
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <lcdDrawPixel+0x44>)
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	88ba      	ldrh	r2, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d20a      	bcs.n	8000aec <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	88fa      	ldrh	r2, [r7, #6]
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	88f8      	ldrh	r0, [r7, #6]
 8000ade:	f000 fc69 	bl	80013b4 <lcdSetWindow>
    lcdWriteData(color);
 8000ae2:	887b      	ldrh	r3, [r7, #2]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 fcf7 	bl	80014d8 <lcdWriteData>
 8000aea:	e000      	b.n	8000aee <lcdDrawPixel+0x3e>
        return;
 8000aec:	bf00      	nop
}
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000008 	.word	0x20000008

08000af8 <lcdDrawVLine>:
		lcdWriteData(color);
	}
}

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4604      	mov	r4, r0
 8000b00:	4608      	mov	r0, r1
 8000b02:	4611      	mov	r1, r2
 8000b04:	461a      	mov	r2, r3
 8000b06:	4623      	mov	r3, r4
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	80bb      	strh	r3, [r7, #4]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	807b      	strh	r3, [r7, #2]
 8000b12:	4613      	mov	r3, r2
 8000b14:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d205      	bcs.n	8000b2a <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	817b      	strh	r3, [r7, #10]
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	80bb      	strh	r3, [r7, #4]
 8000b26:	897b      	ldrh	r3, [r7, #10]
 8000b28:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d303      	bcc.n	8000b3c <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8000b3c:	4b15      	ldr	r3, [pc, #84]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	88ba      	ldrh	r2, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d303      	bcc.n	8000b4e <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b48:	885b      	ldrh	r3, [r3, #2]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b50:	885b      	ldrh	r3, [r3, #2]
 8000b52:	887a      	ldrh	r2, [r7, #2]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d303      	bcc.n	8000b60 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <lcdDrawVLine+0x9c>)
 8000b5a:	885b      	ldrh	r3, [r3, #2]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8000b60:	887b      	ldrh	r3, [r7, #2]
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	88b9      	ldrh	r1, [r7, #4]
 8000b66:	88f8      	ldrh	r0, [r7, #6]
 8000b68:	f000 fc24 	bl	80013b4 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	e006      	b.n	8000b80 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8000b72:	883b      	ldrh	r3, [r7, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 fcaf 	bl	80014d8 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	ddf4      	ble.n	8000b72 <lcdDrawVLine+0x7a>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	3714      	adds	r7, #20
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008

08000b98 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4603      	mov	r3, r0
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8000bb6:	88f8      	ldrh	r0, [r7, #6]
 8000bb8:	88ba      	ldrh	r2, [r7, #4]
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	b299      	uxth	r1, r3
 8000bc0:	88ba      	ldrh	r2, [r7, #4]
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	883b      	ldrh	r3, [r7, #0]
 8000bce:	f7ff ff93 	bl	8000af8 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8000bd2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bd6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bda:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bde:	883b      	ldrh	r3, [r7, #0]
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	2300      	movs	r3, #0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	2303      	movs	r3, #3
 8000be8:	f000 f804 	bl	8000bf4 <lcdFillCircleHelper>
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	4611      	mov	r1, r2
 8000c00:	461a      	mov	r2, r3
 8000c02:	4623      	mov	r3, r4
 8000c04:	80fb      	strh	r3, [r7, #6]
 8000c06:	4603      	mov	r3, r0
 8000c08:	80bb      	strh	r3, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	f1c3 0301 	rsb	r3, r3, #1
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	461a      	mov	r2, r3
 8000c24:	03d2      	lsls	r2, r2, #15
 8000c26:	1ad3      	subs	r3, r2, r3
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8000c36:	e07b      	b.n	8000d30 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8000c38:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0e      	blt.n	8000c5e <lcdFillCircleHelper+0x6a>
		{
			y--;
 8000c40:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	3b01      	subs	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8000c4c:	8a7b      	ldrh	r3, [r7, #18]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8000c54:	8afa      	ldrh	r2, [r7, #22]
 8000c56:	8a7b      	ldrh	r3, [r7, #18]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8000c5e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	3301      	adds	r3, #1
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8000c6a:	8abb      	ldrh	r3, [r7, #20]
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8000c72:	8afa      	ldrh	r2, [r7, #22]
 8000c74:	8abb      	ldrh	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8000c7c:	787b      	ldrb	r3, [r7, #1]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d027      	beq.n	8000cd6 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8000c86:	88fa      	ldrh	r2, [r7, #6]
 8000c88:	8a3b      	ldrh	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b298      	uxth	r0, r3
 8000c8e:	88ba      	ldrh	r2, [r7, #4]
 8000c90:	89fb      	ldrh	r3, [r7, #14]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b299      	uxth	r1, r3
 8000c96:	88ba      	ldrh	r2, [r7, #4]
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000caa:	f7ff ff25 	bl	8000af8 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	89fb      	ldrh	r3, [r7, #14]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b298      	uxth	r0, r3
 8000cb6:	88ba      	ldrh	r2, [r7, #4]
 8000cb8:	8a3b      	ldrh	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b299      	uxth	r1, r3
 8000cbe:	88ba      	ldrh	r2, [r7, #4]
 8000cc0:	8a3b      	ldrh	r3, [r7, #16]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000cd2:	f7ff ff11 	bl	8000af8 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8000cd6:	787b      	ldrb	r3, [r7, #1]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d027      	beq.n	8000d30 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8000ce0:	88fa      	ldrh	r2, [r7, #6]
 8000ce2:	8a3b      	ldrh	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	b298      	uxth	r0, r3
 8000ce8:	88ba      	ldrh	r2, [r7, #4]
 8000cea:	89fb      	ldrh	r3, [r7, #14]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	88ba      	ldrh	r2, [r7, #4]
 8000cf2:	89fb      	ldrh	r3, [r7, #14]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d04:	f7ff fef8 	bl	8000af8 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8000d08:	88fa      	ldrh	r2, [r7, #6]
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	b298      	uxth	r0, r3
 8000d10:	88ba      	ldrh	r2, [r7, #4]
 8000d12:	8a3b      	ldrh	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b299      	uxth	r1, r3
 8000d18:	88ba      	ldrh	r2, [r7, #4]
 8000d1a:	8a3b      	ldrh	r3, [r7, #16]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d22:	4413      	add	r3, r2
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3301      	adds	r3, #1
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000d2c:	f7ff fee4 	bl	8000af8 <lcdDrawVLine>
	while (x < y)
 8000d30:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000d34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f6ff af7d 	blt.w	8000c38 <lcdFillCircleHelper+0x44>
		}
	}
}
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}

08000d48 <lcdDrawImage>:
        lcdDrawHLine(a, b + 1, y, color);
    }
}

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	603a      	str	r2, [r7, #0]
 8000d52:	80fb      	strh	r3, [r7, #6]
 8000d54:	460b      	mov	r3, r1
 8000d56:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <lcdDrawImage+0xa4>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	88fa      	ldrh	r2, [r7, #6]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d23c      	bcs.n	8000ddc <lcdDrawImage+0x94>
 8000d62:	4b22      	ldr	r3, [pc, #136]	@ (8000dec <lcdDrawImage+0xa4>)
 8000d64:	885b      	ldrh	r3, [r3, #2]
 8000d66:	88ba      	ldrh	r2, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d237      	bcs.n	8000ddc <lcdDrawImage+0x94>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <lcdDrawImage+0xa4>)
 8000d76:	8812      	ldrh	r2, [r2, #0]
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	dc31      	bgt.n	8000de0 <lcdDrawImage+0x98>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	8852      	ldrh	r2, [r2, #2]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <lcdDrawImage+0xa4>)
 8000d86:	8852      	ldrh	r2, [r2, #2]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	dc2b      	bgt.n	8000de4 <lcdDrawImage+0x9c>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e01d      	b.n	8000dce <lcdDrawImage+0x86>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	b299      	uxth	r1, r3
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	889b      	ldrh	r3, [r3, #4]
 8000da4:	4618      	mov	r0, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	fb00 f303 	mul.w	r3, r0, r3
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	441a      	add	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	08db      	lsrs	r3, r3, #3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	fb90 f3f3 	sdiv	r3, r0, r3
 8000dc2:	88f8      	ldrh	r0, [r7, #6]
 8000dc4:	f000 fb42 	bl	800144c <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	885b      	ldrh	r3, [r3, #2]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	dbdb      	blt.n	8000d92 <lcdDrawImage+0x4a>
 8000dda:	e004      	b.n	8000de6 <lcdDrawImage+0x9e>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8000ddc:	bf00      	nop
 8000dde:	e002      	b.n	8000de6 <lcdDrawImage+0x9e>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8000de0:	bf00      	nop
 8000de2:	e000      	b.n	8000de6 <lcdDrawImage+0x9e>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8000de4:	bf00      	nop
	}
}
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000008 	.word	0x20000008

08000df0 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4623      	mov	r3, r4
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	4603      	mov	r3, r0
 8000e04:	80bb      	strh	r3, [r7, #4]
 8000e06:	460b      	mov	r3, r1
 8000e08:	70fb      	strb	r3, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e12:	4a4a      	ldr	r2, [pc, #296]	@ (8000f3c <lcdDrawChar+0x14c>)
 8000e14:	8812      	ldrh	r2, [r2, #0]
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f280 808c 	bge.w	8000f34 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000e1c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e20:	4a46      	ldr	r2, [pc, #280]	@ (8000f3c <lcdDrawChar+0x14c>)
 8000e22:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000e24:	4293      	cmp	r3, r2
 8000e26:	f280 8085 	bge.w	8000f34 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	4a44      	ldr	r2, [pc, #272]	@ (8000f40 <lcdDrawChar+0x150>)
 8000e30:	6892      	ldr	r2, [r2, #8]
 8000e32:	8892      	ldrh	r2, [r2, #4]
 8000e34:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db7c      	blt.n	8000f34 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000e3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e3e:	4a40      	ldr	r2, [pc, #256]	@ (8000f40 <lcdDrawChar+0x150>)
 8000e40:	6892      	ldr	r2, [r2, #8]
 8000e42:	88d2      	ldrh	r2, [r2, #6]
 8000e44:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db74      	blt.n	8000f34 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <lcdDrawChar+0x150>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	88db      	ldrh	r3, [r3, #6]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
 8000e5e:	e061      	b.n	8000f24 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	733b      	strb	r3, [r7, #12]
 8000e64:	e055      	b.n	8000f12 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000e66:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <lcdDrawChar+0x150>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	78fa      	ldrb	r2, [r7, #3]
 8000e6e:	3a20      	subs	r2, #32
 8000e70:	4933      	ldr	r1, [pc, #204]	@ (8000f40 <lcdDrawChar+0x150>)
 8000e72:	6889      	ldr	r1, [r1, #8]
 8000e74:	88c9      	ldrh	r1, [r1, #6]
 8000e76:	fb01 f202 	mul.w	r2, r1, r2
 8000e7a:	7ab9      	ldrb	r1, [r7, #10]
 8000e7c:	fb02 f101 	mul.w	r1, r2, r1
 8000e80:	7bba      	ldrb	r2, [r7, #14]
 8000e82:	7ab8      	ldrb	r0, [r7, #10]
 8000e84:	fb00 f202 	mul.w	r2, r0, r2
 8000e88:	4411      	add	r1, r2
 8000e8a:	7b3a      	ldrb	r2, [r7, #12]
 8000e8c:	440a      	add	r2, r1
 8000e8e:	4413      	add	r3, r2
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	72fb      	strb	r3, [r7, #11]
 8000e98:	e032      	b.n	8000f00 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8000e9a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	da12      	bge.n	8000ec8 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000ea2:	7afb      	ldrb	r3, [r7, #11]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b298      	uxth	r0, r3
 8000eb4:	7bbb      	ldrb	r3, [r7, #14]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	88bb      	ldrh	r3, [r7, #4]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	883a      	ldrh	r2, [r7, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fdf5 	bl	8000ab0 <lcdDrawPixel>
 8000ec6:	e015      	b.n	8000ef4 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8000ec8:	8c3a      	ldrh	r2, [r7, #32]
 8000eca:	883b      	ldrh	r3, [r7, #0]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d011      	beq.n	8000ef4 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8000ed0:	7afb      	ldrb	r3, [r7, #11]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	4413      	add	r3, r2
 8000ee0:	b298      	uxth	r0, r3
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	88bb      	ldrh	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	8c3a      	ldrh	r2, [r7, #32]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f7ff fdde 	bl	8000ab0 <lcdDrawPixel>
				}
				line <<= 1;
 8000ef4:	7b7b      	ldrb	r3, [r7, #13]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8000efa:	7afb      	ldrb	r3, [r7, #11]
 8000efc:	3301      	adds	r3, #1
 8000efe:	72fb      	strb	r3, [r7, #11]
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	2b07      	cmp	r3, #7
 8000f04:	d9c9      	bls.n	8000e9a <lcdDrawChar+0xaa>
			}

			xP += 8;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	733b      	strb	r3, [r7, #12]
 8000f12:	7b3a      	ldrb	r2, [r7, #12]
 8000f14:	7abb      	ldrb	r3, [r7, #10]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3a5      	bcc.n	8000e66 <lcdDrawChar+0x76>
		}

		xP = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000f1e:	7bbb      	ldrb	r3, [r7, #14]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73bb      	strb	r3, [r7, #14]
 8000f24:	7bbb      	ldrb	r3, [r7, #14]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <lcdDrawChar+0x150>)
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	88db      	ldrh	r3, [r3, #6]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d396      	bcc.n	8000e60 <lcdDrawChar+0x70>
 8000f32:	e000      	b.n	8000f36 <lcdDrawChar+0x146>
		return;
 8000f34:	bf00      	nop
	}
}
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000010 	.word	0x20000010

08000f44 <lcdDrawCharNoBackColor>:

void lcdDrawCharNoBackColor(int16_t x, int16_t y, unsigned char c, uint16_t color)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	4603      	mov	r3, r0
 8000f58:	80bb      	strh	r3, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	70fb      	strb	r3, [r7, #3]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	4a3e      	ldr	r2, [pc, #248]	@ (8001060 <lcdDrawCharNoBackColor+0x11c>)
 8000f68:	8812      	ldrh	r2, [r2, #0]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	da73      	bge.n	8001056 <lcdDrawCharNoBackColor+0x112>
			(y >= lcdProperties.height) || 		// Clip bottom
 8000f6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f72:	4a3b      	ldr	r2, [pc, #236]	@ (8001060 <lcdDrawCharNoBackColor+0x11c>)
 8000f74:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8000f76:	4293      	cmp	r3, r2
 8000f78:	da6d      	bge.n	8001056 <lcdDrawCharNoBackColor+0x112>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	4a39      	ldr	r2, [pc, #228]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 8000f80:	6892      	ldr	r2, [r2, #8]
 8000f82:	8892      	ldrh	r2, [r2, #4]
 8000f84:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db65      	blt.n	8001056 <lcdDrawCharNoBackColor+0x112>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8000f8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f8e:	4a35      	ldr	r2, [pc, #212]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 8000f90:	6892      	ldr	r2, [r2, #8]
 8000f92:	88d2      	ldrh	r2, [r2, #6]
 8000f94:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db5d      	blt.n	8001056 <lcdDrawCharNoBackColor+0x112>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	88db      	ldrh	r3, [r3, #6]
 8000fa0:	08db      	lsrs	r3, r3, #3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	73bb      	strb	r3, [r7, #14]
 8000fae:	e04a      	b.n	8001046 <lcdDrawCharNoBackColor+0x102>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	733b      	strb	r3, [r7, #12]
 8000fb4:	e03e      	b.n	8001034 <lcdDrawCharNoBackColor+0xf0>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	3a20      	subs	r2, #32
 8000fc0:	4928      	ldr	r1, [pc, #160]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 8000fc2:	6889      	ldr	r1, [r1, #8]
 8000fc4:	88c9      	ldrh	r1, [r1, #6]
 8000fc6:	fb01 f202 	mul.w	r2, r1, r2
 8000fca:	7ab9      	ldrb	r1, [r7, #10]
 8000fcc:	fb02 f101 	mul.w	r1, r2, r1
 8000fd0:	7bba      	ldrb	r2, [r7, #14]
 8000fd2:	7ab8      	ldrb	r0, [r7, #10]
 8000fd4:	fb00 f202 	mul.w	r2, r0, r2
 8000fd8:	4411      	add	r1, r2
 8000fda:	7b3a      	ldrb	r2, [r7, #12]
 8000fdc:	440a      	add	r2, r1
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	72fb      	strb	r3, [r7, #11]
 8000fe8:	e01b      	b.n	8001022 <lcdDrawCharNoBackColor+0xde>
			{
				if((line & 0x80) == 0x80)
 8000fea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da11      	bge.n	8001016 <lcdDrawCharNoBackColor+0xd2>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4413      	add	r3, r2
 8001002:	b298      	uxth	r0, r3
 8001004:	7bbb      	ldrb	r3, [r7, #14]
 8001006:	b29a      	uxth	r2, r3
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	883a      	ldrh	r2, [r7, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fd4d 	bl	8000ab0 <lcdDrawPixel>
				}
				line <<= 1;
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 800101c:	7afb      	ldrb	r3, [r7, #11]
 800101e:	3301      	adds	r3, #1
 8001020:	72fb      	strb	r3, [r7, #11]
 8001022:	7afb      	ldrb	r3, [r7, #11]
 8001024:	2b07      	cmp	r3, #7
 8001026:	d9e0      	bls.n	8000fea <lcdDrawCharNoBackColor+0xa6>
			}

			xP += 8;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3308      	adds	r3, #8
 800102c:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800102e:	7b3b      	ldrb	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	733b      	strb	r3, [r7, #12]
 8001034:	7b3a      	ldrb	r2, [r7, #12]
 8001036:	7abb      	ldrb	r3, [r7, #10]
 8001038:	429a      	cmp	r2, r3
 800103a:	d3bc      	bcc.n	8000fb6 <lcdDrawCharNoBackColor+0x72>
		}

		xP = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	3301      	adds	r3, #1
 8001044:	73bb      	strb	r3, [r7, #14]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <lcdDrawCharNoBackColor+0x120>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	88db      	ldrh	r3, [r3, #6]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3ad      	bcc.n	8000fb0 <lcdDrawCharNoBackColor+0x6c>
 8001054:	e000      	b.n	8001058 <lcdDrawCharNoBackColor+0x114>
		return;
 8001056:	bf00      	nop
	}
}
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	bd90      	pop	{r4, r7, pc}
 800105e:	bf00      	nop
 8001060:	20000008 	.word	0x20000008
 8001064:	20000010 	.word	0x20000010

08001068 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001068:	b40f      	push	{r0, r1, r2, r3}
 800106a:	b590      	push	{r4, r7, lr}
 800106c:	b085      	sub	sp, #20
 800106e:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	69b9      	ldr	r1, [r7, #24]
 800107a:	483d      	ldr	r0, [pc, #244]	@ (8001170 <lcdPrintf+0x108>)
 800107c:	f003 f8bc 	bl	80041f8 <vsiprintf>
	va_end(lst);

	p = buf;
 8001080:	4b3b      	ldr	r3, [pc, #236]	@ (8001170 <lcdPrintf+0x108>)
 8001082:	607b      	str	r3, [r7, #4]
	while (*p)
 8001084:	e067      	b.n	8001156 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d10c      	bne.n	80010a8 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800108e:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <lcdPrintf+0x10c>)
 8001090:	885a      	ldrh	r2, [r3, #2]
 8001092:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <lcdPrintf+0x110>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	88db      	ldrh	r3, [r3, #6]
 8001098:	4413      	add	r3, r2
 800109a:	b29a      	uxth	r2, r3
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <lcdPrintf+0x10c>)
 800109e:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80010a0:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <lcdPrintf+0x10c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	e04a      	b.n	800113e <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	d046      	beq.n	800113e <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	d10b      	bne.n	80010d0 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <lcdPrintf+0x10c>)
 80010ba:	881a      	ldrh	r2, [r3, #0]
 80010bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001178 <lcdPrintf+0x110>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	889b      	ldrh	r3, [r3, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001174 <lcdPrintf+0x10c>)
 80010cc:	801a      	strh	r2, [r3, #0]
 80010ce:	e036      	b.n	800113e <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80010d0:	4b28      	ldr	r3, [pc, #160]	@ (8001174 <lcdPrintf+0x10c>)
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b218      	sxth	r0, r3
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <lcdPrintf+0x10c>)
 80010d8:	885b      	ldrh	r3, [r3, #2]
 80010da:	b219      	sxth	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b25      	ldr	r3, [pc, #148]	@ (8001178 <lcdPrintf+0x110>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29c      	uxth	r4, r3
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <lcdPrintf+0x110>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	4623      	mov	r3, r4
 80010f0:	f7ff fe7e 	bl	8000df0 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <lcdPrintf+0x10c>)
 80010f6:	881a      	ldrh	r2, [r3, #0]
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <lcdPrintf+0x110>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	889b      	ldrh	r3, [r3, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <lcdPrintf+0x10c>)
 8001104:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001106:	4b1c      	ldr	r3, [pc, #112]	@ (8001178 <lcdPrintf+0x110>)
 8001108:	7b1b      	ldrb	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d017      	beq.n	800113e <lcdPrintf+0xd6>
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <lcdPrintf+0x10c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <lcdPrintf+0x114>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <lcdPrintf+0x110>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	889b      	ldrh	r3, [r3, #4]
 8001120:	1acb      	subs	r3, r1, r3
 8001122:	429a      	cmp	r2, r3
 8001124:	dd0b      	ble.n	800113e <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001126:	4b13      	ldr	r3, [pc, #76]	@ (8001174 <lcdPrintf+0x10c>)
 8001128:	885a      	ldrh	r2, [r3, #2]
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <lcdPrintf+0x110>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	88db      	ldrh	r3, [r3, #6]
 8001130:	4413      	add	r3, r2
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <lcdPrintf+0x10c>)
 8001136:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <lcdPrintf+0x10c>)
 800113a:	2200      	movs	r2, #0
 800113c:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3301      	adds	r3, #1
 8001142:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <lcdPrintf+0x10c>)
 8001146:	885a      	ldrh	r2, [r3, #2]
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <lcdPrintf+0x114>)
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	429a      	cmp	r2, r3
 800114e:	d302      	bcc.n	8001156 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <lcdPrintf+0x10c>)
 8001152:	2200      	movs	r2, #0
 8001154:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d193      	bne.n	8001086 <lcdPrintf+0x1e>
		}
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800116a:	b004      	add	sp, #16
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200000a4 	.word	0x200000a4
 8001174:	2000009c 	.word	0x2000009c
 8001178:	20000010 	.word	0x20000010
 800117c:	20000008 	.word	0x20000008

08001180 <lcdPrintfNoBackColor>:

void lcdPrintfNoBackColor(const char *fmt, ...)
{
 8001180:	b40f      	push	{r0, r1, r2, r3}
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	483a      	ldr	r0, [pc, #232]	@ (800127c <lcdPrintfNoBackColor+0xfc>)
 8001194:	f003 f830 	bl	80041f8 <vsiprintf>
	va_end(lst);

	p = buf;
 8001198:	4b38      	ldr	r3, [pc, #224]	@ (800127c <lcdPrintfNoBackColor+0xfc>)
 800119a:	607b      	str	r3, [r7, #4]
	while (*p)
 800119c:	e062      	b.n	8001264 <lcdPrintfNoBackColor+0xe4>
	{
		if (*p == '\n')
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b0a      	cmp	r3, #10
 80011a4:	d10c      	bne.n	80011c0 <lcdPrintfNoBackColor+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 80011a6:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011a8:	885a      	ldrh	r2, [r3, #2]
 80011aa:	4b36      	ldr	r3, [pc, #216]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	88db      	ldrh	r3, [r3, #6]
 80011b0:	4413      	add	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011b6:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80011b8:	4b31      	ldr	r3, [pc, #196]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	801a      	strh	r2, [r3, #0]
 80011be:	e045      	b.n	800124c <lcdPrintfNoBackColor+0xcc>
		}
		else if (*p == '\r')
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b0d      	cmp	r3, #13
 80011c6:	d041      	beq.n	800124c <lcdPrintfNoBackColor+0xcc>
		{
			// skip em
		}
		else if (*p == '\t')
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b09      	cmp	r3, #9
 80011ce:	d10b      	bne.n	80011e8 <lcdPrintfNoBackColor+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80011d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	b29b      	uxth	r3, r3
 80011de:	4413      	add	r3, r2
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b27      	ldr	r3, [pc, #156]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	e031      	b.n	800124c <lcdPrintfNoBackColor+0xcc>
		}
		else
		{
			lcdDrawCharNoBackColor(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor);
 80011e8:	4b25      	ldr	r3, [pc, #148]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b218      	sxth	r0, r3
 80011ee:	4b24      	ldr	r3, [pc, #144]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 80011f0:	885b      	ldrh	r3, [r3, #2]
 80011f2:	b219      	sxth	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f7ff fea1 	bl	8000f44 <lcdDrawCharNoBackColor>
			cursorXY.x += lcdFont.pFont->Width;
 8001202:	4b1f      	ldr	r3, [pc, #124]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001204:	881a      	ldrh	r2, [r3, #0]
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	889b      	ldrh	r3, [r3, #4]
 800120c:	4413      	add	r3, r2
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001212:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 8001216:	7b1b      	ldrb	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d017      	beq.n	800124c <lcdPrintfNoBackColor+0xcc>
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <lcdPrintfNoBackColor+0x108>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	1acb      	subs	r3, r1, r3
 8001230:	429a      	cmp	r2, r3
 8001232:	dd0b      	ble.n	800124c <lcdPrintfNoBackColor+0xcc>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001236:	885a      	ldrh	r2, [r3, #2]
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <lcdPrintfNoBackColor+0x104>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	88db      	ldrh	r3, [r3, #6]
 800123e:	4413      	add	r3, r2
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001244:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001246:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001248:	2200      	movs	r2, #0
 800124a:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3301      	adds	r3, #1
 8001250:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001254:	885a      	ldrh	r2, [r3, #2]
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <lcdPrintfNoBackColor+0x108>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	429a      	cmp	r2, r3
 800125c:	d302      	bcc.n	8001264 <lcdPrintfNoBackColor+0xe4>
		{
			cursorXY.y = 0;
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <lcdPrintfNoBackColor+0x100>)
 8001260:	2200      	movs	r2, #0
 8001262:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d198      	bne.n	800119e <lcdPrintfNoBackColor+0x1e>
		}
	}
}
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001278:	b004      	add	sp, #16
 800127a:	4770      	bx	lr
 800127c:	200001a4 	.word	0x200001a4
 8001280:	2000009c 	.word	0x2000009c
 8001284:	20000010 	.word	0x20000010
 8001288:	20000008 	.word	0x20000008

0800128c <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <lcdSetTextFont+0x1c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6093      	str	r3, [r2, #8]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20000010 	.word	0x20000010

080012ac <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <lcdSetOrientation+0xc0>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 80012bc:	2036      	movs	r0, #54	@ 0x36
 80012be:	f000 f8fb 	bl	80014b8 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 80012c2:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <lcdSetOrientation+0xc0>)
 80012c4:	791b      	ldrb	r3, [r3, #4]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d83e      	bhi.n	8001348 <lcdSetOrientation+0x9c>
 80012ca:	a201      	add	r2, pc, #4	@ (adr r2, 80012d0 <lcdSetOrientation+0x24>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	08001315 	.word	0x08001315
 80012d8:	080012fb 	.word	0x080012fb
 80012dc:	0800132f 	.word	0x0800132f
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <lcdSetOrientation+0xc4>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f8f7 	bl	80014d8 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <lcdSetOrientation+0xc0>)
 80012ec:	22f0      	movs	r2, #240	@ 0xf0
 80012ee:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80012f0:	4b1e      	ldr	r3, [pc, #120]	@ (800136c <lcdSetOrientation+0xc0>)
 80012f2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80012f6:	805a      	strh	r2, [r3, #2]
			break;
 80012f8:	e027      	b.n	800134a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <lcdSetOrientation+0xc8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f8ea 	bl	80014d8 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <lcdSetOrientation+0xc0>)
 8001306:	22f0      	movs	r2, #240	@ 0xf0
 8001308:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <lcdSetOrientation+0xc0>)
 800130c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001310:	805a      	strh	r2, [r3, #2]
			break;
 8001312:	e01a      	b.n	800134a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <lcdSetOrientation+0xcc>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f8dd 	bl	80014d8 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800131e:	4b13      	ldr	r3, [pc, #76]	@ (800136c <lcdSetOrientation+0xc0>)
 8001320:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001324:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <lcdSetOrientation+0xc0>)
 8001328:	22f0      	movs	r2, #240	@ 0xf0
 800132a:	805a      	strh	r2, [r3, #2]
			break;
 800132c:	e00d      	b.n	800134a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 800132e:	4b13      	ldr	r3, [pc, #76]	@ (800137c <lcdSetOrientation+0xd0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f8d0 	bl	80014d8 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <lcdSetOrientation+0xc0>)
 800133a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800133e:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <lcdSetOrientation+0xc0>)
 8001342:	22f0      	movs	r2, #240	@ 0xf0
 8001344:	805a      	strh	r2, [r3, #2]
			break;
 8001346:	e000      	b.n	800134a <lcdSetOrientation+0x9e>
		default:
			break;
 8001348:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <lcdSetOrientation+0xc0>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <lcdSetOrientation+0xc0>)
 8001354:	885b      	ldrh	r3, [r3, #2]
 8001356:	3b01      	subs	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	2100      	movs	r1, #0
 800135c:	2000      	movs	r0, #0
 800135e:	f000 f829 	bl	80013b4 <lcdSetWindow>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	200000a0 	.word	0x200000a0
 8001374:	200000a2 	.word	0x200000a2
 8001378:	200000a1 	.word	0x200000a1
 800137c:	200000a3 	.word	0x200000a3

08001380 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	460a      	mov	r2, r1
 800138a:	80fb      	strh	r3, [r7, #6]
 800138c:	4613      	mov	r3, r2
 800138e:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <lcdSetCursor+0x30>)
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8001396:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <lcdSetCursor+0x30>)
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 800139c:	88bb      	ldrh	r3, [r7, #4]
 800139e:	88fa      	ldrh	r2, [r7, #6]
 80013a0:	88b9      	ldrh	r1, [r7, #4]
 80013a2:	88f8      	ldrh	r0, [r7, #6]
 80013a4:	f000 f806 	bl	80013b4 <lcdSetWindow>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000009c 	.word	0x2000009c

080013b4 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4623      	mov	r3, r4
 80013c4:	80fb      	strh	r3, [r7, #6]
 80013c6:	4603      	mov	r3, r0
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 80013d2:	202a      	movs	r0, #42	@ 0x2a
 80013d4:	f000 f870 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f87a 	bl	80014d8 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f874 	bl	80014d8 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	0a1b      	lsrs	r3, r3, #8
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f86e 	bl	80014d8 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	b29b      	uxth	r3, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f868 	bl	80014d8 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001408:	202b      	movs	r0, #43	@ 0x2b
 800140a:	f000 f855 	bl	80014b8 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 800140e:	88bb      	ldrh	r3, [r7, #4]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f85f 	bl	80014d8 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	b29b      	uxth	r3, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f859 	bl	80014d8 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8001426:	883b      	ldrh	r3, [r7, #0]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	f000 f853 	bl	80014d8 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8001432:	883b      	ldrh	r3, [r7, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f000 f84d 	bl	80014d8 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800143e:	202c      	movs	r0, #44	@ 0x2c
 8001440:	f000 f83a 	bl	80014b8 <lcdWriteCommand>
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60ba      	str	r2, [r7, #8]
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4603      	mov	r3, r0
 8001458:	81fb      	strh	r3, [r7, #14]
 800145a:	460b      	mov	r3, r1
 800145c:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <lcdDrawPixels+0x54>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <lcdDrawPixels+0x54>)
 800146c:	885b      	ldrh	r3, [r3, #2]
 800146e:	3b01      	subs	r3, #1
 8001470:	b29b      	uxth	r3, r3
 8001472:	89b9      	ldrh	r1, [r7, #12]
 8001474:	89f8      	ldrh	r0, [r7, #14]
 8001476:	f7ff ff9d 	bl	80013b4 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	617a      	str	r2, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	4413      	add	r3, r2
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f825 	bl	80014d8 <lcdWriteData>
  }
  while (i < dataLength);
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	d3f1      	bcc.n	800147a <lcdDrawPixels+0x2e>
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000008 	.word	0x20000008

080014a4 <lcdReset>:

static void lcdReset(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f805 	bl	80014b8 <lcdWriteCommand>
	HAL_Delay(50);
 80014ae:	2032      	movs	r0, #50	@ 0x32
 80014b0:	f000 fc24 	bl	8001cfc <HAL_Delay>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 80014c2:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	b292      	uxth	r2, r2
 80014ca:	801a      	strh	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <lcdWriteData+0x1c>)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	8013      	strh	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	60080000 	.word	0x60080000

080014f8 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 80014f8:	b490      	push	{r4, r7}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	4603      	mov	r3, r0
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	460b      	mov	r3, r1
 8001510:	717b      	strb	r3, [r7, #5]
 8001512:	4613      	mov	r3, r2
 8001514:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800151a:	7f3b      	ldrb	r3, [r7, #28]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <lcdBuildMemoryAccessControlConfig+0x30>
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001528:	7e3b      	ldrb	r3, [r7, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <lcdBuildMemoryAccessControlConfig+0x3e>
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001536:	793b      	ldrb	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <lcdBuildMemoryAccessControlConfig+0x4c>
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001544:	797b      	ldrb	r3, [r7, #5]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <lcdBuildMemoryAccessControlConfig+0x5a>
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001552:	79bb      	ldrb	r3, [r7, #6]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <lcdBuildMemoryAccessControlConfig+0x68>
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800155e:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <lcdBuildMemoryAccessControlConfig+0x76>
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800156c:	73fb      	strb	r3, [r7, #15]
  return value;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bc90      	pop	{r4, r7}
 8001578:	4770      	bx	lr
	...

0800157c <sendAPIURL>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void demoLCD(int i);

void sendAPIURL()
{
 800157c:	b598      	push	{r3, r4, r7, lr}
 800157e:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, (uint8_t*)nhaTrangURL, strlen(nhaTrangURL), HAL_MAX_DELAY);  // Send URL to ESP8266
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <sendAPIURL+0x30>)
 8001582:	681c      	ldr	r4, [r3, #0]
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <sendAPIURL+0x30>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fe21 	bl	80001d0 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	b29a      	uxth	r2, r3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	4621      	mov	r1, r4
 8001598:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <sendAPIURL+0x34>)
 800159a:	f001 fc5d 	bl	8002e58 <HAL_UART_Transmit>
    lcdPrintfNoBackColor(nhaTrangURL);
 800159e:	4b03      	ldr	r3, [pc, #12]	@ (80015ac <sendAPIURL+0x30>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fdec 	bl	8001180 <lcdPrintfNoBackColor>
}
 80015a8:	bf00      	nop
 80015aa:	bd98      	pop	{r3, r4, r7, pc}
 80015ac:	20000020 	.word	0x20000020
 80015b0:	200004a8 	.word	0x200004a8

080015b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_UART_RxCpltCallback+0x2c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d108      	bne.n	80015d8 <HAL_UART_RxCpltCallback+0x24>
  {
      dataReceivedFlag = 1;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_UART_RxCpltCallback+0x30>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	701a      	strb	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart3, rxBuffer, RX_BUFFER_SIZE);
 80015cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015d0:	4905      	ldr	r1, [pc, #20]	@ (80015e8 <HAL_UART_RxCpltCallback+0x34>)
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <HAL_UART_RxCpltCallback+0x38>)
 80015d4:	f001 fccb 	bl	8002f6e <HAL_UART_Receive_IT>
  }
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40004800 	.word	0x40004800
 80015e4:	200004a4 	.word	0x200004a4
 80015e8:	200002a4 	.word	0x200002a4
 80015ec:	200004a8 	.word	0x200004a8

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f6:	f000 fb0f 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fa:	f000 f81d 	bl	8001638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015fe:	f000 f8af 	bl	8001760 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001602:	f000 f919 	bl	8001838 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001606:	f000 f881 	bl	800170c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 800160a:	2201      	movs	r2, #1
 800160c:	2102      	movs	r1, #2
 800160e:	4809      	ldr	r0, [pc, #36]	@ (8001634 <main+0x44>)
 8001610:	f000 fed8 	bl	80023c4 <HAL_GPIO_WritePin>
  lcdInit();
 8001614:	f7fe ffac 	bl	8000570 <lcdInit>
  int i = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  demoLCD(i);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f96b 	bl	80018f8 <demoLCD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sendAPIURL();
 8001622:	f7ff ffab 	bl	800157c <sendAPIURL>
	  HAL_Delay(20000);
 8001626:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800162a:	f000 fb67 	bl	8001cfc <HAL_Delay>
	  sendAPIURL();
 800162e:	bf00      	nop
 8001630:	e7f7      	b.n	8001622 <main+0x32>
 8001632:	bf00      	nop
 8001634:	40020400 	.word	0x40020400

08001638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b094      	sub	sp, #80	@ 0x50
 800163c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2230      	movs	r2, #48	@ 0x30
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f002 fde0 	bl	800420c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <SystemClock_Config+0xcc>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a27      	ldr	r2, [pc, #156]	@ (8001704 <SystemClock_Config+0xcc>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
 800166c:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <SystemClock_Config+0xcc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <SystemClock_Config+0xd0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <SystemClock_Config+0xd0>)
 8001682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <SystemClock_Config+0xd0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001698:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016a8:	2304      	movs	r3, #4
 80016aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016ac:	23a8      	movs	r3, #168	@ 0xa8
 80016ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fe9b 	bl	80023f8 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016c8:	f000 f925 	bl	8001916 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d0:	2302      	movs	r3, #2
 80016d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	2105      	movs	r1, #5
 80016ea:	4618      	mov	r0, r3
 80016ec:	f001 f8fc 	bl	80028e8 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016f6:	f000 f90e 	bl	8001916 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	@ 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40007000 	.word	0x40007000

0800170c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <MX_USART3_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001718:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800171c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_USART3_UART_Init+0x4c>)
 8001744:	f001 fb38 	bl	8002db8 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f8e2 	bl	8001916 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200004a8 	.word	0x200004a8
 800175c:	40004800 	.word	0x40004800

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <MX_GPIO_Init+0xd0>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a2c      	ldr	r2, [pc, #176]	@ (8001830 <MX_GPIO_Init+0xd0>)
 8001780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <MX_GPIO_Init+0xd0>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b26      	ldr	r3, [pc, #152]	@ (8001830 <MX_GPIO_Init+0xd0>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a25      	ldr	r2, [pc, #148]	@ (8001830 <MX_GPIO_Init+0xd0>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b23      	ldr	r3, [pc, #140]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017f0:	f043 0304 	orr.w	r3, r3, #4
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	2102      	movs	r1, #2
 8001806:	480b      	ldr	r0, [pc, #44]	@ (8001834 <MX_GPIO_Init+0xd4>)
 8001808:	f000 fddc 	bl	80023c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800180c:	2302      	movs	r3, #2
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <MX_GPIO_Init+0xd4>)
 8001824:	f000 fc32 	bl	800208c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001852:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001856:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001858:	4b25      	ldr	r3, [pc, #148]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 800185a:	4a26      	ldr	r2, [pc, #152]	@ (80018f4 <MX_FSMC_Init+0xbc>)
 800185c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800186a:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001870:	4b1f      	ldr	r3, [pc, #124]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001872:	2210      	movs	r2, #16
 8001874:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800187c:	4b1c      	ldr	r3, [pc, #112]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001882:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001890:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800189c:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 800189e:	2200      	movs	r2, #0
 80018a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80018b8:	230f      	movs	r3, #15
 80018ba:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80018bc:	2305      	movs	r3, #5
 80018be:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80018c4:	2310      	movs	r3, #16
 80018c6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80018c8:	2311      	movs	r3, #17
 80018ca:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	@ (80018f0 <MX_FSMC_Init+0xb8>)
 80018d8:	f001 fa26 	bl	8002d28 <HAL_SRAM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80018e2:	f000 f818 	bl	8001916 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200004f0 	.word	0x200004f0
 80018f4:	a0000104 	.word	0xa0000104

080018f8 <demoLCD>:

/* USER CODE BEGIN 4 */
void demoLCD(int i)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	lcdSetOrientation(i);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fcd1 	bl	80012ac <lcdSetOrientation>
	drawInterface();
 800190a:	f7fe ffa5 	bl	8000858 <drawInterface>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800191a:	b672      	cpsid	i
}
 800191c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191e:	bf00      	nop
 8001920:	e7fd      	b.n	800191e <Error_Handler+0x8>
	...

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	@ (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	@ (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	@ (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_UART_MspInit+0x94>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d134      	bne.n	8001a00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_UART_MspInit+0x98>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	f003 0304 	and.w	r3, r3, #4
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e0:	2307      	movs	r3, #7
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	4809      	ldr	r0, [pc, #36]	@ (8001a10 <HAL_UART_MspInit+0x9c>)
 80019ec:	f000 fb4e 	bl	800208c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2027      	movs	r0, #39	@ 0x27
 80019f6:	f000 fa80 	bl	8001efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019fa:	2027      	movs	r0, #39	@ 0x27
 80019fc:	f000 fa99 	bl	8001f32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	@ 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40004800 	.word	0x40004800
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020800 	.word	0x40020800

08001a14 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <HAL_FSMC_MspInit+0x88>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d131      	bne.n	8001a94 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001a30:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_FSMC_MspInit+0x88>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	4b19      	ldr	r3, [pc, #100]	@ (8001aa0 <HAL_FSMC_MspInit+0x8c>)
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3e:	4a18      	ldr	r2, [pc, #96]	@ (8001aa0 <HAL_FSMC_MspInit+0x8c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6393      	str	r3, [r2, #56]	@ 0x38
 8001a46:	4b16      	ldr	r3, [pc, #88]	@ (8001aa0 <HAL_FSMC_MspInit+0x8c>)
 8001a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a52:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001a56:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a64:	230c      	movs	r3, #12
 8001a66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	480d      	ldr	r0, [pc, #52]	@ (8001aa4 <HAL_FSMC_MspInit+0x90>)
 8001a6e:	f000 fb0d 	bl	800208c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8001a72:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8001a76:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001a84:	230c      	movs	r3, #12
 8001a86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <HAL_FSMC_MspInit+0x94>)
 8001a8e:	f000 fafd 	bl	800208c <HAL_GPIO_Init>
 8001a92:	e000      	b.n	8001a96 <HAL_FSMC_MspInit+0x82>
    return;
 8001a94:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000540 	.word	0x20000540
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40020c00 	.word	0x40020c00

08001aac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ab4:	f7ff ffae 	bl	8001a14 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	bf00      	nop
 8001ad6:	e7fd      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b16:	f000 f8d1 	bl	8001cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <USART3_IRQHandler+0x10>)
 8001b26:	f001 fa47 	bl	8002fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200004a8 	.word	0x200004a8

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	@ (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f002 fb6a 	bl	800423c <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	@ (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20020000 	.word	0x20020000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	20000544 	.word	0x20000544
 8001b9c:	20000698 	.word	0x20000698

08001ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	@ (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bc8:	f7ff ffea 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f002 fb29 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff fcfb 	bl	80015f0 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c08:	08017b5c 	.word	0x08017b5c
  ldr r2, =_sbss
 8001c0c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c10:	20000694 	.word	0x20000694

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>
	...

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	@ (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f94f 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff fe6a 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f967 	bl	8001f4e <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 f92f 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	@ (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000024 	.word	0x20000024
 8001cb4:	2000002c 	.word	0x2000002c
 8001cb8:	20000028 	.word	0x20000028

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	2000002c 	.word	0x2000002c
 8001ce0:	20000548 	.word	0x20000548

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	@ (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000548 	.word	0x20000548

08001cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff ffee 	bl	8001ce4 <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d005      	beq.n	8001d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <HAL_Delay+0x44>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4413      	add	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d22:	bf00      	nop
 8001d24:	f7ff ffde 	bl	8001ce4 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d8f7      	bhi.n	8001d24 <HAL_Delay+0x28>
  {
  }
}
 8001d34:	bf00      	nop
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000002c 	.word	0x2000002c

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	@ (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	@ 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff feb6 	bl	8001ce4 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d008      	beq.n	8001f98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	@ 0x80
 8001f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e052      	b.n	800203e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0216 	bic.w	r2, r2, #22
 8001fa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fb6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <HAL_DMA_Abort+0x62>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0208 	bic.w	r2, r2, #8
 8001fd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe8:	e013      	b.n	8002012 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fea:	f7ff fe7b 	bl	8001ce4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d90c      	bls.n	8002012 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2203      	movs	r2, #3
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e015      	b.n	800203e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1e4      	bne.n	8001fea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002024:	223f      	movs	r2, #63	@ 0x3f
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d004      	beq.n	8002064 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e00c      	b.n	800207e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2205      	movs	r2, #5
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
 80020a6:	e16b      	b.n	8002380 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4013      	ands	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	f040 815a 	bne.w	800237a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d005      	beq.n	80020de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b03      	cmp	r3, #3
 800214a:	d017      	beq.n	800217c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d123      	bne.n	80021d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	08da      	lsrs	r2, r3, #3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3208      	adds	r2, #8
 8002190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	220f      	movs	r2, #15
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	08da      	lsrs	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3208      	adds	r2, #8
 80021ca:	69b9      	ldr	r1, [r7, #24]
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80b4 	beq.w	800237a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b60      	ldr	r3, [pc, #384]	@ (8002398 <HAL_GPIO_Init+0x30c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a5f      	ldr	r2, [pc, #380]	@ (8002398 <HAL_GPIO_Init+0x30c>)
 800221c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <HAL_GPIO_Init+0x30c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222e:	4a5b      	ldr	r2, [pc, #364]	@ (800239c <HAL_GPIO_Init+0x310>)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	220f      	movs	r2, #15
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a52      	ldr	r2, [pc, #328]	@ (80023a0 <HAL_GPIO_Init+0x314>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <HAL_GPIO_Init+0x226>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a51      	ldr	r2, [pc, #324]	@ (80023a4 <HAL_GPIO_Init+0x318>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d025      	beq.n	80022ae <HAL_GPIO_Init+0x222>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a50      	ldr	r2, [pc, #320]	@ (80023a8 <HAL_GPIO_Init+0x31c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d01f      	beq.n	80022aa <HAL_GPIO_Init+0x21e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4f      	ldr	r2, [pc, #316]	@ (80023ac <HAL_GPIO_Init+0x320>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_GPIO_Init+0x21a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4e      	ldr	r2, [pc, #312]	@ (80023b0 <HAL_GPIO_Init+0x324>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0x216>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4d      	ldr	r2, [pc, #308]	@ (80023b4 <HAL_GPIO_Init+0x328>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00d      	beq.n	800229e <HAL_GPIO_Init+0x212>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a4c      	ldr	r2, [pc, #304]	@ (80023b8 <HAL_GPIO_Init+0x32c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d007      	beq.n	800229a <HAL_GPIO_Init+0x20e>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a4b      	ldr	r2, [pc, #300]	@ (80023bc <HAL_GPIO_Init+0x330>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d101      	bne.n	8002296 <HAL_GPIO_Init+0x20a>
 8002292:	2307      	movs	r3, #7
 8002294:	e00e      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 8002296:	2308      	movs	r3, #8
 8002298:	e00c      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229a:	2306      	movs	r3, #6
 800229c:	e00a      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 800229e:	2305      	movs	r3, #5
 80022a0:	e008      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a2:	2304      	movs	r3, #4
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022a6:	2303      	movs	r3, #3
 80022a8:	e004      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e002      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_GPIO_Init+0x228>
 80022b2:	2300      	movs	r3, #0
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	f002 0203 	and.w	r2, r2, #3
 80022ba:	0092      	lsls	r2, r2, #2
 80022bc:	4093      	lsls	r3, r2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c4:	4935      	ldr	r1, [pc, #212]	@ (800239c <HAL_GPIO_Init+0x310>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d2:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4013      	ands	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022f6:	4a32      	ldr	r2, [pc, #200]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022fc:	4b30      	ldr	r3, [pc, #192]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002320:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002326:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234a:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002374:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <HAL_GPIO_Init+0x334>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3301      	adds	r3, #1
 800237e:	61fb      	str	r3, [r7, #28]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	f67f ae90 	bls.w	80020a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40013800 	.word	0x40013800
 80023a0:	40020000 	.word	0x40020000
 80023a4:	40020400 	.word	0x40020400
 80023a8:	40020800 	.word	0x40020800
 80023ac:	40020c00 	.word	0x40020c00
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40021400 	.word	0x40021400
 80023b8:	40021800 	.word	0x40021800
 80023bc:	40021c00 	.word	0x40021c00
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
 80023d0:	4613      	mov	r3, r2
 80023d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d4:	787b      	ldrb	r3, [r7, #1]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e0:	e003      	b.n	80023ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	041a      	lsls	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e267      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002416:	4b88      	ldr	r3, [pc, #544]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e242      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc18 	bl	8001ce4 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc14 	bl	8001ce4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e207      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fc04 	bl	8001ce4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fc00 	bl	8001ce4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1f3      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800250e:	4b4a      	ldr	r3, [pc, #296]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	@ (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fbb9 	bl	8001ce4 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fbb5 	bl	8001ce4 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a8      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff fb98 	bl	8001ce4 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fb94 	bl	8001ce4 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e187      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb78 	bl	8001ce4 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb74 	bl	8001ce4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e167      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff fb61 	bl	8001ce4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7ff fb5d 	bl	8001ce4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e150      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b81      	ldr	r3, [pc, #516]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7d      	ldr	r3, [pc, #500]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a7c      	ldr	r2, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b7a      	ldr	r3, [pc, #488]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b77      	ldr	r3, [pc, #476]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b74      	ldr	r3, [pc, #464]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fb1d 	bl	8001ce4 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fb19 	bl	8001ce4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6a      	ldr	r3, [pc, #424]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b64      	ldr	r3, [pc, #400]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a63      	ldr	r2, [pc, #396]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b58      	ldr	r3, [pc, #352]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002710:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a54      	ldr	r2, [pc, #336]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff fade 	bl	8001ce4 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff fada 	bl	8001ce4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0cb      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b49      	ldr	r3, [pc, #292]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7ff fac8 	bl	8001ce4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fac4 	bl	8001ce4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b5      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	4a38      	ldr	r2, [pc, #224]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d05c      	beq.n	800285c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fa98 	bl	8001ce4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff fa94 	bl	8001ce4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	491b      	ldr	r1, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fa6d 	bl	8001ce4 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7ff fa69 	bl	8001ce4 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x416>
 800282c:	e054      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff fa56 	bl	8001ce4 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff fa52 	bl	8001ce4 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e038      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f984 	bl	8001ce4 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f980 	bl	8001ce4 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f8e4 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08017b00 	.word	0x08017b00
 8002aac:	20000024 	.word	0x20000024
 8002ab0:	20000028 	.word	0x20000028

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b094      	sub	sp, #80	@ 0x50
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b79      	ldr	r3, [pc, #484]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d00d      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 80e1 	bhi.w	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae6:	e0db      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b73      	ldr	r3, [pc, #460]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aec:	e0db      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af2:	e0d8      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	6139      	str	r1, [r7, #16]
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4651      	mov	r1, sl
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4651      	mov	r1, sl
 8002b68:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b86:	4690      	mov	r8, r2
 8002b88:	4699      	mov	r9, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb18 0303 	adds.w	r3, r8, r3
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb49 0303 	adc.w	r3, r9, r3
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	024b      	lsls	r3, r1, #9
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	024a      	lsls	r2, r1, #9
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bc4:	f7fd fb5c 	bl	8000280 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd0:	e058      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4611      	mov	r1, r2
 8002bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfe:	0150      	lsls	r0, r2, #5
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4641      	mov	r1, r8
 8002c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c24:	ebb2 040a 	subs.w	r4, r2, sl
 8002c28:	eb63 050b 	sbc.w	r5, r3, fp
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	61fa      	str	r2, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c78:	f7fd fb02 	bl	8000280 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3750      	adds	r7, #80	@ 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000024 	.word	0x20000024

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff0 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08017b10 	.word	0x08017b10

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffdc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0b5b      	lsrs	r3, r3, #13
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08017b10 	.word	0x08017b10

08002d28 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e038      	b.n	8002db0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d106      	bne.n	8002d58 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7fe feaa 	bl	8001aac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3308      	adds	r3, #8
 8002d60:	4619      	mov	r1, r3
 8002d62:	4610      	mov	r0, r2
 8002d64:	f001 f87e 	bl	8003e64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	f001 f8e0 	bl	8003f38 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6858      	ldr	r0, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	f001 f90d 	bl	8003fa4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6892      	ldr	r2, [r2, #8]
 8002d9e:	f041 0101 	orr.w	r1, r1, #1
 8002da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e042      	b.n	8002e50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe fdc8 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	@ 0x24
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fdbd 	bl	800397c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d175      	bne.n	8002f64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Transmit+0x2c>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e06e      	b.n	8002f66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2221      	movs	r2, #33	@ 0x21
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e96:	f7fe ff25 	bl	8001ce4 <HAL_GetTick>
 8002e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eb0:	d108      	bne.n	8002ec4 <HAL_UART_Transmit+0x6c>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d104      	bne.n	8002ec4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	e003      	b.n	8002ecc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ecc:	e02e      	b.n	8002f2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fb1f 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e03a      	b.n	8002f66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3302      	adds	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	e007      	b.n	8002f1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1cb      	bne.n	8002ece <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 faeb 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d005      	beq.n	8002f58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e006      	b.n	8002f66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e000      	b.n	8002f66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
  }
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d112      	bne.n	8002fae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_UART_Receive_IT+0x26>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e00b      	b.n	8002fb0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb12 	bl	80035ce <UART_Start_Receive_IT>
 8002faa:	4603      	mov	r3, r0
 8002fac:	e000      	b.n	8002fb0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
  }
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0ba      	sub	sp, #232	@ 0xe8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10f      	bne.n	800301e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_UART_IRQHandler+0x66>
 800300a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fbf2 	bl	8003800 <UART_Receive_IT>
      return;
 800301c:	e25b      	b.n	80034d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800301e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 80de 	beq.w	80031e4 <HAL_UART_IRQHandler+0x22c>
 8003028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d106      	bne.n	8003042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003038:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80d1 	beq.w	80031e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00b      	beq.n	8003066 <HAL_UART_IRQHandler+0xae>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800305e:	f043 0201 	orr.w	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_UART_IRQHandler+0xd2>
 8003072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d005      	beq.n	800308a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800308a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0xf6>
 8003096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	f043 0204 	orr.w	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d011      	beq.n	80030de <HAL_UART_IRQHandler+0x126>
 80030ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0208 	orr.w	r2, r3, #8
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 81f2 	beq.w	80034cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_UART_IRQHandler+0x14e>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb7d 	bl	8003800 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003110:	2b40      	cmp	r3, #64	@ 0x40
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_UART_IRQHandler+0x17a>
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d04f      	beq.n	80031d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa85 	bl	8003642 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003142:	2b40      	cmp	r3, #64	@ 0x40
 8003144:	d141      	bne.n	80031ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3314      	adds	r3, #20
 800314c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003154:	e853 3f00 	ldrex	r3, [r3]
 8003158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800315c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003172:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800317e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800318a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1d9      	bne.n	8003146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d013      	beq.n	80031c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319e:	4a7e      	ldr	r2, [pc, #504]	@ (8003398 <HAL_UART_IRQHandler+0x3e0>)
 80031a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe ff4d 	bl	8002046 <HAL_DMA_Abort_IT>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d016      	beq.n	80031e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80031bc:	4610      	mov	r0, r2
 80031be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c0:	e00e      	b.n	80031e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f994 	bl	80034f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	e00a      	b.n	80031e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f990 	bl	80034f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d0:	e006      	b.n	80031e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f98c 	bl	80034f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80031de:	e175      	b.n	80034cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	bf00      	nop
    return;
 80031e2:	e173      	b.n	80034cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	f040 814f 	bne.w	800348c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8148 	beq.w	800348c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8141 	beq.w	800348c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322a:	2b40      	cmp	r3, #64	@ 0x40
 800322c:	f040 80b6 	bne.w	800339c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800323c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8145 	beq.w	80034d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800324a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800324e:	429a      	cmp	r2, r3
 8003250:	f080 813e 	bcs.w	80034d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800325a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003266:	f000 8088 	beq.w	800337a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	330c      	adds	r3, #12
 8003270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003278:	e853 3f00 	ldrex	r3, [r3]
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	330c      	adds	r3, #12
 8003292:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800329a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1d9      	bne.n	800326a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3314      	adds	r3, #20
 80032bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80032c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3314      	adds	r3, #20
 80032d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80032de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80032e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80032ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e1      	bne.n	80032b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3314      	adds	r3, #20
 80032f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3314      	adds	r3, #20
 8003312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003316:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800331c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1e3      	bne.n	80032f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	330c      	adds	r3, #12
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800334a:	f023 0310 	bic.w	r3, r3, #16
 800334e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800335c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800335e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003364:	e841 2300 	strex	r3, r2, [r1]
 8003368:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800336a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e3      	bne.n	8003338 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fdf6 	bl	8001f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2202      	movs	r2, #2
 800337e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	b29b      	uxth	r3, r3
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8b7 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003396:	e09b      	b.n	80034d0 <HAL_UART_IRQHandler+0x518>
 8003398:	08003709 	.word	0x08003709
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 808e 	beq.w	80034d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80033b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 8089 	beq.w	80034d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80033e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80033e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1e3      	bne.n	80033c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3314      	adds	r3, #20
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	623b      	str	r3, [r7, #32]
   return(result);
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800341e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0310 	bic.w	r3, r3, #16
 8003456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003464:	61fa      	str	r2, [r7, #28]
 8003466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	69b9      	ldr	r1, [r7, #24]
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	617b      	str	r3, [r7, #20]
   return(result);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e3      	bne.n	8003440 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800347e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f83d 	bl	8003504 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800348a:	e023      	b.n	80034d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800348c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <HAL_UART_IRQHandler+0x4f4>
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f943 	bl	8003730 <UART_Transmit_IT>
    return;
 80034aa:	e014      	b.n	80034d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <HAL_UART_IRQHandler+0x51e>
 80034b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f983 	bl	80037d0 <UART_EndTransmit_IT>
    return;
 80034ca:	e004      	b.n	80034d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80034cc:	bf00      	nop
 80034ce:	e002      	b.n	80034d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80034d4:	bf00      	nop
  }
}
 80034d6:	37e8      	adds	r7, #232	@ 0xe8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	e03b      	b.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d037      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fbd5 	bl	8001ce4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03a      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d023      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b80      	cmp	r3, #128	@ 0x80
 8003562:	d020      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b40      	cmp	r3, #64	@ 0x40
 8003568:	d01d      	beq.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d116      	bne.n	80035a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f857 	bl	8003642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2208      	movs	r2, #8
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	bf0c      	ite	eq
 80035b6:	2301      	moveq	r3, #1
 80035b8:	2300      	movne	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d0b4      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b085      	sub	sp, #20
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	4613      	mov	r3, r2
 80035da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	88fa      	ldrh	r2, [r7, #6]
 80035ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2222      	movs	r2, #34	@ 0x22
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003612:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0220 	orr.w	r2, r2, #32
 8003632:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003642:	b480      	push	{r7}
 8003644:	b095      	sub	sp, #84	@ 0x54
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	330c      	adds	r3, #12
 8003650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800366a:	643a      	str	r2, [r7, #64]	@ 0x40
 800366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	61fb      	str	r3, [r7, #28]
   return(result);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800369e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e5      	bne.n	800367e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d119      	bne.n	80036ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f023 0310 	bic.w	r3, r3, #16
 80036d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036da:	61ba      	str	r2, [r7, #24]
 80036dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	613b      	str	r3, [r7, #16]
   return(result);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e5      	bne.n	80036ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80036fc:	bf00      	nop
 80036fe:	3754      	adds	r7, #84	@ 0x54
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7ff fee4 	bl	80034f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b21      	cmp	r3, #33	@ 0x21
 8003742:	d13e      	bne.n	80037c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800374c:	d114      	bne.n	8003778 <UART_Transmit_IT+0x48>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d110      	bne.n	8003778 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800376a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	621a      	str	r2, [r3, #32]
 8003776:	e008      	b.n	800378a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	1c59      	adds	r1, r3, #1
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6211      	str	r1, [r2, #32]
 8003782:	781a      	ldrb	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4619      	mov	r1, r3
 8003798:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10f      	bne.n	80037be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fe73 	bl	80034dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08c      	sub	sp, #48	@ 0x30
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b22      	cmp	r3, #34	@ 0x22
 8003812:	f040 80ae 	bne.w	8003972 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800381e:	d117      	bne.n	8003850 <UART_Receive_IT+0x50>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d113      	bne.n	8003850 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003830:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	b29a      	uxth	r2, r3
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	@ 0x28
 800384e:	e026      	b.n	800389e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003854:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003862:	d007      	beq.n	8003874 <UART_Receive_IT+0x74>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10a      	bne.n	8003882 <UART_Receive_IT+0x82>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e008      	b.n	8003894 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800388e:	b2da      	uxtb	r2, r3
 8003890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003892:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4619      	mov	r1, r3
 80038ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d15d      	bne.n	800396e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0220 	bic.w	r2, r2, #32
 80038c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d135      	bne.n	8003964 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	613b      	str	r3, [r7, #16]
   return(result);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f023 0310 	bic.w	r3, r3, #16
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	330c      	adds	r3, #12
 800391c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391e:	623a      	str	r2, [r7, #32]
 8003920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	69f9      	ldr	r1, [r7, #28]
 8003924:	6a3a      	ldr	r2, [r7, #32]
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	61bb      	str	r3, [r7, #24]
   return(result);
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e5      	bne.n	80038fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d10a      	bne.n	8003956 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff fdd1 	bl	8003504 <HAL_UARTEx_RxEventCallback>
 8003962:	e002      	b.n	800396a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7fd fe25 	bl	80015b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e002      	b.n	8003974 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3730      	adds	r7, #48	@ 0x30
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800397c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003980:	b0c0      	sub	sp, #256	@ 0x100
 8003982:	af00      	add	r7, sp, #0
 8003984:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003998:	68d9      	ldr	r1, [r3, #12]
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	ea40 0301 	orr.w	r3, r0, r1
 80039a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039d4:	f021 010c 	bic.w	r1, r1, #12
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039e2:	430b      	orrs	r3, r1
 80039e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80039f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f6:	6999      	ldr	r1, [r3, #24]
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	ea40 0301 	orr.w	r3, r0, r1
 8003a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c48 <UART_SetConfig+0x2cc>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d005      	beq.n	8003a1c <UART_SetConfig+0xa0>
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4b8d      	ldr	r3, [pc, #564]	@ (8003c4c <UART_SetConfig+0x2d0>)
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d104      	bne.n	8003a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a1c:	f7ff f970 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8003a20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a24:	e003      	b.n	8003a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a26:	f7ff f957 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8003a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a38:	f040 810c 	bne.w	8003c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a4e:	4622      	mov	r2, r4
 8003a50:	462b      	mov	r3, r5
 8003a52:	1891      	adds	r1, r2, r2
 8003a54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a56:	415b      	adcs	r3, r3
 8003a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a5e:	4621      	mov	r1, r4
 8003a60:	eb12 0801 	adds.w	r8, r2, r1
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb43 0901 	adc.w	r9, r3, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	eb18 0303 	adds.w	r3, r8, r3
 8003a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a8c:	462b      	mov	r3, r5
 8003a8e:	eb49 0303 	adc.w	r3, r9, r3
 8003a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aaa:	460b      	mov	r3, r1
 8003aac:	18db      	adds	r3, r3, r3
 8003aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	eb42 0303 	adc.w	r3, r2, r3
 8003ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ac0:	f7fc fbde 	bl	8000280 <__aeabi_uldivmod>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	011c      	lsls	r4, r3, #4
 8003ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003adc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	464b      	mov	r3, r9
 8003ae8:	1891      	adds	r1, r2, r2
 8003aea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003aec:	415b      	adcs	r3, r3
 8003aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003af4:	4641      	mov	r1, r8
 8003af6:	eb12 0a01 	adds.w	sl, r2, r1
 8003afa:	4649      	mov	r1, r9
 8003afc:	eb43 0b01 	adc.w	fp, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b14:	4692      	mov	sl, r2
 8003b16:	469b      	mov	fp, r3
 8003b18:	4643      	mov	r3, r8
 8003b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b22:	464b      	mov	r3, r9
 8003b24:	eb4b 0303 	adc.w	r3, fp, r3
 8003b28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b40:	460b      	mov	r3, r1
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b46:	4613      	mov	r3, r2
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b56:	f7fc fb93 	bl	8000280 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4b3b      	ldr	r3, [pc, #236]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2301 	umull	r2, r3, r3, r1
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2264      	movs	r2, #100	@ 0x64
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	1acb      	subs	r3, r1, r3
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b76:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003b78:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b84:	441c      	add	r4, r3
 8003b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b98:	4642      	mov	r2, r8
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ba8:	4641      	mov	r1, r8
 8003baa:	1851      	adds	r1, r2, r1
 8003bac:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bae:	4649      	mov	r1, r9
 8003bb0:	414b      	adcs	r3, r1
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	00cb      	lsls	r3, r1, #3
 8003bc4:	4651      	mov	r1, sl
 8003bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bca:	4651      	mov	r1, sl
 8003bcc:	00ca      	lsls	r2, r1, #3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	4642      	mov	r2, r8
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bdc:	464b      	mov	r3, r9
 8003bde:	460a      	mov	r2, r1
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c12:	f7fc fb35 	bl	8000280 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c20:	095b      	lsrs	r3, r3, #5
 8003c22:	2164      	movs	r1, #100	@ 0x64
 8003c24:	fb01 f303 	mul.w	r3, r1, r3
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	3332      	adds	r3, #50	@ 0x32
 8003c2e:	4a08      	ldr	r2, [pc, #32]	@ (8003c50 <UART_SetConfig+0x2d4>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	f003 0207 	and.w	r2, r3, #7
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4422      	add	r2, r4
 8003c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c44:	e106      	b.n	8003e54 <UART_SetConfig+0x4d8>
 8003c46:	bf00      	nop
 8003c48:	40011000 	.word	0x40011000
 8003c4c:	40011400 	.word	0x40011400
 8003c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	1891      	adds	r1, r2, r2
 8003c6c:	6239      	str	r1, [r7, #32]
 8003c6e:	415b      	adcs	r3, r3
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c76:	4641      	mov	r1, r8
 8003c78:	1854      	adds	r4, r2, r1
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	eb43 0501 	adc.w	r5, r3, r1
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	00eb      	lsls	r3, r5, #3
 8003c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c8e:	00e2      	lsls	r2, r4, #3
 8003c90:	4614      	mov	r4, r2
 8003c92:	461d      	mov	r5, r3
 8003c94:	4643      	mov	r3, r8
 8003c96:	18e3      	adds	r3, r4, r3
 8003c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	eb45 0303 	adc.w	r3, r5, r3
 8003ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 0300 	mov.w	r3, #0
 8003cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	008b      	lsls	r3, r1, #2
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ccc:	4621      	mov	r1, r4
 8003cce:	008a      	lsls	r2, r1, #2
 8003cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cd4:	f7fc fad4 	bl	8000280 <__aeabi_uldivmod>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4b60      	ldr	r3, [pc, #384]	@ (8003e60 <UART_SetConfig+0x4e4>)
 8003cde:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	011c      	lsls	r4, r3, #4
 8003ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	1891      	adds	r1, r2, r2
 8003cfe:	61b9      	str	r1, [r7, #24]
 8003d00:	415b      	adcs	r3, r3
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d08:	4641      	mov	r1, r8
 8003d0a:	1851      	adds	r1, r2, r1
 8003d0c:	6139      	str	r1, [r7, #16]
 8003d0e:	4649      	mov	r1, r9
 8003d10:	414b      	adcs	r3, r1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d20:	4659      	mov	r1, fp
 8003d22:	00cb      	lsls	r3, r1, #3
 8003d24:	4651      	mov	r1, sl
 8003d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	00ca      	lsls	r2, r1, #3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	4619      	mov	r1, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	4642      	mov	r2, r8
 8003d36:	189b      	adds	r3, r3, r2
 8003d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	460a      	mov	r2, r1
 8003d40:	eb42 0303 	adc.w	r3, r2, r3
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d60:	4649      	mov	r1, r9
 8003d62:	008b      	lsls	r3, r1, #2
 8003d64:	4641      	mov	r1, r8
 8003d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	008a      	lsls	r2, r1, #2
 8003d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d72:	f7fc fa85 	bl	8000280 <__aeabi_uldivmod>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <UART_SetConfig+0x4e4>)
 8003d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	2264      	movs	r2, #100	@ 0x64
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	1acb      	subs	r3, r1, r3
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	3332      	adds	r3, #50	@ 0x32
 8003d90:	4a33      	ldr	r2, [pc, #204]	@ (8003e60 <UART_SetConfig+0x4e4>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d9c:	441c      	add	r4, r3
 8003d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da2:	2200      	movs	r2, #0
 8003da4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003da6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dac:	4642      	mov	r2, r8
 8003dae:	464b      	mov	r3, r9
 8003db0:	1891      	adds	r1, r2, r2
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	415b      	adcs	r3, r3
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	1851      	adds	r1, r2, r1
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	607b      	str	r3, [r7, #4]
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	00cb      	lsls	r3, r1, #3
 8003dd8:	4651      	mov	r1, sl
 8003dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dde:	4651      	mov	r1, sl
 8003de0:	00ca      	lsls	r2, r1, #3
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	4642      	mov	r2, r8
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003dee:	464b      	mov	r3, r9
 8003df0:	460a      	mov	r2, r1
 8003df2:	eb42 0303 	adc.w	r3, r2, r3
 8003df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e02:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e10:	4649      	mov	r1, r9
 8003e12:	008b      	lsls	r3, r1, #2
 8003e14:	4641      	mov	r1, r8
 8003e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e1a:	4641      	mov	r1, r8
 8003e1c:	008a      	lsls	r2, r1, #2
 8003e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e22:	f7fc fa2d 	bl	8000280 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <UART_SetConfig+0x4e4>)
 8003e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	2164      	movs	r1, #100	@ 0x64
 8003e34:	fb01 f303 	mul.w	r3, r1, r3
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	3332      	adds	r3, #50	@ 0x32
 8003e3e:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <UART_SetConfig+0x4e4>)
 8003e40:	fba2 2303 	umull	r2, r3, r2, r3
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4422      	add	r2, r4
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e60:	51eb851f 	.word	0x51eb851f

08003e64 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6812      	ldr	r2, [r2, #0]
 8003e7c:	f023 0101 	bic.w	r1, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d102      	bne.n	8003e94 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003e8e:	2340      	movs	r3, #64	@ 0x40
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e001      	b.n	8003e98 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003ea4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003eaa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003eb0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003eb6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003ebc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003ec2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003ec8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003ece:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8003ed4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <FSMC_NORSRAM_Init+0xd0>)
 8003ef4:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003efc:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8003f04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	ea02 0103 	and.w	r1, r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4319      	orrs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	0008fb7f 	.word	0x0008fb7f

08003f38 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	041b      	lsls	r3, r3, #16
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	051b      	lsls	r3, r3, #20
 8003f76:	431a      	orrs	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	3b02      	subs	r3, #2
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	4319      	orrs	r1, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
 8003fb0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb8:	d11d      	bne.n	8003ff6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fc2:	4b13      	ldr	r3, [pc, #76]	@ (8004010 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	6811      	ldr	r1, [r2, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	6852      	ldr	r2, [r2, #4]
 8003fce:	0112      	lsls	r2, r2, #4
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	6892      	ldr	r2, [r2, #8]
 8003fd6:	0212      	lsls	r2, r2, #8
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	6992      	ldr	r2, [r2, #24]
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	68d2      	ldr	r2, [r2, #12]
 8003fe4:	0412      	lsls	r2, r2, #16
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	ea43 0102 	orr.w	r1, r3, r2
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003ff4:	e005      	b.n	8004002 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	cff00000 	.word	0xcff00000

08004014 <sbrk_aligned>:
 8004014:	b570      	push	{r4, r5, r6, lr}
 8004016:	4e0f      	ldr	r6, [pc, #60]	@ (8004054 <sbrk_aligned+0x40>)
 8004018:	460c      	mov	r4, r1
 800401a:	6831      	ldr	r1, [r6, #0]
 800401c:	4605      	mov	r5, r0
 800401e:	b911      	cbnz	r1, 8004026 <sbrk_aligned+0x12>
 8004020:	f000 f8fc 	bl	800421c <_sbrk_r>
 8004024:	6030      	str	r0, [r6, #0]
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f8f7 	bl	800421c <_sbrk_r>
 800402e:	1c43      	adds	r3, r0, #1
 8004030:	d103      	bne.n	800403a <sbrk_aligned+0x26>
 8004032:	f04f 34ff 	mov.w	r4, #4294967295
 8004036:	4620      	mov	r0, r4
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	1cc4      	adds	r4, r0, #3
 800403c:	f024 0403 	bic.w	r4, r4, #3
 8004040:	42a0      	cmp	r0, r4
 8004042:	d0f8      	beq.n	8004036 <sbrk_aligned+0x22>
 8004044:	1a21      	subs	r1, r4, r0
 8004046:	4628      	mov	r0, r5
 8004048:	f000 f8e8 	bl	800421c <_sbrk_r>
 800404c:	3001      	adds	r0, #1
 800404e:	d1f2      	bne.n	8004036 <sbrk_aligned+0x22>
 8004050:	e7ef      	b.n	8004032 <sbrk_aligned+0x1e>
 8004052:	bf00      	nop
 8004054:	2000054c 	.word	0x2000054c

08004058 <_malloc_r>:
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	1ccd      	adds	r5, r1, #3
 800405e:	f025 0503 	bic.w	r5, r5, #3
 8004062:	3508      	adds	r5, #8
 8004064:	2d0c      	cmp	r5, #12
 8004066:	bf38      	it	cc
 8004068:	250c      	movcc	r5, #12
 800406a:	2d00      	cmp	r5, #0
 800406c:	4606      	mov	r6, r0
 800406e:	db01      	blt.n	8004074 <_malloc_r+0x1c>
 8004070:	42a9      	cmp	r1, r5
 8004072:	d904      	bls.n	800407e <_malloc_r+0x26>
 8004074:	230c      	movs	r3, #12
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	2000      	movs	r0, #0
 800407a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004154 <_malloc_r+0xfc>
 8004082:	f000 f869 	bl	8004158 <__malloc_lock>
 8004086:	f8d8 3000 	ldr.w	r3, [r8]
 800408a:	461c      	mov	r4, r3
 800408c:	bb44      	cbnz	r4, 80040e0 <_malloc_r+0x88>
 800408e:	4629      	mov	r1, r5
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffbf 	bl	8004014 <sbrk_aligned>
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	4604      	mov	r4, r0
 800409a:	d158      	bne.n	800414e <_malloc_r+0xf6>
 800409c:	f8d8 4000 	ldr.w	r4, [r8]
 80040a0:	4627      	mov	r7, r4
 80040a2:	2f00      	cmp	r7, #0
 80040a4:	d143      	bne.n	800412e <_malloc_r+0xd6>
 80040a6:	2c00      	cmp	r4, #0
 80040a8:	d04b      	beq.n	8004142 <_malloc_r+0xea>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	eb04 0903 	add.w	r9, r4, r3
 80040b4:	f000 f8b2 	bl	800421c <_sbrk_r>
 80040b8:	4581      	cmp	r9, r0
 80040ba:	d142      	bne.n	8004142 <_malloc_r+0xea>
 80040bc:	6821      	ldr	r1, [r4, #0]
 80040be:	1a6d      	subs	r5, r5, r1
 80040c0:	4629      	mov	r1, r5
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff ffa6 	bl	8004014 <sbrk_aligned>
 80040c8:	3001      	adds	r0, #1
 80040ca:	d03a      	beq.n	8004142 <_malloc_r+0xea>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	442b      	add	r3, r5
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	f8d8 3000 	ldr.w	r3, [r8]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	bb62      	cbnz	r2, 8004134 <_malloc_r+0xdc>
 80040da:	f8c8 7000 	str.w	r7, [r8]
 80040de:	e00f      	b.n	8004100 <_malloc_r+0xa8>
 80040e0:	6822      	ldr	r2, [r4, #0]
 80040e2:	1b52      	subs	r2, r2, r5
 80040e4:	d420      	bmi.n	8004128 <_malloc_r+0xd0>
 80040e6:	2a0b      	cmp	r2, #11
 80040e8:	d917      	bls.n	800411a <_malloc_r+0xc2>
 80040ea:	1961      	adds	r1, r4, r5
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	6025      	str	r5, [r4, #0]
 80040f0:	bf18      	it	ne
 80040f2:	6059      	strne	r1, [r3, #4]
 80040f4:	6863      	ldr	r3, [r4, #4]
 80040f6:	bf08      	it	eq
 80040f8:	f8c8 1000 	streq.w	r1, [r8]
 80040fc:	5162      	str	r2, [r4, r5]
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	4630      	mov	r0, r6
 8004102:	f000 f82f 	bl	8004164 <__malloc_unlock>
 8004106:	f104 000b 	add.w	r0, r4, #11
 800410a:	1d23      	adds	r3, r4, #4
 800410c:	f020 0007 	bic.w	r0, r0, #7
 8004110:	1ac2      	subs	r2, r0, r3
 8004112:	bf1c      	itt	ne
 8004114:	1a1b      	subne	r3, r3, r0
 8004116:	50a3      	strne	r3, [r4, r2]
 8004118:	e7af      	b.n	800407a <_malloc_r+0x22>
 800411a:	6862      	ldr	r2, [r4, #4]
 800411c:	42a3      	cmp	r3, r4
 800411e:	bf0c      	ite	eq
 8004120:	f8c8 2000 	streq.w	r2, [r8]
 8004124:	605a      	strne	r2, [r3, #4]
 8004126:	e7eb      	b.n	8004100 <_malloc_r+0xa8>
 8004128:	4623      	mov	r3, r4
 800412a:	6864      	ldr	r4, [r4, #4]
 800412c:	e7ae      	b.n	800408c <_malloc_r+0x34>
 800412e:	463c      	mov	r4, r7
 8004130:	687f      	ldr	r7, [r7, #4]
 8004132:	e7b6      	b.n	80040a2 <_malloc_r+0x4a>
 8004134:	461a      	mov	r2, r3
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	42a3      	cmp	r3, r4
 800413a:	d1fb      	bne.n	8004134 <_malloc_r+0xdc>
 800413c:	2300      	movs	r3, #0
 800413e:	6053      	str	r3, [r2, #4]
 8004140:	e7de      	b.n	8004100 <_malloc_r+0xa8>
 8004142:	230c      	movs	r3, #12
 8004144:	6033      	str	r3, [r6, #0]
 8004146:	4630      	mov	r0, r6
 8004148:	f000 f80c 	bl	8004164 <__malloc_unlock>
 800414c:	e794      	b.n	8004078 <_malloc_r+0x20>
 800414e:	6005      	str	r5, [r0, #0]
 8004150:	e7d6      	b.n	8004100 <_malloc_r+0xa8>
 8004152:	bf00      	nop
 8004154:	20000550 	.word	0x20000550

08004158 <__malloc_lock>:
 8004158:	4801      	ldr	r0, [pc, #4]	@ (8004160 <__malloc_lock+0x8>)
 800415a:	f000 b899 	b.w	8004290 <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000690 	.word	0x20000690

08004164 <__malloc_unlock>:
 8004164:	4801      	ldr	r0, [pc, #4]	@ (800416c <__malloc_unlock+0x8>)
 8004166:	f000 b894 	b.w	8004292 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000690 	.word	0x20000690

08004170 <_realloc_r>:
 8004170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004174:	4680      	mov	r8, r0
 8004176:	4615      	mov	r5, r2
 8004178:	460c      	mov	r4, r1
 800417a:	b921      	cbnz	r1, 8004186 <_realloc_r+0x16>
 800417c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004180:	4611      	mov	r1, r2
 8004182:	f7ff bf69 	b.w	8004058 <_malloc_r>
 8004186:	b92a      	cbnz	r2, 8004194 <_realloc_r+0x24>
 8004188:	f000 f892 	bl	80042b0 <_free_r>
 800418c:	2400      	movs	r4, #0
 800418e:	4620      	mov	r0, r4
 8004190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004194:	f000 f8d6 	bl	8004344 <_malloc_usable_size_r>
 8004198:	4285      	cmp	r5, r0
 800419a:	4606      	mov	r6, r0
 800419c:	d802      	bhi.n	80041a4 <_realloc_r+0x34>
 800419e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80041a2:	d8f4      	bhi.n	800418e <_realloc_r+0x1e>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4640      	mov	r0, r8
 80041a8:	f7ff ff56 	bl	8004058 <_malloc_r>
 80041ac:	4607      	mov	r7, r0
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d0ec      	beq.n	800418c <_realloc_r+0x1c>
 80041b2:	42b5      	cmp	r5, r6
 80041b4:	462a      	mov	r2, r5
 80041b6:	4621      	mov	r1, r4
 80041b8:	bf28      	it	cs
 80041ba:	4632      	movcs	r2, r6
 80041bc:	f000 f86a 	bl	8004294 <memcpy>
 80041c0:	4621      	mov	r1, r4
 80041c2:	4640      	mov	r0, r8
 80041c4:	f000 f874 	bl	80042b0 <_free_r>
 80041c8:	463c      	mov	r4, r7
 80041ca:	e7e0      	b.n	800418e <_realloc_r+0x1e>

080041cc <_vsiprintf_r>:
 80041cc:	b500      	push	{lr}
 80041ce:	b09b      	sub	sp, #108	@ 0x6c
 80041d0:	9100      	str	r1, [sp, #0]
 80041d2:	9104      	str	r1, [sp, #16]
 80041d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80041d8:	9105      	str	r1, [sp, #20]
 80041da:	9102      	str	r1, [sp, #8]
 80041dc:	4905      	ldr	r1, [pc, #20]	@ (80041f4 <_vsiprintf_r+0x28>)
 80041de:	9103      	str	r1, [sp, #12]
 80041e0:	4669      	mov	r1, sp
 80041e2:	f000 f913 	bl	800440c <_svfiprintf_r>
 80041e6:	9b00      	ldr	r3, [sp, #0]
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	b01b      	add	sp, #108	@ 0x6c
 80041ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80041f2:	bf00      	nop
 80041f4:	ffff0208 	.word	0xffff0208

080041f8 <vsiprintf>:
 80041f8:	4613      	mov	r3, r2
 80041fa:	460a      	mov	r2, r1
 80041fc:	4601      	mov	r1, r0
 80041fe:	4802      	ldr	r0, [pc, #8]	@ (8004208 <vsiprintf+0x10>)
 8004200:	6800      	ldr	r0, [r0, #0]
 8004202:	f7ff bfe3 	b.w	80041cc <_vsiprintf_r>
 8004206:	bf00      	nop
 8004208:	20000030 	.word	0x20000030

0800420c <memset>:
 800420c:	4402      	add	r2, r0
 800420e:	4603      	mov	r3, r0
 8004210:	4293      	cmp	r3, r2
 8004212:	d100      	bne.n	8004216 <memset+0xa>
 8004214:	4770      	bx	lr
 8004216:	f803 1b01 	strb.w	r1, [r3], #1
 800421a:	e7f9      	b.n	8004210 <memset+0x4>

0800421c <_sbrk_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4d06      	ldr	r5, [pc, #24]	@ (8004238 <_sbrk_r+0x1c>)
 8004220:	2300      	movs	r3, #0
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	f7fd fc84 	bl	8001b34 <_sbrk>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_sbrk_r+0x1a>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_sbrk_r+0x1a>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	2000068c 	.word	0x2000068c

0800423c <__errno>:
 800423c:	4b01      	ldr	r3, [pc, #4]	@ (8004244 <__errno+0x8>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000030 	.word	0x20000030

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4d0d      	ldr	r5, [pc, #52]	@ (8004280 <__libc_init_array+0x38>)
 800424c:	4c0d      	ldr	r4, [pc, #52]	@ (8004284 <__libc_init_array+0x3c>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	2600      	movs	r6, #0
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	4d0b      	ldr	r5, [pc, #44]	@ (8004288 <__libc_init_array+0x40>)
 800425a:	4c0c      	ldr	r4, [pc, #48]	@ (800428c <__libc_init_array+0x44>)
 800425c:	f000 fb7a 	bl	8004954 <_init>
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	2600      	movs	r6, #0
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	08017b54 	.word	0x08017b54
 8004284:	08017b54 	.word	0x08017b54
 8004288:	08017b54 	.word	0x08017b54
 800428c:	08017b58 	.word	0x08017b58

08004290 <__retarget_lock_acquire_recursive>:
 8004290:	4770      	bx	lr

08004292 <__retarget_lock_release_recursive>:
 8004292:	4770      	bx	lr

08004294 <memcpy>:
 8004294:	440a      	add	r2, r1
 8004296:	4291      	cmp	r1, r2
 8004298:	f100 33ff 	add.w	r3, r0, #4294967295
 800429c:	d100      	bne.n	80042a0 <memcpy+0xc>
 800429e:	4770      	bx	lr
 80042a0:	b510      	push	{r4, lr}
 80042a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042aa:	4291      	cmp	r1, r2
 80042ac:	d1f9      	bne.n	80042a2 <memcpy+0xe>
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <_free_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4605      	mov	r5, r0
 80042b4:	2900      	cmp	r1, #0
 80042b6:	d041      	beq.n	800433c <_free_r+0x8c>
 80042b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042bc:	1f0c      	subs	r4, r1, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfb8      	it	lt
 80042c2:	18e4      	addlt	r4, r4, r3
 80042c4:	f7ff ff48 	bl	8004158 <__malloc_lock>
 80042c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004340 <_free_r+0x90>)
 80042ca:	6813      	ldr	r3, [r2, #0]
 80042cc:	b933      	cbnz	r3, 80042dc <_free_r+0x2c>
 80042ce:	6063      	str	r3, [r4, #4]
 80042d0:	6014      	str	r4, [r2, #0]
 80042d2:	4628      	mov	r0, r5
 80042d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042d8:	f7ff bf44 	b.w	8004164 <__malloc_unlock>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d908      	bls.n	80042f2 <_free_r+0x42>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	1821      	adds	r1, r4, r0
 80042e4:	428b      	cmp	r3, r1
 80042e6:	bf01      	itttt	eq
 80042e8:	6819      	ldreq	r1, [r3, #0]
 80042ea:	685b      	ldreq	r3, [r3, #4]
 80042ec:	1809      	addeq	r1, r1, r0
 80042ee:	6021      	streq	r1, [r4, #0]
 80042f0:	e7ed      	b.n	80042ce <_free_r+0x1e>
 80042f2:	461a      	mov	r2, r3
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	b10b      	cbz	r3, 80042fc <_free_r+0x4c>
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	d9fa      	bls.n	80042f2 <_free_r+0x42>
 80042fc:	6811      	ldr	r1, [r2, #0]
 80042fe:	1850      	adds	r0, r2, r1
 8004300:	42a0      	cmp	r0, r4
 8004302:	d10b      	bne.n	800431c <_free_r+0x6c>
 8004304:	6820      	ldr	r0, [r4, #0]
 8004306:	4401      	add	r1, r0
 8004308:	1850      	adds	r0, r2, r1
 800430a:	4283      	cmp	r3, r0
 800430c:	6011      	str	r1, [r2, #0]
 800430e:	d1e0      	bne.n	80042d2 <_free_r+0x22>
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	6053      	str	r3, [r2, #4]
 8004316:	4408      	add	r0, r1
 8004318:	6010      	str	r0, [r2, #0]
 800431a:	e7da      	b.n	80042d2 <_free_r+0x22>
 800431c:	d902      	bls.n	8004324 <_free_r+0x74>
 800431e:	230c      	movs	r3, #12
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	e7d6      	b.n	80042d2 <_free_r+0x22>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	1821      	adds	r1, r4, r0
 8004328:	428b      	cmp	r3, r1
 800432a:	bf04      	itt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	6063      	str	r3, [r4, #4]
 8004332:	bf04      	itt	eq
 8004334:	1809      	addeq	r1, r1, r0
 8004336:	6021      	streq	r1, [r4, #0]
 8004338:	6054      	str	r4, [r2, #4]
 800433a:	e7ca      	b.n	80042d2 <_free_r+0x22>
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	bf00      	nop
 8004340:	20000550 	.word	0x20000550

08004344 <_malloc_usable_size_r>:
 8004344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004348:	1f18      	subs	r0, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	bfbc      	itt	lt
 800434e:	580b      	ldrlt	r3, [r1, r0]
 8004350:	18c0      	addlt	r0, r0, r3
 8004352:	4770      	bx	lr

08004354 <__ssputs_r>:
 8004354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004358:	688e      	ldr	r6, [r1, #8]
 800435a:	461f      	mov	r7, r3
 800435c:	42be      	cmp	r6, r7
 800435e:	680b      	ldr	r3, [r1, #0]
 8004360:	4682      	mov	sl, r0
 8004362:	460c      	mov	r4, r1
 8004364:	4690      	mov	r8, r2
 8004366:	d82d      	bhi.n	80043c4 <__ssputs_r+0x70>
 8004368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800436c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004370:	d026      	beq.n	80043c0 <__ssputs_r+0x6c>
 8004372:	6965      	ldr	r5, [r4, #20]
 8004374:	6909      	ldr	r1, [r1, #16]
 8004376:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800437a:	eba3 0901 	sub.w	r9, r3, r1
 800437e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004382:	1c7b      	adds	r3, r7, #1
 8004384:	444b      	add	r3, r9
 8004386:	106d      	asrs	r5, r5, #1
 8004388:	429d      	cmp	r5, r3
 800438a:	bf38      	it	cc
 800438c:	461d      	movcc	r5, r3
 800438e:	0553      	lsls	r3, r2, #21
 8004390:	d527      	bpl.n	80043e2 <__ssputs_r+0x8e>
 8004392:	4629      	mov	r1, r5
 8004394:	f7ff fe60 	bl	8004058 <_malloc_r>
 8004398:	4606      	mov	r6, r0
 800439a:	b360      	cbz	r0, 80043f6 <__ssputs_r+0xa2>
 800439c:	6921      	ldr	r1, [r4, #16]
 800439e:	464a      	mov	r2, r9
 80043a0:	f7ff ff78 	bl	8004294 <memcpy>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	6126      	str	r6, [r4, #16]
 80043b2:	6165      	str	r5, [r4, #20]
 80043b4:	444e      	add	r6, r9
 80043b6:	eba5 0509 	sub.w	r5, r5, r9
 80043ba:	6026      	str	r6, [r4, #0]
 80043bc:	60a5      	str	r5, [r4, #8]
 80043be:	463e      	mov	r6, r7
 80043c0:	42be      	cmp	r6, r7
 80043c2:	d900      	bls.n	80043c6 <__ssputs_r+0x72>
 80043c4:	463e      	mov	r6, r7
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	4632      	mov	r2, r6
 80043ca:	4641      	mov	r1, r8
 80043cc:	f000 faa8 	bl	8004920 <memmove>
 80043d0:	68a3      	ldr	r3, [r4, #8]
 80043d2:	1b9b      	subs	r3, r3, r6
 80043d4:	60a3      	str	r3, [r4, #8]
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	4433      	add	r3, r6
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	2000      	movs	r0, #0
 80043de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e2:	462a      	mov	r2, r5
 80043e4:	f7ff fec4 	bl	8004170 <_realloc_r>
 80043e8:	4606      	mov	r6, r0
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d1e0      	bne.n	80043b0 <__ssputs_r+0x5c>
 80043ee:	6921      	ldr	r1, [r4, #16]
 80043f0:	4650      	mov	r0, sl
 80043f2:	f7ff ff5d 	bl	80042b0 <_free_r>
 80043f6:	230c      	movs	r3, #12
 80043f8:	f8ca 3000 	str.w	r3, [sl]
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	e7e9      	b.n	80043de <__ssputs_r+0x8a>
	...

0800440c <_svfiprintf_r>:
 800440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	4698      	mov	r8, r3
 8004412:	898b      	ldrh	r3, [r1, #12]
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	b09d      	sub	sp, #116	@ 0x74
 8004418:	4607      	mov	r7, r0
 800441a:	460d      	mov	r5, r1
 800441c:	4614      	mov	r4, r2
 800441e:	d510      	bpl.n	8004442 <_svfiprintf_r+0x36>
 8004420:	690b      	ldr	r3, [r1, #16]
 8004422:	b973      	cbnz	r3, 8004442 <_svfiprintf_r+0x36>
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	f7ff fe17 	bl	8004058 <_malloc_r>
 800442a:	6028      	str	r0, [r5, #0]
 800442c:	6128      	str	r0, [r5, #16]
 800442e:	b930      	cbnz	r0, 800443e <_svfiprintf_r+0x32>
 8004430:	230c      	movs	r3, #12
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	b01d      	add	sp, #116	@ 0x74
 800443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443e:	2340      	movs	r3, #64	@ 0x40
 8004440:	616b      	str	r3, [r5, #20]
 8004442:	2300      	movs	r3, #0
 8004444:	9309      	str	r3, [sp, #36]	@ 0x24
 8004446:	2320      	movs	r3, #32
 8004448:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800444c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004450:	2330      	movs	r3, #48	@ 0x30
 8004452:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80045f0 <_svfiprintf_r+0x1e4>
 8004456:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800445a:	f04f 0901 	mov.w	r9, #1
 800445e:	4623      	mov	r3, r4
 8004460:	469a      	mov	sl, r3
 8004462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004466:	b10a      	cbz	r2, 800446c <_svfiprintf_r+0x60>
 8004468:	2a25      	cmp	r2, #37	@ 0x25
 800446a:	d1f9      	bne.n	8004460 <_svfiprintf_r+0x54>
 800446c:	ebba 0b04 	subs.w	fp, sl, r4
 8004470:	d00b      	beq.n	800448a <_svfiprintf_r+0x7e>
 8004472:	465b      	mov	r3, fp
 8004474:	4622      	mov	r2, r4
 8004476:	4629      	mov	r1, r5
 8004478:	4638      	mov	r0, r7
 800447a:	f7ff ff6b 	bl	8004354 <__ssputs_r>
 800447e:	3001      	adds	r0, #1
 8004480:	f000 80a7 	beq.w	80045d2 <_svfiprintf_r+0x1c6>
 8004484:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004486:	445a      	add	r2, fp
 8004488:	9209      	str	r2, [sp, #36]	@ 0x24
 800448a:	f89a 3000 	ldrb.w	r3, [sl]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f000 809f 	beq.w	80045d2 <_svfiprintf_r+0x1c6>
 8004494:	2300      	movs	r3, #0
 8004496:	f04f 32ff 	mov.w	r2, #4294967295
 800449a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800449e:	f10a 0a01 	add.w	sl, sl, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	9307      	str	r3, [sp, #28]
 80044a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80044ac:	4654      	mov	r4, sl
 80044ae:	2205      	movs	r2, #5
 80044b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044b4:	484e      	ldr	r0, [pc, #312]	@ (80045f0 <_svfiprintf_r+0x1e4>)
 80044b6:	f7fb fe93 	bl	80001e0 <memchr>
 80044ba:	9a04      	ldr	r2, [sp, #16]
 80044bc:	b9d8      	cbnz	r0, 80044f6 <_svfiprintf_r+0xea>
 80044be:	06d0      	lsls	r0, r2, #27
 80044c0:	bf44      	itt	mi
 80044c2:	2320      	movmi	r3, #32
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044c8:	0711      	lsls	r1, r2, #28
 80044ca:	bf44      	itt	mi
 80044cc:	232b      	movmi	r3, #43	@ 0x2b
 80044ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d2:	f89a 3000 	ldrb.w	r3, [sl]
 80044d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044d8:	d015      	beq.n	8004506 <_svfiprintf_r+0xfa>
 80044da:	9a07      	ldr	r2, [sp, #28]
 80044dc:	4654      	mov	r4, sl
 80044de:	2000      	movs	r0, #0
 80044e0:	f04f 0c0a 	mov.w	ip, #10
 80044e4:	4621      	mov	r1, r4
 80044e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044ea:	3b30      	subs	r3, #48	@ 0x30
 80044ec:	2b09      	cmp	r3, #9
 80044ee:	d94b      	bls.n	8004588 <_svfiprintf_r+0x17c>
 80044f0:	b1b0      	cbz	r0, 8004520 <_svfiprintf_r+0x114>
 80044f2:	9207      	str	r2, [sp, #28]
 80044f4:	e014      	b.n	8004520 <_svfiprintf_r+0x114>
 80044f6:	eba0 0308 	sub.w	r3, r0, r8
 80044fa:	fa09 f303 	lsl.w	r3, r9, r3
 80044fe:	4313      	orrs	r3, r2
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	46a2      	mov	sl, r4
 8004504:	e7d2      	b.n	80044ac <_svfiprintf_r+0xa0>
 8004506:	9b03      	ldr	r3, [sp, #12]
 8004508:	1d19      	adds	r1, r3, #4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	9103      	str	r1, [sp, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfbb      	ittet	lt
 8004512:	425b      	neglt	r3, r3
 8004514:	f042 0202 	orrlt.w	r2, r2, #2
 8004518:	9307      	strge	r3, [sp, #28]
 800451a:	9307      	strlt	r3, [sp, #28]
 800451c:	bfb8      	it	lt
 800451e:	9204      	strlt	r2, [sp, #16]
 8004520:	7823      	ldrb	r3, [r4, #0]
 8004522:	2b2e      	cmp	r3, #46	@ 0x2e
 8004524:	d10a      	bne.n	800453c <_svfiprintf_r+0x130>
 8004526:	7863      	ldrb	r3, [r4, #1]
 8004528:	2b2a      	cmp	r3, #42	@ 0x2a
 800452a:	d132      	bne.n	8004592 <_svfiprintf_r+0x186>
 800452c:	9b03      	ldr	r3, [sp, #12]
 800452e:	1d1a      	adds	r2, r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	9203      	str	r2, [sp, #12]
 8004534:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004538:	3402      	adds	r4, #2
 800453a:	9305      	str	r3, [sp, #20]
 800453c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004600 <_svfiprintf_r+0x1f4>
 8004540:	7821      	ldrb	r1, [r4, #0]
 8004542:	2203      	movs	r2, #3
 8004544:	4650      	mov	r0, sl
 8004546:	f7fb fe4b 	bl	80001e0 <memchr>
 800454a:	b138      	cbz	r0, 800455c <_svfiprintf_r+0x150>
 800454c:	9b04      	ldr	r3, [sp, #16]
 800454e:	eba0 000a 	sub.w	r0, r0, sl
 8004552:	2240      	movs	r2, #64	@ 0x40
 8004554:	4082      	lsls	r2, r0
 8004556:	4313      	orrs	r3, r2
 8004558:	3401      	adds	r4, #1
 800455a:	9304      	str	r3, [sp, #16]
 800455c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004560:	4824      	ldr	r0, [pc, #144]	@ (80045f4 <_svfiprintf_r+0x1e8>)
 8004562:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004566:	2206      	movs	r2, #6
 8004568:	f7fb fe3a 	bl	80001e0 <memchr>
 800456c:	2800      	cmp	r0, #0
 800456e:	d036      	beq.n	80045de <_svfiprintf_r+0x1d2>
 8004570:	4b21      	ldr	r3, [pc, #132]	@ (80045f8 <_svfiprintf_r+0x1ec>)
 8004572:	bb1b      	cbnz	r3, 80045bc <_svfiprintf_r+0x1b0>
 8004574:	9b03      	ldr	r3, [sp, #12]
 8004576:	3307      	adds	r3, #7
 8004578:	f023 0307 	bic.w	r3, r3, #7
 800457c:	3308      	adds	r3, #8
 800457e:	9303      	str	r3, [sp, #12]
 8004580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004582:	4433      	add	r3, r6
 8004584:	9309      	str	r3, [sp, #36]	@ 0x24
 8004586:	e76a      	b.n	800445e <_svfiprintf_r+0x52>
 8004588:	fb0c 3202 	mla	r2, ip, r2, r3
 800458c:	460c      	mov	r4, r1
 800458e:	2001      	movs	r0, #1
 8004590:	e7a8      	b.n	80044e4 <_svfiprintf_r+0xd8>
 8004592:	2300      	movs	r3, #0
 8004594:	3401      	adds	r4, #1
 8004596:	9305      	str	r3, [sp, #20]
 8004598:	4619      	mov	r1, r3
 800459a:	f04f 0c0a 	mov.w	ip, #10
 800459e:	4620      	mov	r0, r4
 80045a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a4:	3a30      	subs	r2, #48	@ 0x30
 80045a6:	2a09      	cmp	r2, #9
 80045a8:	d903      	bls.n	80045b2 <_svfiprintf_r+0x1a6>
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0c6      	beq.n	800453c <_svfiprintf_r+0x130>
 80045ae:	9105      	str	r1, [sp, #20]
 80045b0:	e7c4      	b.n	800453c <_svfiprintf_r+0x130>
 80045b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b6:	4604      	mov	r4, r0
 80045b8:	2301      	movs	r3, #1
 80045ba:	e7f0      	b.n	800459e <_svfiprintf_r+0x192>
 80045bc:	ab03      	add	r3, sp, #12
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	462a      	mov	r2, r5
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <_svfiprintf_r+0x1f0>)
 80045c4:	a904      	add	r1, sp, #16
 80045c6:	4638      	mov	r0, r7
 80045c8:	f3af 8000 	nop.w
 80045cc:	1c42      	adds	r2, r0, #1
 80045ce:	4606      	mov	r6, r0
 80045d0:	d1d6      	bne.n	8004580 <_svfiprintf_r+0x174>
 80045d2:	89ab      	ldrh	r3, [r5, #12]
 80045d4:	065b      	lsls	r3, r3, #25
 80045d6:	f53f af2d 	bmi.w	8004434 <_svfiprintf_r+0x28>
 80045da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045dc:	e72c      	b.n	8004438 <_svfiprintf_r+0x2c>
 80045de:	ab03      	add	r3, sp, #12
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	462a      	mov	r2, r5
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <_svfiprintf_r+0x1f0>)
 80045e6:	a904      	add	r1, sp, #16
 80045e8:	4638      	mov	r0, r7
 80045ea:	f000 f879 	bl	80046e0 <_printf_i>
 80045ee:	e7ed      	b.n	80045cc <_svfiprintf_r+0x1c0>
 80045f0:	08017b18 	.word	0x08017b18
 80045f4:	08017b22 	.word	0x08017b22
 80045f8:	00000000 	.word	0x00000000
 80045fc:	08004355 	.word	0x08004355
 8004600:	08017b1e 	.word	0x08017b1e

08004604 <_printf_common>:
 8004604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004608:	4616      	mov	r6, r2
 800460a:	4698      	mov	r8, r3
 800460c:	688a      	ldr	r2, [r1, #8]
 800460e:	690b      	ldr	r3, [r1, #16]
 8004610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004614:	4293      	cmp	r3, r2
 8004616:	bfb8      	it	lt
 8004618:	4613      	movlt	r3, r2
 800461a:	6033      	str	r3, [r6, #0]
 800461c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004620:	4607      	mov	r7, r0
 8004622:	460c      	mov	r4, r1
 8004624:	b10a      	cbz	r2, 800462a <_printf_common+0x26>
 8004626:	3301      	adds	r3, #1
 8004628:	6033      	str	r3, [r6, #0]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	0699      	lsls	r1, r3, #26
 800462e:	bf42      	ittt	mi
 8004630:	6833      	ldrmi	r3, [r6, #0]
 8004632:	3302      	addmi	r3, #2
 8004634:	6033      	strmi	r3, [r6, #0]
 8004636:	6825      	ldr	r5, [r4, #0]
 8004638:	f015 0506 	ands.w	r5, r5, #6
 800463c:	d106      	bne.n	800464c <_printf_common+0x48>
 800463e:	f104 0a19 	add.w	sl, r4, #25
 8004642:	68e3      	ldr	r3, [r4, #12]
 8004644:	6832      	ldr	r2, [r6, #0]
 8004646:	1a9b      	subs	r3, r3, r2
 8004648:	42ab      	cmp	r3, r5
 800464a:	dc26      	bgt.n	800469a <_printf_common+0x96>
 800464c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	3b00      	subs	r3, #0
 8004654:	bf18      	it	ne
 8004656:	2301      	movne	r3, #1
 8004658:	0692      	lsls	r2, r2, #26
 800465a:	d42b      	bmi.n	80046b4 <_printf_common+0xb0>
 800465c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004660:	4641      	mov	r1, r8
 8004662:	4638      	mov	r0, r7
 8004664:	47c8      	blx	r9
 8004666:	3001      	adds	r0, #1
 8004668:	d01e      	beq.n	80046a8 <_printf_common+0xa4>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	6922      	ldr	r2, [r4, #16]
 800466e:	f003 0306 	and.w	r3, r3, #6
 8004672:	2b04      	cmp	r3, #4
 8004674:	bf02      	ittt	eq
 8004676:	68e5      	ldreq	r5, [r4, #12]
 8004678:	6833      	ldreq	r3, [r6, #0]
 800467a:	1aed      	subeq	r5, r5, r3
 800467c:	68a3      	ldr	r3, [r4, #8]
 800467e:	bf0c      	ite	eq
 8004680:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004684:	2500      	movne	r5, #0
 8004686:	4293      	cmp	r3, r2
 8004688:	bfc4      	itt	gt
 800468a:	1a9b      	subgt	r3, r3, r2
 800468c:	18ed      	addgt	r5, r5, r3
 800468e:	2600      	movs	r6, #0
 8004690:	341a      	adds	r4, #26
 8004692:	42b5      	cmp	r5, r6
 8004694:	d11a      	bne.n	80046cc <_printf_common+0xc8>
 8004696:	2000      	movs	r0, #0
 8004698:	e008      	b.n	80046ac <_printf_common+0xa8>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4641      	mov	r1, r8
 80046a0:	4638      	mov	r0, r7
 80046a2:	47c8      	blx	r9
 80046a4:	3001      	adds	r0, #1
 80046a6:	d103      	bne.n	80046b0 <_printf_common+0xac>
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	3501      	adds	r5, #1
 80046b2:	e7c6      	b.n	8004642 <_printf_common+0x3e>
 80046b4:	18e1      	adds	r1, r4, r3
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	2030      	movs	r0, #48	@ 0x30
 80046ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046be:	4422      	add	r2, r4
 80046c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046c8:	3302      	adds	r3, #2
 80046ca:	e7c7      	b.n	800465c <_printf_common+0x58>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4622      	mov	r2, r4
 80046d0:	4641      	mov	r1, r8
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c8      	blx	r9
 80046d6:	3001      	adds	r0, #1
 80046d8:	d0e6      	beq.n	80046a8 <_printf_common+0xa4>
 80046da:	3601      	adds	r6, #1
 80046dc:	e7d9      	b.n	8004692 <_printf_common+0x8e>
	...

080046e0 <_printf_i>:
 80046e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e4:	7e0f      	ldrb	r7, [r1, #24]
 80046e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80046e8:	2f78      	cmp	r7, #120	@ 0x78
 80046ea:	4691      	mov	r9, r2
 80046ec:	4680      	mov	r8, r0
 80046ee:	460c      	mov	r4, r1
 80046f0:	469a      	mov	sl, r3
 80046f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80046f6:	d807      	bhi.n	8004708 <_printf_i+0x28>
 80046f8:	2f62      	cmp	r7, #98	@ 0x62
 80046fa:	d80a      	bhi.n	8004712 <_printf_i+0x32>
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	f000 80d2 	beq.w	80048a6 <_printf_i+0x1c6>
 8004702:	2f58      	cmp	r7, #88	@ 0x58
 8004704:	f000 80b9 	beq.w	800487a <_printf_i+0x19a>
 8004708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800470c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004710:	e03a      	b.n	8004788 <_printf_i+0xa8>
 8004712:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004716:	2b15      	cmp	r3, #21
 8004718:	d8f6      	bhi.n	8004708 <_printf_i+0x28>
 800471a:	a101      	add	r1, pc, #4	@ (adr r1, 8004720 <_printf_i+0x40>)
 800471c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004720:	08004779 	.word	0x08004779
 8004724:	0800478d 	.word	0x0800478d
 8004728:	08004709 	.word	0x08004709
 800472c:	08004709 	.word	0x08004709
 8004730:	08004709 	.word	0x08004709
 8004734:	08004709 	.word	0x08004709
 8004738:	0800478d 	.word	0x0800478d
 800473c:	08004709 	.word	0x08004709
 8004740:	08004709 	.word	0x08004709
 8004744:	08004709 	.word	0x08004709
 8004748:	08004709 	.word	0x08004709
 800474c:	0800488d 	.word	0x0800488d
 8004750:	080047b7 	.word	0x080047b7
 8004754:	08004847 	.word	0x08004847
 8004758:	08004709 	.word	0x08004709
 800475c:	08004709 	.word	0x08004709
 8004760:	080048af 	.word	0x080048af
 8004764:	08004709 	.word	0x08004709
 8004768:	080047b7 	.word	0x080047b7
 800476c:	08004709 	.word	0x08004709
 8004770:	08004709 	.word	0x08004709
 8004774:	0800484f 	.word	0x0800484f
 8004778:	6833      	ldr	r3, [r6, #0]
 800477a:	1d1a      	adds	r2, r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6032      	str	r2, [r6, #0]
 8004780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004784:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004788:	2301      	movs	r3, #1
 800478a:	e09d      	b.n	80048c8 <_printf_i+0x1e8>
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	6820      	ldr	r0, [r4, #0]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	6031      	str	r1, [r6, #0]
 8004794:	0606      	lsls	r6, r0, #24
 8004796:	d501      	bpl.n	800479c <_printf_i+0xbc>
 8004798:	681d      	ldr	r5, [r3, #0]
 800479a:	e003      	b.n	80047a4 <_printf_i+0xc4>
 800479c:	0645      	lsls	r5, r0, #25
 800479e:	d5fb      	bpl.n	8004798 <_printf_i+0xb8>
 80047a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047a4:	2d00      	cmp	r5, #0
 80047a6:	da03      	bge.n	80047b0 <_printf_i+0xd0>
 80047a8:	232d      	movs	r3, #45	@ 0x2d
 80047aa:	426d      	negs	r5, r5
 80047ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047b0:	4859      	ldr	r0, [pc, #356]	@ (8004918 <_printf_i+0x238>)
 80047b2:	230a      	movs	r3, #10
 80047b4:	e011      	b.n	80047da <_printf_i+0xfa>
 80047b6:	6821      	ldr	r1, [r4, #0]
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	0608      	lsls	r0, r1, #24
 80047bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80047c0:	d402      	bmi.n	80047c8 <_printf_i+0xe8>
 80047c2:	0649      	lsls	r1, r1, #25
 80047c4:	bf48      	it	mi
 80047c6:	b2ad      	uxthmi	r5, r5
 80047c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ca:	4853      	ldr	r0, [pc, #332]	@ (8004918 <_printf_i+0x238>)
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	bf14      	ite	ne
 80047d0:	230a      	movne	r3, #10
 80047d2:	2308      	moveq	r3, #8
 80047d4:	2100      	movs	r1, #0
 80047d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047da:	6866      	ldr	r6, [r4, #4]
 80047dc:	60a6      	str	r6, [r4, #8]
 80047de:	2e00      	cmp	r6, #0
 80047e0:	bfa2      	ittt	ge
 80047e2:	6821      	ldrge	r1, [r4, #0]
 80047e4:	f021 0104 	bicge.w	r1, r1, #4
 80047e8:	6021      	strge	r1, [r4, #0]
 80047ea:	b90d      	cbnz	r5, 80047f0 <_printf_i+0x110>
 80047ec:	2e00      	cmp	r6, #0
 80047ee:	d04b      	beq.n	8004888 <_printf_i+0x1a8>
 80047f0:	4616      	mov	r6, r2
 80047f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80047f6:	fb03 5711 	mls	r7, r3, r1, r5
 80047fa:	5dc7      	ldrb	r7, [r0, r7]
 80047fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004800:	462f      	mov	r7, r5
 8004802:	42bb      	cmp	r3, r7
 8004804:	460d      	mov	r5, r1
 8004806:	d9f4      	bls.n	80047f2 <_printf_i+0x112>
 8004808:	2b08      	cmp	r3, #8
 800480a:	d10b      	bne.n	8004824 <_printf_i+0x144>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	07df      	lsls	r7, r3, #31
 8004810:	d508      	bpl.n	8004824 <_printf_i+0x144>
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	6861      	ldr	r1, [r4, #4]
 8004816:	4299      	cmp	r1, r3
 8004818:	bfde      	ittt	le
 800481a:	2330      	movle	r3, #48	@ 0x30
 800481c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004820:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004824:	1b92      	subs	r2, r2, r6
 8004826:	6122      	str	r2, [r4, #16]
 8004828:	f8cd a000 	str.w	sl, [sp]
 800482c:	464b      	mov	r3, r9
 800482e:	aa03      	add	r2, sp, #12
 8004830:	4621      	mov	r1, r4
 8004832:	4640      	mov	r0, r8
 8004834:	f7ff fee6 	bl	8004604 <_printf_common>
 8004838:	3001      	adds	r0, #1
 800483a:	d14a      	bne.n	80048d2 <_printf_i+0x1f2>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b004      	add	sp, #16
 8004842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	f043 0320 	orr.w	r3, r3, #32
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	4833      	ldr	r0, [pc, #204]	@ (800491c <_printf_i+0x23c>)
 8004850:	2778      	movs	r7, #120	@ 0x78
 8004852:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	6831      	ldr	r1, [r6, #0]
 800485a:	061f      	lsls	r7, r3, #24
 800485c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004860:	d402      	bmi.n	8004868 <_printf_i+0x188>
 8004862:	065f      	lsls	r7, r3, #25
 8004864:	bf48      	it	mi
 8004866:	b2ad      	uxthmi	r5, r5
 8004868:	6031      	str	r1, [r6, #0]
 800486a:	07d9      	lsls	r1, r3, #31
 800486c:	bf44      	itt	mi
 800486e:	f043 0320 	orrmi.w	r3, r3, #32
 8004872:	6023      	strmi	r3, [r4, #0]
 8004874:	b11d      	cbz	r5, 800487e <_printf_i+0x19e>
 8004876:	2310      	movs	r3, #16
 8004878:	e7ac      	b.n	80047d4 <_printf_i+0xf4>
 800487a:	4827      	ldr	r0, [pc, #156]	@ (8004918 <_printf_i+0x238>)
 800487c:	e7e9      	b.n	8004852 <_printf_i+0x172>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f023 0320 	bic.w	r3, r3, #32
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	e7f6      	b.n	8004876 <_printf_i+0x196>
 8004888:	4616      	mov	r6, r2
 800488a:	e7bd      	b.n	8004808 <_printf_i+0x128>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	6961      	ldr	r1, [r4, #20]
 8004892:	1d18      	adds	r0, r3, #4
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	062e      	lsls	r6, r5, #24
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	d501      	bpl.n	80048a0 <_printf_i+0x1c0>
 800489c:	6019      	str	r1, [r3, #0]
 800489e:	e002      	b.n	80048a6 <_printf_i+0x1c6>
 80048a0:	0668      	lsls	r0, r5, #25
 80048a2:	d5fb      	bpl.n	800489c <_printf_i+0x1bc>
 80048a4:	8019      	strh	r1, [r3, #0]
 80048a6:	2300      	movs	r3, #0
 80048a8:	6123      	str	r3, [r4, #16]
 80048aa:	4616      	mov	r6, r2
 80048ac:	e7bc      	b.n	8004828 <_printf_i+0x148>
 80048ae:	6833      	ldr	r3, [r6, #0]
 80048b0:	1d1a      	adds	r2, r3, #4
 80048b2:	6032      	str	r2, [r6, #0]
 80048b4:	681e      	ldr	r6, [r3, #0]
 80048b6:	6862      	ldr	r2, [r4, #4]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fb fc90 	bl	80001e0 <memchr>
 80048c0:	b108      	cbz	r0, 80048c6 <_printf_i+0x1e6>
 80048c2:	1b80      	subs	r0, r0, r6
 80048c4:	6060      	str	r0, [r4, #4]
 80048c6:	6863      	ldr	r3, [r4, #4]
 80048c8:	6123      	str	r3, [r4, #16]
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048d0:	e7aa      	b.n	8004828 <_printf_i+0x148>
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	4632      	mov	r2, r6
 80048d6:	4649      	mov	r1, r9
 80048d8:	4640      	mov	r0, r8
 80048da:	47d0      	blx	sl
 80048dc:	3001      	adds	r0, #1
 80048de:	d0ad      	beq.n	800483c <_printf_i+0x15c>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	079b      	lsls	r3, r3, #30
 80048e4:	d413      	bmi.n	800490e <_printf_i+0x22e>
 80048e6:	68e0      	ldr	r0, [r4, #12]
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	4298      	cmp	r0, r3
 80048ec:	bfb8      	it	lt
 80048ee:	4618      	movlt	r0, r3
 80048f0:	e7a6      	b.n	8004840 <_printf_i+0x160>
 80048f2:	2301      	movs	r3, #1
 80048f4:	4632      	mov	r2, r6
 80048f6:	4649      	mov	r1, r9
 80048f8:	4640      	mov	r0, r8
 80048fa:	47d0      	blx	sl
 80048fc:	3001      	adds	r0, #1
 80048fe:	d09d      	beq.n	800483c <_printf_i+0x15c>
 8004900:	3501      	adds	r5, #1
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	9903      	ldr	r1, [sp, #12]
 8004906:	1a5b      	subs	r3, r3, r1
 8004908:	42ab      	cmp	r3, r5
 800490a:	dcf2      	bgt.n	80048f2 <_printf_i+0x212>
 800490c:	e7eb      	b.n	80048e6 <_printf_i+0x206>
 800490e:	2500      	movs	r5, #0
 8004910:	f104 0619 	add.w	r6, r4, #25
 8004914:	e7f5      	b.n	8004902 <_printf_i+0x222>
 8004916:	bf00      	nop
 8004918:	08017b29 	.word	0x08017b29
 800491c:	08017b3a 	.word	0x08017b3a

08004920 <memmove>:
 8004920:	4288      	cmp	r0, r1
 8004922:	b510      	push	{r4, lr}
 8004924:	eb01 0402 	add.w	r4, r1, r2
 8004928:	d902      	bls.n	8004930 <memmove+0x10>
 800492a:	4284      	cmp	r4, r0
 800492c:	4623      	mov	r3, r4
 800492e:	d807      	bhi.n	8004940 <memmove+0x20>
 8004930:	1e43      	subs	r3, r0, #1
 8004932:	42a1      	cmp	r1, r4
 8004934:	d008      	beq.n	8004948 <memmove+0x28>
 8004936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800493a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800493e:	e7f8      	b.n	8004932 <memmove+0x12>
 8004940:	4402      	add	r2, r0
 8004942:	4601      	mov	r1, r0
 8004944:	428a      	cmp	r2, r1
 8004946:	d100      	bne.n	800494a <memmove+0x2a>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800494e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004952:	e7f7      	b.n	8004944 <memmove+0x24>

08004954 <_init>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr

08004960 <_fini>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr
