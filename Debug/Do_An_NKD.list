
Do_An_NKD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b62c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000281f0  0800b7c0  0800b7c0  0000c7c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080339b0  080339b0  000352d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080339b0  080339b0  000349b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080339b8  080339b8  000352d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080339b8  080339b8  000349b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080339bc  080339bc  000349bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  080339c0  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000352d4  2**0
                  CONTENTS
 10 .bss          00000a6c  200002d4  200002d4  000352d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d40  20000d40  000352d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000352d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f1c  00000000  00000000  00035304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbc  00000000  00000000  00047220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00049ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a27  00000000  00000000  0004b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d19  00000000  00000000  0006eaf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceff5  00000000  00000000  00082810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151805  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000de7  00000000  00000000  00151848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005d08  00000000  00000000  00152630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00158338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7a4 	.word	0x0800b7a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800b7a4 	.word	0x0800b7a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9be 	b.w	8000f70 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7e:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <XPT2046_TouchSelect+0x14>)
 8000f80:	f005 f986 	bl	8006290 <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020400 	.word	0x40020400

08000f8c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f96:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <XPT2046_TouchUnselect+0x14>)
 8000f98:	f005 f97a 	bl	8006290 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <XPT2046_TouchPressed+0x1c>)
 8000fac:	f005 f958 	bl	8006260 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	@ 0x30
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 8000fce:	f7ff ffd1 	bl	8000f74 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	77bb      	strb	r3, [r7, #30]
 8000fe2:	e03f      	b.n	8001064 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000fe4:	f7ff ffde 	bl	8000fa4 <XPT2046_TouchPressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d13b      	bne.n	800106c <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000ff4:	7ffb      	ldrb	r3, [r7, #31]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4945      	ldr	r1, [pc, #276]	@ (8001118 <XPT2046_TouchGetCoordinates+0x154>)
 8001002:	4846      	ldr	r0, [pc, #280]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001004:	f005 fe97 	bl	8006d36 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	4942      	ldr	r1, [pc, #264]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001016:	4841      	ldr	r0, [pc, #260]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001018:	f005 ffd1 	bl	8006fbe <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2201      	movs	r2, #1
 8001022:	4940      	ldr	r1, [pc, #256]	@ (8001124 <XPT2046_TouchGetCoordinates+0x160>)
 8001024:	483d      	ldr	r0, [pc, #244]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001026:	f005 fe86 	bl	8006d36 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	493a      	ldr	r1, [pc, #232]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001038:	4838      	ldr	r0, [pc, #224]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 800103a:	f005 ffc0 	bl	8006fbe <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	7b7a      	ldrb	r2, [r7, #13]
 8001044:	4313      	orrs	r3, r2
 8001046:	461a      	mov	r2, r3
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	4413      	add	r3, r2
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	7c7a      	ldrb	r2, [r7, #17]
 8001054:	4313      	orrs	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800105e:	7fbb      	ldrb	r3, [r7, #30]
 8001060:	3301      	adds	r3, #1
 8001062:	77bb      	strb	r3, [r7, #30]
 8001064:	7fbb      	ldrb	r3, [r7, #30]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d9bc      	bls.n	8000fe4 <XPT2046_TouchGetCoordinates+0x20>
 800106a:	e000      	b.n	800106e <XPT2046_TouchGetCoordinates+0xaa>
            break;
 800106c:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800106e:	f7ff ff8d 	bl	8000f8c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d801      	bhi.n	800107c <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8001078:	2300      	movs	r3, #0
 800107a:	e049      	b.n	8001110 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001088:	4293      	cmp	r3, r2
 800108a:	d802      	bhi.n	8001092 <XPT2046_TouchGetCoordinates+0xce>
 800108c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001090:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f247 1248 	movw	r2, #29000	@ 0x7148
 8001098:	4293      	cmp	r3, r2
 800109a:	d902      	bls.n	80010a2 <XPT2046_TouchGetCoordinates+0xde>
 800109c:	f247 1348 	movw	r3, #29000	@ 0x7148
 80010a0:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <XPT2046_TouchGetCoordinates+0xf4>
 80010b2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80010b6:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010be:	4293      	cmp	r3, r2
 80010c0:	d902      	bls.n	80010c8 <XPT2046_TouchGetCoordinates+0x104>
 80010c2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80010c6:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4613      	mov	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	f5a3 2347 	sub.w	r3, r3, #815104	@ 0xc7000
 80010d6:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <XPT2046_TouchGetCoordinates+0x164>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0b5b      	lsrs	r3, r3, #13
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80010f6:	f5a3 53e8 	sub.w	r3, r3, #7424	@ 0x1d00
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <XPT2046_TouchGetCoordinates+0x168>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0b5b      	lsrs	r3, r3, #13
 8001102:	b29b      	uxth	r3, r3
 8001104:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001108:	b29a      	uxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	080316a4 	.word	0x080316a4
 800111c:	20000500 	.word	0x20000500
 8001120:	080316a8 	.word	0x080316a8
 8001124:	080316ac 	.word	0x080316ac
 8001128:	51eb851f 	.word	0x51eb851f
 800112c:	4e8b8659 	.word	0x4e8b8659

08001130 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <case_insensitive_strcmp+0x16>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e056      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d10d      	bne.n	800116e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e050      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800115e:	2300      	movs	r3, #0
 8001160:	e04a      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d103      	bne.n	800118e <case_insensitive_strcmp+0x5e>
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f103 0220 	add.w	r2, r3, #32
 800118c:	e000      	b.n	8001190 <case_insensitive_strcmp+0x60>
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73bb      	strb	r3, [r7, #14]
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	3301      	adds	r3, #1
 800119a:	491a      	ldr	r1, [pc, #104]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <case_insensitive_strcmp+0x7e>
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	3320      	adds	r3, #32
 80011ac:	e000      	b.n	80011b0 <case_insensitive_strcmp+0x80>
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d0d0      	beq.n	8001156 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	737b      	strb	r3, [r7, #13]
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d103      	bne.n	80011d4 <case_insensitive_strcmp+0xa4>
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	f103 0220 	add.w	r2, r3, #32
 80011d2:	e000      	b.n	80011d6 <case_insensitive_strcmp+0xa6>
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	733b      	strb	r3, [r7, #12]
 80011dc:	7b3b      	ldrb	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011e2:	440b      	add	r3, r1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <case_insensitive_strcmp+0xc4>
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	3320      	adds	r3, #32
 80011f2:	e000      	b.n	80011f6 <case_insensitive_strcmp+0xc6>
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	080337b0 	.word	0x080337b0

08001208 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	4798      	blx	r3
 8001218:	60f8      	str	r0, [r7, #12]
    if (node)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001220:	2228      	movs	r2, #40	@ 0x28
 8001222:	2100      	movs	r1, #0
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f008 faed 	bl	8009804 <memset>
    }

    return node;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001240:	e03d      	b.n	80012be <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <cJSON_Delete+0x32>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffe7 	bl	8001234 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <cJSON_Delete+0x58>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <cJSON_Delete+0x9c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6912      	ldr	r2, [r2, #16]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
            item->valuestring = NULL;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <cJSON_Delete+0x7e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6a12      	ldr	r2, [r2, #32]
 80012a8:	4610      	mov	r0, r2
 80012aa:	4798      	blx	r3
            item->string = NULL;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
        item = next;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1be      	bne.n	8001242 <cJSON_Delete+0xe>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000

080012d4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80012d8:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	0000      	movs	r0, r0
	...

080012e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b098      	sub	sp, #96	@ 0x60
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001302:	f7ff ffe7 	bl	80012d4 <get_decimal_point>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <parse_number+0x36>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <parse_number+0x3a>
    {
        return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e0a0      	b.n	8001464 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001326:	e03d      	b.n	80013a4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001332:	440b      	add	r3, r1
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b45      	cmp	r3, #69	@ 0x45
 800133a:	dc17      	bgt.n	800136c <parse_number+0x84>
 800133c:	2b2b      	cmp	r3, #43	@ 0x2b
 800133e:	db40      	blt.n	80013c2 <parse_number+0xda>
 8001340:	3b2b      	subs	r3, #43	@ 0x2b
 8001342:	2201      	movs	r2, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	4b4c      	ldr	r3, [pc, #304]	@ (8001478 <parse_number+0x190>)
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10b      	bne.n	8001370 <parse_number+0x88>
 8001358:	f002 0308 	and.w	r3, r2, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800136a:	e02a      	b.n	80013c2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800136c:	2b65      	cmp	r3, #101	@ 0x65
 800136e:	d128      	bne.n	80013c2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137a:	440b      	add	r3, r1
 800137c:	4413      	add	r3, r2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f107 0208 	add.w	r2, r7, #8
 8001384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
                break;
 800138c:	e007      	b.n	800139e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001394:	4413      	add	r3, r2
 8001396:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800139a:	701a      	strb	r2, [r3, #0]
                break;
 800139c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800139e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a0:	3301      	adds	r3, #1
 80013a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80013a8:	d80d      	bhi.n	80013c6 <parse_number+0xde>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <parse_number+0xde>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013b6:	441a      	add	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3b3      	bcc.n	8001328 <parse_number+0x40>
        }
    }
loop_end:
 80013c0:	e001      	b.n	80013c6 <parse_number+0xde>
                goto loop_end;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <parse_number+0xe0>
loop_end:
 80013c6:	bf00      	nop
    number_c_string[i] = '\0';
 80013c8:	f107 0208 	add.w	r2, r7, #8
 80013cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80013d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 f8de 	bl	80095a0 <strtod>
 80013e4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80013e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80013f2:	2300      	movs	r3, #0
 80013f4:	e036      	b.n	8001464 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001400:	a31b      	add	r3, pc, #108	@ (adr r3, 8001470 <parse_number+0x188>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800140a:	f7ff fb8b 	bl	8000b24 <__aeabi_dcmpge>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	e015      	b.n	800144a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <parse_number+0x194>)
 8001424:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001428:	f7ff fb72 	bl	8000b10 <__aeabi_dcmple>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	e006      	b.n	800144a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800143c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001440:	f7ff fb84 	bl	8000b4c <__aeabi_d2iz>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2208      	movs	r2, #8
 800144e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	1a8a      	subs	r2, r1, r2
 800145c:	441a      	add	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	609a      	str	r2, [r3, #8]
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3760      	adds	r7, #96	@ 0x60
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	ffc00000 	.word	0xffc00000
 8001474:	41dfffff 	.word	0x41dfffff
 8001478:	04007fe5 	.word	0x04007fe5
 800147c:	c1e00000 	.word	0xc1e00000

08001480 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	e04c      	b.n	8001530 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2f      	cmp	r3, #47	@ 0x2f
 80014a0:	d90f      	bls.n	80014c2 <parse_hex4+0x42>
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b39      	cmp	r3, #57	@ 0x39
 80014ac:	d809      	bhi.n	80014c2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	3b30      	subs	r3, #48	@ 0x30
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e02d      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b40      	cmp	r3, #64	@ 0x40
 80014cc:	d90f      	bls.n	80014ee <parse_hex4+0x6e>
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b46      	cmp	r3, #70	@ 0x46
 80014d8:	d809      	bhi.n	80014ee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	3b37      	subs	r3, #55	@ 0x37
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e017      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b60      	cmp	r3, #96	@ 0x60
 80014f8:	d90f      	bls.n	800151a <parse_hex4+0x9a>
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b66      	cmp	r3, #102	@ 0x66
 8001504:	d809      	bhi.n	800151a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	3b57      	subs	r3, #87	@ 0x57
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e001      	b.n	800151e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e00c      	b.n	8001538 <parse_hex4+0xb8>
        }

        if (i < 3)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d802      	bhi.n	800152a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d9af      	bls.n	8001496 <parse_hex4+0x16>
        }
    }

    return h;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b05      	cmp	r3, #5
 800157c:	f340 80b7 	ble.w	80016ee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	3302      	adds	r3, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff7b 	bl	8001480 <parse_hex4>
 800158a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001592:	d304      	bcc.n	800159e <utf16_literal_to_utf8+0x5a>
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800159a:	f0c0 80aa 	bcc.w	80016f2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80015a4:	d337      	bcc.n	8001616 <utf16_literal_to_utf8+0xd2>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015ac:	d233      	bcs.n	8001616 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80015b8:	230c      	movs	r3, #12
 80015ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	f340 8096 	ble.w	80016f6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d0:	f040 8093 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b75      	cmp	r3, #117	@ 0x75
 80015dc:	f040 808d 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3302      	adds	r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff4b 	bl	8001480 <parse_hex4>
 80015ea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015f2:	f0c0 8084 	bcc.w	80016fe <utf16_literal_to_utf8+0x1ba>
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80015fc:	d27f      	bcs.n	80016fe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	029a      	lsls	r2, r3, #10
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <utf16_literal_to_utf8+0x1cc>)
 8001604:	4013      	ands	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800160c:	4313      	orrs	r3, r2
 800160e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001614:	e004      	b.n	8001620 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001616:	2306      	movs	r3, #6
 8001618:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	2b7f      	cmp	r3, #127	@ 0x7f
 8001624:	d803      	bhi.n	800162e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800162c:	e01f      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001634:	d206      	bcs.n	8001644 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001636:	2302      	movs	r3, #2
 8001638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	f887 3020 	strb.w	r3, [r7, #32]
 8001642:	e014      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164a:	d206      	bcs.n	800165a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001652:	23e0      	movs	r3, #224	@ 0xe0
 8001654:	f887 3020 	strb.w	r3, [r7, #32]
 8001658:	e009      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001660:	d24f      	bcs.n	8001702 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001668:	23f0      	movs	r3, #240	@ 0xf0
 800166a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800166e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001672:	3b01      	subs	r3, #1
 8001674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001678:	e015      	b.n	80016a6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800168c:	440b      	add	r3, r1
 800168e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800169c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016a0:	3b01      	subs	r3, #1
 80016a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e5      	bne.n	800167a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80016ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d909      	bls.n	80016ca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80016e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80016ec:	e00b      	b.n	8001706 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80016ee:	bf00      	nop
 80016f0:	e008      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80016f2:	bf00      	nop
 80016f4:	e006      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016f6:	bf00      	nop
 80016f8:	e004      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001702:	bf00      	nop

fail:
    return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000ffc00 	.word	0x000ffc00

08001714 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b22      	cmp	r3, #34	@ 0x22
 8001750:	f040 8103 	bne.w	800195a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800175c:	e017      	b.n	800178e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b5c      	cmp	r3, #92	@ 0x5c
 8001764:	d110      	bne.n	8001788 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	461a      	mov	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	f080 80f1 	bcs.w	800195e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	3301      	adds	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	3301      	adds	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	461a      	mov	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d203      	bcs.n	80017a8 <parse_string+0x94>
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b22      	cmp	r3, #34	@ 0x22
 80017a6:	d1da      	bne.n	800175e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	f080 80d3 	bcs.w	8001962 <parse_string+0x24e>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b22      	cmp	r3, #34	@ 0x22
 80017c2:	f040 80ce 	bne.w	8001962 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	3201      	adds	r2, #1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3
 80017e8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ba 	beq.w	8001966 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80017f6:	e094      	b.n	8001922 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80017fe:	d008      	beq.n	8001812 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001802:	1c53      	adds	r3, r2, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c59      	adds	r1, r3, #1
 800180a:	60f9      	str	r1, [r7, #12]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e087      	b.n	8001922 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001812:	2302      	movs	r3, #2
 8001814:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f340 80a4 	ble.w	800196a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b75      	cmp	r3, #117	@ 0x75
 800182a:	f300 80a0 	bgt.w	800196e <parse_string+0x25a>
 800182e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001830:	da04      	bge.n	800183c <parse_string+0x128>
 8001832:	2b22      	cmp	r3, #34	@ 0x22
 8001834:	d05c      	beq.n	80018f0 <parse_string+0x1dc>
 8001836:	2b2f      	cmp	r3, #47	@ 0x2f
 8001838:	d05a      	beq.n	80018f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800183a:	e098      	b.n	800196e <parse_string+0x25a>
            switch (input_pointer[1])
 800183c:	3b5c      	subs	r3, #92	@ 0x5c
 800183e:	2b19      	cmp	r3, #25
 8001840:	f200 8095 	bhi.w	800196e <parse_string+0x25a>
 8001844:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <parse_string+0x138>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	080018f1 	.word	0x080018f1
 8001850:	0800196f 	.word	0x0800196f
 8001854:	0800196f 	.word	0x0800196f
 8001858:	0800196f 	.word	0x0800196f
 800185c:	0800196f 	.word	0x0800196f
 8001860:	0800196f 	.word	0x0800196f
 8001864:	080018b5 	.word	0x080018b5
 8001868:	0800196f 	.word	0x0800196f
 800186c:	0800196f 	.word	0x0800196f
 8001870:	0800196f 	.word	0x0800196f
 8001874:	080018c1 	.word	0x080018c1
 8001878:	0800196f 	.word	0x0800196f
 800187c:	0800196f 	.word	0x0800196f
 8001880:	0800196f 	.word	0x0800196f
 8001884:	0800196f 	.word	0x0800196f
 8001888:	0800196f 	.word	0x0800196f
 800188c:	0800196f 	.word	0x0800196f
 8001890:	0800196f 	.word	0x0800196f
 8001894:	080018cd 	.word	0x080018cd
 8001898:	0800196f 	.word	0x0800196f
 800189c:	0800196f 	.word	0x0800196f
 80018a0:	0800196f 	.word	0x0800196f
 80018a4:	080018d9 	.word	0x080018d9
 80018a8:	0800196f 	.word	0x0800196f
 80018ac:	080018e5 	.word	0x080018e5
 80018b0:	08001901 	.word	0x08001901
                    *output_pointer++ = '\b';
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60fa      	str	r2, [r7, #12]
 80018ba:	2208      	movs	r2, #8
 80018bc:	701a      	strb	r2, [r3, #0]
                    break;
 80018be:	e02c      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60fa      	str	r2, [r7, #12]
 80018c6:	220c      	movs	r2, #12
 80018c8:	701a      	strb	r2, [r3, #0]
                    break;
 80018ca:	e026      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60fa      	str	r2, [r7, #12]
 80018d2:	220a      	movs	r2, #10
 80018d4:	701a      	strb	r2, [r3, #0]
                    break;
 80018d6:	e020      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60fa      	str	r2, [r7, #12]
 80018de:	220d      	movs	r2, #13
 80018e0:	701a      	strb	r2, [r3, #0]
                    break;
 80018e2:	e01a      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60fa      	str	r2, [r7, #12]
 80018ea:	2209      	movs	r2, #9
 80018ec:	701a      	strb	r2, [r3, #0]
                    break;
 80018ee:	e014      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	60f9      	str	r1, [r7, #12]
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	701a      	strb	r2, [r3, #0]
                    break;
 80018fe:	e00c      	b.n	800191a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	461a      	mov	r2, r3
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190a:	f7ff fe1b 	bl	8001544 <utf16_literal_to_utf8>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d02c      	beq.n	8001972 <parse_string+0x25e>
                    break;
 8001918:	bf00      	nop
            }
            input_pointer += sequence_length;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4413      	add	r3, r2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	f4ff af66 	bcc.w	80017f8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2210      	movs	r2, #16
 8001936:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	609a      	str	r2, [r3, #8]

    return true;
 8001956:	2301      	movs	r3, #1
 8001958:	e020      	b.n	800199c <parse_string+0x288>
        goto fail;
 800195a:	bf00      	nop
 800195c:	e00a      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800195e:	bf00      	nop
 8001960:	e008      	b.n	8001974 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001962:	bf00      	nop
 8001964:	e006      	b.n	8001974 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001966:	bf00      	nop
 8001968:	e004      	b.n	8001974 <parse_string+0x260>
                goto fail;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <parse_string+0x260>
                        goto fail;
 8001972:	bf00      	nop

fail:
    if (output != NULL)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	69f8      	ldr	r0, [r7, #28]
 8001980:	4798      	blx	r3
        output = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	461a      	mov	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	609a      	str	r2, [r3, #8]
    }

    return false;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <buffer_skip_whitespace+0x16>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e02c      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <buffer_skip_whitespace+0x2c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d306      	bcc.n	80019de <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e021      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d9e9      	bls.n	80019d4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d104      	bne.n	8001a16 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e01c      	b.n	8001a80 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <skip_utf8_bom+0x5a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d211      	bcs.n	8001a7e <skip_utf8_bom+0x5a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	2203      	movs	r2, #3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <skip_utf8_bom+0x64>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f007 feee 	bl	800984a <strncmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d104      	bne.n	8001a7e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	1cda      	adds	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800b7f8 	.word	0x0800b7f8

08001a8c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e00c      	b.n	8001abc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7fe fb9e 	bl	80001e4 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	6979      	ldr	r1, [r7, #20]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f805 	bl	8001ac4 <cJSON_ParseWithLengthOpts>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	@ 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d042      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03f      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001b0e:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001b1a:	4836      	ldr	r0, [pc, #216]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b1c:	f7ff fb74 	bl	8001208 <cJSON_New_Item>
 8001b20:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02e      	beq.n	8001b86 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff79 	bl	8001a24 <skip_utf8_bom>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff35 	bl	80019a4 <buffer_skip_whitespace>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b40:	f000 f868 	bl	8001c14 <parse_value>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01f      	beq.n	8001b8a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff25 	bl	80019a4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d215      	bcs.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	e031      	b.n	8001be6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001b82:	bf00      	nop
 8001b84:	e004      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001b8e:	bf00      	nop

fail:
    if (item != NULL)
 8001b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001b96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b98:	f7ff fb4c 	bl	8001234 <cJSON_Delete>
    }

    if (value != NULL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d202      	bcs.n	8001bb8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e005      	b.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	441a      	add	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3738      	adds	r7, #56	@ 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200002f0 	.word	0x200002f0
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff41 	bl	8001a8c <cJSON_ParseWithOpts>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <parse_value+0x18>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <parse_value+0x1c>
    {
        return false; /* no input */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e0d2      	b.n	8001dd6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01d      	beq.n	8001c72 <parse_value+0x5e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d816      	bhi.n	8001c72 <parse_value+0x5e>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4963      	ldr	r1, [pc, #396]	@ (8001de0 <parse_value+0x1cc>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 fdf9 	bl	800984a <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1d1a      	adds	r2, r3, #4
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]
        return true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0b1      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01d      	beq.n	8001cb4 <parse_value+0xa0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	1d5a      	adds	r2, r3, #5
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d816      	bhi.n	8001cb4 <parse_value+0xa0>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2205      	movs	r2, #5
 8001c92:	4954      	ldr	r1, [pc, #336]	@ (8001de4 <parse_value+0x1d0>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 fdd8 	bl	800984a <strncmp>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	1d5a      	adds	r2, r3, #5
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	609a      	str	r2, [r3, #8]
        return true;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e090      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <parse_value+0xe8>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d819      	bhi.n	8001cfc <parse_value+0xe8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4944      	ldr	r1, [pc, #272]	@ (8001de8 <parse_value+0x1d4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f007 fdb7 	bl	800984a <strncmp>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
        return true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e06c      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d013      	beq.n	8001d2a <parse_value+0x116>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20d      	bcs.n	8001d2a <parse_value+0x116>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b22      	cmp	r3, #34	@ 0x22
 8001d1c:	d105      	bne.n	8001d2a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fcf7 	bl	8001714 <parse_string>
 8001d26:	4603      	mov	r3, r0
 8001d28:	e055      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <parse_value+0x164>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d21d      	bcs.n	8001d78 <parse_value+0x164>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d4a:	d00f      	beq.n	8001d6c <parse_value+0x158>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d5a:	d90d      	bls.n	8001d78 <parse_value+0x164>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b39      	cmp	r3, #57	@ 0x39
 8001d6a:	d805      	bhi.n	8001d78 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff faba 	bl	80012e8 <parse_number>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e02e      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d013      	beq.n	8001da6 <parse_value+0x192>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d20d      	bcs.n	8001da6 <parse_value+0x192>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d98:	d105      	bne.n	8001da6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f825 	bl	8001dec <parse_array>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e017      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <parse_value+0x1c0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20d      	bcs.n	8001dd4 <parse_value+0x1c0>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b7b      	cmp	r3, #123	@ 0x7b
 8001dc6:	d105      	bne.n	8001dd4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8d2 	bl	8001f74 <parse_object>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	e000      	b.n	8001dd6 <parse_value+0x1c2>
    }

    return false;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800b7cc 	.word	0x0800b7cc
 8001de4:	0800b7fc 	.word	0x0800b7fc
 8001de8:	0800b804 	.word	0x0800b804

08001dec <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d301      	bcc.n	8001e0c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e0af      	b.n	8001f6c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e24:	f040 8094 	bne.w	8001f50 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f7ff fdb6 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <parse_array+0x6e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d207      	bcs.n	8001e5a <parse_array+0x6e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e58:	d061      	beq.n	8001f1e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <parse_array+0x80>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d305      	bcc.n	8001e78 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e76:	e072      	b.n	8001f5e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9be 	bl	8001208 <cJSON_New_Item>
 8001e8c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05f      	beq.n	8001f54 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e007      	b.n	8001eb4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff fd70 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f7ff fea4 	bl	8001c14 <parse_value>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d042      	beq.n	8001f58 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fd66 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <parse_array+0x10e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d207      	bcs.n	8001efa <parse_array+0x10e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ef8:	d0c3      	beq.n	8001e82 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02d      	beq.n	8001f5c <parse_array+0x170>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d227      	bcs.n	8001f5c <parse_array+0x170>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b5d      	cmp	r3, #93	@ 0x5d
 8001f1a:	d11f      	bne.n	8001f5c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001f1c:	e000      	b.n	8001f20 <parse_array+0x134>
        goto success;
 8001f1e:	bf00      	nop
    input_buffer->depth--;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <parse_array+0x14a>
        head->prev = current_item;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	609a      	str	r2, [r3, #8]

    return true;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e00d      	b.n	8001f6c <parse_array+0x180>
        goto fail;
 8001f50:	bf00      	nop
 8001f52:	e004      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001f54:	bf00      	nop
 8001f56:	e002      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001f5c:	bf00      	nop

fail:
    if (head != NULL)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f7ff f965 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f8e:	d301      	bcc.n	8001f94 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001f90:	2300      	movs	r3, #0
 8001f92:	e0f7      	b.n	8002184 <parse_object+0x210>
    }
    input_buffer->depth++;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80db 	beq.w	800215c <parse_object+0x1e8>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f080 80d4 	bcs.w	800215c <parse_object+0x1e8>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b7b      	cmp	r3, #123	@ 0x7b
 8001fc2:	f040 80cb 	bne.w	800215c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f7ff fce7 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <parse_object+0x86>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <parse_object+0x86>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ff6:	f000 8098 	beq.w	800212a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <parse_object+0x98>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d305      	bcc.n	8002018 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
        goto fail;
 8002016:	e0ae      	b.n	8002176 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3310      	adds	r3, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f8ee 	bl	8001208 <cJSON_New_Item>
 800202c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8095 	beq.w	8002160 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e007      	b.n	8002056 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8083 	beq.w	8002164 <parse_object+0x1f0>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d27b      	bcs.n	8002164 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7ff fc94 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	6938      	ldr	r0, [r7, #16]
 8002080:	f7ff fb48 	bl	8001714 <parse_string>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06e      	beq.n	8002168 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f7ff fc8a 	bl	80019a4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d063      	beq.n	800216c <parse_object+0x1f8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d25d      	bcs.n	800216c <parse_object+0x1f8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80020be:	d155      	bne.n	800216c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f7ff fc6a 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	6938      	ldr	r0, [r7, #16]
 80020d4:	f7ff fd9e 	bl	8001c14 <parse_value>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d048      	beq.n	8002170 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7ff fc60 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <parse_object+0x192>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d207      	bcs.n	8002106 <parse_object+0x192>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2c      	cmp	r3, #44	@ 0x2c
 8002104:	d08d      	beq.n	8002022 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d033      	beq.n	8002174 <parse_object+0x200>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d22d      	bcs.n	8002174 <parse_object+0x200>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b7d      	cmp	r3, #125	@ 0x7d
 8002126:	d125      	bne.n	8002174 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002128:	e000      	b.n	800212c <parse_object+0x1b8>
        goto success; /* empty object */
 800212a:	bf00      	nop
    input_buffer->depth--;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <parse_object+0x1ce>
        head->prev = current_item;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	609a      	str	r2, [r3, #8]
    return true;
 8002158:	2301      	movs	r3, #1
 800215a:	e013      	b.n	8002184 <parse_object+0x210>
        goto fail; /* not an object */
 800215c:	bf00      	nop
 800215e:	e00a      	b.n	8002176 <parse_object+0x202>
            goto fail; /* allocation failure */
 8002160:	bf00      	nop
 8002162:	e008      	b.n	8002176 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002164:	bf00      	nop
 8002166:	e006      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <parse_object+0x202>
            goto fail; /* invalid object */
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <parse_object+0x202>
        goto fail; /* expected end of object */
 8002174:	bf00      	nop

fail:
    if (head != NULL)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff f859 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <get_array_item+0x18>
    {
        return NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e010      	b.n	80021c6 <get_array_item+0x3a>
    }

    current_child = array->child;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021aa:	e005      	b.n	80021b8 <get_array_item+0x2c>
    {
        index--;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <get_array_item+0x38>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f3      	bne.n	80021ac <get_array_item+0x20>
    }

    return current_child;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da01      	bge.n	80021e6 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e005      	b.n	80021f2 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffce 	bl	800218c <get_array_item>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <get_object_item+0x1c>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <get_object_item+0x20>
    {
        return NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	e033      	b.n	8002282 <get_object_item+0x88>
    }

    current_element = object->child;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002226:	e002      	b.n	800222e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <get_object_item+0x74>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <get_object_item+0x74>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4619      	mov	r1, r3
 8002242:	68b8      	ldr	r0, [r7, #8]
 8002244:	f7fd ffc4 	bl	80001d0 <strcmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ec      	bne.n	8002228 <get_object_item+0x2e>
 800224e:	e00e      	b.n	800226e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <get_object_item+0x74>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4619      	mov	r1, r3
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f7fe ff64 	bl	8001130 <case_insensitive_strcmp>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <get_object_item+0x82>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <get_object_item+0x86>
        return NULL;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <get_object_item+0x88>
    }

    return current_element;
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002294:	2200      	movs	r2, #0
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffae 	bl	80021fa <get_object_item>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <cJSON_IsTrue+0x12>
    {
        return false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e007      	b.n	80022ca <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <cJSON_IsBool+0x12>
    {
        return false;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e008      	b.n	80022fa <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <cJSON_IsString+0x12>
    {
        return false;
 8002314:	2300      	movs	r3, #0
 8002316:	e007      	b.n	8002328 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b10      	cmp	r3, #16
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <cJSON_IsArray+0x12>
    {
        return false;
 8002342:	2300      	movs	r3, #0
 8002344:	e007      	b.n	8002356 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800236a:	2300      	movs	r3, #0
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	2301      	movs	r3, #1
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	2200      	movs	r2, #0
 8002376:	2101      	movs	r1, #1
 8002378:	2000      	movs	r0, #0
 800237a:	f001 fccf 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4bae      	ldr	r3, [pc, #696]	@ (800263c <lcdInit+0x2d8>)
 8002384:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8002386:	2300      	movs	r3, #0
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2301      	movs	r3, #1
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	2201      	movs	r2, #1
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f001 fcc1 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4ba8      	ldr	r3, [pc, #672]	@ (8002640 <lcdInit+0x2dc>)
 80023a0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80023a2:	2300      	movs	r3, #0
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2001      	movs	r0, #1
 80023b2:	f001 fcb3 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4ba2      	ldr	r3, [pc, #648]	@ (8002644 <lcdInit+0x2e0>)
 80023bc:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80023be:	2300      	movs	r3, #0
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	2301      	movs	r3, #1
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	2201      	movs	r2, #1
 80023ca:	2101      	movs	r1, #1
 80023cc:	2001      	movs	r0, #1
 80023ce:	f001 fca5 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002648 <lcdInit+0x2e4>)
 80023d8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80023da:	f001 fc75 	bl	8003cc8 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80023de:	2028      	movs	r0, #40	@ 0x28
 80023e0:	f001 fc7c 	bl	8003cdc <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80023e4:	20cf      	movs	r0, #207	@ 0xcf
 80023e6:	f001 fc79 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 fc86 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x83);
 80023f0:	2083      	movs	r0, #131	@ 0x83
 80023f2:	f001 fc83 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x30);
 80023f6:	2030      	movs	r0, #48	@ 0x30
 80023f8:	f001 fc80 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xED);
 80023fc:	20ed      	movs	r0, #237	@ 0xed
 80023fe:	f001 fc6d 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x64);
 8002402:	2064      	movs	r0, #100	@ 0x64
 8002404:	f001 fc7a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x03);
 8002408:	2003      	movs	r0, #3
 800240a:	f001 fc77 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x12);
 800240e:	2012      	movs	r0, #18
 8002410:	f001 fc74 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x81);
 8002414:	2081      	movs	r0, #129	@ 0x81
 8002416:	f001 fc71 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xE8);
 800241a:	20e8      	movs	r0, #232	@ 0xe8
 800241c:	f001 fc5e 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x85);
 8002420:	2085      	movs	r0, #133	@ 0x85
 8002422:	f001 fc6b 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x01);
 8002426:	2001      	movs	r0, #1
 8002428:	f001 fc68 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x79);
 800242c:	2079      	movs	r0, #121	@ 0x79
 800242e:	f001 fc65 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xCB);
 8002432:	20cb      	movs	r0, #203	@ 0xcb
 8002434:	f001 fc52 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x39);
 8002438:	2039      	movs	r0, #57	@ 0x39
 800243a:	f001 fc5f 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x2C);
 800243e:	202c      	movs	r0, #44	@ 0x2c
 8002440:	f001 fc5c 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f001 fc59 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x34);
 800244a:	2034      	movs	r0, #52	@ 0x34
 800244c:	f001 fc56 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x02);
 8002450:	2002      	movs	r0, #2
 8002452:	f001 fc53 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xF7);
 8002456:	20f7      	movs	r0, #247	@ 0xf7
 8002458:	f001 fc40 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x20);
 800245c:	2020      	movs	r0, #32
 800245e:	f001 fc4d 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xEA);
 8002462:	20ea      	movs	r0, #234	@ 0xea
 8002464:	f001 fc3a 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f001 fc47 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f001 fc44 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8002474:	20c0      	movs	r0, #192	@ 0xc0
 8002476:	f001 fc31 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x26);
 800247a:	2026      	movs	r0, #38	@ 0x26
 800247c:	f001 fc3e 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8002480:	20c1      	movs	r0, #193	@ 0xc1
 8002482:	f001 fc2b 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x11);
 8002486:	2011      	movs	r0, #17
 8002488:	f001 fc38 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 800248c:	20c5      	movs	r0, #197	@ 0xc5
 800248e:	f001 fc25 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x35);
 8002492:	2035      	movs	r0, #53	@ 0x35
 8002494:	f001 fc32 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3E);
 8002498:	203e      	movs	r0, #62	@ 0x3e
 800249a:	f001 fc2f 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800249e:	20c7      	movs	r0, #199	@ 0xc7
 80024a0:	f001 fc1c 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0xBE);
 80024a4:	20be      	movs	r0, #190	@ 0xbe
 80024a6:	f001 fc29 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80024aa:	2036      	movs	r0, #54	@ 0x36
 80024ac:	f001 fc16 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80024b0:	4b62      	ldr	r3, [pc, #392]	@ (800263c <lcdInit+0x2d8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fc21 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80024ba:	203a      	movs	r0, #58	@ 0x3a
 80024bc:	f001 fc0e 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x55);
 80024c0:	2055      	movs	r0, #85	@ 0x55
 80024c2:	f001 fc1b 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80024c6:	20b1      	movs	r0, #177	@ 0xb1
 80024c8:	f001 fc08 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f001 fc15 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1B);
 80024d2:	201b      	movs	r0, #27
 80024d4:	f001 fc12 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xF2);
 80024d8:	20f2      	movs	r0, #242	@ 0xf2
 80024da:	f001 fbff 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x08);
 80024de:	2008      	movs	r0, #8
 80024e0:	f001 fc0c 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80024e4:	2026      	movs	r0, #38	@ 0x26
 80024e6:	f001 fbf9 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x01);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f001 fc06 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80024f0:	20e0      	movs	r0, #224	@ 0xe0
 80024f2:	f001 fbf3 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x1F);
 80024f6:	201f      	movs	r0, #31
 80024f8:	f001 fc00 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1A);
 80024fc:	201a      	movs	r0, #26
 80024fe:	f001 fbfd 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x18);
 8002502:	2018      	movs	r0, #24
 8002504:	f001 fbfa 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0A);
 8002508:	200a      	movs	r0, #10
 800250a:	f001 fbf7 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0F);
 800250e:	200f      	movs	r0, #15
 8002510:	f001 fbf4 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x06);
 8002514:	2006      	movs	r0, #6
 8002516:	f001 fbf1 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x45);
 800251a:	2045      	movs	r0, #69	@ 0x45
 800251c:	f001 fbee 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x87);
 8002520:	2087      	movs	r0, #135	@ 0x87
 8002522:	f001 fbeb 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x32);
 8002526:	2032      	movs	r0, #50	@ 0x32
 8002528:	f001 fbe8 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0A);
 800252c:	200a      	movs	r0, #10
 800252e:	f001 fbe5 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x07);
 8002532:	2007      	movs	r0, #7
 8002534:	f001 fbe2 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x02);
 8002538:	2002      	movs	r0, #2
 800253a:	f001 fbdf 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x07);
 800253e:	2007      	movs	r0, #7
 8002540:	f001 fbdc 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 8002544:	2005      	movs	r0, #5
 8002546:	f001 fbd9 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f001 fbd6 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8002550:	20e1      	movs	r0, #225	@ 0xe1
 8002552:	f001 fbc3 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f001 fbd0 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x25);
 800255c:	2025      	movs	r0, #37	@ 0x25
 800255e:	f001 fbcd 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x27);
 8002562:	2027      	movs	r0, #39	@ 0x27
 8002564:	f001 fbca 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 8002568:	2005      	movs	r0, #5
 800256a:	f001 fbc7 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x10);
 800256e:	2010      	movs	r0, #16
 8002570:	f001 fbc4 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x09);
 8002574:	2009      	movs	r0, #9
 8002576:	f001 fbc1 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3A);
 800257a:	203a      	movs	r0, #58	@ 0x3a
 800257c:	f001 fbbe 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x78);
 8002580:	2078      	movs	r0, #120	@ 0x78
 8002582:	f001 fbbb 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x4D);
 8002586:	204d      	movs	r0, #77	@ 0x4d
 8002588:	f001 fbb8 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 800258c:	2005      	movs	r0, #5
 800258e:	f001 fbb5 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x18);
 8002592:	2018      	movs	r0, #24
 8002594:	f001 fbb2 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0D);
 8002598:	200d      	movs	r0, #13
 800259a:	f001 fbaf 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x38);
 800259e:	2038      	movs	r0, #56	@ 0x38
 80025a0:	f001 fbac 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3A);
 80025a4:	203a      	movs	r0, #58	@ 0x3a
 80025a6:	f001 fba9 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1F);
 80025aa:	201f      	movs	r0, #31
 80025ac:	f001 fba6 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80025b0:	202a      	movs	r0, #42	@ 0x2a
 80025b2:	f001 fb93 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f001 fba0 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f001 fb9d 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f001 fb9a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0xEF);
 80025c8:	20ef      	movs	r0, #239	@ 0xef
 80025ca:	f001 fb97 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80025ce:	202b      	movs	r0, #43	@ 0x2b
 80025d0:	f001 fb84 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f001 fb91 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f001 fb8e 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x01);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f001 fb8b 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3F);
 80025e6:	203f      	movs	r0, #63	@ 0x3f
 80025e8:	f001 fb88 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80025ec:	20b7      	movs	r0, #183	@ 0xb7
 80025ee:	f001 fb75 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x07);
 80025f2:	2007      	movs	r0, #7
 80025f4:	f001 fb82 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80025f8:	20b6      	movs	r0, #182	@ 0xb6
 80025fa:	f001 fb6f 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x0A);
 80025fe:	200a      	movs	r0, #10
 8002600:	f001 fb7c 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x82);
 8002604:	2082      	movs	r0, #130	@ 0x82
 8002606:	f001 fb79 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x27);
 800260a:	2027      	movs	r0, #39	@ 0x27
 800260c:	f001 fb76 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f001 fb73 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8002616:	2011      	movs	r0, #17
 8002618:	f001 fb60 	bl	8003cdc <lcdWriteCommand>
  HAL_Delay(100);
 800261c:	2064      	movs	r0, #100	@ 0x64
 800261e:	f003 fabb 	bl	8005b98 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8002622:	2029      	movs	r0, #41	@ 0x29
 8002624:	f001 fb5a 	bl	8003cdc <lcdWriteCommand>
  HAL_Delay(100);
 8002628:	2064      	movs	r0, #100	@ 0x64
 800262a:	f003 fab5 	bl	8005b98 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800262e:	202c      	movs	r0, #44	@ 0x2c
 8002630:	f001 fb54 	bl	8003cdc <lcdWriteCommand>
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002fc 	.word	0x200002fc
 8002640:	200002fd 	.word	0x200002fd
 8002644:	200002fe 	.word	0x200002fe
 8002648:	200002ff 	.word	0x200002ff

0800264c <drawAlignedText>:

void drawAlignedText(char *text, int yPosition, int sectionWidth, int size, int backColor)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
    int textWidth = getTextWidth(text, size);
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 faec 	bl	8002c3a <getTextWidth>
 8002662:	6178      	str	r0, [r7, #20]
    int xPosition = (sectionWidth - textWidth) / 2;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	0fda      	lsrs	r2, r3, #31
 800266c:	4413      	add	r3, r2
 800266e:	105b      	asrs	r3, r3, #1
 8002670:	613b      	str	r3, [r7, #16]
    lcdSetCursor(xPosition, yPosition);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	b29b      	uxth	r3, r3
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	b292      	uxth	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fa91 	bl	8003ba4 <lcdSetCursor>
    if (backColor == 1)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d103      	bne.n	8002690 <drawAlignedText+0x44>
    {
    	lcdPrintf(text);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f001 f8e9 	bl	8003860 <lcdPrintf>
    }
    else
    {
    	lcdPrintfNoBackColor(text);
    }
}
 800268e:	e002      	b.n	8002696 <drawAlignedText+0x4a>
    	lcdPrintfNoBackColor(text);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f001 f971 	bl	8003978 <lcdPrintfNoBackColor>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <drawClearDay>:

void drawClearDay(uint16_t xPosition, uint16_t yPosition)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	460a      	mov	r2, r1
 80026a8:	80fb      	strh	r3, [r7, #6]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80bb      	strh	r3, [r7, #4]
	uint8_t sunRadius = 12;
 80026ae:	230c      	movs	r3, #12
 80026b0:	73fb      	strb	r3, [r7, #15]

	lcdFillCircle(xPosition, yPosition, sunRadius, COLOR_YELLOW);
 80026b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	b21a      	sxth	r2, r3
 80026be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80026c2:	f000 fc57 	bl	8002f74 <lcdFillCircle>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <drawCloudyDay>:

void drawCloudyDay(uint16_t xPosition, uint16_t yPosition)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	460a      	mov	r2, r1
 80026d8:	80fb      	strh	r3, [r7, #6]
 80026da:	4613      	mov	r3, r2
 80026dc:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	3b0b      	subs	r3, #11
 80026e2:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	3305      	adds	r3, #5
 80026e8:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 80026ee:	88bb      	ldrh	r3, [r7, #4]
 80026f0:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	3308      	adds	r3, #8
 80026f6:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	3308      	adds	r3, #8
 80026fc:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 80026fe:	2308      	movs	r3, #8
 8002700:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002702:	230a      	movs	r3, #10
 8002704:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 8002706:	2308      	movs	r3, #8
 8002708:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 800270a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800270e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	b21a      	sxth	r2, r3
 8002716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800271a:	f000 fc2b 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 800271e:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002722:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002726:	7abb      	ldrb	r3, [r7, #10]
 8002728:	b21a      	sxth	r2, r3
 800272a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272e:	f000 fc21 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 8002732:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002736:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800273a:	7a7b      	ldrb	r3, [r7, #9]
 800273c:	b21a      	sxth	r2, r3
 800273e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002742:	f000 fc17 	bl	8002f74 <lcdFillCircle>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <drawRainyDay>:

void drawRainyDay(uint16_t xPosition, uint16_t yPosition)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af02      	add	r7, sp, #8
 8002754:	4603      	mov	r3, r0
 8002756:	460a      	mov	r2, r1
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	80bb      	strh	r3, [r7, #4]
	drawDiagonal(xPosition - 10, yPosition - 4, 11, COLOR_WHITE, -1);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	3b0a      	subs	r3, #10
 8002762:	b29b      	uxth	r3, r3
 8002764:	b218      	sxth	r0, r3
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	3b04      	subs	r3, #4
 800276a:	b29b      	uxth	r3, r3
 800276c:	b219      	sxth	r1, r3
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002778:	220b      	movs	r2, #11
 800277a:	f000 fa29 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition + 2, yPosition, 15, COLOR_WHITE, -1);
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	3302      	adds	r3, #2
 8002782:	b29b      	uxth	r3, r3
 8002784:	b218      	sxth	r0, r3
 8002786:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002794:	220f      	movs	r2, #15
 8002796:	f000 fa1b 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 17, yPosition + 9, 13, COLOR_WHITE, -1);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	3b11      	subs	r3, #17
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b218      	sxth	r0, r3
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	3309      	adds	r3, #9
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	b219      	sxth	r1, r3
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b4:	220d      	movs	r2, #13
 80027b6:	f000 fa0b 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 7, yPosition + 3, 10, COLOR_WHITE, -1);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	3b07      	subs	r3, #7
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b218      	sxth	r0, r3
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	3303      	adds	r3, #3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b219      	sxth	r1, r3
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027d4:	220a      	movs	r2, #10
 80027d6:	f000 f9fb 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 4, yPosition + 15, 12, COLOR_WHITE, -1);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	3b04      	subs	r3, #4
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b218      	sxth	r0, r3
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	330f      	adds	r3, #15
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b219      	sxth	r1, r3
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027f4:	220c      	movs	r2, #12
 80027f6:	f000 f9eb 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 9, yPosition + 13, 8, COLOR_WHITE, -1);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	3b09      	subs	r3, #9
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b218      	sxth	r0, r3
 8002802:	88bb      	ldrh	r3, [r7, #4]
 8002804:	330d      	adds	r3, #13
 8002806:	b29b      	uxth	r3, r3
 8002808:	b219      	sxth	r1, r3
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002814:	2208      	movs	r2, #8
 8002816:	f000 f9db 	bl	8002bd0 <drawDiagonal>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <drawSnowyDay>:

void drawSnowyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	80fb      	strh	r3, [r7, #6]
 8002830:	4613      	mov	r3, r2
 8002832:	80bb      	strh	r3, [r7, #4]
	lcdSetTextFont(&Font16);
 8002834:	4823      	ldr	r0, [pc, #140]	@ (80028c4 <drawSnowyDay+0xa0>)
 8002836:	f001 f925 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(xPosition, yPosition);
 800283a:	88ba      	ldrh	r2, [r7, #4]
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f9af 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002846:	4820      	ldr	r0, [pc, #128]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002848:	f001 f896 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition - 10);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	3b0a      	subs	r3, #10
 8002850:	b29a      	uxth	r2, r3
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	3b0a      	subs	r3, #10
 8002856:	b29b      	uxth	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f001 f9a2 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002860:	4819      	ldr	r0, [pc, #100]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002862:	f001 f889 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition + 10);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	330a      	adds	r3, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	330a      	adds	r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f001 f995 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 800287a:	4813      	ldr	r0, [pc, #76]	@ (80028c8 <drawSnowyDay+0xa4>)
 800287c:	f001 f87c 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition - 10);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	330a      	adds	r3, #10
 8002884:	b29a      	uxth	r2, r3
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	3b0a      	subs	r3, #10
 800288a:	b29b      	uxth	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f001 f988 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002896:	f001 f86f 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition + 10);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	3b0a      	subs	r3, #10
 800289e:	b29a      	uxth	r2, r3
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	330a      	adds	r3, #10
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f001 f97b 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <drawSnowyDay+0xa4>)
 80028b0:	f001 f862 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font12);
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <drawSnowyDay+0xa8>)
 80028b6:	f001 f8e5 	bl	8003a84 <lcdSetTextFont>

}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000014 	.word	0x20000014
 80028c8:	0800b80c 	.word	0x0800b80c
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <drawFoggyDay>:

void drawFoggyDay(uint16_t xPosition, uint16_t yPosition)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4603      	mov	r3, r0
 80028d8:	460a      	mov	r2, r1
 80028da:	80fb      	strh	r3, [r7, #6]
 80028dc:	4613      	mov	r3, r2
 80028de:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	3b0b      	subs	r3, #11
 80028e4:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	3305      	adds	r3, #5
 80028ea:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	3308      	adds	r3, #8
 80028f8:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	3308      	adds	r3, #8
 80028fe:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 8002900:	2308      	movs	r3, #8
 8002902:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002904:	230a      	movs	r3, #10
 8002906:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 8002908:	2308      	movs	r3, #8
 800290a:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 800290c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002910:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	b21a      	sxth	r2, r3
 8002918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291c:	f000 fb2a 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 8002920:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002924:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	b21a      	sxth	r2, r3
 800292c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002930:	f000 fb20 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 8002934:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002938:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800293c:	7a7b      	ldrb	r3, [r7, #9]
 800293e:	b21a      	sxth	r2, r3
 8002940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002944:	f000 fb16 	bl	8002f74 <lcdFillCircle>

	lcdDrawLine(xPosition - 10, yPosition + 2, xPosition + 10, yPosition + 2, COLOR_BLACK);
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	3b0a      	subs	r3, #10
 800294c:	b29b      	uxth	r3, r3
 800294e:	b218      	sxth	r0, r3
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	3302      	adds	r3, #2
 8002954:	b29b      	uxth	r3, r3
 8002956:	b219      	sxth	r1, r3
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	330a      	adds	r3, #10
 800295c:	b29b      	uxth	r3, r3
 800295e:	b21a      	sxth	r2, r3
 8002960:	88bb      	ldrh	r3, [r7, #4]
 8002962:	3302      	adds	r3, #2
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21b      	sxth	r3, r3
 8002968:	2400      	movs	r4, #0
 800296a:	9400      	str	r4, [sp, #0]
 800296c:	f000 fa64 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 10, yPosition + 3, xPosition + 10, yPosition + 3, COLOR_BLACK);
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	3b0a      	subs	r3, #10
 8002974:	b29b      	uxth	r3, r3
 8002976:	b218      	sxth	r0, r3
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	3303      	adds	r3, #3
 800297c:	b29b      	uxth	r3, r3
 800297e:	b219      	sxth	r1, r3
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	330a      	adds	r3, #10
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	3303      	adds	r3, #3
 800298c:	b29b      	uxth	r3, r3
 800298e:	b21b      	sxth	r3, r3
 8002990:	2400      	movs	r4, #0
 8002992:	9400      	str	r4, [sp, #0]
 8002994:	f000 fa50 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 6, xPosition - 9, yPosition + 6, COLOR_BLACK);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	3b19      	subs	r3, #25
 800299c:	b29b      	uxth	r3, r3
 800299e:	b218      	sxth	r0, r3
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	3306      	adds	r3, #6
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b219      	sxth	r1, r3
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	3b09      	subs	r3, #9
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	3306      	adds	r3, #6
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	2400      	movs	r4, #0
 80029ba:	9400      	str	r4, [sp, #0]
 80029bc:	f000 fa3c 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 7, xPosition - 9, yPosition + 7, COLOR_BLACK);
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	3b19      	subs	r3, #25
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b218      	sxth	r0, r3
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	3307      	adds	r3, #7
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b219      	sxth	r1, r3
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	3b09      	subs	r3, #9
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	88bb      	ldrh	r3, [r7, #4]
 80029da:	3307      	adds	r3, #7
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21b      	sxth	r3, r3
 80029e0:	2400      	movs	r4, #0
 80029e2:	9400      	str	r4, [sp, #0]
 80029e4:	f000 fa28 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 8, xPosition + 15, yPosition + 8, COLOR_BLACK);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	3302      	adds	r3, #2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b218      	sxth	r0, r3
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	3308      	adds	r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b219      	sxth	r1, r3
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	330f      	adds	r3, #15
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	3308      	adds	r3, #8
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	2400      	movs	r4, #0
 8002a0a:	9400      	str	r4, [sp, #0]
 8002a0c:	f000 fa14 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 9, xPosition + 15, yPosition + 9, COLOR_BLACK);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	3302      	adds	r3, #2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b218      	sxth	r0, r3
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	3309      	adds	r3, #9
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b219      	sxth	r1, r3
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	330f      	adds	r3, #15
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	88bb      	ldrh	r3, [r7, #4]
 8002a2a:	3309      	adds	r3, #9
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	2400      	movs	r4, #0
 8002a32:	9400      	str	r4, [sp, #0]
 8002a34:	f000 fa00 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 10, xPosition + 5, yPosition + 10, COLOR_BLACK);
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	3b09      	subs	r3, #9
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b218      	sxth	r0, r3
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	330a      	adds	r3, #10
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b219      	sxth	r1, r3
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	3305      	adds	r3, #5
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	330a      	adds	r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	2400      	movs	r4, #0
 8002a5a:	9400      	str	r4, [sp, #0]
 8002a5c:	f000 f9ec 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 11, xPosition + 5, yPosition + 11, COLOR_BLACK);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	3b09      	subs	r3, #9
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b218      	sxth	r0, r3
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	330b      	adds	r3, #11
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b219      	sxth	r1, r3
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	3305      	adds	r3, #5
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	330b      	adds	r3, #11
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	2400      	movs	r4, #0
 8002a82:	9400      	str	r4, [sp, #0]
 8002a84:	f000 f9d8 	bl	8002e38 <lcdDrawLine>
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}

08002a90 <drawStormyDay>:

void drawStormyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08b      	sub	sp, #44	@ 0x2c
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	80fb      	strh	r3, [r7, #6]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	3b0b      	subs	r3, #11
 8002aa4:	837b      	strh	r3, [r7, #26]
	uint16_t cloudCenterY1 = yPosition + 5;
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	3305      	adds	r3, #5
 8002aaa:	833b      	strh	r3, [r7, #24]

	uint16_t cloudCenterX2 = xPosition;
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY2 = yPosition;
 8002ab0:	88bb      	ldrh	r3, [r7, #4]
 8002ab2:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX3 = xPosition + 8;
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY3 = yPosition + 8;
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	3308      	adds	r3, #8
 8002abe:	823b      	strh	r3, [r7, #16]

	uint8_t cloudRadius1 = 8;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	73fb      	strb	r3, [r7, #15]
	uint8_t cloudRadius2 = 10;
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	73bb      	strb	r3, [r7, #14]
	uint8_t cloudRadius3 = 8;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	737b      	strb	r3, [r7, #13]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_BLACK);
 8002acc:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 8002ad0:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f000 fa4b 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_BLACK);
 8002ade:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002ae2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	2300      	movs	r3, #0
 8002aec:	f000 fa42 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_BLACK);
 8002af0:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002af4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	f000 fa39 	bl	8002f74 <lcdFillCircle>

	for (uint16_t i = 0; i <= 8; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	83fb      	strh	r3, [r7, #30]
 8002b06:	e024      	b.n	8002b52 <drawStormyDay+0xc2>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 4 + i, xPosition + 5 - i, yPosition + 4 + i, COLOR_YELLOW);
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	8bfb      	ldrh	r3, [r7, #30]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b05      	subs	r3, #5
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b218      	sxth	r0, r3
 8002b16:	88ba      	ldrh	r2, [r7, #4]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3304      	adds	r3, #4
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b219      	sxth	r1, r3
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	8bfb      	ldrh	r3, [r7, #30]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3305      	adds	r3, #5
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b21c      	sxth	r4, r3
 8002b32:	88ba      	ldrh	r2, [r7, #4]
 8002b34:	8bfb      	ldrh	r3, [r7, #30]
 8002b36:	4413      	add	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	4622      	mov	r2, r4
 8002b48:	f000 f976 	bl	8002e38 <lcdDrawLine>
	for (uint16_t i = 0; i <= 8; i++)
 8002b4c:	8bfb      	ldrh	r3, [r7, #30]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	83fb      	strh	r3, [r7, #30]
 8002b52:	8bfb      	ldrh	r3, [r7, #30]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d9d7      	bls.n	8002b08 <drawStormyDay+0x78>
	}
	for (uint16_t i = 0; i <= 7; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	83bb      	strh	r3, [r7, #28]
 8002b5c:	e026      	b.n	8002bac <drawStormyDay+0x11c>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 13 + i, xPosition + 3 - 2 * i, yPosition + 13 + i, COLOR_YELLOW);
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	8bbb      	ldrh	r3, [r7, #28]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b05      	subs	r3, #5
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b218      	sxth	r0, r3
 8002b6c:	88ba      	ldrh	r2, [r7, #4]
 8002b6e:	8bbb      	ldrh	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	330d      	adds	r3, #13
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b219      	sxth	r1, r3
 8002b7a:	8bbb      	ldrh	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3303      	adds	r3, #3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b21c      	sxth	r4, r3
 8002b8c:	88ba      	ldrh	r2, [r7, #4]
 8002b8e:	8bbb      	ldrh	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	330d      	adds	r3, #13
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b9e:	9200      	str	r2, [sp, #0]
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	f000 f949 	bl	8002e38 <lcdDrawLine>
	for (uint16_t i = 0; i <= 7; i++)
 8002ba6:	8bbb      	ldrh	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	83bb      	strh	r3, [r7, #28]
 8002bac:	8bbb      	ldrh	r3, [r7, #28]
 8002bae:	2b07      	cmp	r3, #7
 8002bb0:	d9d5      	bls.n	8002b5e <drawStormyDay+0xce>
	}
	lcdDrawPixel(xPosition - 13, yPosition + 21, COLOR_YELLOW);
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	3b0d      	subs	r3, #13
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	3315      	adds	r3, #21
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f000 f87e 	bl	8002cc4 <lcdDrawPixel>
}
 8002bc8:	bf00      	nop
 8002bca:	3724      	adds	r7, #36	@ 0x24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}

08002bd0 <drawDiagonal>:

void drawDiagonal(int16_t x, int16_t y, int16_t length, uint16_t color, int8_t direction)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	80fb      	strh	r3, [r7, #6]
 8002be2:	4603      	mov	r3, r0
 8002be4:	80bb      	strh	r3, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	803b      	strh	r3, [r7, #0]
    for (int16_t i = 0; i < length; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	81fb      	strh	r3, [r7, #14]
 8002bf2:	e017      	b.n	8002c24 <drawDiagonal+0x54>
    {
        lcdDrawPixel(x + i, y + i * direction, color);
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b298      	uxth	r0, r3
 8002bfc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	fb12 f303 	smulbb	r3, r2, r3
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	883a      	ldrh	r2, [r7, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	f000 f856 	bl	8002cc4 <lcdDrawPixel>
    for (int16_t i = 0; i < length; i++)
 8002c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	81fb      	strh	r3, [r7, #14]
 8002c24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbe1      	blt.n	8002bf4 <drawDiagonal+0x24>
    }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}

08002c3a <getTextWidth>:


int getTextWidth(const char *text, int size)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int characterWidth;
	if (size == 12)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d102      	bne.n	8002c50 <getTextWidth+0x16>
    {
    	characterWidth = 7;
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e001      	b.n	8002c54 <getTextWidth+0x1a>
    }
    else
    {
    	characterWidth = 11;
 8002c50:	230b      	movs	r3, #11
 8002c52:	60fb      	str	r3, [r7, #12]
    }
    int length = strlen(text);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd fac5 	bl	80001e4 <strlen>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	60bb      	str	r3, [r7, #8]

    return length * characterWidth;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <lcdFillRGB>:

void lcdFillRGB(uint16_t color)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c84:	885b      	ldrh	r3, [r3, #2]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 ffa3 	bl	8003bd8 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c9a:	885b      	ldrh	r3, [r3, #2]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8002ca2:	e003      	b.n	8002cac <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f828 	bl	8003cfc <lcdWriteData>
  while(dimensions--)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	60fa      	str	r2, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f6      	bne.n	8002ca4 <lcdFillRGB+0x34>
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000024 	.word	0x20000024

08002cc4 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	80bb      	strh	r3, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <lcdDrawPixel+0x44>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d20f      	bcs.n	8002d00 <lcdDrawPixel+0x3c>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <lcdDrawPixel+0x44>)
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20a      	bcs.n	8002d00 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	88b9      	ldrh	r1, [r7, #4]
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	f000 ff71 	bl	8003bd8 <lcdSetWindow>
    lcdWriteData(color);
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ffff 	bl	8003cfc <lcdWriteData>
 8002cfe:	e000      	b.n	8002d02 <lcdDrawPixel+0x3e>
        return;
 8002d00:	bf00      	nop
}
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000024 	.word	0x20000024

08002d0c <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8002d2a:	88ba      	ldrh	r2, [r7, #4]
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d205      	bcs.n	8002d3e <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	80fb      	strh	r3, [r7, #6]
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	88ba      	ldrh	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d303      	bcc.n	8002d50 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d303      	bcc.n	8002d62 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	88ba      	ldrh	r2, [r7, #4]
 8002d66:	8879      	ldrh	r1, [r7, #2]
 8002d68:	88f8      	ldrh	r0, [r7, #6]
 8002d6a:	f000 ff35 	bl	8003bd8 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e006      	b.n	8002d82 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8002d74:	883b      	ldrh	r3, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ffc0 	bl	8003cfc <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	88bb      	ldrh	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	ddf4      	ble.n	8002d74 <lcdDrawHLine+0x68>
	}
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	20000024 	.word	0x20000024

08002d98 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	80fb      	strh	r3, [r7, #6]
 8002daa:	4603      	mov	r3, r0
 8002dac:	80bb      	strh	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	88bb      	ldrh	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d205      	bcs.n	8002dca <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8002dbe:	88bb      	ldrh	r3, [r7, #4]
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	80bb      	strh	r3, [r7, #4]
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d303      	bcc.n	8002ddc <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8002ddc:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dde:	885b      	ldrh	r3, [r3, #2]
 8002de0:	88ba      	ldrh	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d303      	bcc.n	8002dee <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002de8:	885b      	ldrh	r3, [r3, #2]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002df0:	885b      	ldrh	r3, [r3, #2]
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d303      	bcc.n	8002e00 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dfa:	885b      	ldrh	r3, [r3, #2]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	88b9      	ldrh	r1, [r7, #4]
 8002e06:	88f8      	ldrh	r0, [r7, #6]
 8002e08:	f000 fee6 	bl	8003bd8 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e006      	b.n	8002e20 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8002e12:	883b      	ldrh	r3, [r7, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ff71 	bl	8003cfc <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	ddf4      	ble.n	8002e12 <lcdDrawVLine+0x7a>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000024 	.word	0x20000024

08002e38 <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	80fb      	strh	r3, [r7, #6]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80bb      	strh	r3, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
 8002e52:	4613      	mov	r3, r2
 8002e54:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002e56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e64:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e68:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e70:	1acb      	subs	r3, r1, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfb8      	it	lt
 8002e76:	425b      	neglt	r3, r3
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	bfcc      	ite	gt
 8002e7c:	2301      	movgt	r3, #1
 8002e7e:	2300      	movle	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	837b      	strh	r3, [r7, #26]
	if (steep)
 8002e84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	833b      	strh	r3, [r7, #24]
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	80fb      	strh	r3, [r7, #6]
 8002e94:	8b3b      	ldrh	r3, [r7, #24]
 8002e96:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	82fb      	strh	r3, [r7, #22]
 8002e9c:	883b      	ldrh	r3, [r7, #0]
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	8afb      	ldrh	r3, [r7, #22]
 8002ea2:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8002ea4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dd0b      	ble.n	8002ec8 <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	82bb      	strh	r3, [r7, #20]
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	80fb      	strh	r3, [r7, #6]
 8002eb8:	8abb      	ldrh	r3, [r7, #20]
 8002eba:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	827b      	strh	r3, [r7, #18]
 8002ec0:	883b      	ldrh	r3, [r7, #0]
 8002ec2:	80bb      	strh	r3, [r7, #4]
 8002ec4:	8a7b      	ldrh	r3, [r7, #18]
 8002ec6:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8002ed2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002ed6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bfb8      	it	lt
 8002ee0:	425b      	neglt	r3, r3
 8002ee2:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8002ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ee8:	0fda      	lsrs	r2, r3, #31
 8002eea:	4413      	add	r3, r2
 8002eec:	105b      	asrs	r3, r3, #1
 8002eee:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8002ef0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ef4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	da02      	bge.n	8002f02 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	83bb      	strh	r3, [r7, #28]
 8002f00:	e02d      	b.n	8002f5e <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8002f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f06:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8002f08:	e029      	b.n	8002f5e <lcdDrawLine+0x126>
	{
		if (steep)
 8002f0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8002f12:	88bb      	ldrh	r3, [r7, #4]
 8002f14:	88f9      	ldrh	r1, [r7, #6]
 8002f16:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fed3 	bl	8002cc4 <lcdDrawPixel>
 8002f1e:	e005      	b.n	8002f2c <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	88b9      	ldrh	r1, [r7, #4]
 8002f24:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fecc 	bl	8002cc4 <lcdDrawPixel>
		}
		err -= dy;
 8002f2c:	8bfa      	ldrh	r2, [r7, #30]
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8002f36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da09      	bge.n	8002f52 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8002f3e:	88ba      	ldrh	r2, [r7, #4]
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8002f48:	8bfa      	ldrh	r2, [r7, #30]
 8002f4a:	8a3b      	ldrh	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	80fb      	strh	r3, [r7, #6]
 8002f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	ddcf      	ble.n	8002f0a <lcdDrawLine+0xd2>
		}
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3724      	adds	r7, #36	@ 0x24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	80fb      	strh	r3, [r7, #6]
 8002f86:	4603      	mov	r3, r0
 8002f88:	80bb      	strh	r3, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8002f92:	88f8      	ldrh	r0, [r7, #6]
 8002f94:	88ba      	ldrh	r2, [r7, #4]
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b299      	uxth	r1, r3
 8002f9c:	88ba      	ldrh	r2, [r7, #4]
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	f7ff fef5 	bl	8002d98 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8002fae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002fb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002fb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002fba:	883b      	ldrh	r3, [r7, #0]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	f000 f804 	bl	8002fd0 <lcdFillCircleHelper>
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	80fb      	strh	r3, [r7, #6]
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80bb      	strh	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
 8002fea:	4613      	mov	r3, r2
 8002fec:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	f1c3 0301 	rsb	r3, r3, #1
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	461a      	mov	r2, r3
 8003000:	03d2      	lsls	r2, r2, #15
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	b29b      	uxth	r3, r3
 8003008:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8003012:	e07b      	b.n	800310c <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8003014:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0e      	blt.n	800303a <lcdFillCircleHelper+0x6a>
		{
			y--;
 800301c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8003028:	8a7b      	ldrh	r3, [r7, #18]
 800302a:	3302      	adds	r3, #2
 800302c:	b29b      	uxth	r3, r3
 800302e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8003030:	8afa      	ldrh	r2, [r7, #22]
 8003032:	8a7b      	ldrh	r3, [r7, #18]
 8003034:	4413      	add	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800303a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800303e:	b29b      	uxth	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8003046:	8abb      	ldrh	r3, [r7, #20]
 8003048:	3302      	adds	r3, #2
 800304a:	b29b      	uxth	r3, r3
 800304c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800304e:	8afa      	ldrh	r2, [r7, #22]
 8003050:	8abb      	ldrh	r3, [r7, #20]
 8003052:	4413      	add	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d027      	beq.n	80030b2 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	8a3b      	ldrh	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	b298      	uxth	r0, r3
 800306a:	88ba      	ldrh	r2, [r7, #4]
 800306c:	89fb      	ldrh	r3, [r7, #14]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	b299      	uxth	r1, r3
 8003072:	88ba      	ldrh	r2, [r7, #4]
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800307c:	4413      	add	r3, r2
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003086:	f7ff fe87 	bl	8002d98 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	4413      	add	r3, r2
 8003090:	b298      	uxth	r0, r3
 8003092:	88ba      	ldrh	r2, [r7, #4]
 8003094:	8a3b      	ldrh	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b299      	uxth	r1, r3
 800309a:	88ba      	ldrh	r2, [r7, #4]
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030a4:	4413      	add	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030ae:	f7ff fe73 	bl	8002d98 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 80030b2:	787b      	ldrb	r3, [r7, #1]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d027      	beq.n	800310c <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	8a3b      	ldrh	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b298      	uxth	r0, r3
 80030c4:	88ba      	ldrh	r2, [r7, #4]
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b299      	uxth	r1, r3
 80030cc:	88ba      	ldrh	r2, [r7, #4]
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	4413      	add	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030d6:	4413      	add	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030e0:	f7ff fe5a 	bl	8002d98 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b298      	uxth	r0, r3
 80030ec:	88ba      	ldrh	r2, [r7, #4]
 80030ee:	8a3b      	ldrh	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	b299      	uxth	r1, r3
 80030f4:	88ba      	ldrh	r2, [r7, #4]
 80030f6:	8a3b      	ldrh	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	b29b      	uxth	r3, r3
 8003102:	3301      	adds	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003108:	f7ff fe46 	bl	8002d98 <lcdDrawVLine>
	while (x < y)
 800310c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003114:	429a      	cmp	r2, r3
 8003116:	f6ff af7d 	blt.w	8003014 <lcdFillCircleHelper+0x44>
		}
	}
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}

08003124 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4603      	mov	r3, r0
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]
 800313e:	4613      	mov	r3, r2
 8003140:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003146:	4a24      	ldr	r2, [pc, #144]	@ (80031d8 <lcdFillRect+0xb4>)
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	4293      	cmp	r3, r2
 800314c:	da3f      	bge.n	80031ce <lcdFillRect+0xaa>
 800314e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003152:	4a21      	ldr	r2, [pc, #132]	@ (80031d8 <lcdFillRect+0xb4>)
 8003154:	8852      	ldrh	r2, [r2, #2]
 8003156:	4293      	cmp	r3, r2
 8003158:	da39      	bge.n	80031ce <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 800315a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800315e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003162:	4413      	add	r3, r2
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <lcdFillRect+0xb4>)
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	4293      	cmp	r3, r2
 800316a:	dd05      	ble.n	8003178 <lcdFillRect+0x54>
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <lcdFillRect+0xb4>)
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8003178:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800317c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003180:	4413      	add	r3, r2
 8003182:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <lcdFillRect+0xb4>)
 8003184:	8852      	ldrh	r2, [r2, #2]
 8003186:	4293      	cmp	r3, r2
 8003188:	dd05      	ble.n	8003196 <lcdFillRect+0x72>
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <lcdFillRect+0xb4>)
 800318c:	885a      	ldrh	r2, [r3, #2]
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8003196:	88bb      	ldrh	r3, [r7, #4]
 8003198:	81fb      	strh	r3, [r7, #14]
 800319a:	e00e      	b.n	80031ba <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 800319c:	88f8      	ldrh	r0, [r7, #6]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	4413      	add	r3, r2
 80031a4:	b299      	uxth	r1, r3
 80031a6:	89fa      	ldrh	r2, [r7, #14]
 80031a8:	8c3b      	ldrh	r3, [r7, #32]
 80031aa:	f7ff fdaf 	bl	8002d0c <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 80031ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	81fb      	strh	r3, [r7, #14]
 80031ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80031be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031c6:	440b      	add	r3, r1
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dde7      	ble.n	800319c <lcdFillRect+0x78>
 80031cc:	e000      	b.n	80031d0 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80031ce:	bf00      	nop
	}
}
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000024 	.word	0x20000024

080031dc <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	4603      	mov	r3, r0
 80031f0:	80bb      	strh	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
 80031f6:	4613      	mov	r3, r2
 80031f8:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	8b3b      	ldrh	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	b218      	sxth	r0, r3
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	8b3b      	ldrh	r3, [r7, #24]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	b21a      	sxth	r2, r3
 8003212:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003216:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800321a:	8bbb      	ldrh	r3, [r7, #28]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4623      	mov	r3, r4
 8003220:	f7ff ff80 	bl	8003124 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	4413      	add	r3, r2
 800322a:	b29a      	uxth	r2, r3
 800322c:	8b3b      	ldrh	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29b      	uxth	r3, r3
 8003236:	b218      	sxth	r0, r3
 8003238:	88ba      	ldrh	r2, [r7, #4]
 800323a:	8b3b      	ldrh	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	b219      	sxth	r1, r3
 8003242:	883a      	ldrh	r2, [r7, #0]
 8003244:	8b3b      	ldrh	r3, [r7, #24]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	b21b      	sxth	r3, r3
 8003254:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003258:	8bba      	ldrh	r2, [r7, #28]
 800325a:	9201      	str	r2, [sp, #4]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	4622      	mov	r2, r4
 8003262:	f7ff feb5 	bl	8002fd0 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	8b3b      	ldrh	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	b218      	sxth	r0, r3
 8003270:	88ba      	ldrh	r2, [r7, #4]
 8003272:	8b3b      	ldrh	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	b219      	sxth	r1, r3
 800327a:	883a      	ldrh	r2, [r7, #0]
 800327c:	8b3b      	ldrh	r3, [r7, #24]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	b21b      	sxth	r3, r3
 800328c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003290:	8bba      	ldrh	r2, [r7, #28]
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2302      	movs	r3, #2
 8003298:	4622      	mov	r2, r4
 800329a:	f7ff fe99 	bl	8002fd0 <lcdFillCircleHelper>
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <lcdFillTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void lcdFillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80032a6:	b590      	push	{r4, r7, lr}
 80032a8:	b08f      	sub	sp, #60	@ 0x3c
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4604      	mov	r4, r0
 80032ae:	4608      	mov	r0, r1
 80032b0:	4611      	mov	r1, r2
 80032b2:	461a      	mov	r2, r3
 80032b4:	4623      	mov	r3, r4
 80032b6:	80fb      	strh	r3, [r7, #6]
 80032b8:	4603      	mov	r3, r0
 80032ba:	80bb      	strh	r3, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1)
 80032c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80032c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dd0b      	ble.n	80032e8 <lcdFillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 80032d0:	88bb      	ldrh	r3, [r7, #4]
 80032d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032d4:	883b      	ldrh	r3, [r7, #0]
 80032d6:	80bb      	strh	r3, [r7, #4]
 80032d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032da:	803b      	strh	r3, [r7, #0]
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	80fb      	strh	r3, [r7, #6]
 80032e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e6:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2)
 80032e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80032ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dd0f      	ble.n	8003314 <lcdFillTriangle+0x6e>
    {
        swap(y2, y1); swap(x2, x1);
 80032f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80032fa:	883b      	ldrh	r3, [r7, #0]
 80032fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003302:	803b      	strh	r3, [r7, #0]
 8003304:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003308:	843b      	strh	r3, [r7, #32]
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003310:	8c3b      	ldrh	r3, [r7, #32]
 8003312:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1)
 8003314:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003318:	f9b7 3000 	ldrsh.w	r3, [r7]
 800331c:	429a      	cmp	r2, r3
 800331e:	dd0b      	ble.n	8003338 <lcdFillTriangle+0x92>
    {
        swap(y0, y1); swap(x0, x1);
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	83fb      	strh	r3, [r7, #30]
 8003324:	883b      	ldrh	r3, [r7, #0]
 8003326:	80bb      	strh	r3, [r7, #4]
 8003328:	8bfb      	ldrh	r3, [r7, #30]
 800332a:	803b      	strh	r3, [r7, #0]
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	83bb      	strh	r3, [r7, #28]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	80fb      	strh	r3, [r7, #6]
 8003334:	8bbb      	ldrh	r3, [r7, #28]
 8003336:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2)
 8003338:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800333c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003340:	429a      	cmp	r2, r3
 8003342:	d131      	bne.n	80033a8 <lcdFillTriangle+0x102>
    { // Handle awkward all-on-same-line case as its own thing
        a = b = x0;
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003348:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800334a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 800334c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003350:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003354:	429a      	cmp	r2, r3
 8003356:	da02      	bge.n	800335e <lcdFillTriangle+0xb8>
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800335c:	e007      	b.n	800336e <lcdFillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800335e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003362:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003366:	429a      	cmp	r2, r3
 8003368:	dd01      	ble.n	800336e <lcdFillTriangle+0xc8>
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 800336e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8003372:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003376:	429a      	cmp	r2, r3
 8003378:	da03      	bge.n	8003382 <lcdFillTriangle+0xdc>
 800337a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800337e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003380:	e008      	b.n	8003394 <lcdFillTriangle+0xee>
        else if(x2 > b) b = x2;
 8003382:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8003386:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800338a:	429a      	cmp	r2, r3
 800338c:	dd02      	ble.n	8003394 <lcdFillTriangle+0xee>
 800338e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003392:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y0, color);
 8003394:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8003396:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003398:	3301      	adds	r3, #1
 800339a:	b299      	uxth	r1, r3
 800339c:	88ba      	ldrh	r2, [r7, #4]
 800339e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033a2:	f7ff fcb3 	bl	8002d0c <lcdDrawHLine>
        return;
 80033a6:	e0c8      	b.n	800353a <lcdFillTriangle+0x294>
    }

    int16_t
    dx01 = x1 - x0,
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80033b2:	883a      	ldrh	r2, [r7, #0]
 80033b4:	88bb      	ldrh	r3, [r7, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80033bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80033c8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80033cc:	88bb      	ldrh	r3, [r7, #4]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80033d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80033e0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80033e4:	883b      	ldrh	r3, [r7, #0]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80033ec:	2300      	movs	r3, #0
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80033f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80033f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d102      	bne.n	8003406 <lcdFillTriangle+0x160>
 8003400:	883b      	ldrh	r3, [r7, #0]
 8003402:	863b      	strh	r3, [r7, #48]	@ 0x30
 8003404:	e003      	b.n	800340e <lcdFillTriangle+0x168>
    else         last = y1-1; // Skip it
 8003406:	883b      	ldrh	r3, [r7, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++)
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003412:	e038      	b.n	8003486 <lcdFillTriangle+0x1e0>
    {
        a   = x0 + sa / dy01;
 8003414:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341a:	fb92 f3f3 	sdiv	r3, r2, r3
 800341e:	b29a      	uxth	r2, r3
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4413      	add	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8003428:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800342c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003432:	b29a      	uxth	r2, r3
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4413      	add	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 800343c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8003446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800344a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344c:	4413      	add	r3, r2
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 8003450:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8003454:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003458:	429a      	cmp	r2, r3
 800345a:	dd05      	ble.n	8003468 <lcdFillTriangle+0x1c2>
 800345c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800345e:	81bb      	strh	r3, [r7, #12]
 8003460:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003462:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8003468:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 800346a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800346c:	3301      	adds	r3, #1
 800346e:	b299      	uxth	r1, r3
 8003470:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003472:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003476:	f7ff fc49 	bl	8002d0c <lcdDrawHLine>
    for(y=y0; y<=last; y++)
 800347a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800347e:	b29b      	uxth	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003486:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800348a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800348e:	429a      	cmp	r2, r3
 8003490:	ddc0      	ble.n	8003414 <lcdFillTriangle+0x16e>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003496:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800349a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800349e:	1a8a      	subs	r2, r1, r2
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80034a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034aa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80034ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80034b2:	1a8a      	subs	r2, r1, r2
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++)
 80034ba:	e038      	b.n	800352e <lcdFillTriangle+0x288>
    {
        a   = x1 + sa / dy12;
 80034bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	4413      	add	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 80034d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80034da:	b29a      	uxth	r2, r3
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	4413      	add	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 80034e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ea:	4413      	add	r3, r2
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80034ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f4:	4413      	add	r3, r2
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 80034f8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80034fc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003500:	429a      	cmp	r2, r3
 8003502:	dd05      	ble.n	8003510 <lcdFillTriangle+0x26a>
 8003504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003506:	81fb      	strh	r3, [r7, #14]
 8003508:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800350a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8003510:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8003512:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003514:	3301      	adds	r3, #1
 8003516:	b299      	uxth	r1, r3
 8003518:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800351a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800351e:	f7ff fbf5 	bl	8002d0c <lcdDrawHLine>
    for(; y<=y2; y++)
 8003522:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003526:	b29b      	uxth	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800352e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8003532:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003536:	429a      	cmp	r2, r3
 8003538:	ddc0      	ble.n	80034bc <lcdFillTriangle+0x216>
    }
}
 800353a:	373c      	adds	r7, #60	@ 0x3c
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}

08003540 <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	603a      	str	r2, [r7, #0]
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	460b      	mov	r3, r1
 800354e:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003550:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <lcdDrawImage+0xa4>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	429a      	cmp	r2, r3
 8003558:	d23c      	bcs.n	80035d4 <lcdDrawImage+0x94>
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <lcdDrawImage+0xa4>)
 800355c:	885b      	ldrh	r3, [r3, #2]
 800355e:	88ba      	ldrh	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d237      	bcs.n	80035d4 <lcdDrawImage+0x94>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <lcdDrawImage+0xa4>)
 800356e:	8812      	ldrh	r2, [r2, #0]
 8003570:	4293      	cmp	r3, r2
 8003572:	dc31      	bgt.n	80035d8 <lcdDrawImage+0x98>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8003574:	88bb      	ldrh	r3, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	8852      	ldrh	r2, [r2, #2]
 800357a:	4413      	add	r3, r2
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <lcdDrawImage+0xa4>)
 800357e:	8852      	ldrh	r2, [r2, #2]
 8003580:	4293      	cmp	r3, r2
 8003582:	dc2b      	bgt.n	80035dc <lcdDrawImage+0x9c>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e01d      	b.n	80035c6 <lcdDrawImage+0x86>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	b29a      	uxth	r2, r3
 800358e:	88bb      	ldrh	r3, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	b299      	uxth	r1, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	441a      	add	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	889b      	ldrh	r3, [r3, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	fb90 f3f3 	sdiv	r3, r0, r3
 80035ba:	88f8      	ldrh	r0, [r7, #6]
 80035bc:	f000 fb58 	bl	8003c70 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4293      	cmp	r3, r2
 80035d0:	dbdb      	blt.n	800358a <lcdDrawImage+0x4a>
 80035d2:	e004      	b.n	80035de <lcdDrawImage+0x9e>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <lcdDrawImage+0x9e>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <lcdDrawImage+0x9e>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80035dc:	bf00      	nop
	}
}
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000024 	.word	0x20000024

080035e8 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	80fb      	strh	r3, [r7, #6]
 80035fa:	4603      	mov	r3, r0
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
 8003602:	4613      	mov	r3, r2
 8003604:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <lcdDrawChar+0x14c>)
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	4293      	cmp	r3, r2
 8003610:	f280 808c 	bge.w	800372c <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8003614:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003618:	4a46      	ldr	r2, [pc, #280]	@ (8003734 <lcdDrawChar+0x14c>)
 800361a:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800361c:	4293      	cmp	r3, r2
 800361e:	f280 8085 	bge.w	800372c <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003626:	4a44      	ldr	r2, [pc, #272]	@ (8003738 <lcdDrawChar+0x150>)
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	8892      	ldrh	r2, [r2, #4]
 800362c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800362e:	2b00      	cmp	r3, #0
 8003630:	db7c      	blt.n	800372c <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8003632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003636:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <lcdDrawChar+0x150>)
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	88d2      	ldrh	r2, [r2, #6]
 800363c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800363e:	2b00      	cmp	r3, #0
 8003640:	db74      	blt.n	800372c <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8003642:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <lcdDrawChar+0x150>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	88db      	ldrh	r3, [r3, #6]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	b29b      	uxth	r3, r3
 800364c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	73bb      	strb	r3, [r7, #14]
 8003656:	e061      	b.n	800371c <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8003658:	2300      	movs	r3, #0
 800365a:	733b      	strb	r3, [r7, #12]
 800365c:	e055      	b.n	800370a <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800365e:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <lcdDrawChar+0x150>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	3a20      	subs	r2, #32
 8003668:	4933      	ldr	r1, [pc, #204]	@ (8003738 <lcdDrawChar+0x150>)
 800366a:	6889      	ldr	r1, [r1, #8]
 800366c:	88c9      	ldrh	r1, [r1, #6]
 800366e:	fb01 f202 	mul.w	r2, r1, r2
 8003672:	7ab9      	ldrb	r1, [r7, #10]
 8003674:	fb02 f101 	mul.w	r1, r2, r1
 8003678:	7bba      	ldrb	r2, [r7, #14]
 800367a:	7ab8      	ldrb	r0, [r7, #10]
 800367c:	fb00 f202 	mul.w	r2, r0, r2
 8003680:	4411      	add	r1, r2
 8003682:	7b3a      	ldrb	r2, [r7, #12]
 8003684:	440a      	add	r2, r1
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 800368c:	2300      	movs	r3, #0
 800368e:	72fb      	strb	r3, [r7, #11]
 8003690:	e032      	b.n	80036f8 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8003692:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003696:	2b00      	cmp	r3, #0
 8003698:	da12      	bge.n	80036c0 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	b29a      	uxth	r2, r3
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4413      	add	r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b298      	uxth	r0, r3
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	88bb      	ldrh	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	883a      	ldrh	r2, [r7, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7ff fb03 	bl	8002cc4 <lcdDrawPixel>
 80036be:	e015      	b.n	80036ec <lcdDrawChar+0x104>
				}
				else if (bg != color)
 80036c0:	8c3a      	ldrh	r2, [r7, #32]
 80036c2:	883b      	ldrh	r3, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d011      	beq.n	80036ec <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	4413      	add	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	b298      	uxth	r0, r3
 80036da:	7bbb      	ldrb	r3, [r7, #14]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	88bb      	ldrh	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8c3a      	ldrh	r2, [r7, #32]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7ff faec 	bl	8002cc4 <lcdDrawPixel>
				}
				line <<= 1;
 80036ec:	7b7b      	ldrb	r3, [r7, #13]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	3301      	adds	r3, #1
 80036f6:	72fb      	strb	r3, [r7, #11]
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d9c9      	bls.n	8003692 <lcdDrawChar+0xaa>
			}

			xP += 8;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	3308      	adds	r3, #8
 8003702:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8003704:	7b3b      	ldrb	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	733b      	strb	r3, [r7, #12]
 800370a:	7b3a      	ldrb	r2, [r7, #12]
 800370c:	7abb      	ldrb	r3, [r7, #10]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3a5      	bcc.n	800365e <lcdDrawChar+0x76>
		}

		xP = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	3301      	adds	r3, #1
 800371a:	73bb      	strb	r3, [r7, #14]
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	b29a      	uxth	r2, r3
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <lcdDrawChar+0x150>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	88db      	ldrh	r3, [r3, #6]
 8003726:	429a      	cmp	r2, r3
 8003728:	d396      	bcc.n	8003658 <lcdDrawChar+0x70>
 800372a:	e000      	b.n	800372e <lcdDrawChar+0x146>
		return;
 800372c:	bf00      	nop
	}
}
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}
 8003734:	20000024 	.word	0x20000024
 8003738:	2000002c 	.word	0x2000002c

0800373c <lcdDrawCharNoBackColor>:

void lcdDrawCharNoBackColor(int16_t x, int16_t y, unsigned char c, uint16_t color)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	80fb      	strh	r3, [r7, #6]
 800374e:	4603      	mov	r3, r0
 8003750:	80bb      	strh	r3, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
 8003756:	4613      	mov	r3, r2
 8003758:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 800375a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375e:	4a3e      	ldr	r2, [pc, #248]	@ (8003858 <lcdDrawCharNoBackColor+0x11c>)
 8003760:	8812      	ldrh	r2, [r2, #0]
 8003762:	4293      	cmp	r3, r2
 8003764:	da73      	bge.n	800384e <lcdDrawCharNoBackColor+0x112>
			(y >= lcdProperties.height) || 		// Clip bottom
 8003766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800376a:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <lcdDrawCharNoBackColor+0x11c>)
 800376c:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800376e:	4293      	cmp	r3, r2
 8003770:	da6d      	bge.n	800384e <lcdDrawCharNoBackColor+0x112>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	4a39      	ldr	r2, [pc, #228]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	8892      	ldrh	r2, [r2, #4]
 800377c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800377e:	2b00      	cmp	r3, #0
 8003780:	db65      	blt.n	800384e <lcdDrawCharNoBackColor+0x112>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8003782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003786:	4a35      	ldr	r2, [pc, #212]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	88d2      	ldrh	r2, [r2, #6]
 800378c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800378e:	2b00      	cmp	r3, #0
 8003790:	db5d      	blt.n	800384e <lcdDrawCharNoBackColor+0x112>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8003792:	4b32      	ldr	r3, [pc, #200]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	88db      	ldrh	r3, [r3, #6]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	b29b      	uxth	r3, r3
 800379c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	73bb      	strb	r3, [r7, #14]
 80037a6:	e04a      	b.n	800383e <lcdDrawCharNoBackColor+0x102>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	733b      	strb	r3, [r7, #12]
 80037ac:	e03e      	b.n	800382c <lcdDrawCharNoBackColor+0xf0>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	3a20      	subs	r2, #32
 80037b8:	4928      	ldr	r1, [pc, #160]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 80037ba:	6889      	ldr	r1, [r1, #8]
 80037bc:	88c9      	ldrh	r1, [r1, #6]
 80037be:	fb01 f202 	mul.w	r2, r1, r2
 80037c2:	7ab9      	ldrb	r1, [r7, #10]
 80037c4:	fb02 f101 	mul.w	r1, r2, r1
 80037c8:	7bba      	ldrb	r2, [r7, #14]
 80037ca:	7ab8      	ldrb	r0, [r7, #10]
 80037cc:	fb00 f202 	mul.w	r2, r0, r2
 80037d0:	4411      	add	r1, r2
 80037d2:	7b3a      	ldrb	r2, [r7, #12]
 80037d4:	440a      	add	r2, r1
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 80037dc:	2300      	movs	r3, #0
 80037de:	72fb      	strb	r3, [r7, #11]
 80037e0:	e01b      	b.n	800381a <lcdDrawCharNoBackColor+0xde>
			{
				if((line & 0x80) == 0x80)
 80037e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da11      	bge.n	800380e <lcdDrawCharNoBackColor+0xd2>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 80037ea:	7afb      	ldrb	r3, [r7, #11]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4413      	add	r3, r2
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	b298      	uxth	r0, r3
 80037fc:	7bbb      	ldrb	r3, [r7, #14]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	883a      	ldrh	r2, [r7, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	f7ff fa5b 	bl	8002cc4 <lcdDrawPixel>
				}
				line <<= 1;
 800380e:	7b7b      	ldrb	r3, [r7, #13]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	3301      	adds	r3, #1
 8003818:	72fb      	strb	r3, [r7, #11]
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d9e0      	bls.n	80037e2 <lcdDrawCharNoBackColor+0xa6>
			}

			xP += 8;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	3308      	adds	r3, #8
 8003824:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8003826:	7b3b      	ldrb	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	733b      	strb	r3, [r7, #12]
 800382c:	7b3a      	ldrb	r2, [r7, #12]
 800382e:	7abb      	ldrb	r3, [r7, #10]
 8003830:	429a      	cmp	r2, r3
 8003832:	d3bc      	bcc.n	80037ae <lcdDrawCharNoBackColor+0x72>
		}

		xP = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	3301      	adds	r3, #1
 800383c:	73bb      	strb	r3, [r7, #14]
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	b29a      	uxth	r2, r3
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	88db      	ldrh	r3, [r3, #6]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3ad      	bcc.n	80037a8 <lcdDrawCharNoBackColor+0x6c>
 800384c:	e000      	b.n	8003850 <lcdDrawCharNoBackColor+0x114>
		return;
 800384e:	bf00      	nop
	}
}
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bd90      	pop	{r4, r7, pc}
 8003856:	bf00      	nop
 8003858:	20000024 	.word	0x20000024
 800385c:	2000002c 	.word	0x2000002c

08003860 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8003860:	b40f      	push	{r0, r1, r2, r3}
 8003862:	b590      	push	{r4, r7, lr}
 8003864:	b085      	sub	sp, #20
 8003866:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	483d      	ldr	r0, [pc, #244]	@ (8003968 <lcdPrintf+0x108>)
 8003874:	f005 ffbc 	bl	80097f0 <vsiprintf>
	va_end(lst);

	p = buf;
 8003878:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <lcdPrintf+0x108>)
 800387a:	607b      	str	r3, [r7, #4]
	while (*p)
 800387c:	e067      	b.n	800394e <lcdPrintf+0xee>
	{
		if (*p == '\n')
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d10c      	bne.n	80038a0 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8003886:	4b39      	ldr	r3, [pc, #228]	@ (800396c <lcdPrintf+0x10c>)
 8003888:	885a      	ldrh	r2, [r3, #2]
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <lcdPrintf+0x110>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	88db      	ldrh	r3, [r3, #6]
 8003890:	4413      	add	r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	4b35      	ldr	r3, [pc, #212]	@ (800396c <lcdPrintf+0x10c>)
 8003896:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8003898:	4b34      	ldr	r3, [pc, #208]	@ (800396c <lcdPrintf+0x10c>)
 800389a:	2200      	movs	r2, #0
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e04a      	b.n	8003936 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0d      	cmp	r3, #13
 80038a6:	d046      	beq.n	8003936 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d10b      	bne.n	80038c8 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <lcdPrintf+0x10c>)
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <lcdPrintf+0x110>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4413      	add	r3, r2
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4b2a      	ldr	r3, [pc, #168]	@ (800396c <lcdPrintf+0x10c>)
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e036      	b.n	8003936 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <lcdPrintf+0x10c>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b218      	sxth	r0, r3
 80038ce:	4b27      	ldr	r3, [pc, #156]	@ (800396c <lcdPrintf+0x10c>)
 80038d0:	885b      	ldrh	r3, [r3, #2]
 80038d2:	b219      	sxth	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <lcdPrintf+0x110>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b29c      	uxth	r4, r3
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <lcdPrintf+0x110>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4623      	mov	r3, r4
 80038e8:	f7ff fe7e 	bl	80035e8 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 80038ec:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <lcdPrintf+0x10c>)
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <lcdPrintf+0x110>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	4b1c      	ldr	r3, [pc, #112]	@ (800396c <lcdPrintf+0x10c>)
 80038fc:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <lcdPrintf+0x110>)
 8003900:	7b1b      	ldrb	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <lcdPrintf+0xd6>
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <lcdPrintf+0x10c>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <lcdPrintf+0x114>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <lcdPrintf+0x110>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	889b      	ldrh	r3, [r3, #4]
 8003918:	1acb      	subs	r3, r1, r3
 800391a:	429a      	cmp	r2, r3
 800391c:	dd0b      	ble.n	8003936 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 800391e:	4b13      	ldr	r3, [pc, #76]	@ (800396c <lcdPrintf+0x10c>)
 8003920:	885a      	ldrh	r2, [r3, #2]
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <lcdPrintf+0x110>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	88db      	ldrh	r3, [r3, #6]
 8003928:	4413      	add	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <lcdPrintf+0x10c>)
 800392e:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <lcdPrintf+0x10c>)
 8003932:	2200      	movs	r2, #0
 8003934:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3301      	adds	r3, #1
 800393a:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <lcdPrintf+0x10c>)
 800393e:	885a      	ldrh	r2, [r3, #2]
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <lcdPrintf+0x114>)
 8003942:	885b      	ldrh	r3, [r3, #2]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <lcdPrintf+0x10c>)
 800394a:	2200      	movs	r2, #0
 800394c:	805a      	strh	r2, [r3, #2]
	while (*p)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d193      	bne.n	800387e <lcdPrintf+0x1e>
		}
	}
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003962:	b004      	add	sp, #16
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000300 	.word	0x20000300
 800396c:	200002f8 	.word	0x200002f8
 8003970:	2000002c 	.word	0x2000002c
 8003974:	20000024 	.word	0x20000024

08003978 <lcdPrintfNoBackColor>:

void lcdPrintfNoBackColor(const char *fmt, ...)
{
 8003978:	b40f      	push	{r0, r1, r2, r3}
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	483a      	ldr	r0, [pc, #232]	@ (8003a74 <lcdPrintfNoBackColor+0xfc>)
 800398c:	f005 ff30 	bl	80097f0 <vsiprintf>
	va_end(lst);

	p = buf;
 8003990:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <lcdPrintfNoBackColor+0xfc>)
 8003992:	607b      	str	r3, [r7, #4]
	while (*p)
 8003994:	e062      	b.n	8003a5c <lcdPrintfNoBackColor+0xe4>
	{
		if (*p == '\n')
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d10c      	bne.n	80039b8 <lcdPrintfNoBackColor+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800399e:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039a0:	885a      	ldrh	r2, [r3, #2]
 80039a2:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	88db      	ldrh	r3, [r3, #6]
 80039a8:	4413      	add	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039ae:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80039b0:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	e045      	b.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		}
		else if (*p == '\r')
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b0d      	cmp	r3, #13
 80039be:	d041      	beq.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		{
			// skip em
		}
		else if (*p == '\t')
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d10b      	bne.n	80039e0 <lcdPrintfNoBackColor+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	889b      	ldrh	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e031      	b.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		}
		else
		{
			lcdDrawCharNoBackColor(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor);
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b218      	sxth	r0, r3
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039e8:	885b      	ldrh	r3, [r3, #2]
 80039ea:	b219      	sxth	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f7ff fea1 	bl	800373c <lcdDrawCharNoBackColor>
			cursorXY.x += lcdFont.pFont->Width;
 80039fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	889b      	ldrh	r3, [r3, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a0a:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a0e:	7b1b      	ldrb	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <lcdPrintfNoBackColor+0xcc>
 8003a14:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <lcdPrintfNoBackColor+0x108>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	889b      	ldrh	r3, [r3, #4]
 8003a26:	1acb      	subs	r3, r1, r3
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	dd0b      	ble.n	8003a44 <lcdPrintfNoBackColor+0xcc>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a2e:	885a      	ldrh	r2, [r3, #2]
 8003a30:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	88db      	ldrh	r3, [r3, #6]
 8003a36:	4413      	add	r3, r2
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a3c:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a4c:	885a      	ldrh	r2, [r3, #2]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <lcdPrintfNoBackColor+0x108>)
 8003a50:	885b      	ldrh	r3, [r3, #2]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <lcdPrintfNoBackColor+0xe4>
		{
			cursorXY.y = 0;
 8003a56:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	805a      	strh	r2, [r3, #2]
	while (*p)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d198      	bne.n	8003996 <lcdPrintfNoBackColor+0x1e>
		}
	}
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	20000400 	.word	0x20000400
 8003a78:	200002f8 	.word	0x200002f8
 8003a7c:	2000002c 	.word	0x2000002c
 8003a80:	20000024 	.word	0x20000024

08003a84 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8003a8c:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <lcdSetTextFont+0x1c>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6093      	str	r3, [r2, #8]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460a      	mov	r2, r1
 8003aae:	80fb      	strh	r3, [r7, #6]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <lcdSetTextColor+0x28>)
 8003ab8:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8003aba:	88bb      	ldrh	r3, [r7, #4]
 8003abc:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <lcdSetTextColor+0x28>)
 8003abe:	6053      	str	r3, [r2, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	2000002c 	.word	0x2000002c

08003ad0 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8003ada:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8003ae0:	2036      	movs	r0, #54	@ 0x36
 8003ae2:	f000 f8fb 	bl	8003cdc <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d83e      	bhi.n	8003b6c <lcdSetOrientation+0x9c>
 8003aee:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <lcdSetOrientation+0x24>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b39 	.word	0x08003b39
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b53 	.word	0x08003b53
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8003b04:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <lcdSetOrientation+0xc4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f8f7 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b10:	22f0      	movs	r2, #240	@ 0xf0
 8003b12:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b1a:	805a      	strh	r2, [r3, #2]
			break;
 8003b1c:	e027      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <lcdSetOrientation+0xc8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f8ea 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003b28:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b2a:	22f0      	movs	r2, #240	@ 0xf0
 8003b2c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b34:	805a      	strh	r2, [r3, #2]
			break;
 8003b36:	e01a      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8003b38:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <lcdSetOrientation+0xcc>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f8dd 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b44:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b48:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b4c:	22f0      	movs	r2, #240	@ 0xf0
 8003b4e:	805a      	strh	r2, [r3, #2]
			break;
 8003b50:	e00d      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <lcdSetOrientation+0xd0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8d0 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b5e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b62:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b66:	22f0      	movs	r2, #240	@ 0xf0
 8003b68:	805a      	strh	r2, [r3, #2]
			break;
 8003b6a:	e000      	b.n	8003b6e <lcdSetOrientation+0x9e>
		default:
			break;
 8003b6c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b78:	885b      	ldrh	r3, [r3, #2]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2000      	movs	r0, #0
 8003b82:	f000 f829 	bl	8003bd8 <lcdSetWindow>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000024 	.word	0x20000024
 8003b94:	200002fc 	.word	0x200002fc
 8003b98:	200002fe 	.word	0x200002fe
 8003b9c:	200002fd 	.word	0x200002fd
 8003ba0:	200002ff 	.word	0x200002ff

08003ba4 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	460a      	mov	r2, r1
 8003bae:	80fb      	strh	r3, [r7, #6]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <lcdSetCursor+0x30>)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8003bba:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <lcdSetCursor+0x30>)
 8003bbc:	88bb      	ldrh	r3, [r7, #4]
 8003bbe:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8003bc0:	88bb      	ldrh	r3, [r7, #4]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	88b9      	ldrh	r1, [r7, #4]
 8003bc6:	88f8      	ldrh	r0, [r7, #6]
 8003bc8:	f000 f806 	bl	8003bd8 <lcdSetWindow>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200002f8 	.word	0x200002f8

08003bd8 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	80fb      	strh	r3, [r7, #6]
 8003bea:	4603      	mov	r3, r0
 8003bec:	80bb      	strh	r3, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	807b      	strh	r3, [r7, #2]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8003bf6:	202a      	movs	r0, #42	@ 0x2a
 8003bf8:	f000 f870 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f87a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f874 	bl	8003cfc <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f86e 	bl	8003cfc <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f868 	bl	8003cfc <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8003c2c:	202b      	movs	r0, #43	@ 0x2b
 8003c2e:	f000 f855 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8003c32:	88bb      	ldrh	r3, [r7, #4]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f85f 	bl	8003cfc <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8003c3e:	88bb      	ldrh	r3, [r7, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f859 	bl	8003cfc <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f853 	bl	8003cfc <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8003c56:	883b      	ldrh	r3, [r7, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f84d 	bl	8003cfc <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8003c62:	202c      	movs	r0, #44	@ 0x2c
 8003c64:	f000 f83a 	bl	8003cdc <lcdWriteCommand>
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	81fb      	strh	r3, [r7, #14]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8003c86:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <lcdDrawPixels+0x54>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <lcdDrawPixels+0x54>)
 8003c90:	885b      	ldrh	r3, [r3, #2]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	89b9      	ldrh	r1, [r7, #12]
 8003c98:	89f8      	ldrh	r0, [r7, #14]
 8003c9a:	f7ff ff9d 	bl	8003bd8 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f825 	bl	8003cfc <lcdWriteData>
  }
  while (i < dataLength);
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3f1      	bcc.n	8003c9e <lcdDrawPixels+0x2e>
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000024 	.word	0x20000024

08003cc8 <lcdReset>:

static void lcdReset(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f000 f805 	bl	8003cdc <lcdWriteCommand>
	HAL_Delay(50);
 8003cd2:	2032      	movs	r0, #50	@ 0x32
 8003cd4:	f001 ff60 	bl	8005b98 <HAL_Delay>
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8003ce6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8003cea:	79fa      	ldrb	r2, [r7, #7]
 8003cec:	b292      	uxth	r2, r2
 8003cee:	801a      	strh	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <lcdWriteData+0x1c>)
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	8013      	strh	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	60080000 	.word	0x60080000

08003d1c <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8003d1c:	b490      	push	{r4, r7}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	71fb      	strb	r3, [r7, #7]
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71bb      	strb	r3, [r7, #6]
 8003d32:	460b      	mov	r3, r1
 8003d34:	717b      	strb	r3, [r7, #5]
 8003d36:	4613      	mov	r3, r2
 8003d38:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8003d3e:	7f3b      	ldrb	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <lcdBuildMemoryAccessControlConfig+0x30>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8003d4c:	7e3b      	ldrb	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <lcdBuildMemoryAccessControlConfig+0x3e>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	f043 0308 	orr.w	r3, r3, #8
 8003d58:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8003d5a:	793b      	ldrb	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <lcdBuildMemoryAccessControlConfig+0x4c>
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f043 0310 	orr.w	r3, r3, #16
 8003d66:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8003d68:	797b      	ldrb	r3, [r7, #5]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <lcdBuildMemoryAccessControlConfig+0x5a>
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	f043 0320 	orr.w	r3, r3, #32
 8003d74:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <lcdBuildMemoryAccessControlConfig+0x68>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d82:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <lcdBuildMemoryAccessControlConfig+0x76>
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d90:	73fb      	strb	r3, [r7, #15]
  return value;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc90      	pop	{r4, r7}
 8003d9c:	4770      	bx	lr
	...

08003da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003da4:	f001 fe86 	bl	8005ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003da8:	f000 f858 	bl	8003e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dac:	f000 f920 	bl	8003ff0 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003db0:	f000 f9c4 	bl	800413c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003db4:	f000 f8f2 	bl	8003f9c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003db8:	f000 f8ba 	bl	8003f30 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	481c      	ldr	r0, [pc, #112]	@ (8003e34 <main+0x94>)
 8003dc2:	f002 fa65 	bl	8006290 <HAL_GPIO_WritePin>
  lcdInit();
 8003dc6:	f7fe facd 	bl	8002364 <lcdInit>
  lcdSetOrientation(PORTRAIT);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7ff fe80 	bl	8003ad0 <lcdSetOrientation>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4919      	ldr	r1, [pc, #100]	@ (8003e38 <main+0x98>)
 8003dd4:	4819      	ldr	r0, [pc, #100]	@ (8003e3c <main+0x9c>)
 8003dd6:	f003 fc9a 	bl	800770e <HAL_UART_Receive_IT>
  mainMenu();
 8003dda:	f000 fd05 	bl	80047e8 <mainMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  allowTouch = true;
 8003dde:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <main+0xa0>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
	  if(rxComplete)
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <main+0xa4>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01e      	beq.n	8003e2a <main+0x8a>
	  {
		  rxComplete = 0;
 8003dec:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <main+0xa4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
		  rxIndex = 0;
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <main+0xa8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	801a      	strh	r2, [r3, #0]
		  processData((const char*) rxBuffer);
 8003df8:	4814      	ldr	r0, [pc, #80]	@ (8003e4c <main+0xac>)
 8003dfa:	f001 fa23 	bl	8005244 <processData>
		  if (processComplete)
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <main+0xb0>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <main+0x7c>
		  {
			  processComplete = 0;
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <main+0xb0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			  weatherIndex = 0;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <main+0xb4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
			  dateIndex = 0;
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <main+0xb8>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	801a      	strh	r2, [r3, #0]
			  drawInterface();
 8003e18:	f001 f8b4 	bl	8004f84 <drawInterface>
		  }
		  resetBuffer();
 8003e1c:	f001 fbd0 	bl	80055c0 <resetBuffer>
		  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003e20:	2201      	movs	r2, #1
 8003e22:	4905      	ldr	r1, [pc, #20]	@ (8003e38 <main+0x98>)
 8003e24:	4805      	ldr	r0, [pc, #20]	@ (8003e3c <main+0x9c>)
 8003e26:	f003 fc72 	bl	800770e <HAL_UART_Receive_IT>
	  }
	  HAL_Delay(500);
 8003e2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e2e:	f001 feb3 	bl	8005b98 <HAL_Delay>
	  allowTouch = true;
 8003e32:	e7d4      	b.n	8003dde <main+0x3e>
 8003e34:	40020400 	.word	0x40020400
 8003e38:	200005f0 	.word	0x200005f0
 8003e3c:	20000558 	.word	0x20000558
 8003e40:	20000059 	.word	0x20000059
 8003e44:	200009f6 	.word	0x200009f6
 8003e48:	200009f4 	.word	0x200009f4
 8003e4c:	200005f4 	.word	0x200005f4
 8003e50:	20000a30 	.word	0x20000a30
 8003e54:	20000a2c 	.word	0x20000a2c
 8003e58:	20000a2e 	.word	0x20000a2e

08003e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b094      	sub	sp, #80	@ 0x50
 8003e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e62:	f107 0320 	add.w	r3, r7, #32
 8003e66:	2230      	movs	r2, #48	@ 0x30
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 fcca 	bl	8009804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e90:	4b25      	ldr	r3, [pc, #148]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	4b22      	ldr	r3, [pc, #136]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ecc:	2304      	movs	r3, #4
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ed0:	23a8      	movs	r3, #168	@ 0xa8
 8003ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003edc:	f107 0320 	add.w	r3, r7, #32
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 fa07 	bl	80062f4 <HAL_RCC_OscConfig>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003eec:	f001 fb84 	bl	80055f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003efc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fc68 	bl	80067e4 <HAL_RCC_ClockConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003f1a:	f001 fb6d 	bl	80055f8 <Error_Handler>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3750      	adds	r7, #80	@ 0x50
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40007000 	.word	0x40007000

08003f30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f34:	4b17      	ldr	r3, [pc, #92]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f36:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <MX_SPI2_Init+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f64:	2220      	movs	r2, #32
 8003f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f7c:	220a      	movs	r2, #10
 8003f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f80:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f82:	f002 fe4f 	bl	8006c24 <HAL_SPI_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f8c:	f001 fb34 	bl	80055f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000500 	.word	0x20000500
 8003f98:	40003800 	.word	0x40003800

08003f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <MX_USART1_UART_Init+0x50>)
 8003fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fae:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fd2:	4805      	ldr	r0, [pc, #20]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fd4:	f003 fac0 	bl	8007558 <HAL_UART_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fde:	f001 fb0b 	bl	80055f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000558 	.word	0x20000558
 8003fec:	40011000 	.word	0x40011000

08003ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <MX_GPIO_Init+0x140>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a48      	ldr	r2, [pc, #288]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b46      	ldr	r3, [pc, #280]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	4b42      	ldr	r3, [pc, #264]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4a41      	ldr	r2, [pc, #260]	@ (8004130 <MX_GPIO_Init+0x140>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6313      	str	r3, [r2, #48]	@ 0x30
 8004032:	4b3f      	ldr	r3, [pc, #252]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	4a3a      	ldr	r2, [pc, #232]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6313      	str	r3, [r2, #48]	@ 0x30
 800404e:	4b38      	ldr	r3, [pc, #224]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a33      	ldr	r2, [pc, #204]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004064:	f043 0310 	orr.w	r3, r3, #16
 8004068:	6313      	str	r3, [r2, #48]	@ 0x30
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <MX_GPIO_Init+0x140>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <MX_GPIO_Init+0x140>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	6313      	str	r3, [r2, #48]	@ 0x30
 8004086:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	4b26      	ldr	r3, [pc, #152]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a25      	ldr	r2, [pc, #148]	@ (8004130 <MX_GPIO_Init+0x140>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b23      	ldr	r3, [pc, #140]	@ (8004130 <MX_GPIO_Init+0x140>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2102      	movs	r1, #2
 80040b2:	4820      	ldr	r0, [pc, #128]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040b4:	f002 f8ec 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 80040b8:	2201      	movs	r2, #1
 80040ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040be:	481d      	ldr	r0, [pc, #116]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040c0:	f002 f8e6 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80040c4:	2320      	movs	r3, #32
 80040c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80040cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80040d2:	f107 031c 	add.w	r3, r7, #28
 80040d6:	4619      	mov	r1, r3
 80040d8:	4817      	ldr	r0, [pc, #92]	@ (8004138 <MX_GPIO_Init+0x148>)
 80040da:	f001 ff25 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80040de:	2302      	movs	r3, #2
 80040e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e2:	2301      	movs	r3, #1
 80040e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80040ee:	f107 031c 	add.w	r3, r7, #28
 80040f2:	4619      	mov	r1, r3
 80040f4:	480f      	ldr	r0, [pc, #60]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040f6:	f001 ff17 	bl	8005f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80040fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004100:	2301      	movs	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004108:	2302      	movs	r3, #2
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 800410c:	f107 031c 	add.w	r3, r7, #28
 8004110:	4619      	mov	r1, r3
 8004112:	4808      	ldr	r0, [pc, #32]	@ (8004134 <MX_GPIO_Init+0x144>)
 8004114:	f001 ff08 	bl	8005f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004118:	2200      	movs	r2, #0
 800411a:	2100      	movs	r1, #0
 800411c:	2017      	movs	r0, #23
 800411e:	f001 fe3a 	bl	8005d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004122:	2017      	movs	r0, #23
 8004124:	f001 fe53 	bl	8005dce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004128:	bf00      	nop
 800412a:	3730      	adds	r7, #48	@ 0x30
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800

0800413c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
 8004150:	615a      	str	r2, [r3, #20]
 8004152:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004156:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800415a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800415c:	4b25      	ldr	r3, [pc, #148]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800415e:	4a26      	ldr	r2, [pc, #152]	@ (80041f8 <MX_FSMC_Init+0xbc>)
 8004160:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004168:	4b22      	ldr	r3, [pc, #136]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004176:	2210      	movs	r2, #16
 8004178:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004192:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800419c:	2200      	movs	r2, #0
 800419e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80041a6:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80041b2:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80041bc:	230f      	movs	r3, #15
 80041be:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80041c0:	2305      	movs	r3, #5
 80041c2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80041c8:	2310      	movs	r3, #16
 80041ca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80041cc:	2311      	movs	r3, #17
 80041ce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	4619      	mov	r1, r3
 80041da:	4806      	ldr	r0, [pc, #24]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041dc:	f003 f974 	bl	80074c8 <HAL_SRAM_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80041e6:	f001 fa07 	bl	80055f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80041ea:	bf00      	nop
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200005a0 	.word	0x200005a0
 80041f8:	a0000104 	.word	0xa0000104

080041fc <drawBackIcon>:

/* USER CODE BEGIN 4 */
void drawBackIcon()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af04      	add	r7, sp, #16
	lcdFillRoundRect(0, 0, 27, 23, 8, COLOR_WHITE);
 8004202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	2308      	movs	r3, #8
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2317      	movs	r3, #23
 800420e:	221b      	movs	r2, #27
 8004210:	2100      	movs	r1, #0
 8004212:	2000      	movs	r0, #0
 8004214:	f7fe ffe2 	bl	80031dc <lcdFillRoundRect>
	lcdFillRect(10, 7, 13, 8, COLOR_BLACK);
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2308      	movs	r3, #8
 800421e:	220d      	movs	r2, #13
 8004220:	2107      	movs	r1, #7
 8004222:	200a      	movs	r0, #10
 8004224:	f7fe ff7e 	bl	8003124 <lcdFillRect>
	lcdFillTriangle(1, 11, 13, 2, 13, 20, COLOR_BLACK);
 8004228:	2300      	movs	r3, #0
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	2314      	movs	r3, #20
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	230d      	movs	r3, #13
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2302      	movs	r3, #2
 8004236:	220d      	movs	r2, #13
 8004238:	210b      	movs	r1, #11
 800423a:	2001      	movs	r0, #1
 800423c:	f7ff f833 	bl	80032a6 <lcdFillTriangle>
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <drawKeyboard>:

void drawKeyboard()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	@ 0x30
 800424c:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font12);
 800424e:	485b      	ldr	r0, [pc, #364]	@ (80043bc <drawKeyboard+0x174>)
 8004250:	f7ff fc18 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004254:	2100      	movs	r1, #0
 8004256:	2000      	movs	r0, #0
 8004258:	f7ff fc24 	bl	8003aa4 <lcdSetTextColor>
	for (int y = 200; y < 320; y++)
 800425c:	23c8      	movs	r3, #200	@ 0xc8
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	e014      	b.n	800428c <drawKeyboard+0x44>
	{
		for (int x = 0; x < 240; x++)
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	e00b      	b.n	8004280 <drawKeyboard+0x38>
		{
			lcdDrawPixel(x, y, COLOR_WHITE);
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	b29b      	uxth	r3, r3
 800426c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426e:	b291      	uxth	r1, r2
 8004270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fd25 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	3301      	adds	r3, #1
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2bef      	cmp	r3, #239	@ 0xef
 8004284:	ddf0      	ble.n	8004268 <drawKeyboard+0x20>
	for (int y = 200; y < 320; y++)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004292:	dbe6      	blt.n	8004262 <drawKeyboard+0x1a>
		}
	}
    int column = 0, row = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < (sizeof(keyMap) / sizeof(keyMap[0])) - 1; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e032      	b.n	8004308 <drawKeyboard+0xc0>
    {
    	int x = keyboardX0 + column * keyboardButtonWidth;
 80042a2:	2300      	movs	r3, #0
 80042a4:	461a      	mov	r2, r3
 80042a6:	2318      	movs	r3, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
    	int y = keyboardY0 + row * keyboardButtonHeight;
 80042b4:	23c8      	movs	r3, #200	@ 0xc8
 80042b6:	461a      	mov	r2, r3
 80042b8:	231e      	movs	r3, #30
 80042ba:	4619      	mov	r1, r3
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	607b      	str	r3, [r7, #4]
        lcdSetCursor(x + 8, y + 10);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3308      	adds	r3, #8
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	330a      	adds	r3, #10
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff fc63 	bl	8003ba4 <lcdSetCursor>
        lcdPrintfNoBackColor((char*)keyMap[i]);
 80042de:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <drawKeyboard+0x178>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fb46 	bl	8003978 <lcdPrintfNoBackColor>

        column++;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
        if (column == 10)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b0a      	cmp	r3, #10
 80042f6:	d104      	bne.n	8004302 <drawKeyboard+0xba>
        {
            column = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
            row++;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	3301      	adds	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < (sizeof(keyMap) / sizeof(keyMap[0])) - 1; i++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b26      	cmp	r3, #38	@ 0x26
 800430c:	d9c9      	bls.n	80042a2 <drawKeyboard+0x5a>
        }
    }
    lcdDrawLine(0, 230, 240, 230, COLOR_BLACK);
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	23e6      	movs	r3, #230	@ 0xe6
 8004314:	22f0      	movs	r2, #240	@ 0xf0
 8004316:	21e6      	movs	r1, #230	@ 0xe6
 8004318:	2000      	movs	r0, #0
 800431a:	f7fe fd8d 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 260, 240, 260, COLOR_BLACK);
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004326:	22f0      	movs	r2, #240	@ 0xf0
 8004328:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800432c:	2000      	movs	r0, #0
 800432e:	f7fe fd83 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 290, 240, 290, COLOR_BLACK);
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800433a:	22f0      	movs	r2, #240	@ 0xf0
 800433c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004340:	2000      	movs	r0, #0
 8004342:	f7fe fd79 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 200, 240, 200, COLOR_BLACK);
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	23c8      	movs	r3, #200	@ 0xc8
 800434c:	22f0      	movs	r2, #240	@ 0xf0
 800434e:	21c8      	movs	r1, #200	@ 0xc8
 8004350:	2000      	movs	r0, #0
 8004352:	f7fe fd71 	bl	8002e38 <lcdDrawLine>
    for (int i = 1; i <= 8; i++)
 8004356:	2301      	movs	r3, #1
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e016      	b.n	800438a <drawKeyboard+0x142>
    {
    	int x = keyboardX0 + i * keyboardButtonWidth;
 800435c:	2300      	movs	r3, #0
 800435e:	461a      	mov	r2, r3
 8004360:	2318      	movs	r3, #24
 8004362:	4619      	mov	r1, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    	lcdDrawLine(x, 200, x, 320, COLOR_BLACK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	b218      	sxth	r0, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	b21a      	sxth	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800437e:	21c8      	movs	r1, #200	@ 0xc8
 8004380:	f7fe fd5a 	bl	8002e38 <lcdDrawLine>
    for (int i = 1; i <= 8; i++)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	3301      	adds	r3, #1
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b08      	cmp	r3, #8
 800438e:	dde5      	ble.n	800435c <drawKeyboard+0x114>
    }
    lcdDrawLine(216, 200, 216, 290, COLOR_BLACK);
 8004390:	2300      	movs	r3, #0
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8004398:	22d8      	movs	r2, #216	@ 0xd8
 800439a:	21c8      	movs	r1, #200	@ 0xc8
 800439c:	20d8      	movs	r0, #216	@ 0xd8
 800439e:	f7fe fd4b 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(239, 230, 239, 320, COLOR_BLACK);
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80043aa:	22ef      	movs	r2, #239	@ 0xef
 80043ac:	21e6      	movs	r1, #230	@ 0xe6
 80043ae:	20ef      	movs	r0, #239	@ 0xef
 80043b0:	f7fe fd42 	bl	8002e38 <lcdDrawLine>
}
 80043b4:	bf00      	nop
 80043b6:	3728      	adds	r7, #40	@ 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	20000060 	.word	0x20000060

080043c4 <applyShift>:

char applyShift(char character)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
    if (character >= 'a' && character <= 'z')
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	2b60      	cmp	r3, #96	@ 0x60
 80043d2:	d906      	bls.n	80043e2 <applyShift+0x1e>
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80043d8:	d803      	bhi.n	80043e2 <applyShift+0x1e>
    {
        return character - ('a' - 'A');
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	3b20      	subs	r3, #32
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e000      	b.n	80043e4 <applyShift+0x20>
    }
    return character;
 80043e2:	79fb      	ldrb	r3, [r7, #7]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <handleKeyboardTouch>:

void handleKeyboardTouch()
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
	if ((yCoordinates <= 23 && xCoordinates <= 27) && menu != 1)
 80043f6:	4b54      	ldr	r3, [pc, #336]	@ (8004548 <handleKeyboardTouch+0x158>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	2b17      	cmp	r3, #23
 80043fc:	d80a      	bhi.n	8004414 <handleKeyboardTouch+0x24>
 80043fe:	4b53      	ldr	r3, [pc, #332]	@ (800454c <handleKeyboardTouch+0x15c>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b1b      	cmp	r3, #27
 8004404:	d806      	bhi.n	8004414 <handleKeyboardTouch+0x24>
 8004406:	4b52      	ldr	r3, [pc, #328]	@ (8004550 <handleKeyboardTouch+0x160>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <handleKeyboardTouch+0x24>
	{
		mainMenu();
 800440e:	f000 f9eb 	bl	80047e8 <mainMenu>
		return;
 8004412:	e095      	b.n	8004540 <handleKeyboardTouch+0x150>
	}
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004414:	2100      	movs	r1, #0
 8004416:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800441a:	f7ff fb43 	bl	8003aa4 <lcdSetTextColor>
	uint8_t column = (xCoordinates - keyboardX0) / keyboardButtonWidth;
 800441e:	4b4b      	ldr	r3, [pc, #300]	@ (800454c <handleKeyboardTouch+0x15c>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2218      	movs	r2, #24
 800442a:	fb93 f3f2 	sdiv	r3, r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
	if (xCoordinates == 240)
 8004430:	4b46      	ldr	r3, [pc, #280]	@ (800454c <handleKeyboardTouch+0x15c>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	2bf0      	cmp	r3, #240	@ 0xf0
 8004436:	d109      	bne.n	800444c <handleKeyboardTouch+0x5c>
	{
		column = (xCoordinates - keyboardX0 - 1) / keyboardButtonWidth;
 8004438:	4b44      	ldr	r3, [pc, #272]	@ (800454c <handleKeyboardTouch+0x15c>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	2218      	movs	r2, #24
 8004446:	fb93 f3f2 	sdiv	r3, r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
	}
    uint8_t row = (yCoordinates - keyboardY0) / keyboardButtonHeight;
 800444c:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <handleKeyboardTouch+0x158>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	23c8      	movs	r3, #200	@ 0xc8
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	221e      	movs	r2, #30
 8004458:	fb93 f3f2 	sdiv	r3, r3, r2
 800445c:	717b      	strb	r3, [r7, #5]
    uint8_t keyIndex = row * 10 + column;
 800445e:	797b      	ldrb	r3, [r7, #5]
 8004460:	461a      	mov	r2, r3
 8004462:	0092      	lsls	r2, r2, #2
 8004464:	4413      	add	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4413      	add	r3, r2
 800446e:	713b      	strb	r3, [r7, #4]
    if (keyIndex >= sizeof(keyMap) / sizeof(keyMap[0])) return;
 8004470:	793b      	ldrb	r3, [r7, #4]
 8004472:	2b27      	cmp	r3, #39	@ 0x27
 8004474:	d863      	bhi.n	800453e <handleKeyboardTouch+0x14e>

    const char* key = keyMap[keyIndex];
 8004476:	793b      	ldrb	r3, [r7, #4]
 8004478:	4a36      	ldr	r2, [pc, #216]	@ (8004554 <handleKeyboardTouch+0x164>)
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	603b      	str	r3, [r7, #0]
    if (strcmp(key, "Del") == 0)
 8004480:	4935      	ldr	r1, [pc, #212]	@ (8004558 <handleKeyboardTouch+0x168>)
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f7fb fea4 	bl	80001d0 <strcmp>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d110      	bne.n	80044b0 <handleKeyboardTouch+0xc0>
    {
    	if (passwordIndex > 0)
 800448e:	4b33      	ldr	r3, [pc, #204]	@ (800455c <handleKeyboardTouch+0x16c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d04b      	beq.n	800452e <handleKeyboardTouch+0x13e>
    	{
    		passwordIndex--;
 8004496:	4b31      	ldr	r3, [pc, #196]	@ (800455c <handleKeyboardTouch+0x16c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b2f      	ldr	r3, [pc, #188]	@ (800455c <handleKeyboardTouch+0x16c>)
 80044a0:	701a      	strb	r2, [r3, #0]
    		wifiPassword[passwordIndex] = '\0';
 80044a2:	4b2e      	ldr	r3, [pc, #184]	@ (800455c <handleKeyboardTouch+0x16c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <handleKeyboardTouch+0x170>)
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	e03e      	b.n	800452e <handleKeyboardTouch+0x13e>
    	}
    }
    else if (strcmp(key, "^") == 0)
 80044b0:	492c      	ldr	r1, [pc, #176]	@ (8004564 <handleKeyboardTouch+0x174>)
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f7fb fe8c 	bl	80001d0 <strcmp>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <handleKeyboardTouch+0xee>
    {
        keyboardShift = !keyboardShift;
 80044be:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <handleKeyboardTouch+0x178>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b23      	ldr	r3, [pc, #140]	@ (8004568 <handleKeyboardTouch+0x178>)
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e027      	b.n	800452e <handleKeyboardTouch+0x13e>
    }
    else if (strcmp(key, "<-") == 0)
 80044de:	4923      	ldr	r1, [pc, #140]	@ (800456c <handleKeyboardTouch+0x17c>)
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f7fb fe75 	bl	80001d0 <strcmp>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <handleKeyboardTouch+0x13e>
    {
    	//HAL_UART_Transmit(&huart1, (uint8_t*)wifiPassword, strlen(wifiPassword), HAL_MAX_DELAY);
    }
    else if (passwordIndex <= MAX_PASSWORD_LENGTH)
 80044ec:	4b1b      	ldr	r3, [pc, #108]	@ (800455c <handleKeyboardTouch+0x16c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d81c      	bhi.n	800452e <handleKeyboardTouch+0x13e>
    {
    	char character = key[0];
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	71bb      	strb	r3, [r7, #6]
    	if (keyboardShift)
 80044fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <handleKeyboardTouch+0x178>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <handleKeyboardTouch+0x11e>
    	{
    	    character = applyShift(character);
 8004502:	79bb      	ldrb	r3, [r7, #6]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff5d 	bl	80043c4 <applyShift>
 800450a:	4603      	mov	r3, r0
 800450c:	71bb      	strb	r3, [r7, #6]
    	}
    	wifiPassword[passwordIndex++] = character;
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <handleKeyboardTouch+0x16c>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	b2d1      	uxtb	r1, r2
 8004516:	4a11      	ldr	r2, [pc, #68]	@ (800455c <handleKeyboardTouch+0x16c>)
 8004518:	7011      	strb	r1, [r2, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	4a10      	ldr	r2, [pc, #64]	@ (8004560 <handleKeyboardTouch+0x170>)
 800451e:	79bb      	ldrb	r3, [r7, #6]
 8004520:	5453      	strb	r3, [r2, r1]
    	wifiPassword[passwordIndex] = '\0';
 8004522:	4b0e      	ldr	r3, [pc, #56]	@ (800455c <handleKeyboardTouch+0x16c>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <handleKeyboardTouch+0x170>)
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]
    }
    lcdSetCursor(0, 180);
 800452e:	21b4      	movs	r1, #180	@ 0xb4
 8004530:	2000      	movs	r0, #0
 8004532:	f7ff fb37 	bl	8003ba4 <lcdSetCursor>
    lcdPrintf(wifiPassword);
 8004536:	480a      	ldr	r0, [pc, #40]	@ (8004560 <handleKeyboardTouch+0x170>)
 8004538:	f7ff f992 	bl	8003860 <lcdPrintf>
 800453c:	e000      	b.n	8004540 <handleKeyboardTouch+0x150>
    if (keyIndex >= sizeof(keyMap) / sizeof(keyMap[0])) return;
 800453e:	bf00      	nop
}
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	200009fa 	.word	0x200009fa
 800454c:	200009f8 	.word	0x200009f8
 8004550:	20000058 	.word	0x20000058
 8004554:	20000060 	.word	0x20000060
 8004558:	0800bc70 	.word	0x0800bc70
 800455c:	20000bdd 	.word	0x20000bdd
 8004560:	20000bbc 	.word	0x20000bbc
 8004564:	0800bc6c 	.word	0x0800bc6c
 8004568:	20000bde 	.word	0x20000bde
 800456c:	0800bc4c 	.word	0x0800bc4c

08004570 <wifiMenu>:

void wifiMenu()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
	lcdFillRGB(COLOR_BLACK);
 8004576:	2000      	movs	r0, #0
 8004578:	f7fe fb7a 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 800457c:	f7ff fe3e 	bl	80041fc <drawBackIcon>
	wifi = 1;
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <wifiMenu+0x74>)
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004586:	4b18      	ldr	r3, [pc, #96]	@ (80045e8 <wifiMenu+0x78>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
	drawKeyboard();
 800458c:	f7ff fe5c 	bl	8004248 <drawKeyboard>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004590:	2100      	movs	r1, #0
 8004592:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004596:	f7ff fa85 	bl	8003aa4 <lcdSetTextColor>
	for (int i = 0; i < networkCount; i++)
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e017      	b.n	80045d0 <wifiMenu+0x60>
	{
		lcdSetCursor(0, 20 * i);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	4619      	mov	r1, r3
 80045b0:	2000      	movs	r0, #0
 80045b2:	f7ff faf7 	bl	8003ba4 <lcdSetCursor>
		lcdPrintf((const char*)networkList[i].ssid);
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a0a      	ldr	r2, [pc, #40]	@ (80045ec <wifiMenu+0x7c>)
 80045c2:	4413      	add	r3, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff f94b 	bl	8003860 <lcdPrintf>
	for (int i = 0; i < networkCount; i++)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	3301      	adds	r3, #1
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <wifiMenu+0x80>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dbe2      	blt.n	80045a0 <wifiMenu+0x30>
	}
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	200009fc 	.word	0x200009fc
 80045e8:	20000058 	.word	0x20000058
 80045ec:	20000a50 	.word	0x20000a50
 80045f0:	20000bb8 	.word	0x20000bb8

080045f4 <weatherForecastMenu>:

void weatherForecastMenu()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 80045fa:	484c      	ldr	r0, [pc, #304]	@ (800472c <weatherForecastMenu+0x138>)
 80045fc:	f7ff fa42 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004600:	2100      	movs	r1, #0
 8004602:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004606:	f7ff fa4d 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 800460a:	2000      	movs	r0, #0
 800460c:	f7fe fb30 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 8004610:	f7ff fdf4 	bl	80041fc <drawBackIcon>
	weatherForecast = 1;
 8004614:	4b46      	ldr	r3, [pc, #280]	@ (8004730 <weatherForecastMenu+0x13c>)
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
	showWeather = 0;
 800461a:	4b46      	ldr	r3, [pc, #280]	@ (8004734 <weatherForecastMenu+0x140>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004620:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <weatherForecastMenu+0x144>)
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
	drawAlignedText(" Choose a location", 0, 240, 16, NOBACKCOLOR);
 8004626:	2300      	movs	r3, #0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	2310      	movs	r3, #16
 800462c:	22f0      	movs	r2, #240	@ 0xf0
 800462e:	2100      	movs	r1, #0
 8004630:	4842      	ldr	r0, [pc, #264]	@ (800473c <weatherForecastMenu+0x148>)
 8004632:	f7fe f80b 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004636:	2100      	movs	r1, #0
 8004638:	2000      	movs	r0, #0
 800463a:	f7ff fa33 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 800463e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	230a      	movs	r3, #10
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2328      	movs	r3, #40	@ 0x28
 800464a:	22f0      	movs	r2, #240	@ 0xf0
 800464c:	2120      	movs	r1, #32
 800464e:	2000      	movs	r0, #0
 8004650:	f7fe fdc4 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Sai Gon", 45, 240, 16, NOBACKCOLOR);
 8004654:	2300      	movs	r3, #0
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	2310      	movs	r3, #16
 800465a:	22f0      	movs	r2, #240	@ 0xf0
 800465c:	212d      	movs	r1, #45	@ 0x2d
 800465e:	4838      	ldr	r0, [pc, #224]	@ (8004740 <weatherForecastMenu+0x14c>)
 8004660:	f7fd fff4 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 8004664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	230a      	movs	r3, #10
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2328      	movs	r3, #40	@ 0x28
 8004670:	22f0      	movs	r2, #240	@ 0xf0
 8004672:	2150      	movs	r1, #80	@ 0x50
 8004674:	2000      	movs	r0, #0
 8004676:	f7fe fdb1 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Nha Trang", 93, 240, 16, NOBACKCOLOR);
 800467a:	2300      	movs	r3, #0
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	2310      	movs	r3, #16
 8004680:	22f0      	movs	r2, #240	@ 0xf0
 8004682:	215d      	movs	r1, #93	@ 0x5d
 8004684:	482f      	ldr	r0, [pc, #188]	@ (8004744 <weatherForecastMenu+0x150>)
 8004686:	f7fd ffe1 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 800468a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	230a      	movs	r3, #10
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	2328      	movs	r3, #40	@ 0x28
 8004696:	22f0      	movs	r2, #240	@ 0xf0
 8004698:	2180      	movs	r1, #128	@ 0x80
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe fd9e 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Ha Noi", 141, 240, 16, NOBACKCOLOR);
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2310      	movs	r3, #16
 80046a6:	22f0      	movs	r2, #240	@ 0xf0
 80046a8:	218d      	movs	r1, #141	@ 0x8d
 80046aa:	4827      	ldr	r0, [pc, #156]	@ (8004748 <weatherForecastMenu+0x154>)
 80046ac:	f7fd ffce 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 176, 240, 40, 10, COLOR_WHITE);
 80046b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	230a      	movs	r3, #10
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	2328      	movs	r3, #40	@ 0x28
 80046bc:	22f0      	movs	r2, #240	@ 0xf0
 80046be:	21b0      	movs	r1, #176	@ 0xb0
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fe fd8b 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Tampere", 189, 240, 16, NOBACKCOLOR);
 80046c6:	2300      	movs	r3, #0
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	2310      	movs	r3, #16
 80046cc:	22f0      	movs	r2, #240	@ 0xf0
 80046ce:	21bd      	movs	r1, #189	@ 0xbd
 80046d0:	481e      	ldr	r0, [pc, #120]	@ (800474c <weatherForecastMenu+0x158>)
 80046d2:	f7fd ffbb 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 224, 240, 40, 10, COLOR_WHITE);
 80046d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	230a      	movs	r3, #10
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2328      	movs	r3, #40	@ 0x28
 80046e2:	22f0      	movs	r2, #240	@ 0xf0
 80046e4:	21e0      	movs	r1, #224	@ 0xe0
 80046e6:	2000      	movs	r0, #0
 80046e8:	f7fe fd78 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Arnhem", 237, 240, 16, NOBACKCOLOR);
 80046ec:	2300      	movs	r3, #0
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	2310      	movs	r3, #16
 80046f2:	22f0      	movs	r2, #240	@ 0xf0
 80046f4:	21ed      	movs	r1, #237	@ 0xed
 80046f6:	4816      	ldr	r0, [pc, #88]	@ (8004750 <weatherForecastMenu+0x15c>)
 80046f8:	f7fd ffa8 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 272, 240, 40, 10, COLOR_WHITE);
 80046fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	230a      	movs	r3, #10
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2328      	movs	r3, #40	@ 0x28
 8004708:	22f0      	movs	r2, #240	@ 0xf0
 800470a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800470e:	2000      	movs	r0, #0
 8004710:	f7fe fd64 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Sydney", 285, 240, 16, NOBACKCOLOR);
 8004714:	2300      	movs	r3, #0
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	2310      	movs	r3, #16
 800471a:	22f0      	movs	r2, #240	@ 0xf0
 800471c:	f240 111d 	movw	r1, #285	@ 0x11d
 8004720:	480c      	ldr	r0, [pc, #48]	@ (8004754 <weatherForecastMenu+0x160>)
 8004722:	f7fd ff93 	bl	800264c <drawAlignedText>
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000014 	.word	0x20000014
 8004730:	200009fd 	.word	0x200009fd
 8004734:	200009fe 	.word	0x200009fe
 8004738:	20000058 	.word	0x20000058
 800473c:	0800bc74 	.word	0x0800bc74
 8004740:	0800bc88 	.word	0x0800bc88
 8004744:	0800bc90 	.word	0x0800bc90
 8004748:	0800bc9c 	.word	0x0800bc9c
 800474c:	0800bca4 	.word	0x0800bca4
 8004750:	0800bcac 	.word	0x0800bcac
 8004754:	0800bcb4 	.word	0x0800bcb4

08004758 <gardenStateMenu>:

void gardenStateMenu()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 800475e:	481c      	ldr	r0, [pc, #112]	@ (80047d0 <gardenStateMenu+0x78>)
 8004760:	f7ff f990 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004764:	2100      	movs	r1, #0
 8004766:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800476a:	f7ff f99b 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 800476e:	2000      	movs	r0, #0
 8004770:	f7fe fa7e 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 8004774:	f7ff fd42 	bl	80041fc <drawBackIcon>
	gardenState = 1;
 8004778:	4b16      	ldr	r3, [pc, #88]	@ (80047d4 <gardenStateMenu+0x7c>)
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
	showGardenState = 0;
 800477e:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <gardenStateMenu+0x80>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004784:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <gardenStateMenu+0x84>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
	drawAlignedText(" Choose a garden", 0, 240, 16, NOBACKCOLOR);
 800478a:	2300      	movs	r3, #0
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	2310      	movs	r3, #16
 8004790:	22f0      	movs	r2, #240	@ 0xf0
 8004792:	2100      	movs	r1, #0
 8004794:	4812      	ldr	r0, [pc, #72]	@ (80047e0 <gardenStateMenu+0x88>)
 8004796:	f7fd ff59 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800479a:	2100      	movs	r1, #0
 800479c:	2000      	movs	r0, #0
 800479e:	f7ff f981 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 80047a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	230a      	movs	r3, #10
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	2328      	movs	r3, #40	@ 0x28
 80047ae:	22f0      	movs	r2, #240	@ 0xf0
 80047b0:	2120      	movs	r1, #32
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7fe fd12 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Phu Nhuan", 45, 240, 16, NOBACKCOLOR);
 80047b8:	2300      	movs	r3, #0
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	2310      	movs	r3, #16
 80047be:	22f0      	movs	r2, #240	@ 0xf0
 80047c0:	212d      	movs	r1, #45	@ 0x2d
 80047c2:	4808      	ldr	r0, [pc, #32]	@ (80047e4 <gardenStateMenu+0x8c>)
 80047c4:	f7fd ff42 	bl	800264c <drawAlignedText>
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000014 	.word	0x20000014
 80047d4:	200009ff 	.word	0x200009ff
 80047d8:	20000a00 	.word	0x20000a00
 80047dc:	20000058 	.word	0x20000058
 80047e0:	0800bcbc 	.word	0x0800bcbc
 80047e4:	0800bcd0 	.word	0x0800bcd0

080047e8 <mainMenu>:

void mainMenu()
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 80047ee:	482f      	ldr	r0, [pc, #188]	@ (80048ac <mainMenu+0xc4>)
 80047f0:	f7ff f948 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80047f4:	2100      	movs	r1, #0
 80047f6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80047fa:	f7ff f953 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fe fa36 	bl	8002c70 <lcdFillRGB>
	menu = 1;
 8004804:	4b2a      	ldr	r3, [pc, #168]	@ (80048b0 <mainMenu+0xc8>)
 8004806:	2201      	movs	r2, #1
 8004808:	701a      	strb	r2, [r3, #0]
	gardenState = 0;
 800480a:	4b2a      	ldr	r3, [pc, #168]	@ (80048b4 <mainMenu+0xcc>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
	weatherForecast = 0;
 8004810:	4b29      	ldr	r3, [pc, #164]	@ (80048b8 <mainMenu+0xd0>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
	wifi = 0;
 8004816:	4b29      	ldr	r3, [pc, #164]	@ (80048bc <mainMenu+0xd4>)
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
	drawAlignedText("Choose an option", 0, 240, 16, NOBACKCOLOR);
 800481c:	2300      	movs	r3, #0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	2310      	movs	r3, #16
 8004822:	22f0      	movs	r2, #240	@ 0xf0
 8004824:	2100      	movs	r1, #0
 8004826:	4826      	ldr	r0, [pc, #152]	@ (80048c0 <mainMenu+0xd8>)
 8004828:	f7fd ff10 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800482c:	2100      	movs	r1, #0
 800482e:	2000      	movs	r0, #0
 8004830:	f7ff f938 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 8004834:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	230a      	movs	r3, #10
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	2328      	movs	r3, #40	@ 0x28
 8004840:	22f0      	movs	r2, #240	@ 0xf0
 8004842:	2120      	movs	r1, #32
 8004844:	2000      	movs	r0, #0
 8004846:	f7fe fcc9 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Connect to WiFi", 45, 240, 16, NOBACKCOLOR);
 800484a:	2300      	movs	r3, #0
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	2310      	movs	r3, #16
 8004850:	22f0      	movs	r2, #240	@ 0xf0
 8004852:	212d      	movs	r1, #45	@ 0x2d
 8004854:	481b      	ldr	r0, [pc, #108]	@ (80048c4 <mainMenu+0xdc>)
 8004856:	f7fd fef9 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 800485a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	230a      	movs	r3, #10
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	2328      	movs	r3, #40	@ 0x28
 8004866:	22f0      	movs	r2, #240	@ 0xf0
 8004868:	2150      	movs	r1, #80	@ 0x50
 800486a:	2000      	movs	r0, #0
 800486c:	f7fe fcb6 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Weather forecast", 93, 240, 16, NOBACKCOLOR);
 8004870:	2300      	movs	r3, #0
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2310      	movs	r3, #16
 8004876:	22f0      	movs	r2, #240	@ 0xf0
 8004878:	215d      	movs	r1, #93	@ 0x5d
 800487a:	4813      	ldr	r0, [pc, #76]	@ (80048c8 <mainMenu+0xe0>)
 800487c:	f7fd fee6 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 8004880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	230a      	movs	r3, #10
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	2328      	movs	r3, #40	@ 0x28
 800488c:	22f0      	movs	r2, #240	@ 0xf0
 800488e:	2180      	movs	r1, #128	@ 0x80
 8004890:	2000      	movs	r0, #0
 8004892:	f7fe fca3 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Show garden state", 141, 240, 16, NOBACKCOLOR);
 8004896:	2300      	movs	r3, #0
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	2310      	movs	r3, #16
 800489c:	22f0      	movs	r2, #240	@ 0xf0
 800489e:	218d      	movs	r1, #141	@ 0x8d
 80048a0:	480a      	ldr	r0, [pc, #40]	@ (80048cc <mainMenu+0xe4>)
 80048a2:	f7fd fed3 	bl	800264c <drawAlignedText>
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000014 	.word	0x20000014
 80048b0:	20000058 	.word	0x20000058
 80048b4:	200009ff 	.word	0x200009ff
 80048b8:	200009fd 	.word	0x200009fd
 80048bc:	200009fc 	.word	0x200009fc
 80048c0:	0800bcdc 	.word	0x0800bcdc
 80048c4:	0800bcf0 	.word	0x0800bcf0
 80048c8:	0800bd00 	.word	0x0800bd00
 80048cc:	0800bd14 	.word	0x0800bd14

080048d0 <drawBufferScreen>:

void drawBufferScreen()
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af02      	add	r7, sp, #8
	menu = 0;
 80048d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004908 <drawBufferScreen+0x38>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_BLACK);
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fe f9c7 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 80048e2:	f7ff fc8b 	bl	80041fc <drawBackIcon>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80048e6:	2100      	movs	r1, #0
 80048e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80048ec:	f7ff f8da 	bl	8003aa4 <lcdSetTextColor>
	drawAlignedText("Fetching data", 160, 240, 16, NOBACKCOLOR);
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2310      	movs	r3, #16
 80048f6:	22f0      	movs	r2, #240	@ 0xf0
 80048f8:	21a0      	movs	r1, #160	@ 0xa0
 80048fa:	4804      	ldr	r0, [pc, #16]	@ (800490c <drawBufferScreen+0x3c>)
 80048fc:	f7fd fea6 	bl	800264c <drawAlignedText>
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000058 	.word	0x20000058
 800490c:	0800bd28 	.word	0x0800bd28

08004910 <checkCoordinates>:

void checkCoordinates()
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
	if ((yCoordinates >= 32 && yCoordinates <= 72) && menu == 1)
 8004914:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2b1f      	cmp	r3, #31
 800491a:	d90f      	bls.n	800493c <checkCoordinates+0x2c>
 800491c:	4b74      	ldr	r3, [pc, #464]	@ (8004af0 <checkCoordinates+0x1e0>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	2b48      	cmp	r3, #72	@ 0x48
 8004922:	d80b      	bhi.n	800493c <checkCoordinates+0x2c>
 8004924:	4b73      	ldr	r3, [pc, #460]	@ (8004af4 <checkCoordinates+0x1e4>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <checkCoordinates+0x2c>
	{
		drawBufferScreen();
 800492c:	f7ff ffd0 	bl	80048d0 <drawBufferScreen>
		sendWifiRequest();
 8004930:	f000 fc24 	bl	800517c <sendWifiRequest>
		wifi = 1;
 8004934:	4b70      	ldr	r3, [pc, #448]	@ (8004af8 <checkCoordinates+0x1e8>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e0d6      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120 && menu == 1) || (yCoordinates <= 23 && xCoordinates <= 27 && showWeather == 1))
 800493c:	4b6c      	ldr	r3, [pc, #432]	@ (8004af0 <checkCoordinates+0x1e0>)
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	2b4f      	cmp	r3, #79	@ 0x4f
 8004942:	d907      	bls.n	8004954 <checkCoordinates+0x44>
 8004944:	4b6a      	ldr	r3, [pc, #424]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	2b78      	cmp	r3, #120	@ 0x78
 800494a:	d803      	bhi.n	8004954 <checkCoordinates+0x44>
 800494c:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <checkCoordinates+0x1e4>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d00b      	beq.n	800496c <checkCoordinates+0x5c>
 8004954:	4b66      	ldr	r3, [pc, #408]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2b17      	cmp	r3, #23
 800495a:	d80a      	bhi.n	8004972 <checkCoordinates+0x62>
 800495c:	4b67      	ldr	r3, [pc, #412]	@ (8004afc <checkCoordinates+0x1ec>)
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	2b1b      	cmp	r3, #27
 8004962:	d806      	bhi.n	8004972 <checkCoordinates+0x62>
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <checkCoordinates+0x1f0>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d102      	bne.n	8004972 <checkCoordinates+0x62>
	{
		weatherForecastMenu();
 800496c:	f7ff fe42 	bl	80045f4 <weatherForecastMenu>
 8004970:	e0bb      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 128 && yCoordinates <= 168 && menu == 1) || (yCoordinates <= 23 && xCoordinates <= 27 && showGardenState == 1))
 8004972:	4b5f      	ldr	r3, [pc, #380]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004974:	881b      	ldrh	r3, [r3, #0]
 8004976:	2b7f      	cmp	r3, #127	@ 0x7f
 8004978:	d907      	bls.n	800498a <checkCoordinates+0x7a>
 800497a:	4b5d      	ldr	r3, [pc, #372]	@ (8004af0 <checkCoordinates+0x1e0>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2ba8      	cmp	r3, #168	@ 0xa8
 8004980:	d803      	bhi.n	800498a <checkCoordinates+0x7a>
 8004982:	4b5c      	ldr	r3, [pc, #368]	@ (8004af4 <checkCoordinates+0x1e4>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d00b      	beq.n	80049a2 <checkCoordinates+0x92>
 800498a:	4b59      	ldr	r3, [pc, #356]	@ (8004af0 <checkCoordinates+0x1e0>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	2b17      	cmp	r3, #23
 8004990:	d80a      	bhi.n	80049a8 <checkCoordinates+0x98>
 8004992:	4b5a      	ldr	r3, [pc, #360]	@ (8004afc <checkCoordinates+0x1ec>)
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	2b1b      	cmp	r3, #27
 8004998:	d806      	bhi.n	80049a8 <checkCoordinates+0x98>
 800499a:	4b5a      	ldr	r3, [pc, #360]	@ (8004b04 <checkCoordinates+0x1f4>)
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d102      	bne.n	80049a8 <checkCoordinates+0x98>
	{
		gardenStateMenu();
 80049a2:	f7ff fed9 	bl	8004758 <gardenStateMenu>
 80049a6:	e0a0      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates <= 23 && xCoordinates <= 27) && menu != 1)
 80049a8:	4b51      	ldr	r3, [pc, #324]	@ (8004af0 <checkCoordinates+0x1e0>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	2b17      	cmp	r3, #23
 80049ae:	d80a      	bhi.n	80049c6 <checkCoordinates+0xb6>
 80049b0:	4b52      	ldr	r3, [pc, #328]	@ (8004afc <checkCoordinates+0x1ec>)
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	2b1b      	cmp	r3, #27
 80049b6:	d806      	bhi.n	80049c6 <checkCoordinates+0xb6>
 80049b8:	4b4e      	ldr	r3, [pc, #312]	@ (8004af4 <checkCoordinates+0x1e4>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d002      	beq.n	80049c6 <checkCoordinates+0xb6>
	{
		mainMenu();
 80049c0:	f7ff ff12 	bl	80047e8 <mainMenu>
 80049c4:	e091      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 32 && yCoordinates <= 72) && weatherForecast == 1)
 80049c6:	4b4a      	ldr	r3, [pc, #296]	@ (8004af0 <checkCoordinates+0x1e0>)
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	2b1f      	cmp	r3, #31
 80049cc:	d910      	bls.n	80049f0 <checkCoordinates+0xe0>
 80049ce:	4b48      	ldr	r3, [pc, #288]	@ (8004af0 <checkCoordinates+0x1e0>)
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	2b48      	cmp	r3, #72	@ 0x48
 80049d4:	d80c      	bhi.n	80049f0 <checkCoordinates+0xe0>
 80049d6:	4b4c      	ldr	r3, [pc, #304]	@ (8004b08 <checkCoordinates+0x1f8>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d108      	bne.n	80049f0 <checkCoordinates+0xe0>
	{
		drawBufferScreen();
 80049de:	f7ff ff77 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(SAIGON);
 80049e2:	2001      	movs	r0, #1
 80049e4:	f000 fb28 	bl	8005038 <sendAPIURL>
		currentCity = SAIGON;
 80049e8:	4b48      	ldr	r3, [pc, #288]	@ (8004b0c <checkCoordinates+0x1fc>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	e07c      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120) && weatherForecast == 1)
 80049f0:	4b3f      	ldr	r3, [pc, #252]	@ (8004af0 <checkCoordinates+0x1e0>)
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80049f6:	d910      	bls.n	8004a1a <checkCoordinates+0x10a>
 80049f8:	4b3d      	ldr	r3, [pc, #244]	@ (8004af0 <checkCoordinates+0x1e0>)
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	2b78      	cmp	r3, #120	@ 0x78
 80049fe:	d80c      	bhi.n	8004a1a <checkCoordinates+0x10a>
 8004a00:	4b41      	ldr	r3, [pc, #260]	@ (8004b08 <checkCoordinates+0x1f8>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d108      	bne.n	8004a1a <checkCoordinates+0x10a>
	{
		drawBufferScreen();
 8004a08:	f7ff ff62 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(NHATRANG);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f000 fb13 	bl	8005038 <sendAPIURL>
		currentCity = NHATRANG;
 8004a12:	4b3e      	ldr	r3, [pc, #248]	@ (8004b0c <checkCoordinates+0x1fc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	e067      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 128 && yCoordinates <= 168) && weatherForecast == 1)
 8004a1a:	4b35      	ldr	r3, [pc, #212]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a20:	d910      	bls.n	8004a44 <checkCoordinates+0x134>
 8004a22:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a28:	d80c      	bhi.n	8004a44 <checkCoordinates+0x134>
 8004a2a:	4b37      	ldr	r3, [pc, #220]	@ (8004b08 <checkCoordinates+0x1f8>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d108      	bne.n	8004a44 <checkCoordinates+0x134>
	{
		drawBufferScreen();
 8004a32:	f7ff ff4d 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(HANOI);
 8004a36:	2002      	movs	r0, #2
 8004a38:	f000 fafe 	bl	8005038 <sendAPIURL>
		currentCity = HANOI;
 8004a3c:	4b33      	ldr	r3, [pc, #204]	@ (8004b0c <checkCoordinates+0x1fc>)
 8004a3e:	2202      	movs	r2, #2
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	e052      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 176 && yCoordinates <= 216) && weatherForecast == 1)
 8004a44:	4b2a      	ldr	r3, [pc, #168]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	2baf      	cmp	r3, #175	@ 0xaf
 8004a4a:	d910      	bls.n	8004a6e <checkCoordinates+0x15e>
 8004a4c:	4b28      	ldr	r3, [pc, #160]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	2bd8      	cmp	r3, #216	@ 0xd8
 8004a52:	d80c      	bhi.n	8004a6e <checkCoordinates+0x15e>
 8004a54:	4b2c      	ldr	r3, [pc, #176]	@ (8004b08 <checkCoordinates+0x1f8>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d108      	bne.n	8004a6e <checkCoordinates+0x15e>
	{
		drawBufferScreen();
 8004a5c:	f7ff ff38 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(TAMPERE);
 8004a60:	2003      	movs	r0, #3
 8004a62:	f000 fae9 	bl	8005038 <sendAPIURL>
		currentCity = TAMPERE;
 8004a66:	4b29      	ldr	r3, [pc, #164]	@ (8004b0c <checkCoordinates+0x1fc>)
 8004a68:	2203      	movs	r2, #3
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e03d      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 224 && yCoordinates <= 264) && weatherForecast == 1)
 8004a6e:	4b20      	ldr	r3, [pc, #128]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	2bdf      	cmp	r3, #223	@ 0xdf
 8004a74:	d911      	bls.n	8004a9a <checkCoordinates+0x18a>
 8004a76:	4b1e      	ldr	r3, [pc, #120]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8004a7e:	d80c      	bhi.n	8004a9a <checkCoordinates+0x18a>
 8004a80:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <checkCoordinates+0x1f8>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d108      	bne.n	8004a9a <checkCoordinates+0x18a>
	{
		drawBufferScreen();
 8004a88:	f7ff ff22 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(ARNHEM);
 8004a8c:	2004      	movs	r0, #4
 8004a8e:	f000 fad3 	bl	8005038 <sendAPIURL>
		currentCity = ARNHEM;
 8004a92:	4b1e      	ldr	r3, [pc, #120]	@ (8004b0c <checkCoordinates+0x1fc>)
 8004a94:	2204      	movs	r2, #4
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	e027      	b.n	8004aea <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 272 && yCoordinates <= 312) && weatherForecast == 1)
 8004a9a:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8004aa2:	d311      	bcc.n	8004ac8 <checkCoordinates+0x1b8>
 8004aa4:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8004aac:	d80c      	bhi.n	8004ac8 <checkCoordinates+0x1b8>
 8004aae:	4b16      	ldr	r3, [pc, #88]	@ (8004b08 <checkCoordinates+0x1f8>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d108      	bne.n	8004ac8 <checkCoordinates+0x1b8>
	{
		drawBufferScreen();
 8004ab6:	f7ff ff0b 	bl	80048d0 <drawBufferScreen>
		sendAPIURL(SYDNEY);
 8004aba:	2005      	movs	r0, #5
 8004abc:	f000 fabc 	bl	8005038 <sendAPIURL>
		currentCity = SYDNEY;
 8004ac0:	4b12      	ldr	r3, [pc, #72]	@ (8004b0c <checkCoordinates+0x1fc>)
 8004ac2:	2205      	movs	r2, #5
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e010      	b.n	8004aea <checkCoordinates+0x1da>
	}

	else if ((yCoordinates >= 32 && yCoordinates <= 72) && gardenState == 1)
 8004ac8:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	2b1f      	cmp	r3, #31
 8004ace:	d90c      	bls.n	8004aea <checkCoordinates+0x1da>
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <checkCoordinates+0x1e0>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	2b48      	cmp	r3, #72	@ 0x48
 8004ad6:	d808      	bhi.n	8004aea <checkCoordinates+0x1da>
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <checkCoordinates+0x200>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d104      	bne.n	8004aea <checkCoordinates+0x1da>
	{
		drawBufferScreen();
 8004ae0:	f7ff fef6 	bl	80048d0 <drawBufferScreen>
		sendGardenStateRequest();
 8004ae4:	f000 fb32 	bl	800514c <sendGardenStateRequest>
	}
}
 8004ae8:	e7ff      	b.n	8004aea <checkCoordinates+0x1da>
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200009fa 	.word	0x200009fa
 8004af4:	20000058 	.word	0x20000058
 8004af8:	200009fc 	.word	0x200009fc
 8004afc:	200009f8 	.word	0x200009f8
 8004b00:	200009fe 	.word	0x200009fe
 8004b04:	20000a00 	.word	0x20000a00
 8004b08:	200009fd 	.word	0x200009fd
 8004b0c:	20000a28 	.word	0x20000a28
 8004b10:	200009ff 	.word	0x200009ff

08004b14 <drawWeather>:

void drawWeather(uint16_t xPosition, uint16_t yPosition, int weatherCode)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	603a      	str	r2, [r7, #0]
 8004b1e:	80fb      	strh	r3, [r7, #6]
 8004b20:	460b      	mov	r3, r1
 8004b22:	80bb      	strh	r3, [r7, #4]
	if (weatherCode == 0)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <drawWeather+0x24>
	{
		drawClearDay(xPosition, yPosition);
 8004b2a:	88ba      	ldrh	r2, [r7, #4]
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fd fdb4 	bl	800269e <drawClearDay>
	}
	else if (weatherCode == 45 || weatherCode == 48)
	{
		drawFoggyDay(xPosition, yPosition);
	}
}
 8004b36:	e04c      	b.n	8004bd2 <drawWeather+0xbe>
	else if (weatherCode >= 1 && weatherCode <= 3)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	dd09      	ble.n	8004b52 <drawWeather+0x3e>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	dc06      	bgt.n	8004b52 <drawWeather+0x3e>
		drawCloudyDay(xPosition, yPosition);
 8004b44:	88ba      	ldrh	r2, [r7, #4]
 8004b46:	88fb      	ldrh	r3, [r7, #6]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fd fdbf 	bl	80026ce <drawCloudyDay>
 8004b50:	e03f      	b.n	8004bd2 <drawWeather+0xbe>
	else if ((weatherCode >= 51 && weatherCode <= 67) || (weatherCode >= 80 && weatherCode <= 82))
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b32      	cmp	r3, #50	@ 0x32
 8004b56:	dd02      	ble.n	8004b5e <drawWeather+0x4a>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b43      	cmp	r3, #67	@ 0x43
 8004b5c:	dd05      	ble.n	8004b6a <drawWeather+0x56>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b62:	dd09      	ble.n	8004b78 <drawWeather+0x64>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b52      	cmp	r3, #82	@ 0x52
 8004b68:	dc06      	bgt.n	8004b78 <drawWeather+0x64>
		drawRainyDay(xPosition, yPosition);
 8004b6a:	88ba      	ldrh	r2, [r7, #4]
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fd fdec 	bl	800274e <drawRainyDay>
 8004b76:	e02c      	b.n	8004bd2 <drawWeather+0xbe>
	else if ((weatherCode >= 71 && weatherCode <= 77) || (weatherCode == 85 || weatherCode == 86))
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b46      	cmp	r3, #70	@ 0x46
 8004b7c:	dd02      	ble.n	8004b84 <drawWeather+0x70>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b4d      	cmp	r3, #77	@ 0x4d
 8004b82:	dd05      	ble.n	8004b90 <drawWeather+0x7c>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	2b55      	cmp	r3, #85	@ 0x55
 8004b88:	d002      	beq.n	8004b90 <drawWeather+0x7c>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b56      	cmp	r3, #86	@ 0x56
 8004b8e:	d106      	bne.n	8004b9e <drawWeather+0x8a>
		drawSnowyDay(xPosition, yPosition);
 8004b90:	88ba      	ldrh	r2, [r7, #4]
 8004b92:	88fb      	ldrh	r3, [r7, #6]
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fd fe44 	bl	8002824 <drawSnowyDay>
 8004b9c:	e019      	b.n	8004bd2 <drawWeather+0xbe>
	else if (weatherCode >= 95 && weatherCode <= 99)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b5e      	cmp	r3, #94	@ 0x5e
 8004ba2:	dd09      	ble.n	8004bb8 <drawWeather+0xa4>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b63      	cmp	r3, #99	@ 0x63
 8004ba8:	dc06      	bgt.n	8004bb8 <drawWeather+0xa4>
		drawStormyDay(xPosition, yPosition);
 8004baa:	88ba      	ldrh	r2, [r7, #4]
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd ff6d 	bl	8002a90 <drawStormyDay>
 8004bb6:	e00c      	b.n	8004bd2 <drawWeather+0xbe>
	else if (weatherCode == 45 || weatherCode == 48)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b2d      	cmp	r3, #45	@ 0x2d
 8004bbc:	d002      	beq.n	8004bc4 <drawWeather+0xb0>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b30      	cmp	r3, #48	@ 0x30
 8004bc2:	d106      	bne.n	8004bd2 <drawWeather+0xbe>
		drawFoggyDay(xPosition, yPosition);
 8004bc4:	88ba      	ldrh	r2, [r7, #4]
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fd fe80 	bl	80028d0 <drawFoggyDay>
}
 8004bd0:	e7ff      	b.n	8004bd2 <drawWeather+0xbe>
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <weatherForecastInterface>:

void weatherForecastInterface()
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af02      	add	r7, sp, #8
	showWeather = 1;
 8004be2:	4b8c      	ldr	r3, [pc, #560]	@ (8004e14 <weatherForecastInterface+0x238>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
	uint16_t color;
	if (isDay == 0)
 8004be8:	4b8b      	ldr	r3, [pc, #556]	@ (8004e18 <weatherForecastInterface+0x23c>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10c      	bne.n	8004c0a <weatherForecastInterface+0x2e>
	{
		lcdDrawImage(0, 0, &imageNight);
 8004bf0:	4a8a      	ldr	r2, [pc, #552]	@ (8004e1c <weatherForecastInterface+0x240>)
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fe fca3 	bl	8003540 <lcdDrawImage>
		color = COLOR_NAVY;
 8004bfa:	230f      	movs	r3, #15
 8004bfc:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004bfe:	2100      	movs	r1, #0
 8004c00:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004c04:	f7fe ff4e 	bl	8003aa4 <lcdSetTextColor>
 8004c08:	e00b      	b.n	8004c22 <weatherForecastInterface+0x46>
	}
	else
	{
		lcdDrawImage(0, 0, &imageDay);
 8004c0a:	4a85      	ldr	r2, [pc, #532]	@ (8004e20 <weatherForecastInterface+0x244>)
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7fe fc96 	bl	8003540 <lcdDrawImage>
		color = COLOR_CYAN;
 8004c14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004c18:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fe ff41 	bl	8003aa4 <lcdSetTextColor>
	}
	drawBackIcon();
 8004c22:	f7ff faeb 	bl	80041fc <drawBackIcon>

	for (int y = 160; y < 320; y++)
 8004c26:	23a0      	movs	r3, #160	@ 0xa0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	e013      	b.n	8004c54 <weatherForecastInterface+0x78>
	{
		for (int x = 0; x < 240; x++)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	e00a      	b.n	8004c48 <weatherForecastInterface+0x6c>
		{
		    lcdDrawPixel(x, y, color);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	b291      	uxth	r1, r2
 8004c3a:	89fa      	ldrh	r2, [r7, #14]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fe f841 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3301      	adds	r3, #1
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2bef      	cmp	r3, #239	@ 0xef
 8004c4c:	ddf1      	ble.n	8004c32 <weatherForecastInterface+0x56>
	for (int y = 160; y < 320; y++)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004c5a:	dbe7      	blt.n	8004c2c <weatherForecastInterface+0x50>
		}
	}

	lcdSetTextFont(&Font12);
 8004c5c:	4871      	ldr	r0, [pc, #452]	@ (8004e24 <weatherForecastInterface+0x248>)
 8004c5e:	f7fe ff11 	bl	8003a84 <lcdSetTextFont>

	reformatDate();
 8004c62:	f000 f9ad 	bl	8004fc0 <reformatDate>

	drawWeather(40, 190, weather[0]);
 8004c66:	4b70      	ldr	r3, [pc, #448]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	21be      	movs	r1, #190	@ 0xbe
 8004c6e:	2028      	movs	r0, #40	@ 0x28
 8004c70:	f7ff ff50 	bl	8004b14 <drawWeather>
	lcdSetCursor(25, 160);
 8004c74:	21a0      	movs	r1, #160	@ 0xa0
 8004c76:	2019      	movs	r0, #25
 8004c78:	f7fe ff94 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[0]);
 8004c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe fe79 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(90, 190, weather[1]);
 8004c86:	4b68      	ldr	r3, [pc, #416]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	21be      	movs	r1, #190	@ 0xbe
 8004c8e:	205a      	movs	r0, #90	@ 0x5a
 8004c90:	f7ff ff40 	bl	8004b14 <drawWeather>
	lcdSetCursor(75, 160);
 8004c94:	21a0      	movs	r1, #160	@ 0xa0
 8004c96:	204b      	movs	r0, #75	@ 0x4b
 8004c98:	f7fe ff84 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[1]);
 8004c9c:	4b63      	ldr	r3, [pc, #396]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe fe69 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(150, 190, weather[2]);
 8004ca6:	4b60      	ldr	r3, [pc, #384]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	461a      	mov	r2, r3
 8004cac:	21be      	movs	r1, #190	@ 0xbe
 8004cae:	2096      	movs	r0, #150	@ 0x96
 8004cb0:	f7ff ff30 	bl	8004b14 <drawWeather>
	lcdSetCursor(135, 160);
 8004cb4:	21a0      	movs	r1, #160	@ 0xa0
 8004cb6:	2087      	movs	r0, #135	@ 0x87
 8004cb8:	f7fe ff74 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[2]);
 8004cbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe fe59 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(200, 190, weather[3]);
 8004cc6:	4b58      	ldr	r3, [pc, #352]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	21be      	movs	r1, #190	@ 0xbe
 8004cce:	20c8      	movs	r0, #200	@ 0xc8
 8004cd0:	f7ff ff20 	bl	8004b14 <drawWeather>
	lcdSetCursor(185, 160);
 8004cd4:	21a0      	movs	r1, #160	@ 0xa0
 8004cd6:	20b9      	movs	r0, #185	@ 0xb9
 8004cd8:	f7fe ff64 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[3]);
 8004cdc:	4b53      	ldr	r3, [pc, #332]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fe49 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(65, 270, weather[4]);
 8004ce6:	4b50      	ldr	r3, [pc, #320]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004cf0:	2041      	movs	r0, #65	@ 0x41
 8004cf2:	f7ff ff0f 	bl	8004b14 <drawWeather>
	lcdSetCursor(50, 240);
 8004cf6:	21f0      	movs	r1, #240	@ 0xf0
 8004cf8:	2032      	movs	r0, #50	@ 0x32
 8004cfa:	f7fe ff53 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[4]);
 8004cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fe38 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(120, 270, weather[5]);
 8004d08:	4b47      	ldr	r3, [pc, #284]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004d12:	2078      	movs	r0, #120	@ 0x78
 8004d14:	f7ff fefe 	bl	8004b14 <drawWeather>
	lcdSetCursor(105, 240);
 8004d18:	21f0      	movs	r1, #240	@ 0xf0
 8004d1a:	2069      	movs	r0, #105	@ 0x69
 8004d1c:	f7fe ff42 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[5]);
 8004d20:	4b42      	ldr	r3, [pc, #264]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fe27 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(175, 270, weather[6]);
 8004d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e28 <weatherForecastInterface+0x24c>)
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004d34:	20af      	movs	r0, #175	@ 0xaf
 8004d36:	f7ff feed 	bl	8004b14 <drawWeather>
	lcdSetCursor(160, 240);
 8004d3a:	21f0      	movs	r1, #240	@ 0xf0
 8004d3c:	20a0      	movs	r0, #160	@ 0xa0
 8004d3e:	f7fe ff31 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[6]);
 8004d42:	4b3a      	ldr	r3, [pc, #232]	@ (8004e2c <weatherForecastInterface+0x250>)
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fe16 	bl	8003978 <lcdPrintfNoBackColor>

	lcdSetCursor(80, 110);
 8004d4c:	216e      	movs	r1, #110	@ 0x6e
 8004d4e:	2050      	movs	r0, #80	@ 0x50
 8004d50:	f7fe ff28 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", currentHumidity);
 8004d54:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <weatherForecastInterface+0x254>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4836      	ldr	r0, [pc, #216]	@ (8004e34 <weatherForecastInterface+0x258>)
 8004d5c:	f7fe fe0c 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font20);
 8004d60:	4835      	ldr	r0, [pc, #212]	@ (8004e38 <weatherForecastInterface+0x25c>)
 8004d62:	f7fe fe8f 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 8004d66:	215a      	movs	r1, #90	@ 0x5a
 8004d68:	206e      	movs	r0, #110	@ 0x6e
 8004d6a:	f7fe ff1b 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", currentTemperature);
 8004d6e:	4b33      	ldr	r3, [pc, #204]	@ (8004e3c <weatherForecastInterface+0x260>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4832      	ldr	r0, [pc, #200]	@ (8004e40 <weatherForecastInterface+0x264>)
 8004d76:	f7fe fdff 	bl	8003978 <lcdPrintfNoBackColor>

	switch (currentCity)
 8004d7a:	4b32      	ldr	r3, [pc, #200]	@ (8004e44 <weatherForecastInterface+0x268>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d844      	bhi.n	8004e0c <weatherForecastInterface+0x230>
 8004d82:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <weatherForecastInterface+0x1ac>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004db3 	.word	0x08004db3
 8004d90:	08004dc5 	.word	0x08004dc5
 8004d94:	08004dd7 	.word	0x08004dd7
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004dfb 	.word	0x08004dfb
	{
		case NHATRANG:
			drawAlignedText("Nha Trang", 10, 240, 16, NOBACKCOLOR);
 8004da0:	2300      	movs	r3, #0
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	2310      	movs	r3, #16
 8004da6:	22f0      	movs	r2, #240	@ 0xf0
 8004da8:	210a      	movs	r1, #10
 8004daa:	4827      	ldr	r0, [pc, #156]	@ (8004e48 <weatherForecastInterface+0x26c>)
 8004dac:	f7fd fc4e 	bl	800264c <drawAlignedText>
			break;
 8004db0:	e02c      	b.n	8004e0c <weatherForecastInterface+0x230>
		case SAIGON:
			drawAlignedText("Sai Gon", 10, 240, 16, NOBACKCOLOR);
 8004db2:	2300      	movs	r3, #0
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2310      	movs	r3, #16
 8004db8:	22f0      	movs	r2, #240	@ 0xf0
 8004dba:	210a      	movs	r1, #10
 8004dbc:	4823      	ldr	r0, [pc, #140]	@ (8004e4c <weatherForecastInterface+0x270>)
 8004dbe:	f7fd fc45 	bl	800264c <drawAlignedText>
			break;
 8004dc2:	e023      	b.n	8004e0c <weatherForecastInterface+0x230>
		case HANOI:
			drawAlignedText("Ha Noi", 10, 240, 16, NOBACKCOLOR);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	2310      	movs	r3, #16
 8004dca:	22f0      	movs	r2, #240	@ 0xf0
 8004dcc:	210a      	movs	r1, #10
 8004dce:	4820      	ldr	r0, [pc, #128]	@ (8004e50 <weatherForecastInterface+0x274>)
 8004dd0:	f7fd fc3c 	bl	800264c <drawAlignedText>
			break;
 8004dd4:	e01a      	b.n	8004e0c <weatherForecastInterface+0x230>
		case TAMPERE:
			drawAlignedText("Tampere", 10, 240, 16, NOBACKCOLOR);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	2310      	movs	r3, #16
 8004ddc:	22f0      	movs	r2, #240	@ 0xf0
 8004dde:	210a      	movs	r1, #10
 8004de0:	481c      	ldr	r0, [pc, #112]	@ (8004e54 <weatherForecastInterface+0x278>)
 8004de2:	f7fd fc33 	bl	800264c <drawAlignedText>
			break;
 8004de6:	e011      	b.n	8004e0c <weatherForecastInterface+0x230>
		case ARNHEM:
			drawAlignedText("Arnhem", 10, 240, 16, NOBACKCOLOR);
 8004de8:	2300      	movs	r3, #0
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2310      	movs	r3, #16
 8004dee:	22f0      	movs	r2, #240	@ 0xf0
 8004df0:	210a      	movs	r1, #10
 8004df2:	4819      	ldr	r0, [pc, #100]	@ (8004e58 <weatherForecastInterface+0x27c>)
 8004df4:	f7fd fc2a 	bl	800264c <drawAlignedText>
			break;
 8004df8:	e008      	b.n	8004e0c <weatherForecastInterface+0x230>
		case SYDNEY:
			drawAlignedText("Sydney", 10, 240, 16, NOBACKCOLOR);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	2310      	movs	r3, #16
 8004e00:	22f0      	movs	r2, #240	@ 0xf0
 8004e02:	210a      	movs	r1, #10
 8004e04:	4815      	ldr	r0, [pc, #84]	@ (8004e5c <weatherForecastInterface+0x280>)
 8004e06:	f7fd fc21 	bl	800264c <drawAlignedText>
			break;
 8004e0a:	bf00      	nop
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200009fe 	.word	0x200009fe
 8004e18:	20000a31 	.word	0x20000a31
 8004e1c:	08031698 	.word	0x08031698
 8004e20:	0801ea8c 	.word	0x0801ea8c
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	20000a04 	.word	0x20000a04
 8004e2c:	20000a34 	.word	0x20000a34
 8004e30:	20000a24 	.word	0x20000a24
 8004e34:	0800bd38 	.word	0x0800bd38
 8004e38:	2000001c 	.word	0x2000001c
 8004e3c:	20000a20 	.word	0x20000a20
 8004e40:	0800bd48 	.word	0x0800bd48
 8004e44:	20000a28 	.word	0x20000a28
 8004e48:	0800bc90 	.word	0x0800bc90
 8004e4c:	0800bc88 	.word	0x0800bc88
 8004e50:	0800bc9c 	.word	0x0800bc9c
 8004e54:	0800bca4 	.word	0x0800bca4
 8004e58:	0800bcac 	.word	0x0800bcac
 8004e5c:	0800bcb4 	.word	0x0800bcb4

08004e60 <gardenStateInterface>:

void gardenStateInterface()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af02      	add	r7, sp, #8
	showGardenState = 1;
 8004e66:	4b3b      	ldr	r3, [pc, #236]	@ (8004f54 <gardenStateInterface+0xf4>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
	lcdDrawImage(0, 0, &imageDay);
 8004e6c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f58 <gardenStateInterface+0xf8>)
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2000      	movs	r0, #0
 8004e72:	f7fe fb65 	bl	8003540 <lcdDrawImage>
	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004e76:	2100      	movs	r1, #0
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7fe fe13 	bl	8003aa4 <lcdSetTextColor>
	drawBackIcon();
 8004e7e:	f7ff f9bd 	bl	80041fc <drawBackIcon>
	for (int y = 160; y < 320; y++)
 8004e82:	23a0      	movs	r3, #160	@ 0xa0
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	e014      	b.n	8004eb2 <gardenStateInterface+0x52>
	{
		for (int x = 0; x < 240; x++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	e00b      	b.n	8004ea6 <gardenStateInterface+0x46>
		{
			lcdDrawPixel(x, y, COLOR_CYAN);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	b291      	uxth	r1, r2
 8004e96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fd ff12 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	603b      	str	r3, [r7, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2bef      	cmp	r3, #239	@ 0xef
 8004eaa:	ddf0      	ble.n	8004e8e <gardenStateInterface+0x2e>
	for (int y = 160; y < 320; y++)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	607b      	str	r3, [r7, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004eb8:	dbe6      	blt.n	8004e88 <gardenStateInterface+0x28>
		}
	}
	lcdSetTextFont(&Font20);
 8004eba:	4828      	ldr	r0, [pc, #160]	@ (8004f5c <gardenStateInterface+0xfc>)
 8004ebc:	f7fe fde2 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 8004ec0:	215a      	movs	r1, #90	@ 0x5a
 8004ec2:	206e      	movs	r0, #110	@ 0x6e
 8004ec4:	f7fe fe6e 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", gardenTemperature);
 8004ec8:	4b25      	ldr	r3, [pc, #148]	@ (8004f60 <gardenStateInterface+0x100>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4825      	ldr	r0, [pc, #148]	@ (8004f64 <gardenStateInterface+0x104>)
 8004ed0:	f7fe fd52 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font12);
 8004ed4:	4824      	ldr	r0, [pc, #144]	@ (8004f68 <gardenStateInterface+0x108>)
 8004ed6:	f7fe fdd5 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(80, 110);
 8004eda:	216e      	movs	r1, #110	@ 0x6e
 8004edc:	2050      	movs	r0, #80	@ 0x50
 8004ede:	f7fe fe61 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", gardenHumidity);
 8004ee2:	4b22      	ldr	r3, [pc, #136]	@ (8004f6c <gardenStateInterface+0x10c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4821      	ldr	r0, [pc, #132]	@ (8004f70 <gardenStateInterface+0x110>)
 8004eea:	f7fe fd45 	bl	8003978 <lcdPrintfNoBackColor>
	drawAlignedText("Currently in: Phu Nhuan", 10, 240, 12, NOBACKCOLOR);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	230c      	movs	r3, #12
 8004ef4:	22f0      	movs	r2, #240	@ 0xf0
 8004ef6:	210a      	movs	r1, #10
 8004ef8:	481e      	ldr	r0, [pc, #120]	@ (8004f74 <gardenStateInterface+0x114>)
 8004efa:	f7fd fba7 	bl	800264c <drawAlignedText>
	if (gardenHumidity <= 80 || gardenTemperature >= 30)
 8004efe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <gardenStateInterface+0x10c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b50      	cmp	r3, #80	@ 0x50
 8004f04:	dd03      	ble.n	8004f0e <gardenStateInterface+0xae>
 8004f06:	4b16      	ldr	r3, [pc, #88]	@ (8004f60 <gardenStateInterface+0x100>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b1d      	cmp	r3, #29
 8004f0c:	dd1e      	ble.n	8004f4c <gardenStateInterface+0xec>
	{
		drawAlignedText("Please water your garden!", 240, 240, 12, NOBACKCOLOR);
 8004f0e:	2300      	movs	r3, #0
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	230c      	movs	r3, #12
 8004f14:	22f0      	movs	r2, #240	@ 0xf0
 8004f16:	21f0      	movs	r1, #240	@ 0xf0
 8004f18:	4817      	ldr	r0, [pc, #92]	@ (8004f78 <gardenStateInterface+0x118>)
 8004f1a:	f7fd fb97 	bl	800264c <drawAlignedText>
		if (gardenHumidity <= 80)
 8004f1e:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <gardenStateInterface+0x10c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b50      	cmp	r3, #80	@ 0x50
 8004f24:	dc09      	bgt.n	8004f3a <gardenStateInterface+0xda>
		{
			drawAlignedText("Problem: Low humidity", 270, 240, 12, NOBACKCOLOR);
 8004f26:	2300      	movs	r3, #0
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	22f0      	movs	r2, #240	@ 0xf0
 8004f2e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004f32:	4812      	ldr	r0, [pc, #72]	@ (8004f7c <gardenStateInterface+0x11c>)
 8004f34:	f7fd fb8a 	bl	800264c <drawAlignedText>
			return;
 8004f38:	e008      	b.n	8004f4c <gardenStateInterface+0xec>
		}
		drawAlignedText("Problem: High temperature", 270, 240, 12, NOBACKCOLOR);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	230c      	movs	r3, #12
 8004f40:	22f0      	movs	r2, #240	@ 0xf0
 8004f42:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004f46:	480e      	ldr	r0, [pc, #56]	@ (8004f80 <gardenStateInterface+0x120>)
 8004f48:	f7fd fb80 	bl	800264c <drawAlignedText>
	}
}
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000a00 	.word	0x20000a00
 8004f58:	0801ea8c 	.word	0x0801ea8c
 8004f5c:	2000001c 	.word	0x2000001c
 8004f60:	20000be0 	.word	0x20000be0
 8004f64:	0800bd48 	.word	0x0800bd48
 8004f68:	2000000c 	.word	0x2000000c
 8004f6c:	20000be4 	.word	0x20000be4
 8004f70:	0800bd38 	.word	0x0800bd38
 8004f74:	0800bd4c 	.word	0x0800bd4c
 8004f78:	0800bd64 	.word	0x0800bd64
 8004f7c:	0800bd80 	.word	0x0800bd80
 8004f80:	0800bd98 	.word	0x0800bd98

08004f84 <drawInterface>:

void drawInterface()
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
	if (wifi == 1)
 8004f88:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <drawInterface+0x30>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d102      	bne.n	8004f96 <drawInterface+0x12>
	{
		wifiMenu();
 8004f90:	f7ff faee 	bl	8004570 <wifiMenu>
	}
	else if (gardenState == 1)
	{
		gardenStateInterface();
	}
}
 8004f94:	e00c      	b.n	8004fb0 <drawInterface+0x2c>
	else if (weatherForecast == 1)
 8004f96:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <drawInterface+0x34>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <drawInterface+0x20>
		weatherForecastInterface();
 8004f9e:	f7ff fe1d 	bl	8004bdc <weatherForecastInterface>
}
 8004fa2:	e005      	b.n	8004fb0 <drawInterface+0x2c>
	else if (gardenState == 1)
 8004fa4:	4b05      	ldr	r3, [pc, #20]	@ (8004fbc <drawInterface+0x38>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <drawInterface+0x2c>
		gardenStateInterface();
 8004fac:	f7ff ff58 	bl	8004e60 <gardenStateInterface>
}
 8004fb0:	bf00      	nop
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	200009fc 	.word	0x200009fc
 8004fb8:	200009fd 	.word	0x200009fd
 8004fbc:	200009ff 	.word	0x200009ff

08004fc0 <reformatDate>:

void reformatDate()
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
	char temp[6];
	for (int i = 0; i < 7; i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	e02b      	b.n	8005024 <reformatDate+0x64>
	{
	    if (date[i])
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <reformatDate+0x74>)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d022      	beq.n	800501e <reformatDate+0x5e>
	    {
	        strncpy(temp, &date[i][8], 2);
 8004fd8:	4a16      	ldr	r2, [pc, #88]	@ (8005034 <reformatDate+0x74>)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	f103 0108 	add.w	r1, r3, #8
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f004 fc40 	bl	800986e <strncpy>
	        temp[2] = '-';
 8004fee:	232d      	movs	r3, #45	@ 0x2d
 8004ff0:	71bb      	strb	r3, [r7, #6]
	        strncpy(&temp[3], &date[i][5], 2);
 8004ff2:	4a10      	ldr	r2, [pc, #64]	@ (8005034 <reformatDate+0x74>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffa:	1d59      	adds	r1, r3, #5
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	3303      	adds	r3, #3
 8005000:	2202      	movs	r2, #2
 8005002:	4618      	mov	r0, r3
 8005004:	f004 fc33 	bl	800986e <strncpy>
	        temp[5] = '\0';
 8005008:	2300      	movs	r3, #0
 800500a:	727b      	strb	r3, [r7, #9]
	        strcpy(date[i], temp);
 800500c:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <reformatDate+0x74>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005014:	1d3a      	adds	r2, r7, #4
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f004 fcbe 	bl	800999a <strcpy>
	for (int i = 0; i < 7; i++)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b06      	cmp	r3, #6
 8005028:	ddd0      	ble.n	8004fcc <reformatDate+0xc>
	    }
	}
}
 800502a:	bf00      	nop
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000a34 	.word	0x20000a34

08005038 <sendAPIURL>:

void sendAPIURL(uint16_t chooseCity)
{
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	80fb      	strh	r3, [r7, #6]
    switch(chooseCity)
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b05      	cmp	r3, #5
 8005046:	d86f      	bhi.n	8005128 <sendAPIURL+0xf0>
 8005048:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <sendAPIURL+0x18>)
 800504a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504e:	bf00      	nop
 8005050:	08005069 	.word	0x08005069
 8005054:	08005089 	.word	0x08005089
 8005058:	080050a9 	.word	0x080050a9
 800505c:	080050c9 	.word	0x080050c9
 8005060:	080050e9 	.word	0x080050e9
 8005064:	08005109 	.word	0x08005109
    {
    	case NHATRANG:
    		HAL_UART_Transmit(&huart1, (uint8_t*)nhaTrangURL, strlen(nhaTrangURL), HAL_MAX_DELAY);
 8005068:	4b31      	ldr	r3, [pc, #196]	@ (8005130 <sendAPIURL+0xf8>)
 800506a:	681c      	ldr	r4, [r3, #0]
 800506c:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <sendAPIURL+0xf8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f7fb f8b7 	bl	80001e4 <strlen>
 8005076:	4603      	mov	r3, r0
 8005078:	b29a      	uxth	r2, r3
 800507a:	f04f 33ff 	mov.w	r3, #4294967295
 800507e:	4621      	mov	r1, r4
 8005080:	482c      	ldr	r0, [pc, #176]	@ (8005134 <sendAPIURL+0xfc>)
 8005082:	f002 fab9 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 8005086:	e04f      	b.n	8005128 <sendAPIURL+0xf0>
    	case SAIGON:
    		HAL_UART_Transmit(&huart1, (uint8_t*)saiGonURL, strlen(saiGonURL), HAL_MAX_DELAY);
 8005088:	4b2b      	ldr	r3, [pc, #172]	@ (8005138 <sendAPIURL+0x100>)
 800508a:	681c      	ldr	r4, [r3, #0]
 800508c:	4b2a      	ldr	r3, [pc, #168]	@ (8005138 <sendAPIURL+0x100>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7fb f8a7 	bl	80001e4 <strlen>
 8005096:	4603      	mov	r3, r0
 8005098:	b29a      	uxth	r2, r3
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	4621      	mov	r1, r4
 80050a0:	4824      	ldr	r0, [pc, #144]	@ (8005134 <sendAPIURL+0xfc>)
 80050a2:	f002 faa9 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 80050a6:	e03f      	b.n	8005128 <sendAPIURL+0xf0>
    	case HANOI:
    		HAL_UART_Transmit(&huart1, (uint8_t*)haNoiURL, strlen(haNoiURL), HAL_MAX_DELAY);
 80050a8:	4b24      	ldr	r3, [pc, #144]	@ (800513c <sendAPIURL+0x104>)
 80050aa:	681c      	ldr	r4, [r3, #0]
 80050ac:	4b23      	ldr	r3, [pc, #140]	@ (800513c <sendAPIURL+0x104>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fb f897 	bl	80001e4 <strlen>
 80050b6:	4603      	mov	r3, r0
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	4621      	mov	r1, r4
 80050c0:	481c      	ldr	r0, [pc, #112]	@ (8005134 <sendAPIURL+0xfc>)
 80050c2:	f002 fa99 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 80050c6:	e02f      	b.n	8005128 <sendAPIURL+0xf0>
    	case TAMPERE:
    		HAL_UART_Transmit(&huart1, (uint8_t*)tampereURL, strlen(tampereURL), HAL_MAX_DELAY);
 80050c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005140 <sendAPIURL+0x108>)
 80050ca:	681c      	ldr	r4, [r3, #0]
 80050cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005140 <sendAPIURL+0x108>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fb f887 	bl	80001e4 <strlen>
 80050d6:	4603      	mov	r3, r0
 80050d8:	b29a      	uxth	r2, r3
 80050da:	f04f 33ff 	mov.w	r3, #4294967295
 80050de:	4621      	mov	r1, r4
 80050e0:	4814      	ldr	r0, [pc, #80]	@ (8005134 <sendAPIURL+0xfc>)
 80050e2:	f002 fa89 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 80050e6:	e01f      	b.n	8005128 <sendAPIURL+0xf0>
    	case ARNHEM:
    		HAL_UART_Transmit(&huart1, (uint8_t*)arnhemURL, strlen(arnhemURL), HAL_MAX_DELAY);
 80050e8:	4b16      	ldr	r3, [pc, #88]	@ (8005144 <sendAPIURL+0x10c>)
 80050ea:	681c      	ldr	r4, [r3, #0]
 80050ec:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <sendAPIURL+0x10c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fb f877 	bl	80001e4 <strlen>
 80050f6:	4603      	mov	r3, r0
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	4621      	mov	r1, r4
 8005100:	480c      	ldr	r0, [pc, #48]	@ (8005134 <sendAPIURL+0xfc>)
 8005102:	f002 fa79 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 8005106:	e00f      	b.n	8005128 <sendAPIURL+0xf0>
    	case SYDNEY:
    		HAL_UART_Transmit(&huart1, (uint8_t*)sydneyURL, strlen(sydneyURL), HAL_MAX_DELAY);
 8005108:	4b0f      	ldr	r3, [pc, #60]	@ (8005148 <sendAPIURL+0x110>)
 800510a:	681c      	ldr	r4, [r3, #0]
 800510c:	4b0e      	ldr	r3, [pc, #56]	@ (8005148 <sendAPIURL+0x110>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb f867 	bl	80001e4 <strlen>
 8005116:	4603      	mov	r3, r0
 8005118:	b29a      	uxth	r2, r3
 800511a:	f04f 33ff 	mov.w	r3, #4294967295
 800511e:	4621      	mov	r1, r4
 8005120:	4804      	ldr	r0, [pc, #16]	@ (8005134 <sendAPIURL+0xfc>)
 8005122:	f002 fa69 	bl	80075f8 <HAL_UART_Transmit>
    		break;
 8005126:	bf00      	nop
    }
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bd90      	pop	{r4, r7, pc}
 8005130:	2000003c 	.word	0x2000003c
 8005134:	20000558 	.word	0x20000558
 8005138:	20000040 	.word	0x20000040
 800513c:	20000044 	.word	0x20000044
 8005140:	20000048 	.word	0x20000048
 8005144:	2000004c 	.word	0x2000004c
 8005148:	20000050 	.word	0x20000050

0800514c <sendGardenStateRequest>:

void sendGardenStateRequest()
{
 800514c:	b598      	push	{r3, r4, r7, lr}
 800514e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)requestGardenInfo, strlen(requestGardenInfo), HAL_MAX_DELAY);
 8005150:	4b08      	ldr	r3, [pc, #32]	@ (8005174 <sendGardenStateRequest+0x28>)
 8005152:	681c      	ldr	r4, [r3, #0]
 8005154:	4b07      	ldr	r3, [pc, #28]	@ (8005174 <sendGardenStateRequest+0x28>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb f843 	bl	80001e4 <strlen>
 800515e:	4603      	mov	r3, r0
 8005160:	b29a      	uxth	r2, r3
 8005162:	f04f 33ff 	mov.w	r3, #4294967295
 8005166:	4621      	mov	r1, r4
 8005168:	4803      	ldr	r0, [pc, #12]	@ (8005178 <sendGardenStateRequest+0x2c>)
 800516a:	f002 fa45 	bl	80075f8 <HAL_UART_Transmit>
}
 800516e:	bf00      	nop
 8005170:	bd98      	pop	{r3, r4, r7, pc}
 8005172:	bf00      	nop
 8005174:	20000054 	.word	0x20000054
 8005178:	20000558 	.word	0x20000558

0800517c <sendWifiRequest>:

void sendWifiRequest()
{
 800517c:	b598      	push	{r3, r4, r7, lr}
 800517e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)requestWifiInfo, strlen(requestWifiInfo), HAL_MAX_DELAY);
 8005180:	4b08      	ldr	r3, [pc, #32]	@ (80051a4 <sendWifiRequest+0x28>)
 8005182:	681c      	ldr	r4, [r3, #0]
 8005184:	4b07      	ldr	r3, [pc, #28]	@ (80051a4 <sendWifiRequest+0x28>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb f82b 	bl	80001e4 <strlen>
 800518e:	4603      	mov	r3, r0
 8005190:	b29a      	uxth	r2, r3
 8005192:	f04f 33ff 	mov.w	r3, #4294967295
 8005196:	4621      	mov	r1, r4
 8005198:	4803      	ldr	r0, [pc, #12]	@ (80051a8 <sendWifiRequest+0x2c>)
 800519a:	f002 fa2d 	bl	80075f8 <HAL_UART_Transmit>
}
 800519e:	bf00      	nop
 80051a0:	bd98      	pop	{r3, r4, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	2000005c 	.word	0x2000005c
 80051a8:	20000558 	.word	0x20000558

080051ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	if (rxIndex < BUFFER_SIZE - 1)
 80051b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005228 <HAL_UART_RxCpltCallback+0x7c>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80051bc:	4293      	cmp	r3, r2
 80051be:	d828      	bhi.n	8005212 <HAL_UART_RxCpltCallback+0x66>
	{
		if (tempBuffer[0] == '!')
 80051c0:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <HAL_UART_RxCpltCallback+0x80>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b21      	cmp	r3, #33	@ 0x21
 80051c6:	d103      	bne.n	80051d0 <HAL_UART_RxCpltCallback+0x24>
		{
			rxComplete = 1;
 80051c8:	4b19      	ldr	r3, [pc, #100]	@ (8005230 <HAL_UART_RxCpltCallback+0x84>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
			return;
 80051ce:	e028      	b.n	8005222 <HAL_UART_RxCpltCallback+0x76>
		}
		else if (tempBuffer[0] == '?')
 80051d0:	4b16      	ldr	r3, [pc, #88]	@ (800522c <HAL_UART_RxCpltCallback+0x80>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80051d6:	d110      	bne.n	80051fa <HAL_UART_RxCpltCallback+0x4e>
		{
			lcdPrintf("Error fetching data\n");
 80051d8:	4816      	ldr	r0, [pc, #88]	@ (8005234 <HAL_UART_RxCpltCallback+0x88>)
 80051da:	f7fe fb41 	bl	8003860 <lcdPrintf>
			lcdPrintf("Go back to menu!\n");
 80051de:	4816      	ldr	r0, [pc, #88]	@ (8005238 <HAL_UART_RxCpltCallback+0x8c>)
 80051e0:	f7fe fb3e 	bl	8003860 <lcdPrintf>
			rxIndex = 0;
 80051e4:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <HAL_UART_RxCpltCallback+0x7c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	801a      	strh	r2, [r3, #0]
			resetBuffer();
 80051ea:	f000 f9e9 	bl	80055c0 <resetBuffer>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 80051ee:	2201      	movs	r2, #1
 80051f0:	490e      	ldr	r1, [pc, #56]	@ (800522c <HAL_UART_RxCpltCallback+0x80>)
 80051f2:	4812      	ldr	r0, [pc, #72]	@ (800523c <HAL_UART_RxCpltCallback+0x90>)
 80051f4:	f002 fa8b 	bl	800770e <HAL_UART_Receive_IT>
			return;
 80051f8:	e013      	b.n	8005222 <HAL_UART_RxCpltCallback+0x76>
		}
		rxBuffer[rxIndex++] = tempBuffer[0];
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <HAL_UART_RxCpltCallback+0x7c>)
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	b291      	uxth	r1, r2
 8005202:	4a09      	ldr	r2, [pc, #36]	@ (8005228 <HAL_UART_RxCpltCallback+0x7c>)
 8005204:	8011      	strh	r1, [r2, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	4b08      	ldr	r3, [pc, #32]	@ (800522c <HAL_UART_RxCpltCallback+0x80>)
 800520a:	7819      	ldrb	r1, [r3, #0]
 800520c:	4b0c      	ldr	r3, [pc, #48]	@ (8005240 <HAL_UART_RxCpltCallback+0x94>)
 800520e:	5499      	strb	r1, [r3, r2]
 8005210:	e002      	b.n	8005218 <HAL_UART_RxCpltCallback+0x6c>
	}
	else
	{
	    rxIndex = 0;
 8005212:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_UART_RxCpltCallback+0x7c>)
 8005214:	2200      	movs	r2, #0
 8005216:	801a      	strh	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8005218:	2201      	movs	r2, #1
 800521a:	4904      	ldr	r1, [pc, #16]	@ (800522c <HAL_UART_RxCpltCallback+0x80>)
 800521c:	4807      	ldr	r0, [pc, #28]	@ (800523c <HAL_UART_RxCpltCallback+0x90>)
 800521e:	f002 fa76 	bl	800770e <HAL_UART_Receive_IT>
}
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200009f4 	.word	0x200009f4
 800522c:	200005f0 	.word	0x200005f0
 8005230:	200009f6 	.word	0x200009f6
 8005234:	0800bdb4 	.word	0x0800bdb4
 8005238:	0800bdcc 	.word	0x0800bdcc
 800523c:	20000558 	.word	0x20000558
 8005240:	200005f4 	.word	0x200005f4

08005244 <processData>:

void processData(const char *jsonData)
{
 8005244:	b590      	push	{r4, r7, lr}
 8005246:	b097      	sub	sp, #92	@ 0x5c
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
    cJSON *root = cJSON_Parse(jsonData);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7fc fcd3 	bl	8001bf8 <cJSON_Parse>
 8005252:	6478      	str	r0, [r7, #68]	@ 0x44
    if (root == NULL)
 8005254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <processData+0x2a>
    {
        lcdPrintf("Error parsing JSON\n");
 800525a:	4897      	ldr	r0, [pc, #604]	@ (80054b8 <processData+0x274>)
 800525c:	f7fe fb00 	bl	8003860 <lcdPrintf>
        lcdPrintf("Go back to menu!\n");
 8005260:	4896      	ldr	r0, [pc, #600]	@ (80054bc <processData+0x278>)
 8005262:	f7fe fafd 	bl	8003860 <lcdPrintf>
        cJSON_Delete(root);
 8005266:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005268:	f7fb ffe4 	bl	8001234 <cJSON_Delete>
        return;
 800526c:	e120      	b.n	80054b0 <processData+0x26c>
    }

    if(gardenState == 1)
 800526e:	4b94      	ldr	r3, [pc, #592]	@ (80054c0 <processData+0x27c>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d11e      	bne.n	80052b4 <processData+0x70>
    {
    	cJSON *gardenTemp = cJSON_GetObjectItem(root, "gardenTemperature");
 8005276:	4993      	ldr	r1, [pc, #588]	@ (80054c4 <processData+0x280>)
 8005278:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800527a:	f7fd f806 	bl	800228a <cJSON_GetObjectItem>
 800527e:	6138      	str	r0, [r7, #16]
    	cJSON *gardenHumid = cJSON_GetObjectItem(root, "gardenHumidity");
 8005280:	4991      	ldr	r1, [pc, #580]	@ (80054c8 <processData+0x284>)
 8005282:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005284:	f7fd f801 	bl	800228a <cJSON_GetObjectItem>
 8005288:	60f8      	str	r0, [r7, #12]
    	if (gardenTemp)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <processData+0x54>
    	{
    		gardenTemperature = gardenTemp->valueint;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	4a8d      	ldr	r2, [pc, #564]	@ (80054cc <processData+0x288>)
 8005296:	6013      	str	r3, [r2, #0]
    	}
    	if (gardenHumid)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <processData+0x62>
    	{
    		gardenHumidity = gardenHumid->valueint;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	4a8b      	ldr	r2, [pc, #556]	@ (80054d0 <processData+0x28c>)
 80052a4:	6013      	str	r3, [r2, #0]
    	}
    	processComplete = 1;
 80052a6:	4b8b      	ldr	r3, [pc, #556]	@ (80054d4 <processData+0x290>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
    	cJSON_Delete(root);
 80052ac:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80052ae:	f7fb ffc1 	bl	8001234 <cJSON_Delete>
    	return;
 80052b2:	e0fd      	b.n	80054b0 <processData+0x26c>
    }
    else if (wifi == 1)
 80052b4:	4b88      	ldr	r3, [pc, #544]	@ (80054d8 <processData+0x294>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d163      	bne.n	8005384 <processData+0x140>
    {
    	cJSON *networks = cJSON_GetObjectItem(root, "networks");
 80052bc:	4987      	ldr	r1, [pc, #540]	@ (80054dc <processData+0x298>)
 80052be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80052c0:	f7fc ffe3 	bl	800228a <cJSON_GetObjectItem>
 80052c4:	61f8      	str	r0, [r7, #28]
    	int networkIndex = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	657b      	str	r3, [r7, #84]	@ 0x54
    	cJSON *item = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	653b      	str	r3, [r7, #80]	@ 0x50
    	cJSON_ArrayForEach(item, networks)
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <processData+0x96>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	e000      	b.n	80052dc <processData+0x98>
 80052da:	2300      	movs	r3, #0
 80052dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80052de:	e042      	b.n	8005366 <processData+0x122>
    	{
    	    if (networkIndex >= MAX_NETWORKS) break;
 80052e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e2:	2b09      	cmp	r3, #9
 80052e4:	dc43      	bgt.n	800536e <processData+0x12a>

    	    cJSON *ssid = cJSON_GetObjectItem(item, "ssid");
 80052e6:	497e      	ldr	r1, [pc, #504]	@ (80054e0 <processData+0x29c>)
 80052e8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80052ea:	f7fc ffce 	bl	800228a <cJSON_GetObjectItem>
 80052ee:	61b8      	str	r0, [r7, #24]
    	    cJSON *secure = cJSON_GetObjectItem(item, "secure");
 80052f0:	497c      	ldr	r1, [pc, #496]	@ (80054e4 <processData+0x2a0>)
 80052f2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80052f4:	f7fc ffc9 	bl	800228a <cJSON_GetObjectItem>
 80052f8:	6178      	str	r0, [r7, #20]

    	    if (cJSON_IsString(ssid) && cJSON_IsBool(secure))
 80052fa:	69b8      	ldr	r0, [r7, #24]
 80052fc:	f7fd f803 	bl	8002306 <cJSON_IsString>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d02c      	beq.n	8005360 <processData+0x11c>
 8005306:	6978      	ldr	r0, [r7, #20]
 8005308:	f7fc ffe5 	bl	80022d6 <cJSON_IsBool>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d026      	beq.n	8005360 <processData+0x11c>
    	    {
    	        strncpy(networkList[networkIndex].ssid, ssid->valuestring, MAX_SSID_LENGTH - 1);
 8005312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4a72      	ldr	r2, [pc, #456]	@ (80054e8 <processData+0x2a4>)
 800531e:	1898      	adds	r0, r3, r2
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	221f      	movs	r2, #31
 8005326:	4619      	mov	r1, r3
 8005328:	f004 faa1 	bl	800986e <strncpy>
    	        networkList[networkIndex].ssid[MAX_SSID_LENGTH - 1] = '\0';
 800532c:	496e      	ldr	r1, [pc, #440]	@ (80054e8 <processData+0x2a4>)
 800532e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	331f      	adds	r3, #31
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]
    	        networkList[networkIndex].secure = cJSON_IsTrue(secure);
 8005340:	6978      	ldr	r0, [r7, #20]
 8005342:	f7fc ffb1 	bl	80022a8 <cJSON_IsTrue>
 8005346:	4601      	mov	r1, r0
 8005348:	4867      	ldr	r0, [pc, #412]	@ (80054e8 <processData+0x2a4>)
 800534a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4403      	add	r3, r0
 8005356:	3320      	adds	r3, #32
 8005358:	6019      	str	r1, [r3, #0]
    	        networkIndex++;
 800535a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535c:	3301      	adds	r3, #1
 800535e:	657b      	str	r3, [r7, #84]	@ 0x54
    	cJSON_ArrayForEach(item, networks)
 8005360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	653b      	str	r3, [r7, #80]	@ 0x50
 8005366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1b9      	bne.n	80052e0 <processData+0x9c>
 800536c:	e000      	b.n	8005370 <processData+0x12c>
    	    if (networkIndex >= MAX_NETWORKS) break;
 800536e:	bf00      	nop
    	    }
    	}

    	networkCount = networkIndex;
 8005370:	4a5e      	ldr	r2, [pc, #376]	@ (80054ec <processData+0x2a8>)
 8005372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005374:	6013      	str	r3, [r2, #0]
    	processComplete = 1;
 8005376:	4b57      	ldr	r3, [pc, #348]	@ (80054d4 <processData+0x290>)
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
    	cJSON_Delete(root);
 800537c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800537e:	f7fb ff59 	bl	8001234 <cJSON_Delete>
        return;
 8005382:	e095      	b.n	80054b0 <processData+0x26c>
    }

    cJSON *current = cJSON_GetObjectItem(root, "current");
 8005384:	495a      	ldr	r1, [pc, #360]	@ (80054f0 <processData+0x2ac>)
 8005386:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005388:	f7fc ff7f 	bl	800228a <cJSON_GetObjectItem>
 800538c:	6438      	str	r0, [r7, #64]	@ 0x40
    if (current)
 800538e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <processData+0x19a>
    {
        cJSON *temperature = cJSON_GetObjectItem(current, "temperature_2m");
 8005394:	4957      	ldr	r1, [pc, #348]	@ (80054f4 <processData+0x2b0>)
 8005396:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005398:	f7fc ff77 	bl	800228a <cJSON_GetObjectItem>
 800539c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        cJSON *humidity = cJSON_GetObjectItem(current, "relative_humidity_2m");
 800539e:	4956      	ldr	r1, [pc, #344]	@ (80054f8 <processData+0x2b4>)
 80053a0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80053a2:	f7fc ff72 	bl	800228a <cJSON_GetObjectItem>
 80053a6:	63b8      	str	r0, [r7, #56]	@ 0x38
        cJSON *dayOrNight = cJSON_GetObjectItem(current, "is_day");
 80053a8:	4954      	ldr	r1, [pc, #336]	@ (80054fc <processData+0x2b8>)
 80053aa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80053ac:	f7fc ff6d 	bl	800228a <cJSON_GetObjectItem>
 80053b0:	6378      	str	r0, [r7, #52]	@ 0x34
        if (temperature)
 80053b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <processData+0x17c>
        {
        	currentTemperature = temperature->valueint;
 80053b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	4a50      	ldr	r2, [pc, #320]	@ (8005500 <processData+0x2bc>)
 80053be:	6013      	str	r3, [r2, #0]
        }
        if (humidity)
 80053c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <processData+0x18a>
        {
        	currentHumidity = humidity->valueint;
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	4a4e      	ldr	r2, [pc, #312]	@ (8005504 <processData+0x2c0>)
 80053cc:	6013      	str	r3, [r2, #0]
        }
        if (dayOrNight)
 80053ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <processData+0x19a>
        {
        	isDay = dayOrNight->valueint;
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	4b4b      	ldr	r3, [pc, #300]	@ (8005508 <processData+0x2c4>)
 80053dc:	701a      	strb	r2, [r3, #0]
        }
    }

    cJSON *daily = cJSON_GetObjectItem(root, "daily");
 80053de:	494b      	ldr	r1, [pc, #300]	@ (800550c <processData+0x2c8>)
 80053e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80053e2:	f7fc ff52 	bl	800228a <cJSON_GetObjectItem>
 80053e6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (daily)
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d05a      	beq.n	80054a4 <processData+0x260>
    {
    	cJSON *weatherCodes = cJSON_GetObjectItem(daily, "weather_code");
 80053ee:	4948      	ldr	r1, [pc, #288]	@ (8005510 <processData+0x2cc>)
 80053f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053f2:	f7fc ff4a 	bl	800228a <cJSON_GetObjectItem>
 80053f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    	cJSON *dateCodes = cJSON_GetObjectItem(daily, "time");
 80053f8:	4946      	ldr	r1, [pc, #280]	@ (8005514 <processData+0x2d0>)
 80053fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053fc:	f7fc ff45 	bl	800228a <cJSON_GetObjectItem>
 8005400:	62b8      	str	r0, [r7, #40]	@ 0x28
    	if (dateCodes && cJSON_IsArray(dateCodes))
 8005402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005404:	2b00      	cmp	r3, #0
 8005406:	d027      	beq.n	8005458 <processData+0x214>
 8005408:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800540a:	f7fc ff93 	bl	8002334 <cJSON_IsArray>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <processData+0x214>
    	{
    		for (int i = 0; i < 7; i++)
 8005414:	2300      	movs	r3, #0
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	e01b      	b.n	8005452 <processData+0x20e>
    	    {
    	        cJSON *dates = cJSON_GetArrayItem(dateCodes, i);
 800541a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800541c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800541e:	f7fc fed8 	bl	80021d2 <cJSON_GetArrayItem>
 8005422:	6278      	str	r0, [r7, #36]	@ 0x24
    	        if (dates)
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <processData+0x208>
    	        {
    	        	date[dateIndex++] = strdup(dates->valuestring);
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	691a      	ldr	r2, [r3, #16]
 800542e:	4b3a      	ldr	r3, [pc, #232]	@ (8005518 <processData+0x2d4>)
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	b288      	uxth	r0, r1
 8005436:	4938      	ldr	r1, [pc, #224]	@ (8005518 <processData+0x2d4>)
 8005438:	8008      	strh	r0, [r1, #0]
 800543a:	461c      	mov	r4, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f004 f9e9 	bl	8009814 <strdup>
 8005442:	4603      	mov	r3, r0
 8005444:	461a      	mov	r2, r3
 8005446:	4b35      	ldr	r3, [pc, #212]	@ (800551c <processData+0x2d8>)
 8005448:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    		for (int i = 0; i < 7; i++)
 800544c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800544e:	3301      	adds	r3, #1
 8005450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005454:	2b06      	cmp	r3, #6
 8005456:	dde0      	ble.n	800541a <processData+0x1d6>
    	        }
    	    }
    	}
        if (weatherCodes && cJSON_IsArray(weatherCodes))
 8005458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <processData+0x260>
 800545e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005460:	f7fc ff68 	bl	8002334 <cJSON_IsArray>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01c      	beq.n	80054a4 <processData+0x260>
        {
            for (int i = 0; i < 7; i++)
 800546a:	2300      	movs	r3, #0
 800546c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800546e:	e016      	b.n	800549e <processData+0x25a>
            {
                cJSON *code = cJSON_GetArrayItem(weatherCodes, i);
 8005470:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005474:	f7fc fead 	bl	80021d2 <cJSON_GetArrayItem>
 8005478:	6238      	str	r0, [r7, #32]
                if (code)
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <processData+0x254>
                {
                    weather[weatherIndex++] = code->valueint;
 8005480:	4b27      	ldr	r3, [pc, #156]	@ (8005520 <processData+0x2dc>)
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	b291      	uxth	r1, r2
 8005488:	4a25      	ldr	r2, [pc, #148]	@ (8005520 <processData+0x2dc>)
 800548a:	8011      	strh	r1, [r2, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	4a24      	ldr	r2, [pc, #144]	@ (8005524 <processData+0x2e0>)
 8005494:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            for (int i = 0; i < 7; i++)
 8005498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800549a:	3301      	adds	r3, #1
 800549c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	dde5      	ble.n	8005470 <processData+0x22c>
                }
            }
        }
    }
    processComplete = 1;
 80054a4:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <processData+0x290>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
    cJSON_Delete(root);
 80054aa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80054ac:	f7fb fec2 	bl	8001234 <cJSON_Delete>
}
 80054b0:	375c      	adds	r7, #92	@ 0x5c
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	0800bde0 	.word	0x0800bde0
 80054bc:	0800bdcc 	.word	0x0800bdcc
 80054c0:	200009ff 	.word	0x200009ff
 80054c4:	0800bdf4 	.word	0x0800bdf4
 80054c8:	0800be08 	.word	0x0800be08
 80054cc:	20000be0 	.word	0x20000be0
 80054d0:	20000be4 	.word	0x20000be4
 80054d4:	20000a30 	.word	0x20000a30
 80054d8:	200009fc 	.word	0x200009fc
 80054dc:	0800be18 	.word	0x0800be18
 80054e0:	0800be24 	.word	0x0800be24
 80054e4:	0800be2c 	.word	0x0800be2c
 80054e8:	20000a50 	.word	0x20000a50
 80054ec:	20000bb8 	.word	0x20000bb8
 80054f0:	0800be34 	.word	0x0800be34
 80054f4:	0800be3c 	.word	0x0800be3c
 80054f8:	0800be4c 	.word	0x0800be4c
 80054fc:	0800be64 	.word	0x0800be64
 8005500:	20000a20 	.word	0x20000a20
 8005504:	20000a24 	.word	0x20000a24
 8005508:	20000a31 	.word	0x20000a31
 800550c:	0800be6c 	.word	0x0800be6c
 8005510:	0800be74 	.word	0x0800be74
 8005514:	0800be84 	.word	0x0800be84
 8005518:	20000a2e 	.word	0x20000a2e
 800551c:	20000a34 	.word	0x20000a34
 8005520:	20000a2c 	.word	0x20000a2c
 8005524:	20000a04 	.word	0x20000a04

08005528 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	4603      	mov	r3, r0
 8005530:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != T_IRQ_Pin) return;
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b20      	cmp	r3, #32
 8005536:	d133      	bne.n	80055a0 <HAL_GPIO_EXTI_Callback+0x78>

	if (!XPT2046_TouchPressed() || !allowTouch) return;
 8005538:	f7fb fd34 	bl	8000fa4 <XPT2046_TouchPressed>
 800553c:	4603      	mov	r3, r0
 800553e:	f083 0301 	eor.w	r3, r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d12d      	bne.n	80055a4 <HAL_GPIO_EXTI_Callback+0x7c>
 8005548:	4b19      	ldr	r3, [pc, #100]	@ (80055b0 <HAL_GPIO_EXTI_Callback+0x88>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f083 0301 	eor.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d126      	bne.n	80055a4 <HAL_GPIO_EXTI_Callback+0x7c>

	if (!XPT2046_TouchGetCoordinates(&xCoordinates, &yCoordinates)) return;
 8005556:	4917      	ldr	r1, [pc, #92]	@ (80055b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005558:	4817      	ldr	r0, [pc, #92]	@ (80055b8 <HAL_GPIO_EXTI_Callback+0x90>)
 800555a:	f7fb fd33 	bl	8000fc4 <XPT2046_TouchGetCoordinates>
 800555e:	4603      	mov	r3, r0
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d11e      	bne.n	80055a8 <HAL_GPIO_EXTI_Callback+0x80>

	xCoordinates = 240 - xCoordinates;
 800556a:	4b13      	ldr	r3, [pc, #76]	@ (80055b8 <HAL_GPIO_EXTI_Callback+0x90>)
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8005572:	b29a      	uxth	r2, r3
 8005574:	4b10      	ldr	r3, [pc, #64]	@ (80055b8 <HAL_GPIO_EXTI_Callback+0x90>)
 8005576:	801a      	strh	r2, [r3, #0]
	yCoordinates = 320 - yCoordinates;
 8005578:	4b0e      	ldr	r3, [pc, #56]	@ (80055b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8005580:	b29a      	uxth	r2, r3
 8005582:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005584:	801a      	strh	r2, [r3, #0]
	if (wifi == 1)
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <HAL_GPIO_EXTI_Callback+0x94>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d102      	bne.n	8005594 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		handleKeyboardTouch();
 800558e:	f7fe ff2f 	bl	80043f0 <handleKeyboardTouch>
 8005592:	e001      	b.n	8005598 <HAL_GPIO_EXTI_Callback+0x70>
	}
	else
	{
		checkCoordinates();
 8005594:	f7ff f9bc 	bl	8004910 <checkCoordinates>
	}
	allowTouch = false;
 8005598:	4b05      	ldr	r3, [pc, #20]	@ (80055b0 <HAL_GPIO_EXTI_Callback+0x88>)
 800559a:	2200      	movs	r2, #0
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e004      	b.n	80055aa <HAL_GPIO_EXTI_Callback+0x82>
	if (GPIO_Pin != T_IRQ_Pin) return;
 80055a0:	bf00      	nop
 80055a2:	e002      	b.n	80055aa <HAL_GPIO_EXTI_Callback+0x82>
	if (!XPT2046_TouchPressed() || !allowTouch) return;
 80055a4:	bf00      	nop
 80055a6:	e000      	b.n	80055aa <HAL_GPIO_EXTI_Callback+0x82>
	if (!XPT2046_TouchGetCoordinates(&xCoordinates, &yCoordinates)) return;
 80055a8:	bf00      	nop
}
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000059 	.word	0x20000059
 80055b4:	200009fa 	.word	0x200009fa
 80055b8:	200009f8 	.word	0x200009f8
 80055bc:	200009fc 	.word	0x200009fc

080055c0 <resetBuffer>:

void resetBuffer()
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(rxBuffer); i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	e007      	b.n	80055dc <resetBuffer+0x1c>
	{
		rxBuffer[i] = 0;
 80055cc:	4a09      	ldr	r2, [pc, #36]	@ (80055f4 <resetBuffer+0x34>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(rxBuffer); i++)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3301      	adds	r3, #1
 80055da:	607b      	str	r3, [r7, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e2:	d3f3      	bcc.n	80055cc <resetBuffer+0xc>
	}
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	200005f4 	.word	0x200005f4

080055f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80055fc:	b672      	cpsid	i
}
 80055fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <Error_Handler+0x8>

08005604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <HAL_MspInit+0x4c>)
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	4a0f      	ldr	r2, [pc, #60]	@ (8005650 <HAL_MspInit+0x4c>)
 8005614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005618:	6453      	str	r3, [r2, #68]	@ 0x44
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <HAL_MspInit+0x4c>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005622:	607b      	str	r3, [r7, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <HAL_MspInit+0x4c>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	4a08      	ldr	r2, [pc, #32]	@ (8005650 <HAL_MspInit+0x4c>)
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005634:	6413      	str	r3, [r2, #64]	@ 0x40
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <HAL_MspInit+0x4c>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40023800 	.word	0x40023800

08005654 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	@ 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <HAL_SPI_MspInit+0x84>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d12c      	bne.n	80056d0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800567e:	4a17      	ldr	r2, [pc, #92]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 8005680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005684:	6413      	str	r3, [r2, #64]	@ 0x40
 8005686:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b11      	ldr	r3, [pc, #68]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056a2:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <HAL_SPI_MspInit+0x88>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80056ae:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80056b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b4:	2302      	movs	r3, #2
 80056b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056bc:	2303      	movs	r3, #3
 80056be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056c0:	2305      	movs	r3, #5
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	4619      	mov	r1, r3
 80056ca:	4805      	ldr	r0, [pc, #20]	@ (80056e0 <HAL_SPI_MspInit+0x8c>)
 80056cc:	f000 fc2c 	bl	8005f28 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80056d0:	bf00      	nop
 80056d2:	3728      	adds	r7, #40	@ 0x28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40003800 	.word	0x40003800
 80056dc:	40023800 	.word	0x40023800
 80056e0:	40020400 	.word	0x40020400

080056e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	@ 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056ec:	f107 0314 	add.w	r3, r7, #20
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	605a      	str	r2, [r3, #4]
 80056f6:	609a      	str	r2, [r3, #8]
 80056f8:	60da      	str	r2, [r3, #12]
 80056fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1d      	ldr	r2, [pc, #116]	@ (8005778 <HAL_UART_MspInit+0x94>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d134      	bne.n	8005770 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	4b1c      	ldr	r3, [pc, #112]	@ (800577c <HAL_UART_MspInit+0x98>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4a1b      	ldr	r2, [pc, #108]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005710:	f043 0310 	orr.w	r3, r3, #16
 8005714:	6453      	str	r3, [r2, #68]	@ 0x44
 8005716:	4b19      	ldr	r3, [pc, #100]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	4b15      	ldr	r3, [pc, #84]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572a:	4a14      	ldr	r2, [pc, #80]	@ (800577c <HAL_UART_MspInit+0x98>)
 800572c:	f043 0301 	orr.w	r3, r3, #1
 8005730:	6313      	str	r3, [r2, #48]	@ 0x30
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <HAL_UART_MspInit+0x98>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800573e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005744:	2302      	movs	r3, #2
 8005746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800574c:	2303      	movs	r3, #3
 800574e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005750:	2307      	movs	r3, #7
 8005752:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4619      	mov	r1, r3
 800575a:	4809      	ldr	r0, [pc, #36]	@ (8005780 <HAL_UART_MspInit+0x9c>)
 800575c:	f000 fbe4 	bl	8005f28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005760:	2200      	movs	r2, #0
 8005762:	2100      	movs	r1, #0
 8005764:	2025      	movs	r0, #37	@ 0x25
 8005766:	f000 fb16 	bl	8005d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800576a:	2025      	movs	r0, #37	@ 0x25
 800576c:	f000 fb2f 	bl	8005dce <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005770:	bf00      	nop
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40011000 	.word	0x40011000
 800577c:	40023800 	.word	0x40023800
 8005780:	40020000 	.word	0x40020000

08005784 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800578a:	1d3b      	adds	r3, r7, #4
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <HAL_FSMC_MspInit+0x88>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d131      	bne.n	8005804 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <HAL_FSMC_MspInit+0x88>)
 80057a2:	2201      	movs	r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4b19      	ldr	r3, [pc, #100]	@ (8005810 <HAL_FSMC_MspInit+0x8c>)
 80057ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ae:	4a18      	ldr	r2, [pc, #96]	@ (8005810 <HAL_FSMC_MspInit+0x8c>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80057b6:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <HAL_FSMC_MspInit+0x8c>)
 80057b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80057c2:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80057c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c8:	2302      	movs	r3, #2
 80057ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d0:	2303      	movs	r3, #3
 80057d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80057d4:	230c      	movs	r3, #12
 80057d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	480d      	ldr	r0, [pc, #52]	@ (8005814 <HAL_FSMC_MspInit+0x90>)
 80057de:	f000 fba3 	bl	8005f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80057e2:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80057e6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e8:	2302      	movs	r3, #2
 80057ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f0:	2303      	movs	r3, #3
 80057f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80057f4:	230c      	movs	r3, #12
 80057f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80057f8:	1d3b      	adds	r3, r7, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	4806      	ldr	r0, [pc, #24]	@ (8005818 <HAL_FSMC_MspInit+0x94>)
 80057fe:	f000 fb93 	bl	8005f28 <HAL_GPIO_Init>
 8005802:	e000      	b.n	8005806 <HAL_FSMC_MspInit+0x82>
    return;
 8005804:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000be8 	.word	0x20000be8
 8005810:	40023800 	.word	0x40023800
 8005814:	40021000 	.word	0x40021000
 8005818:	40020c00 	.word	0x40020c00

0800581c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005824:	f7ff ffae 	bl	8005784 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <NMI_Handler+0x4>

08005838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <HardFault_Handler+0x4>

08005840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <MemManage_Handler+0x4>

08005848 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <BusFault_Handler+0x4>

08005850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <UsageFault_Handler+0x4>

08005858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800585c:	bf00      	nop
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005866:	b480      	push	{r7}
 8005868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005886:	f000 f967 	bl	8005b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800588a:	bf00      	nop
 800588c:	bd80      	pop	{r7, pc}

0800588e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8005892:	2020      	movs	r0, #32
 8005894:	f000 fd16 	bl	80062c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}

0800589c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80058a0:	4802      	ldr	r0, [pc, #8]	@ (80058ac <USART1_IRQHandler+0x10>)
 80058a2:	f001 ff59 	bl	8007758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000558 	.word	0x20000558

080058b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return 1;
 80058b4:	2301      	movs	r3, #1
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <_kill>:

int _kill(int pid, int sig)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058ca:	f004 f839 	bl	8009940 <__errno>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2216      	movs	r2, #22
 80058d2:	601a      	str	r2, [r3, #0]
  return -1;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <_exit>:

void _exit (int status)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058e8:	f04f 31ff 	mov.w	r1, #4294967295
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ffe7 	bl	80058c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80058f2:	bf00      	nop
 80058f4:	e7fd      	b.n	80058f2 <_exit+0x12>

080058f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005902:	2300      	movs	r3, #0
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e00a      	b.n	800591e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005908:	f3af 8000 	nop.w
 800590c:	4601      	mov	r1, r0
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	60ba      	str	r2, [r7, #8]
 8005914:	b2ca      	uxtb	r2, r1
 8005916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	3301      	adds	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	429a      	cmp	r2, r3
 8005924:	dbf0      	blt.n	8005908 <_read+0x12>
  }

  return len;
 8005926:	687b      	ldr	r3, [r7, #4]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	e009      	b.n	8005956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	60ba      	str	r2, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	3301      	adds	r3, #1
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	429a      	cmp	r2, r3
 800595c:	dbf1      	blt.n	8005942 <_write+0x12>
  }
  return len;
 800595e:	687b      	ldr	r3, [r7, #4]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <_close>:

int _close(int file)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005990:	605a      	str	r2, [r3, #4]
  return 0;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <_isatty>:

int _isatty(int file)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80059a8:	2301      	movs	r3, #1
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059d8:	4a14      	ldr	r2, [pc, #80]	@ (8005a2c <_sbrk+0x5c>)
 80059da:	4b15      	ldr	r3, [pc, #84]	@ (8005a30 <_sbrk+0x60>)
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059e4:	4b13      	ldr	r3, [pc, #76]	@ (8005a34 <_sbrk+0x64>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059ec:	4b11      	ldr	r3, [pc, #68]	@ (8005a34 <_sbrk+0x64>)
 80059ee:	4a12      	ldr	r2, [pc, #72]	@ (8005a38 <_sbrk+0x68>)
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059f2:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <_sbrk+0x64>)
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4413      	add	r3, r2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d207      	bcs.n	8005a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a00:	f003 ff9e 	bl	8009940 <__errno>
 8005a04:	4603      	mov	r3, r0
 8005a06:	220c      	movs	r2, #12
 8005a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0e:	e009      	b.n	8005a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a10:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <_sbrk+0x64>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a16:	4b07      	ldr	r3, [pc, #28]	@ (8005a34 <_sbrk+0x64>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4a05      	ldr	r2, [pc, #20]	@ (8005a34 <_sbrk+0x64>)
 8005a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20020000 	.word	0x20020000
 8005a30:	00000400 	.word	0x00000400
 8005a34:	20000bec 	.word	0x20000bec
 8005a38:	20000d40 	.word	0x20000d40

08005a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <SystemInit+0x20>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a46:	4a05      	ldr	r2, [pc, #20]	@ (8005a5c <SystemInit+0x20>)
 8005a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000ed00 	.word	0xe000ed00

08005a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005a98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005a64:	f7ff ffea 	bl	8005a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a68:	480c      	ldr	r0, [pc, #48]	@ (8005a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a6a:	490d      	ldr	r1, [pc, #52]	@ (8005aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a70:	e002      	b.n	8005a78 <LoopCopyDataInit>

08005a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a76:	3304      	adds	r3, #4

08005a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a7c:	d3f9      	bcc.n	8005a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a80:	4c0a      	ldr	r4, [pc, #40]	@ (8005aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a84:	e001      	b.n	8005a8a <LoopFillZerobss>

08005a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a88:	3204      	adds	r2, #4

08005a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a8c:	d3fb      	bcc.n	8005a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a8e:	f003 ff5d 	bl	800994c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a92:	f7fe f985 	bl	8003da0 <main>
  bx  lr    
 8005a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005aa0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8005aa4:	080339c0 	.word	0x080339c0
  ldr r2, =_sbss
 8005aa8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8005aac:	20000d40 	.word	0x20000d40

08005ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ab0:	e7fe      	b.n	8005ab0 <ADC_IRQHandler>
	...

08005ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8005af4 <HAL_Init+0x40>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0d      	ldr	r2, [pc, #52]	@ (8005af4 <HAL_Init+0x40>)
 8005abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <HAL_Init+0x40>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8005af4 <HAL_Init+0x40>)
 8005aca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ad0:	4b08      	ldr	r3, [pc, #32]	@ (8005af4 <HAL_Init+0x40>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a07      	ldr	r2, [pc, #28]	@ (8005af4 <HAL_Init+0x40>)
 8005ad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005adc:	2003      	movs	r0, #3
 8005ade:	f000 f94f 	bl	8005d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ae2:	200f      	movs	r0, #15
 8005ae4:	f000 f808 	bl	8005af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ae8:	f7ff fd8c 	bl	8005604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023c00 	.word	0x40023c00

08005af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b00:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <HAL_InitTick+0x54>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <HAL_InitTick+0x58>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f967 	bl	8005dea <HAL_SYSTICK_Config>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e00e      	b.n	8005b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b0f      	cmp	r3, #15
 8005b2a:	d80a      	bhi.n	8005b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	f000 f92f 	bl	8005d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b38:	4a06      	ldr	r2, [pc, #24]	@ (8005b54 <HAL_InitTick+0x5c>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	20000100 	.word	0x20000100
 8005b50:	20000108 	.word	0x20000108
 8005b54:	20000104 	.word	0x20000104

08005b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_IncTick+0x20>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <HAL_IncTick+0x24>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4413      	add	r3, r2
 8005b68:	4a04      	ldr	r2, [pc, #16]	@ (8005b7c <HAL_IncTick+0x24>)
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000108 	.word	0x20000108
 8005b7c:	20000bf0 	.word	0x20000bf0

08005b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  return uwTick;
 8005b84:	4b03      	ldr	r3, [pc, #12]	@ (8005b94 <HAL_GetTick+0x14>)
 8005b86:	681b      	ldr	r3, [r3, #0]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	20000bf0 	.word	0x20000bf0

08005b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ba0:	f7ff ffee 	bl	8005b80 <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d005      	beq.n	8005bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bdc <HAL_Delay+0x44>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4413      	add	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005bbe:	bf00      	nop
 8005bc0:	f7ff ffde 	bl	8005b80 <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d8f7      	bhi.n	8005bc0 <HAL_Delay+0x28>
  {
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000108 	.word	0x20000108

08005be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <__NVIC_SetPriorityGrouping+0x44>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c12:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <__NVIC_SetPriorityGrouping+0x44>)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	60d3      	str	r3, [r2, #12]
}
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	e000ed00 	.word	0xe000ed00

08005c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c2c:	4b04      	ldr	r3, [pc, #16]	@ (8005c40 <__NVIC_GetPriorityGrouping+0x18>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f003 0307 	and.w	r3, r3, #7
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	e000ed00 	.word	0xe000ed00

08005c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	db0b      	blt.n	8005c6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	4907      	ldr	r1, [pc, #28]	@ (8005c7c <__NVIC_EnableIRQ+0x38>)
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	2001      	movs	r0, #1
 8005c66:	fa00 f202 	lsl.w	r2, r0, r2
 8005c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000e100 	.word	0xe000e100

08005c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	6039      	str	r1, [r7, #0]
 8005c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	db0a      	blt.n	8005caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	490c      	ldr	r1, [pc, #48]	@ (8005ccc <__NVIC_SetPriority+0x4c>)
 8005c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c9e:	0112      	lsls	r2, r2, #4
 8005ca0:	b2d2      	uxtb	r2, r2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ca8:	e00a      	b.n	8005cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	4908      	ldr	r1, [pc, #32]	@ (8005cd0 <__NVIC_SetPriority+0x50>)
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	3b04      	subs	r3, #4
 8005cb8:	0112      	lsls	r2, r2, #4
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	761a      	strb	r2, [r3, #24]
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	e000e100 	.word	0xe000e100
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b089      	sub	sp, #36	@ 0x24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f1c3 0307 	rsb	r3, r3, #7
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	bf28      	it	cs
 8005cf2:	2304      	movcs	r3, #4
 8005cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	2b06      	cmp	r3, #6
 8005cfc:	d902      	bls.n	8005d04 <NVIC_EncodePriority+0x30>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	3b03      	subs	r3, #3
 8005d02:	e000      	b.n	8005d06 <NVIC_EncodePriority+0x32>
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d08:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d12:	43da      	mvns	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	401a      	ands	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	43d9      	mvns	r1, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d2c:	4313      	orrs	r3, r2
         );
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3724      	adds	r7, #36	@ 0x24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d4c:	d301      	bcc.n	8005d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e00f      	b.n	8005d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <SysTick_Config+0x40>)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d5a:	210f      	movs	r1, #15
 8005d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d60:	f7ff ff8e 	bl	8005c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d64:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <SysTick_Config+0x40>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d6a:	4b04      	ldr	r3, [pc, #16]	@ (8005d7c <SysTick_Config+0x40>)
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	e000e010 	.word	0xe000e010

08005d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff29 	bl	8005be0 <__NVIC_SetPriorityGrouping>
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005da8:	f7ff ff3e 	bl	8005c28 <__NVIC_GetPriorityGrouping>
 8005dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	6978      	ldr	r0, [r7, #20]
 8005db4:	f7ff ff8e 	bl	8005cd4 <NVIC_EncodePriority>
 8005db8:	4602      	mov	r2, r0
 8005dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff5d 	bl	8005c80 <__NVIC_SetPriority>
}
 8005dc6:	bf00      	nop
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff ff31 	bl	8005c44 <__NVIC_EnableIRQ>
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ffa2 	bl	8005d3c <SysTick_Config>
 8005df8:	4603      	mov	r3, r0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e10:	f7ff feb6 	bl	8005b80 <HAL_GetTick>
 8005e14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d008      	beq.n	8005e34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e052      	b.n	8005eda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0216 	bic.w	r2, r2, #22
 8005e42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695a      	ldr	r2, [r3, #20]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d103      	bne.n	8005e64 <HAL_DMA_Abort+0x62>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 0208 	bic.w	r2, r2, #8
 8005e72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e84:	e013      	b.n	8005eae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e86:	f7ff fe7b 	bl	8005b80 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b05      	cmp	r3, #5
 8005e92:	d90c      	bls.n	8005eae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e015      	b.n	8005eda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e4      	bne.n	8005e86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec0:	223f      	movs	r2, #63	@ 0x3f
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d004      	beq.n	8005f00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2280      	movs	r2, #128	@ 0x80
 8005efa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e00c      	b.n	8005f1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2205      	movs	r2, #5
 8005f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0201 	bic.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	370c      	adds	r7, #12
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
	...

08005f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b089      	sub	sp, #36	@ 0x24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	e16b      	b.n	800621c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f44:	2201      	movs	r2, #1
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	f040 815a 	bne.w	8006216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d005      	beq.n	8005f7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d130      	bne.n	8005fdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	2203      	movs	r2, #3
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 0201 	and.w	r2, r3, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f003 0303 	and.w	r3, r3, #3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d017      	beq.n	8006018 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689a      	ldr	r2, [r3, #8]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4313      	orrs	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d123      	bne.n	800606c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	08da      	lsrs	r2, r3, #3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3208      	adds	r2, #8
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	220f      	movs	r2, #15
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	43db      	mvns	r3, r3
 8006042:	69ba      	ldr	r2, [r7, #24]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	69b9      	ldr	r1, [r7, #24]
 8006068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0203 	and.w	r2, r3, #3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80b4 	beq.w	8006216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4b60      	ldr	r3, [pc, #384]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	4a5f      	ldr	r2, [pc, #380]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80060be:	4b5d      	ldr	r3, [pc, #372]	@ (8006234 <HAL_GPIO_Init+0x30c>)
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ca:	4a5b      	ldr	r2, [pc, #364]	@ (8006238 <HAL_GPIO_Init+0x310>)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	089b      	lsrs	r3, r3, #2
 80060d0:	3302      	adds	r3, #2
 80060d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a52      	ldr	r2, [pc, #328]	@ (800623c <HAL_GPIO_Init+0x314>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <HAL_GPIO_Init+0x226>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a51      	ldr	r2, [pc, #324]	@ (8006240 <HAL_GPIO_Init+0x318>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d025      	beq.n	800614a <HAL_GPIO_Init+0x222>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a50      	ldr	r2, [pc, #320]	@ (8006244 <HAL_GPIO_Init+0x31c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01f      	beq.n	8006146 <HAL_GPIO_Init+0x21e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a4f      	ldr	r2, [pc, #316]	@ (8006248 <HAL_GPIO_Init+0x320>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d019      	beq.n	8006142 <HAL_GPIO_Init+0x21a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a4e      	ldr	r2, [pc, #312]	@ (800624c <HAL_GPIO_Init+0x324>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_GPIO_Init+0x216>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a4d      	ldr	r2, [pc, #308]	@ (8006250 <HAL_GPIO_Init+0x328>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00d      	beq.n	800613a <HAL_GPIO_Init+0x212>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a4c      	ldr	r2, [pc, #304]	@ (8006254 <HAL_GPIO_Init+0x32c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d007      	beq.n	8006136 <HAL_GPIO_Init+0x20e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a4b      	ldr	r2, [pc, #300]	@ (8006258 <HAL_GPIO_Init+0x330>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d101      	bne.n	8006132 <HAL_GPIO_Init+0x20a>
 800612e:	2307      	movs	r3, #7
 8006130:	e00e      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006132:	2308      	movs	r3, #8
 8006134:	e00c      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006136:	2306      	movs	r3, #6
 8006138:	e00a      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613a:	2305      	movs	r3, #5
 800613c:	e008      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800613e:	2304      	movs	r3, #4
 8006140:	e006      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006142:	2303      	movs	r3, #3
 8006144:	e004      	b.n	8006150 <HAL_GPIO_Init+0x228>
 8006146:	2302      	movs	r3, #2
 8006148:	e002      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614a:	2301      	movs	r3, #1
 800614c:	e000      	b.n	8006150 <HAL_GPIO_Init+0x228>
 800614e:	2300      	movs	r3, #0
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f002 0203 	and.w	r2, r2, #3
 8006156:	0092      	lsls	r2, r2, #2
 8006158:	4093      	lsls	r3, r2
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4313      	orrs	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006160:	4935      	ldr	r1, [pc, #212]	@ (8006238 <HAL_GPIO_Init+0x310>)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	089b      	lsrs	r3, r3, #2
 8006166:	3302      	adds	r3, #2
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800616e:	4b3b      	ldr	r3, [pc, #236]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	43db      	mvns	r3, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006192:	4a32      	ldr	r2, [pc, #200]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006198:	4b30      	ldr	r3, [pc, #192]	@ (800625c <HAL_GPIO_Init+0x334>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	43db      	mvns	r3, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	4013      	ands	r3, r2
 80061a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061bc:	4a27      	ldr	r2, [pc, #156]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061c2:	4b26      	ldr	r3, [pc, #152]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061e6:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ec:	4b1b      	ldr	r3, [pc, #108]	@ (800625c <HAL_GPIO_Init+0x334>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006210:	4a12      	ldr	r2, [pc, #72]	@ (800625c <HAL_GPIO_Init+0x334>)
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	3301      	adds	r3, #1
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	2b0f      	cmp	r3, #15
 8006220:	f67f ae90 	bls.w	8005f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop
 8006228:	3724      	adds	r7, #36	@ 0x24
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40023800 	.word	0x40023800
 8006238:	40013800 	.word	0x40013800
 800623c:	40020000 	.word	0x40020000
 8006240:	40020400 	.word	0x40020400
 8006244:	40020800 	.word	0x40020800
 8006248:	40020c00 	.word	0x40020c00
 800624c:	40021000 	.word	0x40021000
 8006250:	40021400 	.word	0x40021400
 8006254:	40021800 	.word	0x40021800
 8006258:	40021c00 	.word	0x40021c00
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a0:	787b      	ldrb	r3, [r7, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062ac:	e003      	b.n	80062b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	041a      	lsls	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	619a      	str	r2, [r3, #24]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80062ce:	4b08      	ldr	r3, [pc, #32]	@ (80062f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062da:	4a05      	ldr	r2, [pc, #20]	@ (80062f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff f920 	bl	8005528 <HAL_GPIO_EXTI_Callback>
  }
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40013c00 	.word	0x40013c00

080062f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e267      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d075      	beq.n	80063fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006312:	4b88      	ldr	r3, [pc, #544]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00c      	beq.n	8006338 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	4b85      	ldr	r3, [pc, #532]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006326:	2b08      	cmp	r3, #8
 8006328:	d112      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800632a:	4b82      	ldr	r3, [pc, #520]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006332:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006336:	d10b      	bne.n	8006350 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006338:	4b7e      	ldr	r3, [pc, #504]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d05b      	beq.n	80063fc <HAL_RCC_OscConfig+0x108>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d157      	bne.n	80063fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e242      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006358:	d106      	bne.n	8006368 <HAL_RCC_OscConfig+0x74>
 800635a:	4b76      	ldr	r3, [pc, #472]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a75      	ldr	r2, [pc, #468]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e01d      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006370:	d10c      	bne.n	800638c <HAL_RCC_OscConfig+0x98>
 8006372:	4b70      	ldr	r3, [pc, #448]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6f      	ldr	r2, [pc, #444]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	4b6d      	ldr	r3, [pc, #436]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a6c      	ldr	r2, [pc, #432]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e00b      	b.n	80063a4 <HAL_RCC_OscConfig+0xb0>
 800638c:	4b69      	ldr	r3, [pc, #420]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a68      	ldr	r2, [pc, #416]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	4b66      	ldr	r3, [pc, #408]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a65      	ldr	r2, [pc, #404]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800639e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d013      	beq.n	80063d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7ff fbe8 	bl	8005b80 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b4:	f7ff fbe4 	bl	8005b80 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b64      	cmp	r3, #100	@ 0x64
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e207      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d0f0      	beq.n	80063b4 <HAL_RCC_OscConfig+0xc0>
 80063d2:	e014      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d4:	f7ff fbd4 	bl	8005b80 <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063dc:	f7ff fbd0 	bl	8005b80 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b64      	cmp	r3, #100	@ 0x64
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e1f3      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ee:	4b51      	ldr	r3, [pc, #324]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0xe8>
 80063fa:	e000      	b.n	80063fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d063      	beq.n	80064d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800640a:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800641e:	2b08      	cmp	r3, #8
 8006420:	d11c      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006422:	4b44      	ldr	r3, [pc, #272]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d116      	bne.n	800645c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d001      	beq.n	8006446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e1c7      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4937      	ldr	r1, [pc, #220]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006456:	4313      	orrs	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645a:	e03a      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006464:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_OscConfig+0x244>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7ff fb89 	bl	8005b80 <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006472:	f7ff fb85 	bl	8005b80 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1a8      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	4b28      	ldr	r3, [pc, #160]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4925      	ldr	r1, [pc, #148]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	e015      	b.n	80064d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a6:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <HAL_RCC_OscConfig+0x244>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7ff fb68 	bl	8005b80 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7ff fb64 	bl	8005b80 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e187      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d036      	beq.n	800654c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_RCC_OscConfig+0x248>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7ff fb48 	bl	8005b80 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f4:	f7ff fb44 	bl	8005b80 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e167      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_RCC_OscConfig+0x240>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x200>
 8006512:	e01b      	b.n	800654c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006514:	4b09      	ldr	r3, [pc, #36]	@ (800653c <HAL_RCC_OscConfig+0x248>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800651a:	f7ff fb31 	bl	8005b80 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006520:	e00e      	b.n	8006540 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7ff fb2d 	bl	8005b80 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d907      	bls.n	8006540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e150      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
 8006534:	40023800 	.word	0x40023800
 8006538:	42470000 	.word	0x42470000
 800653c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006540:	4b88      	ldr	r3, [pc, #544]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ea      	bne.n	8006522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8097 	beq.w	8006688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800655e:	4b81      	ldr	r3, [pc, #516]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	4b7d      	ldr	r3, [pc, #500]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	4a7c      	ldr	r2, [pc, #496]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6413      	str	r3, [r2, #64]	@ 0x40
 800657a:	4b7a      	ldr	r3, [pc, #488]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658a:	4b77      	ldr	r3, [pc, #476]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d118      	bne.n	80065c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006596:	4b74      	ldr	r3, [pc, #464]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a73      	ldr	r2, [pc, #460]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a2:	f7ff faed 	bl	8005b80 <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065aa:	f7ff fae9 	bl	8005b80 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e10c      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006768 <HAL_RCC_OscConfig+0x474>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <HAL_RCC_OscConfig+0x2ea>
 80065d0:	4b64      	ldr	r3, [pc, #400]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a63      	ldr	r2, [pc, #396]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
 80065dc:	e01c      	b.n	8006618 <HAL_RCC_OscConfig+0x324>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0x30c>
 80065e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0x324>
 8006600:	4b58      	ldr	r3, [pc, #352]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006604:	4a57      	ldr	r2, [pc, #348]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	6713      	str	r3, [r2, #112]	@ 0x70
 800660c:	4b55      	ldr	r3, [pc, #340]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006610:	4a54      	ldr	r2, [pc, #336]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006612:	f023 0304 	bic.w	r3, r3, #4
 8006616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7ff faae 	bl	8005b80 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7ff faaa 	bl	8005b80 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0cb      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663e:	4b49      	ldr	r3, [pc, #292]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0ee      	beq.n	8006628 <HAL_RCC_OscConfig+0x334>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800664c:	f7ff fa98 	bl	8005b80 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006652:	e00a      	b.n	800666a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006654:	f7ff fa94 	bl	8005b80 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0b5      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666a:	4b3e      	ldr	r3, [pc, #248]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ee      	bne.n	8006654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800667c:	4b39      	ldr	r3, [pc, #228]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	4a38      	ldr	r2, [pc, #224]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a1 	beq.w	80067d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006692:	4b34      	ldr	r3, [pc, #208]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b08      	cmp	r3, #8
 800669c:	d05c      	beq.n	8006758 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d141      	bne.n	800672a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a6:	4b31      	ldr	r3, [pc, #196]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ac:	f7ff fa68 	bl	8005b80 <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b4:	f7ff fa64 	bl	8005b80 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e087      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	4b27      	ldr	r3, [pc, #156]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f0      	bne.n	80066b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	061b      	lsls	r3, r3, #24
 80066f6:	491b      	ldr	r1, [pc, #108]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006702:	f7ff fa3d 	bl	8005b80 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670a:	f7ff fa39 	bl	8005b80 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e05c      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800671c:	4b11      	ldr	r3, [pc, #68]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x416>
 8006728:	e054      	b.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800672a:	4b10      	ldr	r3, [pc, #64]	@ (800676c <HAL_RCC_OscConfig+0x478>)
 800672c:	2200      	movs	r2, #0
 800672e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006730:	f7ff fa26 	bl	8005b80 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006738:	f7ff fa22 	bl	8005b80 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e045      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800674a:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_RCC_OscConfig+0x470>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x444>
 8006756:	e03d      	b.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d107      	bne.n	8006770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e038      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
 8006764:	40023800 	.word	0x40023800
 8006768:	40007000 	.word	0x40007000
 800676c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006770:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x4ec>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d028      	beq.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006788:	429a      	cmp	r2, r3
 800678a:	d121      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	429a      	cmp	r2, r3
 8006798:	d11a      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d111      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	3b01      	subs	r3, #1
 80067ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d107      	bne.n	80067d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40023800 	.word	0x40023800

080067e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e0cc      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067f8:	4b68      	ldr	r3, [pc, #416]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d90c      	bls.n	8006820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006806:	4b65      	ldr	r3, [pc, #404]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800680e:	4b63      	ldr	r3, [pc, #396]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e0b8      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0304 	and.w	r3, r3, #4
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006838:	4b59      	ldr	r3, [pc, #356]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	4a58      	ldr	r2, [pc, #352]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006850:	4b53      	ldr	r3, [pc, #332]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	4a52      	ldr	r2, [pc, #328]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800685a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800685c:	4b50      	ldr	r3, [pc, #320]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	494d      	ldr	r1, [pc, #308]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d044      	beq.n	8006904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d107      	bne.n	8006892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006882:	4b47      	ldr	r3, [pc, #284]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d119      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d003      	beq.n	80068a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d107      	bne.n	80068b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068a2:	4b3f      	ldr	r3, [pc, #252]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b2:	4b3b      	ldr	r3, [pc, #236]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e067      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068c2:	4b37      	ldr	r3, [pc, #220]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f023 0203 	bic.w	r2, r3, #3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4934      	ldr	r1, [pc, #208]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068d4:	f7ff f954 	bl	8005b80 <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068dc:	f7ff f950 	bl	8005b80 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e04f      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f2:	4b2b      	ldr	r3, [pc, #172]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 020c 	and.w	r2, r3, #12
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	429a      	cmp	r2, r3
 8006902:	d1eb      	bne.n	80068dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006904:	4b25      	ldr	r3, [pc, #148]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0307 	and.w	r3, r3, #7
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d20c      	bcs.n	800692c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006912:	4b22      	ldr	r3, [pc, #136]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800691a:	4b20      	ldr	r3, [pc, #128]	@ (800699c <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d001      	beq.n	800692c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e032      	b.n	8006992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0304 	and.w	r3, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006938:	4b19      	ldr	r3, [pc, #100]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4916      	ldr	r1, [pc, #88]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	4313      	orrs	r3, r2
 8006948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d009      	beq.n	800696a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006956:	4b12      	ldr	r3, [pc, #72]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490e      	ldr	r1, [pc, #56]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f821 	bl	80069b0 <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490a      	ldr	r1, [pc, #40]	@ (80069a4 <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a09      	ldr	r2, [pc, #36]	@ (80069a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006986:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HAL_RCC_ClockConfig+0x1c8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f8b4 	bl	8005af8 <HAL_InitTick>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	40023c00 	.word	0x40023c00
 80069a0:	40023800 	.word	0x40023800
 80069a4:	080335dc 	.word	0x080335dc
 80069a8:	20000100 	.word	0x20000100
 80069ac:	20000104 	.word	0x20000104

080069b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b094      	sub	sp, #80	@ 0x50
 80069b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069c8:	4b79      	ldr	r3, [pc, #484]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x40>
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f200 80e1 	bhi.w	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x34>
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d003      	beq.n	80069ea <HAL_RCC_GetSysClockFreq+0x3a>
 80069e2:	e0db      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e4:	4b73      	ldr	r3, [pc, #460]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80069e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069e8:	e0db      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ea:	4b73      	ldr	r3, [pc, #460]	@ (8006bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80069ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80069ee:	e0d8      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f0:	4b6f      	ldr	r3, [pc, #444]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fa:	4b6d      	ldr	r3, [pc, #436]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d063      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a06:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	099b      	lsrs	r3, r3, #6
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006a22:	4622      	mov	r2, r4
 8006a24:	462b      	mov	r3, r5
 8006a26:	f04f 0000 	mov.w	r0, #0
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	0159      	lsls	r1, r3, #5
 8006a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a34:	0150      	lsls	r0, r2, #5
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	1a51      	subs	r1, r2, r1
 8006a3e:	6139      	str	r1, [r7, #16]
 8006a40:	4629      	mov	r1, r5
 8006a42:	eb63 0301 	sbc.w	r3, r3, r1
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	f04f 0300 	mov.w	r3, #0
 8006a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a54:	4659      	mov	r1, fp
 8006a56:	018b      	lsls	r3, r1, #6
 8006a58:	4651      	mov	r1, sl
 8006a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a5e:	4651      	mov	r1, sl
 8006a60:	018a      	lsls	r2, r1, #6
 8006a62:	4651      	mov	r1, sl
 8006a64:	ebb2 0801 	subs.w	r8, r2, r1
 8006a68:	4659      	mov	r1, fp
 8006a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a82:	4690      	mov	r8, r2
 8006a84:	4699      	mov	r9, r3
 8006a86:	4623      	mov	r3, r4
 8006a88:	eb18 0303 	adds.w	r3, r8, r3
 8006a8c:	60bb      	str	r3, [r7, #8]
 8006a8e:	462b      	mov	r3, r5
 8006a90:	eb49 0303 	adc.w	r3, r9, r3
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	f04f 0200 	mov.w	r2, #0
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	024b      	lsls	r3, r1, #9
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006aac:	4621      	mov	r1, r4
 8006aae:	024a      	lsls	r2, r1, #9
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ac0:	f7fa f88c 	bl	8000bdc <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006acc:	e058      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ace:	4b38      	ldr	r3, [pc, #224]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	4611      	mov	r1, r2
 8006ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	f04f 0000 	mov.w	r0, #0
 8006af0:	f04f 0100 	mov.w	r1, #0
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006afa:	0150      	lsls	r0, r2, #5
 8006afc:	4602      	mov	r2, r0
 8006afe:	460b      	mov	r3, r1
 8006b00:	4641      	mov	r1, r8
 8006b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b06:	4649      	mov	r1, r9
 8006b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b20:	ebb2 040a 	subs.w	r4, r2, sl
 8006b24:	eb63 050b 	sbc.w	r5, r3, fp
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	00eb      	lsls	r3, r5, #3
 8006b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b36:	00e2      	lsls	r2, r4, #3
 8006b38:	4614      	mov	r4, r2
 8006b3a:	461d      	mov	r5, r3
 8006b3c:	4643      	mov	r3, r8
 8006b3e:	18e3      	adds	r3, r4, r3
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	464b      	mov	r3, r9
 8006b44:	eb45 0303 	adc.w	r3, r5, r3
 8006b48:	607b      	str	r3, [r7, #4]
 8006b4a:	f04f 0200 	mov.w	r2, #0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b56:	4629      	mov	r1, r5
 8006b58:	028b      	lsls	r3, r1, #10
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b60:	4621      	mov	r1, r4
 8006b62:	028a      	lsls	r2, r1, #10
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	61fa      	str	r2, [r7, #28]
 8006b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b74:	f7fa f832 	bl	8000bdc <__aeabi_uldivmod>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b80:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b9a:	e002      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3750      	adds	r7, #80	@ 0x50
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bae:	bf00      	nop
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	00f42400 	.word	0x00f42400
 8006bb8:	007a1200 	.word	0x007a1200

08006bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000100 	.word	0x20000100

08006bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bd8:	f7ff fff0 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	4903      	ldr	r1, [pc, #12]	@ (8006bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bea:	5ccb      	ldrb	r3, [r1, r3]
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	080335ec 	.word	0x080335ec

08006bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c00:	f7ff ffdc 	bl	8006bbc <HAL_RCC_GetHCLKFreq>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	0b5b      	lsrs	r3, r3, #13
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	4903      	ldr	r1, [pc, #12]	@ (8006c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c12:	5ccb      	ldrb	r3, [r1, r3]
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	080335ec 	.word	0x080335ec

08006c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e07b      	b.n	8006d2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c46:	d009      	beq.n	8006c5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	61da      	str	r2, [r3, #28]
 8006c4e:	e005      	b.n	8006c5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe fcec 	bl	8005654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a1b      	ldr	r3, [r3, #32]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce0:	ea42 0103 	orr.w	r1, r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	0c1b      	lsrs	r3, r3, #16
 8006cfa:	f003 0104 	and.w	r1, r3, #4
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	f003 0210 	and.w	r2, r3, #16
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b088      	sub	sp, #32
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d46:	f7fe ff1b 	bl	8005b80 <HAL_GetTick>
 8006d4a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e12a      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_SPI_Transmit+0x36>
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e122      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_SPI_Transmit+0x48>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e11b      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2203      	movs	r2, #3
 8006d8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	88fa      	ldrh	r2, [r7, #6]
 8006d9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dcc:	d10f      	bne.n	8006dee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d007      	beq.n	8006e0c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e14:	d152      	bne.n	8006ebc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0xee>
 8006e1e:	8b7b      	ldrh	r3, [r7, #26]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d145      	bne.n	8006eb0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e28:	881a      	ldrh	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e34:	1c9a      	adds	r2, r3, #2
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	3b01      	subs	r3, #1
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e48:	e032      	b.n	8006eb0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d112      	bne.n	8006e7e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5c:	881a      	ldrh	r2, [r3, #0]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e68:	1c9a      	adds	r2, r3, #2
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e7c:	e018      	b.n	8006eb0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7e:	f7fe fe7f 	bl	8005b80 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d803      	bhi.n	8006e96 <HAL_SPI_Transmit+0x160>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x166>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d109      	bne.n	8006eb0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e082      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1c7      	bne.n	8006e4a <HAL_SPI_Transmit+0x114>
 8006eba:	e053      	b.n	8006f64 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_SPI_Transmit+0x194>
 8006ec4:	8b7b      	ldrh	r3, [r7, #26]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d147      	bne.n	8006f5a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ef0:	e033      	b.n	8006f5a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d113      	bne.n	8006f28 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	330c      	adds	r3, #12
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f12:	1c5a      	adds	r2, r3, #1
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006f26:	e018      	b.n	8006f5a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f28:	f7fe fe2a 	bl	8005b80 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d803      	bhi.n	8006f40 <HAL_SPI_Transmit+0x20a>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3e:	d102      	bne.n	8006f46 <HAL_SPI_Transmit+0x210>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e02d      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1c6      	bne.n	8006ef2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f000 fa59 	bl	8007420 <SPI_EndRxTxTransaction>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f82:	2300      	movs	r3, #0
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e000      	b.n	8006fb6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
  }
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b08a      	sub	sp, #40	@ 0x28
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd0:	f7fe fdd6 	bl	8005b80 <HAL_GetTick>
 8006fd4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fdc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fe4:	887b      	ldrh	r3, [r7, #2]
 8006fe6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fe8:	7ffb      	ldrb	r3, [r7, #31]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d00c      	beq.n	8007008 <HAL_SPI_TransmitReceive+0x4a>
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ff4:	d106      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <HAL_SPI_TransmitReceive+0x46>
 8006ffe:	7ffb      	ldrb	r3, [r7, #31]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d001      	beq.n	8007008 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
 8007006:	e17f      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d005      	beq.n	800701a <HAL_SPI_TransmitReceive+0x5c>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_SPI_TransmitReceive+0x5c>
 8007014:	887b      	ldrh	r3, [r7, #2]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e174      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_SPI_TransmitReceive+0x6e>
 8007028:	2302      	movs	r3, #2
 800702a:	e16d      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b04      	cmp	r3, #4
 800703e:	d003      	beq.n	8007048 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2205      	movs	r2, #5
 8007044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	887a      	ldrh	r2, [r7, #2]
 8007058:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	887a      	ldrh	r2, [r7, #2]
 800705e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	887a      	ldrh	r2, [r7, #2]
 800706a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007088:	2b40      	cmp	r3, #64	@ 0x40
 800708a:	d007      	beq.n	800709c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800709a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070a4:	d17e      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_SPI_TransmitReceive+0xf6>
 80070ae:	8afb      	ldrh	r3, [r7, #22]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d16c      	bne.n	800718e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b8:	881a      	ldrh	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c4:	1c9a      	adds	r2, r3, #2
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070d8:	e059      	b.n	800718e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d11b      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x162>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d016      	beq.n	8007120 <HAL_SPI_TransmitReceive+0x162>
 80070f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d113      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fc:	881a      	ldrh	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007108:	1c9a      	adds	r2, r3, #2
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b01      	cmp	r3, #1
 800712c:	d119      	bne.n	8007162 <HAL_SPI_TransmitReceive+0x1a4>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007132:	b29b      	uxth	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d014      	beq.n	8007162 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007142:	b292      	uxth	r2, r2
 8007144:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800714a:	1c9a      	adds	r2, r3, #2
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800715e:	2301      	movs	r3, #1
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007162:	f7fe fd0d 	bl	8005b80 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800716e:	429a      	cmp	r2, r3
 8007170:	d80d      	bhi.n	800718e <HAL_SPI_TransmitReceive+0x1d0>
 8007172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d009      	beq.n	800718e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e0bc      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1a0      	bne.n	80070da <HAL_SPI_TransmitReceive+0x11c>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d19b      	bne.n	80070da <HAL_SPI_TransmitReceive+0x11c>
 80071a2:	e082      	b.n	80072aa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_TransmitReceive+0x1f4>
 80071ac:	8afb      	ldrh	r3, [r7, #22]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d171      	bne.n	8007296 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	7812      	ldrb	r2, [r2, #0]
 80071be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071d8:	e05d      	b.n	8007296 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d11c      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x264>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d017      	beq.n	8007222 <HAL_SPI_TransmitReceive+0x264>
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d114      	bne.n	8007222 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	330c      	adds	r3, #12
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007214:	b29b      	uxth	r3, r3
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b01      	cmp	r3, #1
 800722e:	d119      	bne.n	8007264 <HAL_SPI_TransmitReceive+0x2a6>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d014      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724c:	1c5a      	adds	r2, r3, #1
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007256:	b29b      	uxth	r3, r3
 8007258:	3b01      	subs	r3, #1
 800725a:	b29a      	uxth	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007260:	2301      	movs	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007264:	f7fe fc8c 	bl	8005b80 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	6a3b      	ldr	r3, [r7, #32]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007270:	429a      	cmp	r2, r3
 8007272:	d803      	bhi.n	800727c <HAL_SPI_TransmitReceive+0x2be>
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d102      	bne.n	8007282 <HAL_SPI_TransmitReceive+0x2c4>
 800727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e038      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d19c      	bne.n	80071da <HAL_SPI_TransmitReceive+0x21c>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d197      	bne.n	80071da <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072aa:	6a3a      	ldr	r2, [r7, #32]
 80072ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8b6 	bl	8007420 <SPI_EndRxTxTransaction>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d008      	beq.n	80072cc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e01d      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10a      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007306:	2300      	movs	r3, #0
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	@ 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007320:	f7fe fc2e 	bl	8005b80 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	4413      	add	r3, r2
 800732e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007330:	f7fe fc26 	bl	8005b80 <HAL_GetTick>
 8007334:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007336:	4b39      	ldr	r3, [pc, #228]	@ (800741c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	015b      	lsls	r3, r3, #5
 800733c:	0d1b      	lsrs	r3, r3, #20
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	fb02 f303 	mul.w	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007346:	e054      	b.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d050      	beq.n	80073f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007350:	f7fe fc16 	bl	8005b80 <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	429a      	cmp	r2, r3
 800735e:	d902      	bls.n	8007366 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d13d      	bne.n	80073e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800737e:	d111      	bne.n	80073a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007388:	d004      	beq.n	8007394 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007392:	d107      	bne.n	80073a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ac:	d10f      	bne.n	80073ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e017      	b.n	8007412 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	4013      	ands	r3, r2
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	bf0c      	ite	eq
 8007402:	2301      	moveq	r3, #1
 8007404:	2300      	movne	r3, #0
 8007406:	b2db      	uxtb	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	429a      	cmp	r2, r3
 800740e:	d19b      	bne.n	8007348 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	20000100 	.word	0x20000100

08007420 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2201      	movs	r2, #1
 8007434:	2102      	movs	r1, #2
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff ff6a 	bl	8007310 <SPI_WaitFlagStateUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e032      	b.n	80074b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007452:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <SPI_EndRxTxTransaction+0xa0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1b      	ldr	r2, [pc, #108]	@ (80074c4 <SPI_EndRxTxTransaction+0xa4>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	0d5b      	lsrs	r3, r3, #21
 800745e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007462:	fb02 f303 	mul.w	r3, r2, r3
 8007466:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007470:	d112      	bne.n	8007498 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2200      	movs	r2, #0
 800747a:	2180      	movs	r1, #128	@ 0x80
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff ff47 	bl	8007310 <SPI_WaitFlagStateUntilTimeout>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d016      	beq.n	80074b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748c:	f043 0220 	orr.w	r2, r3, #32
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007494:	2303      	movs	r3, #3
 8007496:	e00f      	b.n	80074b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b80      	cmp	r3, #128	@ 0x80
 80074b0:	d0f2      	beq.n	8007498 <SPI_EndRxTxTransaction+0x78>
 80074b2:	e000      	b.n	80074b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80074b4:	bf00      	nop
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	20000100 	.word	0x20000100
 80074c4:	165e9f81 	.word	0x165e9f81

080074c8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e038      	b.n	8007550 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7fe f992 	bl	800581c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3308      	adds	r3, #8
 8007500:	4619      	mov	r1, r3
 8007502:	4610      	mov	r0, r2
 8007504:	f001 f87e 	bl	8008604 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6818      	ldr	r0, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	461a      	mov	r2, r3
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	f001 f8e0 	bl	80086d8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6858      	ldr	r0, [r3, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	f001 f90d 	bl	8008744 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	6892      	ldr	r2, [r2, #8]
 8007532:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	6892      	ldr	r2, [r2, #8]
 800753e:	f041 0101 	orr.w	r1, r1, #1
 8007542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e042      	b.n	80075f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d106      	bne.n	8007584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fe f8b0 	bl	80056e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	@ 0x24
 8007588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800759a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fdbd 	bl	800811c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	695a      	ldr	r2, [r3, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	@ 0x28
 80075fc:	af02      	add	r7, sp, #8
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b20      	cmp	r3, #32
 8007616:	d175      	bne.n	8007704 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Transmit+0x2c>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e06e      	b.n	8007706 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2221      	movs	r2, #33	@ 0x21
 8007632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007636:	f7fe faa3 	bl	8005b80 <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	88fa      	ldrh	r2, [r7, #6]
 8007646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007650:	d108      	bne.n	8007664 <HAL_UART_Transmit+0x6c>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e003      	b.n	800766c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800766c:	e02e      	b.n	80076cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	2180      	movs	r1, #128	@ 0x80
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fb1f 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2220      	movs	r2, #32
 8007688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e03a      	b.n	8007706 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10b      	bne.n	80076ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	881b      	ldrh	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	3302      	adds	r3, #2
 80076aa:	61bb      	str	r3, [r7, #24]
 80076ac:	e007      	b.n	80076be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	3301      	adds	r3, #1
 80076bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1cb      	bne.n	800766e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2200      	movs	r2, #0
 80076de:	2140      	movs	r1, #64	@ 0x40
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 faeb 	bl	8007cbc <UART_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e006      	b.n	8007706 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2220      	movs	r2, #32
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e000      	b.n	8007706 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007704:	2302      	movs	r3, #2
  }
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	60f8      	str	r0, [r7, #12]
 8007716:	60b9      	str	r1, [r7, #8]
 8007718:	4613      	mov	r3, r2
 800771a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b20      	cmp	r3, #32
 8007726:	d112      	bne.n	800774e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d002      	beq.n	8007734 <HAL_UART_Receive_IT+0x26>
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e00b      	b.n	8007750 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	461a      	mov	r2, r3
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fb12 	bl	8007d6e <UART_Start_Receive_IT>
 800774a:	4603      	mov	r3, r0
 800774c:	e000      	b.n	8007750 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800774e:	2302      	movs	r3, #2
  }
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b0ba      	sub	sp, #232	@ 0xe8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800777e:	2300      	movs	r3, #0
 8007780:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007784:	2300      	movs	r3, #0
 8007786:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800778a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10f      	bne.n	80077be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_UART_IRQHandler+0x66>
 80077aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fbf2 	bl	8007fa0 <UART_Receive_IT>
      return;
 80077bc:	e25b      	b.n	8007c76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80077be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80de 	beq.w	8007984 <HAL_UART_IRQHandler+0x22c>
 80077c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d106      	bne.n	80077e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80d1 	beq.w	8007984 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <HAL_UART_IRQHandler+0xae>
 80077ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077fe:	f043 0201 	orr.w	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <HAL_UART_IRQHandler+0xd2>
 8007812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007822:	f043 0202 	orr.w	r2, r3, #2
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <HAL_UART_IRQHandler+0xf6>
 8007836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	f043 0204 	orr.w	r2, r3, #4
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800784e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007852:	f003 0308 	and.w	r3, r3, #8
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <HAL_UART_IRQHandler+0x126>
 800785a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007876:	f043 0208 	orr.w	r2, r3, #8
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 81f2 	beq.w	8007c6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d008      	beq.n	80078a6 <HAL_UART_IRQHandler+0x14e>
 8007894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fb7d 	bl	8007fa0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b0:	2b40      	cmp	r3, #64	@ 0x40
 80078b2:	bf0c      	ite	eq
 80078b4:	2301      	moveq	r3, #1
 80078b6:	2300      	movne	r3, #0
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <HAL_UART_IRQHandler+0x17a>
 80078ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04f      	beq.n	8007972 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa85 	bl	8007de2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	2b40      	cmp	r3, #64	@ 0x40
 80078e4:	d141      	bne.n	800796a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3314      	adds	r3, #20
 80078ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007900:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3314      	adds	r3, #20
 800790e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007912:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800791e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800792a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1d9      	bne.n	80078e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d013      	beq.n	8007962 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b38 <HAL_UART_IRQHandler+0x3e0>)
 8007940:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe facb 	bl	8005ee2 <HAL_DMA_Abort_IT>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	e00e      	b.n	8007980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f994 	bl	8007c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007968:	e00a      	b.n	8007980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f990 	bl	8007c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007970:	e006      	b.n	8007980 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f98c 	bl	8007c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800797e:	e175      	b.n	8007c6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007980:	bf00      	nop
    return;
 8007982:	e173      	b.n	8007c6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007988:	2b01      	cmp	r3, #1
 800798a:	f040 814f 	bne.w	8007c2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800798e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8148 	beq.w	8007c2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a0:	f003 0310 	and.w	r3, r3, #16
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8141 	beq.w	8007c2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079aa:	2300      	movs	r3, #0
 80079ac:	60bb      	str	r3, [r7, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	695b      	ldr	r3, [r3, #20]
 80079c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ca:	2b40      	cmp	r3, #64	@ 0x40
 80079cc:	f040 80b6 	bne.w	8007b3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8145 	beq.w	8007c70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079ee:	429a      	cmp	r2, r3
 80079f0:	f080 813e 	bcs.w	8007c70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a06:	f000 8088 	beq.w	8007b1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a18:	e853 3f00 	ldrex	r3, [r3]
 8007a1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1d9      	bne.n	8007a0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3314      	adds	r3, #20
 8007a5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a68:	f023 0301 	bic.w	r3, r3, #1
 8007a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3314      	adds	r3, #20
 8007a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e1      	bne.n	8007a56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	3314      	adds	r3, #20
 8007a98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a9c:	e853 3f00 	ldrex	r3, [r3]
 8007aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007aa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3314      	adds	r3, #20
 8007ab2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ab6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007abc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e3      	bne.n	8007a92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	330c      	adds	r3, #12
 8007ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aea:	f023 0310 	bic.w	r3, r3, #16
 8007aee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	330c      	adds	r3, #12
 8007af8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007afc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007afe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e3      	bne.n	8007ad8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe f974 	bl	8005e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f8b7 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b36:	e09b      	b.n	8007c70 <HAL_UART_IRQHandler+0x518>
 8007b38:	08007ea9 	.word	0x08007ea9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 808e 	beq.w	8007c74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8089 	beq.w	8007c74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b86:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	f023 0301 	bic.w	r3, r3, #1
 8007bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3314      	adds	r3, #20
 8007bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc6:	e841 2300 	strex	r3, r2, [r1]
 8007bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1e3      	bne.n	8007b9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	330c      	adds	r3, #12
 8007be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0310 	bic.w	r3, r3, #16
 8007bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007c04:	61fa      	str	r2, [r7, #28]
 8007c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	69b9      	ldr	r1, [r7, #24]
 8007c0a:	69fa      	ldr	r2, [r7, #28]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	617b      	str	r3, [r7, #20]
   return(result);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e3      	bne.n	8007be0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f83d 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c2a:	e023      	b.n	8007c74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d009      	beq.n	8007c4c <HAL_UART_IRQHandler+0x4f4>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f943 	bl	8007ed0 <UART_Transmit_IT>
    return;
 8007c4a:	e014      	b.n	8007c76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <HAL_UART_IRQHandler+0x51e>
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f983 	bl	8007f70 <UART_EndTransmit_IT>
    return;
 8007c6a:	e004      	b.n	8007c76 <HAL_UART_IRQHandler+0x51e>
    return;
 8007c6c:	bf00      	nop
 8007c6e:	e002      	b.n	8007c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8007c70:	bf00      	nop
 8007c72:	e000      	b.n	8007c76 <HAL_UART_IRQHandler+0x51e>
      return;
 8007c74:	bf00      	nop
  }
}
 8007c76:	37e8      	adds	r7, #232	@ 0xe8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ccc:	e03b      	b.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d037      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd6:	f7fd ff53 	bl	8005b80 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	6a3a      	ldr	r2, [r7, #32]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e03a      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d023      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b80      	cmp	r3, #128	@ 0x80
 8007d02:	d020      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b40      	cmp	r3, #64	@ 0x40
 8007d08:	d01d      	beq.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d116      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f857 	bl	8007de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2208      	movs	r2, #8
 8007d38:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e00f      	b.n	8007d66 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	bf0c      	ite	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	2300      	movne	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d0b4      	beq.n	8007cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	88fa      	ldrh	r2, [r7, #6]
 8007d8c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2222      	movs	r2, #34	@ 0x22
 8007d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007db2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695a      	ldr	r2, [r3, #20]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0201 	orr.w	r2, r2, #1
 8007dc2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0220 	orr.w	r2, r2, #32
 8007dd2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b095      	sub	sp, #84	@ 0x54
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d119      	bne.n	8007e8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f023 0310 	bic.w	r3, r3, #16
 8007e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	330c      	adds	r3, #12
 8007e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e7a:	61ba      	str	r2, [r7, #24]
 8007e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6979      	ldr	r1, [r7, #20]
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	613b      	str	r3, [r7, #16]
   return(result);
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e5      	bne.n	8007e5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e9c:	bf00      	nop
 8007e9e:	3754      	adds	r7, #84	@ 0x54
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff fee4 	bl	8007c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b21      	cmp	r3, #33	@ 0x21
 8007ee2:	d13e      	bne.n	8007f62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eec:	d114      	bne.n	8007f18 <UART_Transmit_IT+0x48>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d110      	bne.n	8007f18 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	1c9a      	adds	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	621a      	str	r2, [r3, #32]
 8007f16:	e008      	b.n	8007f2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	1c59      	adds	r1, r3, #1
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6211      	str	r1, [r2, #32]
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10f      	bne.n	8007f5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e000      	b.n	8007f64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f62:	2302      	movs	r3, #2
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f86:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fe73 	bl	8007c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08c      	sub	sp, #48	@ 0x30
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b22      	cmp	r3, #34	@ 0x22
 8007fb2:	f040 80ae 	bne.w	8008112 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fbe:	d117      	bne.n	8007ff0 <UART_Receive_IT+0x50>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d113      	bne.n	8007ff0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	1c9a      	adds	r2, r3, #2
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fee:	e026      	b.n	800803e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008002:	d007      	beq.n	8008014 <UART_Receive_IT+0x74>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d10a      	bne.n	8008022 <UART_Receive_IT+0x82>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	b2da      	uxtb	r2, r3
 800801c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801e:	701a      	strb	r2, [r3, #0]
 8008020:	e008      	b.n	8008034 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800802e:	b2da      	uxtb	r2, r3
 8008030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008032:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008042:	b29b      	uxth	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	b29b      	uxth	r3, r3
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4619      	mov	r1, r3
 800804c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800804e:	2b00      	cmp	r3, #0
 8008050:	d15d      	bne.n	800810e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0220 	bic.w	r2, r2, #32
 8008060:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68da      	ldr	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695a      	ldr	r2, [r3, #20]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0201 	bic.w	r2, r2, #1
 8008080:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	d135      	bne.n	8008104 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	330c      	adds	r3, #12
 80080a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	613b      	str	r3, [r7, #16]
   return(result);
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f023 0310 	bic.w	r3, r3, #16
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080be:	623a      	str	r2, [r7, #32]
 80080c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	69f9      	ldr	r1, [r7, #28]
 80080c4:	6a3a      	ldr	r2, [r7, #32]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0310 	and.w	r3, r3, #16
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d10a      	bne.n	80080f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	60fb      	str	r3, [r7, #12]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fdd1 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
 8008102:	e002      	b.n	800810a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fd f851 	bl	80051ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	e002      	b.n	8008114 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e000      	b.n	8008114 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008112:	2302      	movs	r3, #2
  }
}
 8008114:	4618      	mov	r0, r3
 8008116:	3730      	adds	r7, #48	@ 0x30
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800811c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008120:	b0c0      	sub	sp, #256	@ 0x100
 8008122:	af00      	add	r7, sp, #0
 8008124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008138:	68d9      	ldr	r1, [r3, #12]
 800813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	ea40 0301 	orr.w	r3, r0, r1
 8008144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814a:	689a      	ldr	r2, [r3, #8]
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	431a      	orrs	r2, r3
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	431a      	orrs	r2, r3
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	4313      	orrs	r3, r2
 8008164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008174:	f021 010c 	bic.w	r1, r1, #12
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008182:	430b      	orrs	r3, r1
 8008184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	6999      	ldr	r1, [r3, #24]
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	ea40 0301 	orr.w	r3, r0, r1
 80081a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b8f      	ldr	r3, [pc, #572]	@ (80083e8 <UART_SetConfig+0x2cc>)
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d005      	beq.n	80081bc <UART_SetConfig+0xa0>
 80081b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b8d      	ldr	r3, [pc, #564]	@ (80083ec <UART_SetConfig+0x2d0>)
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d104      	bne.n	80081c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fe fd1e 	bl	8006bfc <HAL_RCC_GetPCLK2Freq>
 80081c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80081c4:	e003      	b.n	80081ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081c6:	f7fe fd05 	bl	8006bd4 <HAL_RCC_GetPCLK1Freq>
 80081ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081d8:	f040 810c 	bne.w	80083f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081e0:	2200      	movs	r2, #0
 80081e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081ee:	4622      	mov	r2, r4
 80081f0:	462b      	mov	r3, r5
 80081f2:	1891      	adds	r1, r2, r2
 80081f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081f6:	415b      	adcs	r3, r3
 80081f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081fe:	4621      	mov	r1, r4
 8008200:	eb12 0801 	adds.w	r8, r2, r1
 8008204:	4629      	mov	r1, r5
 8008206:	eb43 0901 	adc.w	r9, r3, r1
 800820a:	f04f 0200 	mov.w	r2, #0
 800820e:	f04f 0300 	mov.w	r3, #0
 8008212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800821a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800821e:	4690      	mov	r8, r2
 8008220:	4699      	mov	r9, r3
 8008222:	4623      	mov	r3, r4
 8008224:	eb18 0303 	adds.w	r3, r8, r3
 8008228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800822c:	462b      	mov	r3, r5
 800822e:	eb49 0303 	adc.w	r3, r9, r3
 8008232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800824a:	460b      	mov	r3, r1
 800824c:	18db      	adds	r3, r3, r3
 800824e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008250:	4613      	mov	r3, r2
 8008252:	eb42 0303 	adc.w	r3, r2, r3
 8008256:	657b      	str	r3, [r7, #84]	@ 0x54
 8008258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800825c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008260:	f7f8 fcbc 	bl	8000bdc <__aeabi_uldivmod>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4b61      	ldr	r3, [pc, #388]	@ (80083f0 <UART_SetConfig+0x2d4>)
 800826a:	fba3 2302 	umull	r2, r3, r3, r2
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	011c      	lsls	r4, r3, #4
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800827c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	1891      	adds	r1, r2, r2
 800828a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800828c:	415b      	adcs	r3, r3
 800828e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008294:	4641      	mov	r1, r8
 8008296:	eb12 0a01 	adds.w	sl, r2, r1
 800829a:	4649      	mov	r1, r9
 800829c:	eb43 0b01 	adc.w	fp, r3, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082b4:	4692      	mov	sl, r2
 80082b6:	469b      	mov	fp, r3
 80082b8:	4643      	mov	r3, r8
 80082ba:	eb1a 0303 	adds.w	r3, sl, r3
 80082be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082c2:	464b      	mov	r3, r9
 80082c4:	eb4b 0303 	adc.w	r3, fp, r3
 80082c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082e0:	460b      	mov	r3, r1
 80082e2:	18db      	adds	r3, r3, r3
 80082e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e6:	4613      	mov	r3, r2
 80082e8:	eb42 0303 	adc.w	r3, r2, r3
 80082ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082f6:	f7f8 fc71 	bl	8000bdc <__aeabi_uldivmod>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	4b3b      	ldr	r3, [pc, #236]	@ (80083f0 <UART_SetConfig+0x2d4>)
 8008302:	fba3 2301 	umull	r2, r3, r3, r1
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	2264      	movs	r2, #100	@ 0x64
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	1acb      	subs	r3, r1, r3
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008316:	4b36      	ldr	r3, [pc, #216]	@ (80083f0 <UART_SetConfig+0x2d4>)
 8008318:	fba3 2302 	umull	r2, r3, r3, r2
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008324:	441c      	add	r4, r3
 8008326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800832a:	2200      	movs	r2, #0
 800832c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	1891      	adds	r1, r2, r2
 800833e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008340:	415b      	adcs	r3, r3
 8008342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008348:	4641      	mov	r1, r8
 800834a:	1851      	adds	r1, r2, r1
 800834c:	6339      	str	r1, [r7, #48]	@ 0x30
 800834e:	4649      	mov	r1, r9
 8008350:	414b      	adcs	r3, r1
 8008352:	637b      	str	r3, [r7, #52]	@ 0x34
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008360:	4659      	mov	r1, fp
 8008362:	00cb      	lsls	r3, r1, #3
 8008364:	4651      	mov	r1, sl
 8008366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836a:	4651      	mov	r1, sl
 800836c:	00ca      	lsls	r2, r1, #3
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	4603      	mov	r3, r0
 8008374:	4642      	mov	r2, r8
 8008376:	189b      	adds	r3, r3, r2
 8008378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800837c:	464b      	mov	r3, r9
 800837e:	460a      	mov	r2, r1
 8008380:	eb42 0303 	adc.w	r3, r2, r3
 8008384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800839c:	460b      	mov	r3, r1
 800839e:	18db      	adds	r3, r3, r3
 80083a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083a2:	4613      	mov	r3, r2
 80083a4:	eb42 0303 	adc.w	r3, r2, r3
 80083a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083b2:	f7f8 fc13 	bl	8000bdc <__aeabi_uldivmod>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <UART_SetConfig+0x2d4>)
 80083bc:	fba3 1302 	umull	r1, r3, r3, r2
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	2164      	movs	r1, #100	@ 0x64
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	3332      	adds	r3, #50	@ 0x32
 80083ce:	4a08      	ldr	r2, [pc, #32]	@ (80083f0 <UART_SetConfig+0x2d4>)
 80083d0:	fba2 2303 	umull	r2, r3, r2, r3
 80083d4:	095b      	lsrs	r3, r3, #5
 80083d6:	f003 0207 	and.w	r2, r3, #7
 80083da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4422      	add	r2, r4
 80083e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083e4:	e106      	b.n	80085f4 <UART_SetConfig+0x4d8>
 80083e6:	bf00      	nop
 80083e8:	40011000 	.word	0x40011000
 80083ec:	40011400 	.word	0x40011400
 80083f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083f8:	2200      	movs	r2, #0
 80083fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008406:	4642      	mov	r2, r8
 8008408:	464b      	mov	r3, r9
 800840a:	1891      	adds	r1, r2, r2
 800840c:	6239      	str	r1, [r7, #32]
 800840e:	415b      	adcs	r3, r3
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24
 8008412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008416:	4641      	mov	r1, r8
 8008418:	1854      	adds	r4, r2, r1
 800841a:	4649      	mov	r1, r9
 800841c:	eb43 0501 	adc.w	r5, r3, r1
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	00eb      	lsls	r3, r5, #3
 800842a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800842e:	00e2      	lsls	r2, r4, #3
 8008430:	4614      	mov	r4, r2
 8008432:	461d      	mov	r5, r3
 8008434:	4643      	mov	r3, r8
 8008436:	18e3      	adds	r3, r4, r3
 8008438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800843c:	464b      	mov	r3, r9
 800843e:	eb45 0303 	adc.w	r3, r5, r3
 8008442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008462:	4629      	mov	r1, r5
 8008464:	008b      	lsls	r3, r1, #2
 8008466:	4621      	mov	r1, r4
 8008468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800846c:	4621      	mov	r1, r4
 800846e:	008a      	lsls	r2, r1, #2
 8008470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008474:	f7f8 fbb2 	bl	8000bdc <__aeabi_uldivmod>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4b60      	ldr	r3, [pc, #384]	@ (8008600 <UART_SetConfig+0x4e4>)
 800847e:	fba3 2302 	umull	r2, r3, r3, r2
 8008482:	095b      	lsrs	r3, r3, #5
 8008484:	011c      	lsls	r4, r3, #4
 8008486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800848a:	2200      	movs	r2, #0
 800848c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008498:	4642      	mov	r2, r8
 800849a:	464b      	mov	r3, r9
 800849c:	1891      	adds	r1, r2, r2
 800849e:	61b9      	str	r1, [r7, #24]
 80084a0:	415b      	adcs	r3, r3
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084a8:	4641      	mov	r1, r8
 80084aa:	1851      	adds	r1, r2, r1
 80084ac:	6139      	str	r1, [r7, #16]
 80084ae:	4649      	mov	r1, r9
 80084b0:	414b      	adcs	r3, r1
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	f04f 0200 	mov.w	r2, #0
 80084b8:	f04f 0300 	mov.w	r3, #0
 80084bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084c0:	4659      	mov	r1, fp
 80084c2:	00cb      	lsls	r3, r1, #3
 80084c4:	4651      	mov	r1, sl
 80084c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ca:	4651      	mov	r1, sl
 80084cc:	00ca      	lsls	r2, r1, #3
 80084ce:	4610      	mov	r0, r2
 80084d0:	4619      	mov	r1, r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	4642      	mov	r2, r8
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084dc:	464b      	mov	r3, r9
 80084de:	460a      	mov	r2, r1
 80084e0:	eb42 0303 	adc.w	r3, r2, r3
 80084e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084f4:	f04f 0200 	mov.w	r2, #0
 80084f8:	f04f 0300 	mov.w	r3, #0
 80084fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008500:	4649      	mov	r1, r9
 8008502:	008b      	lsls	r3, r1, #2
 8008504:	4641      	mov	r1, r8
 8008506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800850a:	4641      	mov	r1, r8
 800850c:	008a      	lsls	r2, r1, #2
 800850e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008512:	f7f8 fb63 	bl	8000bdc <__aeabi_uldivmod>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4611      	mov	r1, r2
 800851c:	4b38      	ldr	r3, [pc, #224]	@ (8008600 <UART_SetConfig+0x4e4>)
 800851e:	fba3 2301 	umull	r2, r3, r3, r1
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	2264      	movs	r2, #100	@ 0x64
 8008526:	fb02 f303 	mul.w	r3, r2, r3
 800852a:	1acb      	subs	r3, r1, r3
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	3332      	adds	r3, #50	@ 0x32
 8008530:	4a33      	ldr	r2, [pc, #204]	@ (8008600 <UART_SetConfig+0x4e4>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	095b      	lsrs	r3, r3, #5
 8008538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800853c:	441c      	add	r4, r3
 800853e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008542:	2200      	movs	r2, #0
 8008544:	673b      	str	r3, [r7, #112]	@ 0x70
 8008546:	677a      	str	r2, [r7, #116]	@ 0x74
 8008548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	1891      	adds	r1, r2, r2
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	415b      	adcs	r3, r3
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800855c:	4641      	mov	r1, r8
 800855e:	1851      	adds	r1, r2, r1
 8008560:	6039      	str	r1, [r7, #0]
 8008562:	4649      	mov	r1, r9
 8008564:	414b      	adcs	r3, r1
 8008566:	607b      	str	r3, [r7, #4]
 8008568:	f04f 0200 	mov.w	r2, #0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008574:	4659      	mov	r1, fp
 8008576:	00cb      	lsls	r3, r1, #3
 8008578:	4651      	mov	r1, sl
 800857a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800857e:	4651      	mov	r1, sl
 8008580:	00ca      	lsls	r2, r1, #3
 8008582:	4610      	mov	r0, r2
 8008584:	4619      	mov	r1, r3
 8008586:	4603      	mov	r3, r0
 8008588:	4642      	mov	r2, r8
 800858a:	189b      	adds	r3, r3, r2
 800858c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800858e:	464b      	mov	r3, r9
 8008590:	460a      	mov	r2, r1
 8008592:	eb42 0303 	adc.w	r3, r2, r3
 8008596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80085a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	f04f 0300 	mov.w	r3, #0
 80085ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085b0:	4649      	mov	r1, r9
 80085b2:	008b      	lsls	r3, r1, #2
 80085b4:	4641      	mov	r1, r8
 80085b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085ba:	4641      	mov	r1, r8
 80085bc:	008a      	lsls	r2, r1, #2
 80085be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80085c2:	f7f8 fb0b 	bl	8000bdc <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <UART_SetConfig+0x4e4>)
 80085cc:	fba3 1302 	umull	r1, r3, r3, r2
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	2164      	movs	r1, #100	@ 0x64
 80085d4:	fb01 f303 	mul.w	r3, r1, r3
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	3332      	adds	r3, #50	@ 0x32
 80085de:	4a08      	ldr	r2, [pc, #32]	@ (8008600 <UART_SetConfig+0x4e4>)
 80085e0:	fba2 2303 	umull	r2, r3, r2, r3
 80085e4:	095b      	lsrs	r3, r3, #5
 80085e6:	f003 020f 	and.w	r2, r3, #15
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4422      	add	r2, r4
 80085f2:	609a      	str	r2, [r3, #8]
}
 80085f4:	bf00      	nop
 80085f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085fa:	46bd      	mov	sp, r7
 80085fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008600:	51eb851f 	.word	0x51eb851f

08008604 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	6812      	ldr	r2, [r2, #0]
 800861c:	f023 0101 	bic.w	r1, r3, #1
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	2b08      	cmp	r3, #8
 800862c:	d102      	bne.n	8008634 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800862e:	2340      	movs	r3, #64	@ 0x40
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e001      	b.n	8008638 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008644:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800864a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008650:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008656:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800865c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008662:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008668:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800866e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008674:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800867a:	4313      	orrs	r3, r2
 800867c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <FSMC_NORSRAM_Init+0xd0>)
 8008694:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800869c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80086a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	43db      	mvns	r3, r3
 80086b4:	ea02 0103 	and.w	r1, r2, r3
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	4319      	orrs	r1, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	0008fb7f 	.word	0x0008fb7f

080086d8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ee:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	431a      	orrs	r2, r3
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	041b      	lsls	r3, r3, #16
 800870c:	431a      	orrs	r2, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	3b01      	subs	r3, #1
 8008714:	051b      	lsls	r3, r3, #20
 8008716:	431a      	orrs	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	3b02      	subs	r3, #2
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	431a      	orrs	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	4313      	orrs	r3, r2
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	3201      	adds	r2, #1
 800872c:	4319      	orrs	r1, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008758:	d11d      	bne.n	8008796 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008762:	4b13      	ldr	r3, [pc, #76]	@ (80087b0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008764:	4013      	ands	r3, r2
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	6811      	ldr	r1, [r2, #0]
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	6852      	ldr	r2, [r2, #4]
 800876e:	0112      	lsls	r2, r2, #4
 8008770:	4311      	orrs	r1, r2
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	6892      	ldr	r2, [r2, #8]
 8008776:	0212      	lsls	r2, r2, #8
 8008778:	4311      	orrs	r1, r2
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	6992      	ldr	r2, [r2, #24]
 800877e:	4311      	orrs	r1, r2
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	68d2      	ldr	r2, [r2, #12]
 8008784:	0412      	lsls	r2, r2, #16
 8008786:	430a      	orrs	r2, r1
 8008788:	ea43 0102 	orr.w	r1, r3, r2
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008794:	e005      	b.n	80087a2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800879e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3714      	adds	r7, #20
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	cff00000 	.word	0xcff00000

080087b4 <malloc>:
 80087b4:	4b02      	ldr	r3, [pc, #8]	@ (80087c0 <malloc+0xc>)
 80087b6:	4601      	mov	r1, r0
 80087b8:	6818      	ldr	r0, [r3, #0]
 80087ba:	f000 b82d 	b.w	8008818 <_malloc_r>
 80087be:	bf00      	nop
 80087c0:	20000284 	.word	0x20000284

080087c4 <free>:
 80087c4:	4b02      	ldr	r3, [pc, #8]	@ (80087d0 <free+0xc>)
 80087c6:	4601      	mov	r1, r0
 80087c8:	6818      	ldr	r0, [r3, #0]
 80087ca:	f001 b905 	b.w	80099d8 <_free_r>
 80087ce:	bf00      	nop
 80087d0:	20000284 	.word	0x20000284

080087d4 <sbrk_aligned>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008814 <sbrk_aligned+0x40>)
 80087d8:	460c      	mov	r4, r1
 80087da:	6831      	ldr	r1, [r6, #0]
 80087dc:	4605      	mov	r5, r0
 80087de:	b911      	cbnz	r1, 80087e6 <sbrk_aligned+0x12>
 80087e0:	f001 f88c 	bl	80098fc <_sbrk_r>
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	4621      	mov	r1, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	f001 f887 	bl	80098fc <_sbrk_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	d103      	bne.n	80087fa <sbrk_aligned+0x26>
 80087f2:	f04f 34ff 	mov.w	r4, #4294967295
 80087f6:	4620      	mov	r0, r4
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	1cc4      	adds	r4, r0, #3
 80087fc:	f024 0403 	bic.w	r4, r4, #3
 8008800:	42a0      	cmp	r0, r4
 8008802:	d0f8      	beq.n	80087f6 <sbrk_aligned+0x22>
 8008804:	1a21      	subs	r1, r4, r0
 8008806:	4628      	mov	r0, r5
 8008808:	f001 f878 	bl	80098fc <_sbrk_r>
 800880c:	3001      	adds	r0, #1
 800880e:	d1f2      	bne.n	80087f6 <sbrk_aligned+0x22>
 8008810:	e7ef      	b.n	80087f2 <sbrk_aligned+0x1e>
 8008812:	bf00      	nop
 8008814:	20000bf4 	.word	0x20000bf4

08008818 <_malloc_r>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	1ccd      	adds	r5, r1, #3
 800881e:	f025 0503 	bic.w	r5, r5, #3
 8008822:	3508      	adds	r5, #8
 8008824:	2d0c      	cmp	r5, #12
 8008826:	bf38      	it	cc
 8008828:	250c      	movcc	r5, #12
 800882a:	2d00      	cmp	r5, #0
 800882c:	4606      	mov	r6, r0
 800882e:	db01      	blt.n	8008834 <_malloc_r+0x1c>
 8008830:	42a9      	cmp	r1, r5
 8008832:	d904      	bls.n	800883e <_malloc_r+0x26>
 8008834:	230c      	movs	r3, #12
 8008836:	6033      	str	r3, [r6, #0]
 8008838:	2000      	movs	r0, #0
 800883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008914 <_malloc_r+0xfc>
 8008842:	f000 f869 	bl	8008918 <__malloc_lock>
 8008846:	f8d8 3000 	ldr.w	r3, [r8]
 800884a:	461c      	mov	r4, r3
 800884c:	bb44      	cbnz	r4, 80088a0 <_malloc_r+0x88>
 800884e:	4629      	mov	r1, r5
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ffbf 	bl	80087d4 <sbrk_aligned>
 8008856:	1c43      	adds	r3, r0, #1
 8008858:	4604      	mov	r4, r0
 800885a:	d158      	bne.n	800890e <_malloc_r+0xf6>
 800885c:	f8d8 4000 	ldr.w	r4, [r8]
 8008860:	4627      	mov	r7, r4
 8008862:	2f00      	cmp	r7, #0
 8008864:	d143      	bne.n	80088ee <_malloc_r+0xd6>
 8008866:	2c00      	cmp	r4, #0
 8008868:	d04b      	beq.n	8008902 <_malloc_r+0xea>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	4639      	mov	r1, r7
 800886e:	4630      	mov	r0, r6
 8008870:	eb04 0903 	add.w	r9, r4, r3
 8008874:	f001 f842 	bl	80098fc <_sbrk_r>
 8008878:	4581      	cmp	r9, r0
 800887a:	d142      	bne.n	8008902 <_malloc_r+0xea>
 800887c:	6821      	ldr	r1, [r4, #0]
 800887e:	1a6d      	subs	r5, r5, r1
 8008880:	4629      	mov	r1, r5
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ffa6 	bl	80087d4 <sbrk_aligned>
 8008888:	3001      	adds	r0, #1
 800888a:	d03a      	beq.n	8008902 <_malloc_r+0xea>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	442b      	add	r3, r5
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	f8d8 3000 	ldr.w	r3, [r8]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	bb62      	cbnz	r2, 80088f4 <_malloc_r+0xdc>
 800889a:	f8c8 7000 	str.w	r7, [r8]
 800889e:	e00f      	b.n	80088c0 <_malloc_r+0xa8>
 80088a0:	6822      	ldr	r2, [r4, #0]
 80088a2:	1b52      	subs	r2, r2, r5
 80088a4:	d420      	bmi.n	80088e8 <_malloc_r+0xd0>
 80088a6:	2a0b      	cmp	r2, #11
 80088a8:	d917      	bls.n	80088da <_malloc_r+0xc2>
 80088aa:	1961      	adds	r1, r4, r5
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	6025      	str	r5, [r4, #0]
 80088b0:	bf18      	it	ne
 80088b2:	6059      	strne	r1, [r3, #4]
 80088b4:	6863      	ldr	r3, [r4, #4]
 80088b6:	bf08      	it	eq
 80088b8:	f8c8 1000 	streq.w	r1, [r8]
 80088bc:	5162      	str	r2, [r4, r5]
 80088be:	604b      	str	r3, [r1, #4]
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f82f 	bl	8008924 <__malloc_unlock>
 80088c6:	f104 000b 	add.w	r0, r4, #11
 80088ca:	1d23      	adds	r3, r4, #4
 80088cc:	f020 0007 	bic.w	r0, r0, #7
 80088d0:	1ac2      	subs	r2, r0, r3
 80088d2:	bf1c      	itt	ne
 80088d4:	1a1b      	subne	r3, r3, r0
 80088d6:	50a3      	strne	r3, [r4, r2]
 80088d8:	e7af      	b.n	800883a <_malloc_r+0x22>
 80088da:	6862      	ldr	r2, [r4, #4]
 80088dc:	42a3      	cmp	r3, r4
 80088de:	bf0c      	ite	eq
 80088e0:	f8c8 2000 	streq.w	r2, [r8]
 80088e4:	605a      	strne	r2, [r3, #4]
 80088e6:	e7eb      	b.n	80088c0 <_malloc_r+0xa8>
 80088e8:	4623      	mov	r3, r4
 80088ea:	6864      	ldr	r4, [r4, #4]
 80088ec:	e7ae      	b.n	800884c <_malloc_r+0x34>
 80088ee:	463c      	mov	r4, r7
 80088f0:	687f      	ldr	r7, [r7, #4]
 80088f2:	e7b6      	b.n	8008862 <_malloc_r+0x4a>
 80088f4:	461a      	mov	r2, r3
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	42a3      	cmp	r3, r4
 80088fa:	d1fb      	bne.n	80088f4 <_malloc_r+0xdc>
 80088fc:	2300      	movs	r3, #0
 80088fe:	6053      	str	r3, [r2, #4]
 8008900:	e7de      	b.n	80088c0 <_malloc_r+0xa8>
 8008902:	230c      	movs	r3, #12
 8008904:	6033      	str	r3, [r6, #0]
 8008906:	4630      	mov	r0, r6
 8008908:	f000 f80c 	bl	8008924 <__malloc_unlock>
 800890c:	e794      	b.n	8008838 <_malloc_r+0x20>
 800890e:	6005      	str	r5, [r0, #0]
 8008910:	e7d6      	b.n	80088c0 <_malloc_r+0xa8>
 8008912:	bf00      	nop
 8008914:	20000bf8 	.word	0x20000bf8

08008918 <__malloc_lock>:
 8008918:	4801      	ldr	r0, [pc, #4]	@ (8008920 <__malloc_lock+0x8>)
 800891a:	f001 b83c 	b.w	8009996 <__retarget_lock_acquire_recursive>
 800891e:	bf00      	nop
 8008920:	20000d3c 	.word	0x20000d3c

08008924 <__malloc_unlock>:
 8008924:	4801      	ldr	r0, [pc, #4]	@ (800892c <__malloc_unlock+0x8>)
 8008926:	f001 b837 	b.w	8009998 <__retarget_lock_release_recursive>
 800892a:	bf00      	nop
 800892c:	20000d3c 	.word	0x20000d3c

08008930 <realloc>:
 8008930:	4b02      	ldr	r3, [pc, #8]	@ (800893c <realloc+0xc>)
 8008932:	460a      	mov	r2, r1
 8008934:	4601      	mov	r1, r0
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	f000 b802 	b.w	8008940 <_realloc_r>
 800893c:	20000284 	.word	0x20000284

08008940 <_realloc_r>:
 8008940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008944:	4607      	mov	r7, r0
 8008946:	4614      	mov	r4, r2
 8008948:	460d      	mov	r5, r1
 800894a:	b921      	cbnz	r1, 8008956 <_realloc_r+0x16>
 800894c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	4611      	mov	r1, r2
 8008952:	f7ff bf61 	b.w	8008818 <_malloc_r>
 8008956:	b92a      	cbnz	r2, 8008964 <_realloc_r+0x24>
 8008958:	f001 f83e 	bl	80099d8 <_free_r>
 800895c:	4625      	mov	r5, r4
 800895e:	4628      	mov	r0, r5
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008964:	f002 f878 	bl	800aa58 <_malloc_usable_size_r>
 8008968:	4284      	cmp	r4, r0
 800896a:	4606      	mov	r6, r0
 800896c:	d802      	bhi.n	8008974 <_realloc_r+0x34>
 800896e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008972:	d8f4      	bhi.n	800895e <_realloc_r+0x1e>
 8008974:	4621      	mov	r1, r4
 8008976:	4638      	mov	r0, r7
 8008978:	f7ff ff4e 	bl	8008818 <_malloc_r>
 800897c:	4680      	mov	r8, r0
 800897e:	b908      	cbnz	r0, 8008984 <_realloc_r+0x44>
 8008980:	4645      	mov	r5, r8
 8008982:	e7ec      	b.n	800895e <_realloc_r+0x1e>
 8008984:	42b4      	cmp	r4, r6
 8008986:	4622      	mov	r2, r4
 8008988:	4629      	mov	r1, r5
 800898a:	bf28      	it	cs
 800898c:	4632      	movcs	r2, r6
 800898e:	f001 f80c 	bl	80099aa <memcpy>
 8008992:	4629      	mov	r1, r5
 8008994:	4638      	mov	r0, r7
 8008996:	f001 f81f 	bl	80099d8 <_free_r>
 800899a:	e7f1      	b.n	8008980 <_realloc_r+0x40>

0800899c <sulp>:
 800899c:	b570      	push	{r4, r5, r6, lr}
 800899e:	4604      	mov	r4, r0
 80089a0:	460d      	mov	r5, r1
 80089a2:	ec45 4b10 	vmov	d0, r4, r5
 80089a6:	4616      	mov	r6, r2
 80089a8:	f001 ff18 	bl	800a7dc <__ulp>
 80089ac:	ec51 0b10 	vmov	r0, r1, d0
 80089b0:	b17e      	cbz	r6, 80089d2 <sulp+0x36>
 80089b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dd09      	ble.n	80089d2 <sulp+0x36>
 80089be:	051b      	lsls	r3, r3, #20
 80089c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80089c4:	2400      	movs	r4, #0
 80089c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80089ca:	4622      	mov	r2, r4
 80089cc:	462b      	mov	r3, r5
 80089ce:	f7f7 fe23 	bl	8000618 <__aeabi_dmul>
 80089d2:	ec41 0b10 	vmov	d0, r0, r1
 80089d6:	bd70      	pop	{r4, r5, r6, pc}

080089d8 <_strtod_l>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	b09f      	sub	sp, #124	@ 0x7c
 80089de:	460c      	mov	r4, r1
 80089e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80089e2:	2200      	movs	r2, #0
 80089e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80089e6:	9005      	str	r0, [sp, #20]
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	f04f 0b00 	mov.w	fp, #0
 80089f0:	460a      	mov	r2, r1
 80089f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80089f4:	7811      	ldrb	r1, [r2, #0]
 80089f6:	292b      	cmp	r1, #43	@ 0x2b
 80089f8:	d04a      	beq.n	8008a90 <_strtod_l+0xb8>
 80089fa:	d838      	bhi.n	8008a6e <_strtod_l+0x96>
 80089fc:	290d      	cmp	r1, #13
 80089fe:	d832      	bhi.n	8008a66 <_strtod_l+0x8e>
 8008a00:	2908      	cmp	r1, #8
 8008a02:	d832      	bhi.n	8008a6a <_strtod_l+0x92>
 8008a04:	2900      	cmp	r1, #0
 8008a06:	d03b      	beq.n	8008a80 <_strtod_l+0xa8>
 8008a08:	2200      	movs	r2, #0
 8008a0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a0e:	782a      	ldrb	r2, [r5, #0]
 8008a10:	2a30      	cmp	r2, #48	@ 0x30
 8008a12:	f040 80b2 	bne.w	8008b7a <_strtod_l+0x1a2>
 8008a16:	786a      	ldrb	r2, [r5, #1]
 8008a18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a1c:	2a58      	cmp	r2, #88	@ 0x58
 8008a1e:	d16e      	bne.n	8008afe <_strtod_l+0x126>
 8008a20:	9302      	str	r3, [sp, #8]
 8008a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4a8f      	ldr	r2, [pc, #572]	@ (8008c68 <_strtod_l+0x290>)
 8008a2c:	9805      	ldr	r0, [sp, #20]
 8008a2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a30:	a919      	add	r1, sp, #100	@ 0x64
 8008a32:	f001 f883 	bl	8009b3c <__gethex>
 8008a36:	f010 060f 	ands.w	r6, r0, #15
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	d005      	beq.n	8008a4a <_strtod_l+0x72>
 8008a3e:	2e06      	cmp	r6, #6
 8008a40:	d128      	bne.n	8008a94 <_strtod_l+0xbc>
 8008a42:	3501      	adds	r5, #1
 8008a44:	2300      	movs	r3, #0
 8008a46:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a48:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f040 858e 	bne.w	800956e <_strtod_l+0xb96>
 8008a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a54:	b1cb      	cbz	r3, 8008a8a <_strtod_l+0xb2>
 8008a56:	4652      	mov	r2, sl
 8008a58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a5c:	ec43 2b10 	vmov	d0, r2, r3
 8008a60:	b01f      	add	sp, #124	@ 0x7c
 8008a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a66:	2920      	cmp	r1, #32
 8008a68:	d1ce      	bne.n	8008a08 <_strtod_l+0x30>
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	e7c1      	b.n	80089f2 <_strtod_l+0x1a>
 8008a6e:	292d      	cmp	r1, #45	@ 0x2d
 8008a70:	d1ca      	bne.n	8008a08 <_strtod_l+0x30>
 8008a72:	2101      	movs	r1, #1
 8008a74:	910e      	str	r1, [sp, #56]	@ 0x38
 8008a76:	1c51      	adds	r1, r2, #1
 8008a78:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a7a:	7852      	ldrb	r2, [r2, #1]
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d1c5      	bne.n	8008a0c <_strtod_l+0x34>
 8008a80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a82:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f040 8570 	bne.w	800956a <_strtod_l+0xb92>
 8008a8a:	4652      	mov	r2, sl
 8008a8c:	465b      	mov	r3, fp
 8008a8e:	e7e5      	b.n	8008a5c <_strtod_l+0x84>
 8008a90:	2100      	movs	r1, #0
 8008a92:	e7ef      	b.n	8008a74 <_strtod_l+0x9c>
 8008a94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a96:	b13a      	cbz	r2, 8008aa8 <_strtod_l+0xd0>
 8008a98:	2135      	movs	r1, #53	@ 0x35
 8008a9a:	a81c      	add	r0, sp, #112	@ 0x70
 8008a9c:	f001 ff98 	bl	800a9d0 <__copybits>
 8008aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aa2:	9805      	ldr	r0, [sp, #20]
 8008aa4:	f001 fb6e 	bl	800a184 <_Bfree>
 8008aa8:	3e01      	subs	r6, #1
 8008aaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008aac:	2e04      	cmp	r6, #4
 8008aae:	d806      	bhi.n	8008abe <_strtod_l+0xe6>
 8008ab0:	e8df f006 	tbb	[pc, r6]
 8008ab4:	201d0314 	.word	0x201d0314
 8008ab8:	14          	.byte	0x14
 8008ab9:	00          	.byte	0x00
 8008aba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008abe:	05e1      	lsls	r1, r4, #23
 8008ac0:	bf48      	it	mi
 8008ac2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008ac6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008aca:	0d1b      	lsrs	r3, r3, #20
 8008acc:	051b      	lsls	r3, r3, #20
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1bb      	bne.n	8008a4a <_strtod_l+0x72>
 8008ad2:	f000 ff35 	bl	8009940 <__errno>
 8008ad6:	2322      	movs	r3, #34	@ 0x22
 8008ad8:	6003      	str	r3, [r0, #0]
 8008ada:	e7b6      	b.n	8008a4a <_strtod_l+0x72>
 8008adc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008ae0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ae4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ae8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008aec:	e7e7      	b.n	8008abe <_strtod_l+0xe6>
 8008aee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008c70 <_strtod_l+0x298>
 8008af2:	e7e4      	b.n	8008abe <_strtod_l+0xe6>
 8008af4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008af8:	f04f 3aff 	mov.w	sl, #4294967295
 8008afc:	e7df      	b.n	8008abe <_strtod_l+0xe6>
 8008afe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b04:	785b      	ldrb	r3, [r3, #1]
 8008b06:	2b30      	cmp	r3, #48	@ 0x30
 8008b08:	d0f9      	beq.n	8008afe <_strtod_l+0x126>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d09d      	beq.n	8008a4a <_strtod_l+0x72>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	2700      	movs	r7, #0
 8008b12:	9308      	str	r3, [sp, #32]
 8008b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b16:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b18:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008b1a:	46b9      	mov	r9, r7
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b20:	7805      	ldrb	r5, [r0, #0]
 8008b22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b26:	b2d9      	uxtb	r1, r3
 8008b28:	2909      	cmp	r1, #9
 8008b2a:	d928      	bls.n	8008b7e <_strtod_l+0x1a6>
 8008b2c:	494f      	ldr	r1, [pc, #316]	@ (8008c6c <_strtod_l+0x294>)
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f000 fe8b 	bl	800984a <strncmp>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d032      	beq.n	8008b9e <_strtod_l+0x1c6>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	462a      	mov	r2, r5
 8008b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b3e:	464d      	mov	r5, r9
 8008b40:	4603      	mov	r3, r0
 8008b42:	2a65      	cmp	r2, #101	@ 0x65
 8008b44:	d001      	beq.n	8008b4a <_strtod_l+0x172>
 8008b46:	2a45      	cmp	r2, #69	@ 0x45
 8008b48:	d114      	bne.n	8008b74 <_strtod_l+0x19c>
 8008b4a:	b91d      	cbnz	r5, 8008b54 <_strtod_l+0x17c>
 8008b4c:	9a08      	ldr	r2, [sp, #32]
 8008b4e:	4302      	orrs	r2, r0
 8008b50:	d096      	beq.n	8008a80 <_strtod_l+0xa8>
 8008b52:	2500      	movs	r5, #0
 8008b54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b56:	1c62      	adds	r2, r4, #1
 8008b58:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b5a:	7862      	ldrb	r2, [r4, #1]
 8008b5c:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b5e:	d07a      	beq.n	8008c56 <_strtod_l+0x27e>
 8008b60:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b62:	d07e      	beq.n	8008c62 <_strtod_l+0x28a>
 8008b64:	f04f 0c00 	mov.w	ip, #0
 8008b68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b6c:	2909      	cmp	r1, #9
 8008b6e:	f240 8085 	bls.w	8008c7c <_strtod_l+0x2a4>
 8008b72:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b74:	f04f 0800 	mov.w	r8, #0
 8008b78:	e0a5      	b.n	8008cc6 <_strtod_l+0x2ee>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e7c8      	b.n	8008b10 <_strtod_l+0x138>
 8008b7e:	f1b9 0f08 	cmp.w	r9, #8
 8008b82:	bfd8      	it	le
 8008b84:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008b86:	f100 0001 	add.w	r0, r0, #1
 8008b8a:	bfda      	itte	le
 8008b8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008b92:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008b96:	f109 0901 	add.w	r9, r9, #1
 8008b9a:	9019      	str	r0, [sp, #100]	@ 0x64
 8008b9c:	e7bf      	b.n	8008b1e <_strtod_l+0x146>
 8008b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ba4:	785a      	ldrb	r2, [r3, #1]
 8008ba6:	f1b9 0f00 	cmp.w	r9, #0
 8008baa:	d03b      	beq.n	8008c24 <_strtod_l+0x24c>
 8008bac:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bae:	464d      	mov	r5, r9
 8008bb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008bb4:	2b09      	cmp	r3, #9
 8008bb6:	d912      	bls.n	8008bde <_strtod_l+0x206>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e7c2      	b.n	8008b42 <_strtod_l+0x16a>
 8008bbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bc2:	785a      	ldrb	r2, [r3, #1]
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	2a30      	cmp	r2, #48	@ 0x30
 8008bc8:	d0f8      	beq.n	8008bbc <_strtod_l+0x1e4>
 8008bca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	f200 84d2 	bhi.w	8009578 <_strtod_l+0xba0>
 8008bd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bd6:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bd8:	2000      	movs	r0, #0
 8008bda:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bdc:	4605      	mov	r5, r0
 8008bde:	3a30      	subs	r2, #48	@ 0x30
 8008be0:	f100 0301 	add.w	r3, r0, #1
 8008be4:	d018      	beq.n	8008c18 <_strtod_l+0x240>
 8008be6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008be8:	4419      	add	r1, r3
 8008bea:	910a      	str	r1, [sp, #40]	@ 0x28
 8008bec:	462e      	mov	r6, r5
 8008bee:	f04f 0e0a 	mov.w	lr, #10
 8008bf2:	1c71      	adds	r1, r6, #1
 8008bf4:	eba1 0c05 	sub.w	ip, r1, r5
 8008bf8:	4563      	cmp	r3, ip
 8008bfa:	dc15      	bgt.n	8008c28 <_strtod_l+0x250>
 8008bfc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008c00:	182b      	adds	r3, r5, r0
 8008c02:	2b08      	cmp	r3, #8
 8008c04:	f105 0501 	add.w	r5, r5, #1
 8008c08:	4405      	add	r5, r0
 8008c0a:	dc1a      	bgt.n	8008c42 <_strtod_l+0x26a>
 8008c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c0e:	230a      	movs	r3, #10
 8008c10:	fb03 2301 	mla	r3, r3, r1, r2
 8008c14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c16:	2300      	movs	r3, #0
 8008c18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c1a:	1c51      	adds	r1, r2, #1
 8008c1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c1e:	7852      	ldrb	r2, [r2, #1]
 8008c20:	4618      	mov	r0, r3
 8008c22:	e7c5      	b.n	8008bb0 <_strtod_l+0x1d8>
 8008c24:	4648      	mov	r0, r9
 8008c26:	e7ce      	b.n	8008bc6 <_strtod_l+0x1ee>
 8008c28:	2e08      	cmp	r6, #8
 8008c2a:	dc05      	bgt.n	8008c38 <_strtod_l+0x260>
 8008c2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c2e:	fb0e f606 	mul.w	r6, lr, r6
 8008c32:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008c34:	460e      	mov	r6, r1
 8008c36:	e7dc      	b.n	8008bf2 <_strtod_l+0x21a>
 8008c38:	2910      	cmp	r1, #16
 8008c3a:	bfd8      	it	le
 8008c3c:	fb0e f707 	mulle.w	r7, lr, r7
 8008c40:	e7f8      	b.n	8008c34 <_strtod_l+0x25c>
 8008c42:	2b0f      	cmp	r3, #15
 8008c44:	bfdc      	itt	le
 8008c46:	230a      	movle	r3, #10
 8008c48:	fb03 2707 	mlale	r7, r3, r7, r2
 8008c4c:	e7e3      	b.n	8008c16 <_strtod_l+0x23e>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c52:	2301      	movs	r3, #1
 8008c54:	e77a      	b.n	8008b4c <_strtod_l+0x174>
 8008c56:	f04f 0c00 	mov.w	ip, #0
 8008c5a:	1ca2      	adds	r2, r4, #2
 8008c5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c5e:	78a2      	ldrb	r2, [r4, #2]
 8008c60:	e782      	b.n	8008b68 <_strtod_l+0x190>
 8008c62:	f04f 0c01 	mov.w	ip, #1
 8008c66:	e7f8      	b.n	8008c5a <_strtod_l+0x282>
 8008c68:	08033770 	.word	0x08033770
 8008c6c:	080335f4 	.word	0x080335f4
 8008c70:	7ff00000 	.word	0x7ff00000
 8008c74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c76:	1c51      	adds	r1, r2, #1
 8008c78:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c7a:	7852      	ldrb	r2, [r2, #1]
 8008c7c:	2a30      	cmp	r2, #48	@ 0x30
 8008c7e:	d0f9      	beq.n	8008c74 <_strtod_l+0x29c>
 8008c80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008c84:	2908      	cmp	r1, #8
 8008c86:	f63f af75 	bhi.w	8008b74 <_strtod_l+0x19c>
 8008c8a:	3a30      	subs	r2, #48	@ 0x30
 8008c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008c92:	f04f 080a 	mov.w	r8, #10
 8008c96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c98:	1c56      	adds	r6, r2, #1
 8008c9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8008c9c:	7852      	ldrb	r2, [r2, #1]
 8008c9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008ca2:	f1be 0f09 	cmp.w	lr, #9
 8008ca6:	d939      	bls.n	8008d1c <_strtod_l+0x344>
 8008ca8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008caa:	1a76      	subs	r6, r6, r1
 8008cac:	2e08      	cmp	r6, #8
 8008cae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cb2:	dc03      	bgt.n	8008cbc <_strtod_l+0x2e4>
 8008cb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cb6:	4588      	cmp	r8, r1
 8008cb8:	bfa8      	it	ge
 8008cba:	4688      	movge	r8, r1
 8008cbc:	f1bc 0f00 	cmp.w	ip, #0
 8008cc0:	d001      	beq.n	8008cc6 <_strtod_l+0x2ee>
 8008cc2:	f1c8 0800 	rsb	r8, r8, #0
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	d14e      	bne.n	8008d68 <_strtod_l+0x390>
 8008cca:	9908      	ldr	r1, [sp, #32]
 8008ccc:	4308      	orrs	r0, r1
 8008cce:	f47f aebc 	bne.w	8008a4a <_strtod_l+0x72>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f47f aed4 	bne.w	8008a80 <_strtod_l+0xa8>
 8008cd8:	2a69      	cmp	r2, #105	@ 0x69
 8008cda:	d028      	beq.n	8008d2e <_strtod_l+0x356>
 8008cdc:	dc25      	bgt.n	8008d2a <_strtod_l+0x352>
 8008cde:	2a49      	cmp	r2, #73	@ 0x49
 8008ce0:	d025      	beq.n	8008d2e <_strtod_l+0x356>
 8008ce2:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ce4:	f47f aecc 	bne.w	8008a80 <_strtod_l+0xa8>
 8008ce8:	499a      	ldr	r1, [pc, #616]	@ (8008f54 <_strtod_l+0x57c>)
 8008cea:	a819      	add	r0, sp, #100	@ 0x64
 8008cec:	f001 f948 	bl	8009f80 <__match>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f43f aec5 	beq.w	8008a80 <_strtod_l+0xa8>
 8008cf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b28      	cmp	r3, #40	@ 0x28
 8008cfc:	d12e      	bne.n	8008d5c <_strtod_l+0x384>
 8008cfe:	4996      	ldr	r1, [pc, #600]	@ (8008f58 <_strtod_l+0x580>)
 8008d00:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d02:	a819      	add	r0, sp, #100	@ 0x64
 8008d04:	f001 f950 	bl	8009fa8 <__hexnan>
 8008d08:	2805      	cmp	r0, #5
 8008d0a:	d127      	bne.n	8008d5c <_strtod_l+0x384>
 8008d0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d1a:	e696      	b.n	8008a4a <_strtod_l+0x72>
 8008d1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d1e:	fb08 2101 	mla	r1, r8, r1, r2
 8008d22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d26:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d28:	e7b5      	b.n	8008c96 <_strtod_l+0x2be>
 8008d2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d2c:	e7da      	b.n	8008ce4 <_strtod_l+0x30c>
 8008d2e:	498b      	ldr	r1, [pc, #556]	@ (8008f5c <_strtod_l+0x584>)
 8008d30:	a819      	add	r0, sp, #100	@ 0x64
 8008d32:	f001 f925 	bl	8009f80 <__match>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f43f aea2 	beq.w	8008a80 <_strtod_l+0xa8>
 8008d3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d3e:	4988      	ldr	r1, [pc, #544]	@ (8008f60 <_strtod_l+0x588>)
 8008d40:	3b01      	subs	r3, #1
 8008d42:	a819      	add	r0, sp, #100	@ 0x64
 8008d44:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d46:	f001 f91b 	bl	8009f80 <__match>
 8008d4a:	b910      	cbnz	r0, 8008d52 <_strtod_l+0x37a>
 8008d4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d4e:	3301      	adds	r3, #1
 8008d50:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008f70 <_strtod_l+0x598>
 8008d56:	f04f 0a00 	mov.w	sl, #0
 8008d5a:	e676      	b.n	8008a4a <_strtod_l+0x72>
 8008d5c:	4881      	ldr	r0, [pc, #516]	@ (8008f64 <_strtod_l+0x58c>)
 8008d5e:	f000 fe33 	bl	80099c8 <nan>
 8008d62:	ec5b ab10 	vmov	sl, fp, d0
 8008d66:	e670      	b.n	8008a4a <_strtod_l+0x72>
 8008d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008d6c:	eba8 0303 	sub.w	r3, r8, r3
 8008d70:	f1b9 0f00 	cmp.w	r9, #0
 8008d74:	bf08      	it	eq
 8008d76:	46a9      	moveq	r9, r5
 8008d78:	2d10      	cmp	r5, #16
 8008d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7c:	462c      	mov	r4, r5
 8008d7e:	bfa8      	it	ge
 8008d80:	2410      	movge	r4, #16
 8008d82:	f7f7 fbcf 	bl	8000524 <__aeabi_ui2d>
 8008d86:	2d09      	cmp	r5, #9
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	dc13      	bgt.n	8008db6 <_strtod_l+0x3de>
 8008d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f43f ae5a 	beq.w	8008a4a <_strtod_l+0x72>
 8008d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d98:	dd78      	ble.n	8008e8c <_strtod_l+0x4b4>
 8008d9a:	2b16      	cmp	r3, #22
 8008d9c:	dc5f      	bgt.n	8008e5e <_strtod_l+0x486>
 8008d9e:	4972      	ldr	r1, [pc, #456]	@ (8008f68 <_strtod_l+0x590>)
 8008da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008da8:	4652      	mov	r2, sl
 8008daa:	465b      	mov	r3, fp
 8008dac:	f7f7 fc34 	bl	8000618 <__aeabi_dmul>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	e649      	b.n	8008a4a <_strtod_l+0x72>
 8008db6:	4b6c      	ldr	r3, [pc, #432]	@ (8008f68 <_strtod_l+0x590>)
 8008db8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008dbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008dc0:	f7f7 fc2a 	bl	8000618 <__aeabi_dmul>
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	468b      	mov	fp, r1
 8008dca:	f7f7 fbab 	bl	8000524 <__aeabi_ui2d>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4650      	mov	r0, sl
 8008dd4:	4659      	mov	r1, fp
 8008dd6:	f7f7 fa69 	bl	80002ac <__adddf3>
 8008dda:	2d0f      	cmp	r5, #15
 8008ddc:	4682      	mov	sl, r0
 8008dde:	468b      	mov	fp, r1
 8008de0:	ddd5      	ble.n	8008d8e <_strtod_l+0x3b6>
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	1b2c      	subs	r4, r5, r4
 8008de6:	441c      	add	r4, r3
 8008de8:	2c00      	cmp	r4, #0
 8008dea:	f340 8093 	ble.w	8008f14 <_strtod_l+0x53c>
 8008dee:	f014 030f 	ands.w	r3, r4, #15
 8008df2:	d00a      	beq.n	8008e0a <_strtod_l+0x432>
 8008df4:	495c      	ldr	r1, [pc, #368]	@ (8008f68 <_strtod_l+0x590>)
 8008df6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e02:	f7f7 fc09 	bl	8000618 <__aeabi_dmul>
 8008e06:	4682      	mov	sl, r0
 8008e08:	468b      	mov	fp, r1
 8008e0a:	f034 040f 	bics.w	r4, r4, #15
 8008e0e:	d073      	beq.n	8008ef8 <_strtod_l+0x520>
 8008e10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e14:	dd49      	ble.n	8008eaa <_strtod_l+0x4d2>
 8008e16:	2400      	movs	r4, #0
 8008e18:	46a0      	mov	r8, r4
 8008e1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e1c:	46a1      	mov	r9, r4
 8008e1e:	9a05      	ldr	r2, [sp, #20]
 8008e20:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008f70 <_strtod_l+0x598>
 8008e24:	2322      	movs	r3, #34	@ 0x22
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	f04f 0a00 	mov.w	sl, #0
 8008e2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f43f ae0b 	beq.w	8008a4a <_strtod_l+0x72>
 8008e34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e36:	9805      	ldr	r0, [sp, #20]
 8008e38:	f001 f9a4 	bl	800a184 <_Bfree>
 8008e3c:	9805      	ldr	r0, [sp, #20]
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f001 f9a0 	bl	800a184 <_Bfree>
 8008e44:	9805      	ldr	r0, [sp, #20]
 8008e46:	4641      	mov	r1, r8
 8008e48:	f001 f99c 	bl	800a184 <_Bfree>
 8008e4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e4e:	9805      	ldr	r0, [sp, #20]
 8008e50:	f001 f998 	bl	800a184 <_Bfree>
 8008e54:	9805      	ldr	r0, [sp, #20]
 8008e56:	4621      	mov	r1, r4
 8008e58:	f001 f994 	bl	800a184 <_Bfree>
 8008e5c:	e5f5      	b.n	8008a4a <_strtod_l+0x72>
 8008e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e64:	4293      	cmp	r3, r2
 8008e66:	dbbc      	blt.n	8008de2 <_strtod_l+0x40a>
 8008e68:	4c3f      	ldr	r4, [pc, #252]	@ (8008f68 <_strtod_l+0x590>)
 8008e6a:	f1c5 050f 	rsb	r5, r5, #15
 8008e6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e72:	4652      	mov	r2, sl
 8008e74:	465b      	mov	r3, fp
 8008e76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e7a:	f7f7 fbcd 	bl	8000618 <__aeabi_dmul>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	1b5d      	subs	r5, r3, r5
 8008e82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008e86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008e8a:	e78f      	b.n	8008dac <_strtod_l+0x3d4>
 8008e8c:	3316      	adds	r3, #22
 8008e8e:	dba8      	blt.n	8008de2 <_strtod_l+0x40a>
 8008e90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e92:	eba3 0808 	sub.w	r8, r3, r8
 8008e96:	4b34      	ldr	r3, [pc, #208]	@ (8008f68 <_strtod_l+0x590>)
 8008e98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008e9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ea0:	4650      	mov	r0, sl
 8008ea2:	4659      	mov	r1, fp
 8008ea4:	f7f7 fce2 	bl	800086c <__aeabi_ddiv>
 8008ea8:	e782      	b.n	8008db0 <_strtod_l+0x3d8>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	4f2f      	ldr	r7, [pc, #188]	@ (8008f6c <_strtod_l+0x594>)
 8008eae:	1124      	asrs	r4, r4, #4
 8008eb0:	4650      	mov	r0, sl
 8008eb2:	4659      	mov	r1, fp
 8008eb4:	461e      	mov	r6, r3
 8008eb6:	2c01      	cmp	r4, #1
 8008eb8:	dc21      	bgt.n	8008efe <_strtod_l+0x526>
 8008eba:	b10b      	cbz	r3, 8008ec0 <_strtod_l+0x4e8>
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	468b      	mov	fp, r1
 8008ec0:	492a      	ldr	r1, [pc, #168]	@ (8008f6c <_strtod_l+0x594>)
 8008ec2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ec6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008eca:	4652      	mov	r2, sl
 8008ecc:	465b      	mov	r3, fp
 8008ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed2:	f7f7 fba1 	bl	8000618 <__aeabi_dmul>
 8008ed6:	4b26      	ldr	r3, [pc, #152]	@ (8008f70 <_strtod_l+0x598>)
 8008ed8:	460a      	mov	r2, r1
 8008eda:	400b      	ands	r3, r1
 8008edc:	4925      	ldr	r1, [pc, #148]	@ (8008f74 <_strtod_l+0x59c>)
 8008ede:	428b      	cmp	r3, r1
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	d898      	bhi.n	8008e16 <_strtod_l+0x43e>
 8008ee4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf86      	itte	hi
 8008eec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008f78 <_strtod_l+0x5a0>
 8008ef0:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ef4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ef8:	2300      	movs	r3, #0
 8008efa:	9308      	str	r3, [sp, #32]
 8008efc:	e076      	b.n	8008fec <_strtod_l+0x614>
 8008efe:	07e2      	lsls	r2, r4, #31
 8008f00:	d504      	bpl.n	8008f0c <_strtod_l+0x534>
 8008f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f06:	f7f7 fb87 	bl	8000618 <__aeabi_dmul>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	1064      	asrs	r4, r4, #1
 8008f10:	3708      	adds	r7, #8
 8008f12:	e7d0      	b.n	8008eb6 <_strtod_l+0x4de>
 8008f14:	d0f0      	beq.n	8008ef8 <_strtod_l+0x520>
 8008f16:	4264      	negs	r4, r4
 8008f18:	f014 020f 	ands.w	r2, r4, #15
 8008f1c:	d00a      	beq.n	8008f34 <_strtod_l+0x55c>
 8008f1e:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <_strtod_l+0x590>)
 8008f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f24:	4650      	mov	r0, sl
 8008f26:	4659      	mov	r1, fp
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	f7f7 fc9e 	bl	800086c <__aeabi_ddiv>
 8008f30:	4682      	mov	sl, r0
 8008f32:	468b      	mov	fp, r1
 8008f34:	1124      	asrs	r4, r4, #4
 8008f36:	d0df      	beq.n	8008ef8 <_strtod_l+0x520>
 8008f38:	2c1f      	cmp	r4, #31
 8008f3a:	dd1f      	ble.n	8008f7c <_strtod_l+0x5a4>
 8008f3c:	2400      	movs	r4, #0
 8008f3e:	46a0      	mov	r8, r4
 8008f40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f42:	46a1      	mov	r9, r4
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	2322      	movs	r3, #34	@ 0x22
 8008f48:	f04f 0a00 	mov.w	sl, #0
 8008f4c:	f04f 0b00 	mov.w	fp, #0
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	e76b      	b.n	8008e2c <_strtod_l+0x454>
 8008f54:	080335ff 	.word	0x080335ff
 8008f58:	0803375c 	.word	0x0803375c
 8008f5c:	080335f6 	.word	0x080335f6
 8008f60:	080335f9 	.word	0x080335f9
 8008f64:	08033759 	.word	0x08033759
 8008f68:	080338e8 	.word	0x080338e8
 8008f6c:	080338c0 	.word	0x080338c0
 8008f70:	7ff00000 	.word	0x7ff00000
 8008f74:	7ca00000 	.word	0x7ca00000
 8008f78:	7fefffff 	.word	0x7fefffff
 8008f7c:	f014 0310 	ands.w	r3, r4, #16
 8008f80:	bf18      	it	ne
 8008f82:	236a      	movne	r3, #106	@ 0x6a
 8008f84:	4ea9      	ldr	r6, [pc, #676]	@ (800922c <_strtod_l+0x854>)
 8008f86:	9308      	str	r3, [sp, #32]
 8008f88:	4650      	mov	r0, sl
 8008f8a:	4659      	mov	r1, fp
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	07e7      	lsls	r7, r4, #31
 8008f90:	d504      	bpl.n	8008f9c <_strtod_l+0x5c4>
 8008f92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f96:	f7f7 fb3f 	bl	8000618 <__aeabi_dmul>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	1064      	asrs	r4, r4, #1
 8008f9e:	f106 0608 	add.w	r6, r6, #8
 8008fa2:	d1f4      	bne.n	8008f8e <_strtod_l+0x5b6>
 8008fa4:	b10b      	cbz	r3, 8008faa <_strtod_l+0x5d2>
 8008fa6:	4682      	mov	sl, r0
 8008fa8:	468b      	mov	fp, r1
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	b1b3      	cbz	r3, 8008fdc <_strtod_l+0x604>
 8008fae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	4659      	mov	r1, fp
 8008fba:	dd0f      	ble.n	8008fdc <_strtod_l+0x604>
 8008fbc:	2b1f      	cmp	r3, #31
 8008fbe:	dd56      	ble.n	800906e <_strtod_l+0x696>
 8008fc0:	2b34      	cmp	r3, #52	@ 0x34
 8008fc2:	bfde      	ittt	le
 8008fc4:	f04f 33ff 	movle.w	r3, #4294967295
 8008fc8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008fcc:	4093      	lslle	r3, r2
 8008fce:	f04f 0a00 	mov.w	sl, #0
 8008fd2:	bfcc      	ite	gt
 8008fd4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008fd8:	ea03 0b01 	andle.w	fp, r3, r1
 8008fdc:	2200      	movs	r2, #0
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4650      	mov	r0, sl
 8008fe2:	4659      	mov	r1, fp
 8008fe4:	f7f7 fd80 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	d1a7      	bne.n	8008f3c <_strtod_l+0x564>
 8008fec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008ff2:	9805      	ldr	r0, [sp, #20]
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	464a      	mov	r2, r9
 8008ff8:	f001 f92c 	bl	800a254 <__s2b>
 8008ffc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f43f af09 	beq.w	8008e16 <_strtod_l+0x43e>
 8009004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009008:	2a00      	cmp	r2, #0
 800900a:	eba3 0308 	sub.w	r3, r3, r8
 800900e:	bfa8      	it	ge
 8009010:	2300      	movge	r3, #0
 8009012:	9312      	str	r3, [sp, #72]	@ 0x48
 8009014:	2400      	movs	r4, #0
 8009016:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800901a:	9316      	str	r3, [sp, #88]	@ 0x58
 800901c:	46a0      	mov	r8, r4
 800901e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009020:	9805      	ldr	r0, [sp, #20]
 8009022:	6859      	ldr	r1, [r3, #4]
 8009024:	f001 f86e 	bl	800a104 <_Balloc>
 8009028:	4681      	mov	r9, r0
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aef7 	beq.w	8008e1e <_strtod_l+0x446>
 8009030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	3202      	adds	r2, #2
 8009036:	f103 010c 	add.w	r1, r3, #12
 800903a:	0092      	lsls	r2, r2, #2
 800903c:	300c      	adds	r0, #12
 800903e:	f000 fcb4 	bl	80099aa <memcpy>
 8009042:	ec4b ab10 	vmov	d0, sl, fp
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	aa1c      	add	r2, sp, #112	@ 0x70
 800904a:	a91b      	add	r1, sp, #108	@ 0x6c
 800904c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009050:	f001 fc34 	bl	800a8bc <__d2b>
 8009054:	901a      	str	r0, [sp, #104]	@ 0x68
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f aee1 	beq.w	8008e1e <_strtod_l+0x446>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	2101      	movs	r1, #1
 8009060:	f001 f98e 	bl	800a380 <__i2b>
 8009064:	4680      	mov	r8, r0
 8009066:	b948      	cbnz	r0, 800907c <_strtod_l+0x6a4>
 8009068:	f04f 0800 	mov.w	r8, #0
 800906c:	e6d7      	b.n	8008e1e <_strtod_l+0x446>
 800906e:	f04f 32ff 	mov.w	r2, #4294967295
 8009072:	fa02 f303 	lsl.w	r3, r2, r3
 8009076:	ea03 0a0a 	and.w	sl, r3, sl
 800907a:	e7af      	b.n	8008fdc <_strtod_l+0x604>
 800907c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800907e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009080:	2d00      	cmp	r5, #0
 8009082:	bfab      	itete	ge
 8009084:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009086:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009088:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800908a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800908c:	bfac      	ite	ge
 800908e:	18ef      	addge	r7, r5, r3
 8009090:	1b5e      	sublt	r6, r3, r5
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	1aed      	subs	r5, r5, r3
 8009096:	4415      	add	r5, r2
 8009098:	4b65      	ldr	r3, [pc, #404]	@ (8009230 <_strtod_l+0x858>)
 800909a:	3d01      	subs	r5, #1
 800909c:	429d      	cmp	r5, r3
 800909e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090a2:	da50      	bge.n	8009146 <_strtod_l+0x76e>
 80090a4:	1b5b      	subs	r3, r3, r5
 80090a6:	2b1f      	cmp	r3, #31
 80090a8:	eba2 0203 	sub.w	r2, r2, r3
 80090ac:	f04f 0101 	mov.w	r1, #1
 80090b0:	dc3d      	bgt.n	800912e <_strtod_l+0x756>
 80090b2:	fa01 f303 	lsl.w	r3, r1, r3
 80090b6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090b8:	2300      	movs	r3, #0
 80090ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80090bc:	18bd      	adds	r5, r7, r2
 80090be:	9b08      	ldr	r3, [sp, #32]
 80090c0:	42af      	cmp	r7, r5
 80090c2:	4416      	add	r6, r2
 80090c4:	441e      	add	r6, r3
 80090c6:	463b      	mov	r3, r7
 80090c8:	bfa8      	it	ge
 80090ca:	462b      	movge	r3, r5
 80090cc:	42b3      	cmp	r3, r6
 80090ce:	bfa8      	it	ge
 80090d0:	4633      	movge	r3, r6
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	bfc2      	ittt	gt
 80090d6:	1aed      	subgt	r5, r5, r3
 80090d8:	1af6      	subgt	r6, r6, r3
 80090da:	1aff      	subgt	r7, r7, r3
 80090dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dd16      	ble.n	8009110 <_strtod_l+0x738>
 80090e2:	4641      	mov	r1, r8
 80090e4:	9805      	ldr	r0, [sp, #20]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f001 fa02 	bl	800a4f0 <__pow5mult>
 80090ec:	4680      	mov	r8, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d0ba      	beq.n	8009068 <_strtod_l+0x690>
 80090f2:	4601      	mov	r1, r0
 80090f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80090f6:	9805      	ldr	r0, [sp, #20]
 80090f8:	f001 f958 	bl	800a3ac <__multiply>
 80090fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f ae8d 	beq.w	8008e1e <_strtod_l+0x446>
 8009104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009106:	9805      	ldr	r0, [sp, #20]
 8009108:	f001 f83c 	bl	800a184 <_Bfree>
 800910c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800910e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009110:	2d00      	cmp	r5, #0
 8009112:	dc1d      	bgt.n	8009150 <_strtod_l+0x778>
 8009114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009116:	2b00      	cmp	r3, #0
 8009118:	dd23      	ble.n	8009162 <_strtod_l+0x78a>
 800911a:	4649      	mov	r1, r9
 800911c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	f001 f9e6 	bl	800a4f0 <__pow5mult>
 8009124:	4681      	mov	r9, r0
 8009126:	b9e0      	cbnz	r0, 8009162 <_strtod_l+0x78a>
 8009128:	f04f 0900 	mov.w	r9, #0
 800912c:	e677      	b.n	8008e1e <_strtod_l+0x446>
 800912e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009132:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009136:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800913a:	35e2      	adds	r5, #226	@ 0xe2
 800913c:	fa01 f305 	lsl.w	r3, r1, r5
 8009140:	9310      	str	r3, [sp, #64]	@ 0x40
 8009142:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009144:	e7ba      	b.n	80090bc <_strtod_l+0x6e4>
 8009146:	2300      	movs	r3, #0
 8009148:	9310      	str	r3, [sp, #64]	@ 0x40
 800914a:	2301      	movs	r3, #1
 800914c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800914e:	e7b5      	b.n	80090bc <_strtod_l+0x6e4>
 8009150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009152:	9805      	ldr	r0, [sp, #20]
 8009154:	462a      	mov	r2, r5
 8009156:	f001 fa25 	bl	800a5a4 <__lshift>
 800915a:	901a      	str	r0, [sp, #104]	@ 0x68
 800915c:	2800      	cmp	r0, #0
 800915e:	d1d9      	bne.n	8009114 <_strtod_l+0x73c>
 8009160:	e65d      	b.n	8008e1e <_strtod_l+0x446>
 8009162:	2e00      	cmp	r6, #0
 8009164:	dd07      	ble.n	8009176 <_strtod_l+0x79e>
 8009166:	4649      	mov	r1, r9
 8009168:	9805      	ldr	r0, [sp, #20]
 800916a:	4632      	mov	r2, r6
 800916c:	f001 fa1a 	bl	800a5a4 <__lshift>
 8009170:	4681      	mov	r9, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d0d8      	beq.n	8009128 <_strtod_l+0x750>
 8009176:	2f00      	cmp	r7, #0
 8009178:	dd08      	ble.n	800918c <_strtod_l+0x7b4>
 800917a:	4641      	mov	r1, r8
 800917c:	9805      	ldr	r0, [sp, #20]
 800917e:	463a      	mov	r2, r7
 8009180:	f001 fa10 	bl	800a5a4 <__lshift>
 8009184:	4680      	mov	r8, r0
 8009186:	2800      	cmp	r0, #0
 8009188:	f43f ae49 	beq.w	8008e1e <_strtod_l+0x446>
 800918c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800918e:	9805      	ldr	r0, [sp, #20]
 8009190:	464a      	mov	r2, r9
 8009192:	f001 fa8f 	bl	800a6b4 <__mdiff>
 8009196:	4604      	mov	r4, r0
 8009198:	2800      	cmp	r0, #0
 800919a:	f43f ae40 	beq.w	8008e1e <_strtod_l+0x446>
 800919e:	68c3      	ldr	r3, [r0, #12]
 80091a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091a2:	2300      	movs	r3, #0
 80091a4:	60c3      	str	r3, [r0, #12]
 80091a6:	4641      	mov	r1, r8
 80091a8:	f001 fa68 	bl	800a67c <__mcmp>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	da45      	bge.n	800923c <_strtod_l+0x864>
 80091b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091b2:	ea53 030a 	orrs.w	r3, r3, sl
 80091b6:	d16b      	bne.n	8009290 <_strtod_l+0x8b8>
 80091b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d167      	bne.n	8009290 <_strtod_l+0x8b8>
 80091c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091c4:	0d1b      	lsrs	r3, r3, #20
 80091c6:	051b      	lsls	r3, r3, #20
 80091c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091cc:	d960      	bls.n	8009290 <_strtod_l+0x8b8>
 80091ce:	6963      	ldr	r3, [r4, #20]
 80091d0:	b913      	cbnz	r3, 80091d8 <_strtod_l+0x800>
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	dd5b      	ble.n	8009290 <_strtod_l+0x8b8>
 80091d8:	4621      	mov	r1, r4
 80091da:	2201      	movs	r2, #1
 80091dc:	9805      	ldr	r0, [sp, #20]
 80091de:	f001 f9e1 	bl	800a5a4 <__lshift>
 80091e2:	4641      	mov	r1, r8
 80091e4:	4604      	mov	r4, r0
 80091e6:	f001 fa49 	bl	800a67c <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	dd50      	ble.n	8009290 <_strtod_l+0x8b8>
 80091ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091f2:	9a08      	ldr	r2, [sp, #32]
 80091f4:	0d1b      	lsrs	r3, r3, #20
 80091f6:	051b      	lsls	r3, r3, #20
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d06a      	beq.n	80092d2 <_strtod_l+0x8fa>
 80091fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009200:	d867      	bhi.n	80092d2 <_strtod_l+0x8fa>
 8009202:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009206:	f67f ae9d 	bls.w	8008f44 <_strtod_l+0x56c>
 800920a:	4b0a      	ldr	r3, [pc, #40]	@ (8009234 <_strtod_l+0x85c>)
 800920c:	4650      	mov	r0, sl
 800920e:	4659      	mov	r1, fp
 8009210:	2200      	movs	r2, #0
 8009212:	f7f7 fa01 	bl	8000618 <__aeabi_dmul>
 8009216:	4b08      	ldr	r3, [pc, #32]	@ (8009238 <_strtod_l+0x860>)
 8009218:	400b      	ands	r3, r1
 800921a:	4682      	mov	sl, r0
 800921c:	468b      	mov	fp, r1
 800921e:	2b00      	cmp	r3, #0
 8009220:	f47f ae08 	bne.w	8008e34 <_strtod_l+0x45c>
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	2322      	movs	r3, #34	@ 0x22
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	e603      	b.n	8008e34 <_strtod_l+0x45c>
 800922c:	08033788 	.word	0x08033788
 8009230:	fffffc02 	.word	0xfffffc02
 8009234:	39500000 	.word	0x39500000
 8009238:	7ff00000 	.word	0x7ff00000
 800923c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009240:	d165      	bne.n	800930e <_strtod_l+0x936>
 8009242:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009244:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009248:	b35a      	cbz	r2, 80092a2 <_strtod_l+0x8ca>
 800924a:	4a9f      	ldr	r2, [pc, #636]	@ (80094c8 <_strtod_l+0xaf0>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d12b      	bne.n	80092a8 <_strtod_l+0x8d0>
 8009250:	9b08      	ldr	r3, [sp, #32]
 8009252:	4651      	mov	r1, sl
 8009254:	b303      	cbz	r3, 8009298 <_strtod_l+0x8c0>
 8009256:	4b9d      	ldr	r3, [pc, #628]	@ (80094cc <_strtod_l+0xaf4>)
 8009258:	465a      	mov	r2, fp
 800925a:	4013      	ands	r3, r2
 800925c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009260:	f04f 32ff 	mov.w	r2, #4294967295
 8009264:	d81b      	bhi.n	800929e <_strtod_l+0x8c6>
 8009266:	0d1b      	lsrs	r3, r3, #20
 8009268:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800926c:	fa02 f303 	lsl.w	r3, r2, r3
 8009270:	4299      	cmp	r1, r3
 8009272:	d119      	bne.n	80092a8 <_strtod_l+0x8d0>
 8009274:	4b96      	ldr	r3, [pc, #600]	@ (80094d0 <_strtod_l+0xaf8>)
 8009276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009278:	429a      	cmp	r2, r3
 800927a:	d102      	bne.n	8009282 <_strtod_l+0x8aa>
 800927c:	3101      	adds	r1, #1
 800927e:	f43f adce 	beq.w	8008e1e <_strtod_l+0x446>
 8009282:	4b92      	ldr	r3, [pc, #584]	@ (80094cc <_strtod_l+0xaf4>)
 8009284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009286:	401a      	ands	r2, r3
 8009288:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800928c:	f04f 0a00 	mov.w	sl, #0
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1b9      	bne.n	800920a <_strtod_l+0x832>
 8009296:	e5cd      	b.n	8008e34 <_strtod_l+0x45c>
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e7e8      	b.n	8009270 <_strtod_l+0x898>
 800929e:	4613      	mov	r3, r2
 80092a0:	e7e6      	b.n	8009270 <_strtod_l+0x898>
 80092a2:	ea53 030a 	orrs.w	r3, r3, sl
 80092a6:	d0a2      	beq.n	80091ee <_strtod_l+0x816>
 80092a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092aa:	b1db      	cbz	r3, 80092e4 <_strtod_l+0x90c>
 80092ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ae:	4213      	tst	r3, r2
 80092b0:	d0ee      	beq.n	8009290 <_strtod_l+0x8b8>
 80092b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092b4:	9a08      	ldr	r2, [sp, #32]
 80092b6:	4650      	mov	r0, sl
 80092b8:	4659      	mov	r1, fp
 80092ba:	b1bb      	cbz	r3, 80092ec <_strtod_l+0x914>
 80092bc:	f7ff fb6e 	bl	800899c <sulp>
 80092c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092c4:	ec53 2b10 	vmov	r2, r3, d0
 80092c8:	f7f6 fff0 	bl	80002ac <__adddf3>
 80092cc:	4682      	mov	sl, r0
 80092ce:	468b      	mov	fp, r1
 80092d0:	e7de      	b.n	8009290 <_strtod_l+0x8b8>
 80092d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80092d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092de:	f04f 3aff 	mov.w	sl, #4294967295
 80092e2:	e7d5      	b.n	8009290 <_strtod_l+0x8b8>
 80092e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092e6:	ea13 0f0a 	tst.w	r3, sl
 80092ea:	e7e1      	b.n	80092b0 <_strtod_l+0x8d8>
 80092ec:	f7ff fb56 	bl	800899c <sulp>
 80092f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092f4:	ec53 2b10 	vmov	r2, r3, d0
 80092f8:	f7f6 ffd6 	bl	80002a8 <__aeabi_dsub>
 80092fc:	2200      	movs	r2, #0
 80092fe:	2300      	movs	r3, #0
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	f7f7 fbf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009308:	2800      	cmp	r0, #0
 800930a:	d0c1      	beq.n	8009290 <_strtod_l+0x8b8>
 800930c:	e61a      	b.n	8008f44 <_strtod_l+0x56c>
 800930e:	4641      	mov	r1, r8
 8009310:	4620      	mov	r0, r4
 8009312:	f001 fb2b 	bl	800a96c <__ratio>
 8009316:	ec57 6b10 	vmov	r6, r7, d0
 800931a:	2200      	movs	r2, #0
 800931c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f7 fbf4 	bl	8000b10 <__aeabi_dcmple>
 8009328:	2800      	cmp	r0, #0
 800932a:	d06f      	beq.n	800940c <_strtod_l+0xa34>
 800932c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932e:	2b00      	cmp	r3, #0
 8009330:	d17a      	bne.n	8009428 <_strtod_l+0xa50>
 8009332:	f1ba 0f00 	cmp.w	sl, #0
 8009336:	d158      	bne.n	80093ea <_strtod_l+0xa12>
 8009338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800933a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800933e:	2b00      	cmp	r3, #0
 8009340:	d15a      	bne.n	80093f8 <_strtod_l+0xa20>
 8009342:	4b64      	ldr	r3, [pc, #400]	@ (80094d4 <_strtod_l+0xafc>)
 8009344:	2200      	movs	r2, #0
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	f7f7 fbd7 	bl	8000afc <__aeabi_dcmplt>
 800934e:	2800      	cmp	r0, #0
 8009350:	d159      	bne.n	8009406 <_strtod_l+0xa2e>
 8009352:	4630      	mov	r0, r6
 8009354:	4639      	mov	r1, r7
 8009356:	4b60      	ldr	r3, [pc, #384]	@ (80094d8 <_strtod_l+0xb00>)
 8009358:	2200      	movs	r2, #0
 800935a:	f7f7 f95d 	bl	8000618 <__aeabi_dmul>
 800935e:	4606      	mov	r6, r0
 8009360:	460f      	mov	r7, r1
 8009362:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009366:	9606      	str	r6, [sp, #24]
 8009368:	9307      	str	r3, [sp, #28]
 800936a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800936e:	4d57      	ldr	r5, [pc, #348]	@ (80094cc <_strtod_l+0xaf4>)
 8009370:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009376:	401d      	ands	r5, r3
 8009378:	4b58      	ldr	r3, [pc, #352]	@ (80094dc <_strtod_l+0xb04>)
 800937a:	429d      	cmp	r5, r3
 800937c:	f040 80b2 	bne.w	80094e4 <_strtod_l+0xb0c>
 8009380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009382:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009386:	ec4b ab10 	vmov	d0, sl, fp
 800938a:	f001 fa27 	bl	800a7dc <__ulp>
 800938e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009392:	ec51 0b10 	vmov	r0, r1, d0
 8009396:	f7f7 f93f 	bl	8000618 <__aeabi_dmul>
 800939a:	4652      	mov	r2, sl
 800939c:	465b      	mov	r3, fp
 800939e:	f7f6 ff85 	bl	80002ac <__adddf3>
 80093a2:	460b      	mov	r3, r1
 80093a4:	4949      	ldr	r1, [pc, #292]	@ (80094cc <_strtod_l+0xaf4>)
 80093a6:	4a4e      	ldr	r2, [pc, #312]	@ (80094e0 <_strtod_l+0xb08>)
 80093a8:	4019      	ands	r1, r3
 80093aa:	4291      	cmp	r1, r2
 80093ac:	4682      	mov	sl, r0
 80093ae:	d942      	bls.n	8009436 <_strtod_l+0xa5e>
 80093b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093b2:	4b47      	ldr	r3, [pc, #284]	@ (80094d0 <_strtod_l+0xaf8>)
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d103      	bne.n	80093c0 <_strtod_l+0x9e8>
 80093b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093ba:	3301      	adds	r3, #1
 80093bc:	f43f ad2f 	beq.w	8008e1e <_strtod_l+0x446>
 80093c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80094d0 <_strtod_l+0xaf8>
 80093c4:	f04f 3aff 	mov.w	sl, #4294967295
 80093c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093ca:	9805      	ldr	r0, [sp, #20]
 80093cc:	f000 feda 	bl	800a184 <_Bfree>
 80093d0:	9805      	ldr	r0, [sp, #20]
 80093d2:	4649      	mov	r1, r9
 80093d4:	f000 fed6 	bl	800a184 <_Bfree>
 80093d8:	9805      	ldr	r0, [sp, #20]
 80093da:	4641      	mov	r1, r8
 80093dc:	f000 fed2 	bl	800a184 <_Bfree>
 80093e0:	9805      	ldr	r0, [sp, #20]
 80093e2:	4621      	mov	r1, r4
 80093e4:	f000 fece 	bl	800a184 <_Bfree>
 80093e8:	e619      	b.n	800901e <_strtod_l+0x646>
 80093ea:	f1ba 0f01 	cmp.w	sl, #1
 80093ee:	d103      	bne.n	80093f8 <_strtod_l+0xa20>
 80093f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f43f ada6 	beq.w	8008f44 <_strtod_l+0x56c>
 80093f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80094a8 <_strtod_l+0xad0>
 80093fc:	4f35      	ldr	r7, [pc, #212]	@ (80094d4 <_strtod_l+0xafc>)
 80093fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009402:	2600      	movs	r6, #0
 8009404:	e7b1      	b.n	800936a <_strtod_l+0x992>
 8009406:	4f34      	ldr	r7, [pc, #208]	@ (80094d8 <_strtod_l+0xb00>)
 8009408:	2600      	movs	r6, #0
 800940a:	e7aa      	b.n	8009362 <_strtod_l+0x98a>
 800940c:	4b32      	ldr	r3, [pc, #200]	@ (80094d8 <_strtod_l+0xb00>)
 800940e:	4630      	mov	r0, r6
 8009410:	4639      	mov	r1, r7
 8009412:	2200      	movs	r2, #0
 8009414:	f7f7 f900 	bl	8000618 <__aeabi_dmul>
 8009418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800941a:	4606      	mov	r6, r0
 800941c:	460f      	mov	r7, r1
 800941e:	2b00      	cmp	r3, #0
 8009420:	d09f      	beq.n	8009362 <_strtod_l+0x98a>
 8009422:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009426:	e7a0      	b.n	800936a <_strtod_l+0x992>
 8009428:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094b0 <_strtod_l+0xad8>
 800942c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009430:	ec57 6b17 	vmov	r6, r7, d7
 8009434:	e799      	b.n	800936a <_strtod_l+0x992>
 8009436:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800943a:	9b08      	ldr	r3, [sp, #32]
 800943c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1c1      	bne.n	80093c8 <_strtod_l+0x9f0>
 8009444:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009448:	0d1b      	lsrs	r3, r3, #20
 800944a:	051b      	lsls	r3, r3, #20
 800944c:	429d      	cmp	r5, r3
 800944e:	d1bb      	bne.n	80093c8 <_strtod_l+0x9f0>
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f7 fbda 	bl	8000c0c <__aeabi_d2lz>
 8009458:	f7f7 f8b0 	bl	80005bc <__aeabi_l2d>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4630      	mov	r0, r6
 8009462:	4639      	mov	r1, r7
 8009464:	f7f6 ff20 	bl	80002a8 <__aeabi_dsub>
 8009468:	460b      	mov	r3, r1
 800946a:	4602      	mov	r2, r0
 800946c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009470:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009476:	ea46 060a 	orr.w	r6, r6, sl
 800947a:	431e      	orrs	r6, r3
 800947c:	d06f      	beq.n	800955e <_strtod_l+0xb86>
 800947e:	a30e      	add	r3, pc, #56	@ (adr r3, 80094b8 <_strtod_l+0xae0>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f7 fb3a 	bl	8000afc <__aeabi_dcmplt>
 8009488:	2800      	cmp	r0, #0
 800948a:	f47f acd3 	bne.w	8008e34 <_strtod_l+0x45c>
 800948e:	a30c      	add	r3, pc, #48	@ (adr r3, 80094c0 <_strtod_l+0xae8>)
 8009490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009498:	f7f7 fb4e 	bl	8000b38 <__aeabi_dcmpgt>
 800949c:	2800      	cmp	r0, #0
 800949e:	d093      	beq.n	80093c8 <_strtod_l+0x9f0>
 80094a0:	e4c8      	b.n	8008e34 <_strtod_l+0x45c>
 80094a2:	bf00      	nop
 80094a4:	f3af 8000 	nop.w
 80094a8:	00000000 	.word	0x00000000
 80094ac:	bff00000 	.word	0xbff00000
 80094b0:	00000000 	.word	0x00000000
 80094b4:	3ff00000 	.word	0x3ff00000
 80094b8:	94a03595 	.word	0x94a03595
 80094bc:	3fdfffff 	.word	0x3fdfffff
 80094c0:	35afe535 	.word	0x35afe535
 80094c4:	3fe00000 	.word	0x3fe00000
 80094c8:	000fffff 	.word	0x000fffff
 80094cc:	7ff00000 	.word	0x7ff00000
 80094d0:	7fefffff 	.word	0x7fefffff
 80094d4:	3ff00000 	.word	0x3ff00000
 80094d8:	3fe00000 	.word	0x3fe00000
 80094dc:	7fe00000 	.word	0x7fe00000
 80094e0:	7c9fffff 	.word	0x7c9fffff
 80094e4:	9b08      	ldr	r3, [sp, #32]
 80094e6:	b323      	cbz	r3, 8009532 <_strtod_l+0xb5a>
 80094e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80094ec:	d821      	bhi.n	8009532 <_strtod_l+0xb5a>
 80094ee:	a328      	add	r3, pc, #160	@ (adr r3, 8009590 <_strtod_l+0xbb8>)
 80094f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f4:	4630      	mov	r0, r6
 80094f6:	4639      	mov	r1, r7
 80094f8:	f7f7 fb0a 	bl	8000b10 <__aeabi_dcmple>
 80094fc:	b1a0      	cbz	r0, 8009528 <_strtod_l+0xb50>
 80094fe:	4639      	mov	r1, r7
 8009500:	4630      	mov	r0, r6
 8009502:	f7f7 fb4b 	bl	8000b9c <__aeabi_d2uiz>
 8009506:	2801      	cmp	r0, #1
 8009508:	bf38      	it	cc
 800950a:	2001      	movcc	r0, #1
 800950c:	f7f7 f80a 	bl	8000524 <__aeabi_ui2d>
 8009510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	b9fb      	cbnz	r3, 8009558 <_strtod_l+0xb80>
 8009518:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800951c:	9014      	str	r0, [sp, #80]	@ 0x50
 800951e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009520:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009524:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009528:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800952a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800952e:	1b5b      	subs	r3, r3, r5
 8009530:	9311      	str	r3, [sp, #68]	@ 0x44
 8009532:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009536:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800953a:	f001 f94f 	bl	800a7dc <__ulp>
 800953e:	4650      	mov	r0, sl
 8009540:	ec53 2b10 	vmov	r2, r3, d0
 8009544:	4659      	mov	r1, fp
 8009546:	f7f7 f867 	bl	8000618 <__aeabi_dmul>
 800954a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800954e:	f7f6 fead 	bl	80002ac <__adddf3>
 8009552:	4682      	mov	sl, r0
 8009554:	468b      	mov	fp, r1
 8009556:	e770      	b.n	800943a <_strtod_l+0xa62>
 8009558:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800955c:	e7e0      	b.n	8009520 <_strtod_l+0xb48>
 800955e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009598 <_strtod_l+0xbc0>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f7 faca 	bl	8000afc <__aeabi_dcmplt>
 8009568:	e798      	b.n	800949c <_strtod_l+0xac4>
 800956a:	2300      	movs	r3, #0
 800956c:	930e      	str	r3, [sp, #56]	@ 0x38
 800956e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009570:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	f7ff ba6d 	b.w	8008a52 <_strtod_l+0x7a>
 8009578:	2a65      	cmp	r2, #101	@ 0x65
 800957a:	f43f ab68 	beq.w	8008c4e <_strtod_l+0x276>
 800957e:	2a45      	cmp	r2, #69	@ 0x45
 8009580:	f43f ab65 	beq.w	8008c4e <_strtod_l+0x276>
 8009584:	2301      	movs	r3, #1
 8009586:	f7ff bba0 	b.w	8008cca <_strtod_l+0x2f2>
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w
 8009590:	ffc00000 	.word	0xffc00000
 8009594:	41dfffff 	.word	0x41dfffff
 8009598:	94a03595 	.word	0x94a03595
 800959c:	3fcfffff 	.word	0x3fcfffff

080095a0 <strtod>:
 80095a0:	460a      	mov	r2, r1
 80095a2:	4601      	mov	r1, r0
 80095a4:	4802      	ldr	r0, [pc, #8]	@ (80095b0 <strtod+0x10>)
 80095a6:	4b03      	ldr	r3, [pc, #12]	@ (80095b4 <strtod+0x14>)
 80095a8:	6800      	ldr	r0, [r0, #0]
 80095aa:	f7ff ba15 	b.w	80089d8 <_strtod_l>
 80095ae:	bf00      	nop
 80095b0:	20000284 	.word	0x20000284
 80095b4:	20000118 	.word	0x20000118

080095b8 <std>:
 80095b8:	2300      	movs	r3, #0
 80095ba:	b510      	push	{r4, lr}
 80095bc:	4604      	mov	r4, r0
 80095be:	e9c0 3300 	strd	r3, r3, [r0]
 80095c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c6:	6083      	str	r3, [r0, #8]
 80095c8:	8181      	strh	r1, [r0, #12]
 80095ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80095cc:	81c2      	strh	r2, [r0, #14]
 80095ce:	6183      	str	r3, [r0, #24]
 80095d0:	4619      	mov	r1, r3
 80095d2:	2208      	movs	r2, #8
 80095d4:	305c      	adds	r0, #92	@ 0x5c
 80095d6:	f000 f915 	bl	8009804 <memset>
 80095da:	4b0d      	ldr	r3, [pc, #52]	@ (8009610 <std+0x58>)
 80095dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80095de:	4b0d      	ldr	r3, [pc, #52]	@ (8009614 <std+0x5c>)
 80095e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009618 <std+0x60>)
 80095e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095e6:	4b0d      	ldr	r3, [pc, #52]	@ (800961c <std+0x64>)
 80095e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80095ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <std+0x68>)
 80095ec:	6224      	str	r4, [r4, #32]
 80095ee:	429c      	cmp	r4, r3
 80095f0:	d006      	beq.n	8009600 <std+0x48>
 80095f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095f6:	4294      	cmp	r4, r2
 80095f8:	d002      	beq.n	8009600 <std+0x48>
 80095fa:	33d0      	adds	r3, #208	@ 0xd0
 80095fc:	429c      	cmp	r4, r3
 80095fe:	d105      	bne.n	800960c <std+0x54>
 8009600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009608:	f000 b9c4 	b.w	8009994 <__retarget_lock_init_recursive>
 800960c:	bd10      	pop	{r4, pc}
 800960e:	bf00      	nop
 8009610:	0800973d 	.word	0x0800973d
 8009614:	0800975f 	.word	0x0800975f
 8009618:	08009797 	.word	0x08009797
 800961c:	080097bb 	.word	0x080097bb
 8009620:	20000bfc 	.word	0x20000bfc

08009624 <stdio_exit_handler>:
 8009624:	4a02      	ldr	r2, [pc, #8]	@ (8009630 <stdio_exit_handler+0xc>)
 8009626:	4903      	ldr	r1, [pc, #12]	@ (8009634 <stdio_exit_handler+0x10>)
 8009628:	4803      	ldr	r0, [pc, #12]	@ (8009638 <stdio_exit_handler+0x14>)
 800962a:	f000 b869 	b.w	8009700 <_fwalk_sglue>
 800962e:	bf00      	nop
 8009630:	2000010c 	.word	0x2000010c
 8009634:	0800b151 	.word	0x0800b151
 8009638:	20000288 	.word	0x20000288

0800963c <cleanup_stdio>:
 800963c:	6841      	ldr	r1, [r0, #4]
 800963e:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <cleanup_stdio+0x34>)
 8009640:	4299      	cmp	r1, r3
 8009642:	b510      	push	{r4, lr}
 8009644:	4604      	mov	r4, r0
 8009646:	d001      	beq.n	800964c <cleanup_stdio+0x10>
 8009648:	f001 fd82 	bl	800b150 <_fflush_r>
 800964c:	68a1      	ldr	r1, [r4, #8]
 800964e:	4b09      	ldr	r3, [pc, #36]	@ (8009674 <cleanup_stdio+0x38>)
 8009650:	4299      	cmp	r1, r3
 8009652:	d002      	beq.n	800965a <cleanup_stdio+0x1e>
 8009654:	4620      	mov	r0, r4
 8009656:	f001 fd7b 	bl	800b150 <_fflush_r>
 800965a:	68e1      	ldr	r1, [r4, #12]
 800965c:	4b06      	ldr	r3, [pc, #24]	@ (8009678 <cleanup_stdio+0x3c>)
 800965e:	4299      	cmp	r1, r3
 8009660:	d004      	beq.n	800966c <cleanup_stdio+0x30>
 8009662:	4620      	mov	r0, r4
 8009664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009668:	f001 bd72 	b.w	800b150 <_fflush_r>
 800966c:	bd10      	pop	{r4, pc}
 800966e:	bf00      	nop
 8009670:	20000bfc 	.word	0x20000bfc
 8009674:	20000c64 	.word	0x20000c64
 8009678:	20000ccc 	.word	0x20000ccc

0800967c <global_stdio_init.part.0>:
 800967c:	b510      	push	{r4, lr}
 800967e:	4b0b      	ldr	r3, [pc, #44]	@ (80096ac <global_stdio_init.part.0+0x30>)
 8009680:	4c0b      	ldr	r4, [pc, #44]	@ (80096b0 <global_stdio_init.part.0+0x34>)
 8009682:	4a0c      	ldr	r2, [pc, #48]	@ (80096b4 <global_stdio_init.part.0+0x38>)
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	4620      	mov	r0, r4
 8009688:	2200      	movs	r2, #0
 800968a:	2104      	movs	r1, #4
 800968c:	f7ff ff94 	bl	80095b8 <std>
 8009690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009694:	2201      	movs	r2, #1
 8009696:	2109      	movs	r1, #9
 8009698:	f7ff ff8e 	bl	80095b8 <std>
 800969c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096a0:	2202      	movs	r2, #2
 80096a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a6:	2112      	movs	r1, #18
 80096a8:	f7ff bf86 	b.w	80095b8 <std>
 80096ac:	20000d34 	.word	0x20000d34
 80096b0:	20000bfc 	.word	0x20000bfc
 80096b4:	08009625 	.word	0x08009625

080096b8 <__sfp_lock_acquire>:
 80096b8:	4801      	ldr	r0, [pc, #4]	@ (80096c0 <__sfp_lock_acquire+0x8>)
 80096ba:	f000 b96c 	b.w	8009996 <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	20000d3d 	.word	0x20000d3d

080096c4 <__sfp_lock_release>:
 80096c4:	4801      	ldr	r0, [pc, #4]	@ (80096cc <__sfp_lock_release+0x8>)
 80096c6:	f000 b967 	b.w	8009998 <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	20000d3d 	.word	0x20000d3d

080096d0 <__sinit>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	f7ff fff0 	bl	80096b8 <__sfp_lock_acquire>
 80096d8:	6a23      	ldr	r3, [r4, #32]
 80096da:	b11b      	cbz	r3, 80096e4 <__sinit+0x14>
 80096dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e0:	f7ff bff0 	b.w	80096c4 <__sfp_lock_release>
 80096e4:	4b04      	ldr	r3, [pc, #16]	@ (80096f8 <__sinit+0x28>)
 80096e6:	6223      	str	r3, [r4, #32]
 80096e8:	4b04      	ldr	r3, [pc, #16]	@ (80096fc <__sinit+0x2c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1f5      	bne.n	80096dc <__sinit+0xc>
 80096f0:	f7ff ffc4 	bl	800967c <global_stdio_init.part.0>
 80096f4:	e7f2      	b.n	80096dc <__sinit+0xc>
 80096f6:	bf00      	nop
 80096f8:	0800963d 	.word	0x0800963d
 80096fc:	20000d34 	.word	0x20000d34

08009700 <_fwalk_sglue>:
 8009700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009704:	4607      	mov	r7, r0
 8009706:	4688      	mov	r8, r1
 8009708:	4614      	mov	r4, r2
 800970a:	2600      	movs	r6, #0
 800970c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009710:	f1b9 0901 	subs.w	r9, r9, #1
 8009714:	d505      	bpl.n	8009722 <_fwalk_sglue+0x22>
 8009716:	6824      	ldr	r4, [r4, #0]
 8009718:	2c00      	cmp	r4, #0
 800971a:	d1f7      	bne.n	800970c <_fwalk_sglue+0xc>
 800971c:	4630      	mov	r0, r6
 800971e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009722:	89ab      	ldrh	r3, [r5, #12]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d907      	bls.n	8009738 <_fwalk_sglue+0x38>
 8009728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800972c:	3301      	adds	r3, #1
 800972e:	d003      	beq.n	8009738 <_fwalk_sglue+0x38>
 8009730:	4629      	mov	r1, r5
 8009732:	4638      	mov	r0, r7
 8009734:	47c0      	blx	r8
 8009736:	4306      	orrs	r6, r0
 8009738:	3568      	adds	r5, #104	@ 0x68
 800973a:	e7e9      	b.n	8009710 <_fwalk_sglue+0x10>

0800973c <__sread>:
 800973c:	b510      	push	{r4, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	f000 f8c8 	bl	80098d8 <_read_r>
 8009748:	2800      	cmp	r0, #0
 800974a:	bfab      	itete	ge
 800974c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800974e:	89a3      	ldrhlt	r3, [r4, #12]
 8009750:	181b      	addge	r3, r3, r0
 8009752:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009756:	bfac      	ite	ge
 8009758:	6563      	strge	r3, [r4, #84]	@ 0x54
 800975a:	81a3      	strhlt	r3, [r4, #12]
 800975c:	bd10      	pop	{r4, pc}

0800975e <__swrite>:
 800975e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009762:	461f      	mov	r7, r3
 8009764:	898b      	ldrh	r3, [r1, #12]
 8009766:	05db      	lsls	r3, r3, #23
 8009768:	4605      	mov	r5, r0
 800976a:	460c      	mov	r4, r1
 800976c:	4616      	mov	r6, r2
 800976e:	d505      	bpl.n	800977c <__swrite+0x1e>
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	2302      	movs	r3, #2
 8009776:	2200      	movs	r2, #0
 8009778:	f000 f89c 	bl	80098b4 <_lseek_r>
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009782:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	4632      	mov	r2, r6
 800978a:	463b      	mov	r3, r7
 800978c:	4628      	mov	r0, r5
 800978e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	f000 b8c3 	b.w	800991c <_write_r>

08009796 <__sseek>:
 8009796:	b510      	push	{r4, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979e:	f000 f889 	bl	80098b4 <_lseek_r>
 80097a2:	1c43      	adds	r3, r0, #1
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	bf15      	itete	ne
 80097a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097b2:	81a3      	strheq	r3, [r4, #12]
 80097b4:	bf18      	it	ne
 80097b6:	81a3      	strhne	r3, [r4, #12]
 80097b8:	bd10      	pop	{r4, pc}

080097ba <__sclose>:
 80097ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097be:	f000 b869 	b.w	8009894 <_close_r>
	...

080097c4 <_vsiprintf_r>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	b09a      	sub	sp, #104	@ 0x68
 80097c8:	2400      	movs	r4, #0
 80097ca:	9100      	str	r1, [sp, #0]
 80097cc:	9104      	str	r1, [sp, #16]
 80097ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80097d2:	9105      	str	r1, [sp, #20]
 80097d4:	9102      	str	r1, [sp, #8]
 80097d6:	4905      	ldr	r1, [pc, #20]	@ (80097ec <_vsiprintf_r+0x28>)
 80097d8:	9103      	str	r1, [sp, #12]
 80097da:	4669      	mov	r1, sp
 80097dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80097de:	f001 f9ab 	bl	800ab38 <_svfiprintf_r>
 80097e2:	9b00      	ldr	r3, [sp, #0]
 80097e4:	701c      	strb	r4, [r3, #0]
 80097e6:	b01a      	add	sp, #104	@ 0x68
 80097e8:	bd10      	pop	{r4, pc}
 80097ea:	bf00      	nop
 80097ec:	ffff0208 	.word	0xffff0208

080097f0 <vsiprintf>:
 80097f0:	4613      	mov	r3, r2
 80097f2:	460a      	mov	r2, r1
 80097f4:	4601      	mov	r1, r0
 80097f6:	4802      	ldr	r0, [pc, #8]	@ (8009800 <vsiprintf+0x10>)
 80097f8:	6800      	ldr	r0, [r0, #0]
 80097fa:	f7ff bfe3 	b.w	80097c4 <_vsiprintf_r>
 80097fe:	bf00      	nop
 8009800:	20000284 	.word	0x20000284

08009804 <memset>:
 8009804:	4402      	add	r2, r0
 8009806:	4603      	mov	r3, r0
 8009808:	4293      	cmp	r3, r2
 800980a:	d100      	bne.n	800980e <memset+0xa>
 800980c:	4770      	bx	lr
 800980e:	f803 1b01 	strb.w	r1, [r3], #1
 8009812:	e7f9      	b.n	8009808 <memset+0x4>

08009814 <strdup>:
 8009814:	4b02      	ldr	r3, [pc, #8]	@ (8009820 <strdup+0xc>)
 8009816:	4601      	mov	r1, r0
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	f000 b803 	b.w	8009824 <_strdup_r>
 800981e:	bf00      	nop
 8009820:	20000284 	.word	0x20000284

08009824 <_strdup_r>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	460d      	mov	r5, r1
 800982c:	f7f6 fcda 	bl	80001e4 <strlen>
 8009830:	1c46      	adds	r6, r0, #1
 8009832:	4631      	mov	r1, r6
 8009834:	4620      	mov	r0, r4
 8009836:	f7fe ffef 	bl	8008818 <_malloc_r>
 800983a:	4604      	mov	r4, r0
 800983c:	b118      	cbz	r0, 8009846 <_strdup_r+0x22>
 800983e:	4632      	mov	r2, r6
 8009840:	4629      	mov	r1, r5
 8009842:	f000 f8b2 	bl	80099aa <memcpy>
 8009846:	4620      	mov	r0, r4
 8009848:	bd70      	pop	{r4, r5, r6, pc}

0800984a <strncmp>:
 800984a:	b510      	push	{r4, lr}
 800984c:	b16a      	cbz	r2, 800986a <strncmp+0x20>
 800984e:	3901      	subs	r1, #1
 8009850:	1884      	adds	r4, r0, r2
 8009852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009856:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800985a:	429a      	cmp	r2, r3
 800985c:	d103      	bne.n	8009866 <strncmp+0x1c>
 800985e:	42a0      	cmp	r0, r4
 8009860:	d001      	beq.n	8009866 <strncmp+0x1c>
 8009862:	2a00      	cmp	r2, #0
 8009864:	d1f5      	bne.n	8009852 <strncmp+0x8>
 8009866:	1ad0      	subs	r0, r2, r3
 8009868:	bd10      	pop	{r4, pc}
 800986a:	4610      	mov	r0, r2
 800986c:	e7fc      	b.n	8009868 <strncmp+0x1e>

0800986e <strncpy>:
 800986e:	b510      	push	{r4, lr}
 8009870:	3901      	subs	r1, #1
 8009872:	4603      	mov	r3, r0
 8009874:	b132      	cbz	r2, 8009884 <strncpy+0x16>
 8009876:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800987a:	f803 4b01 	strb.w	r4, [r3], #1
 800987e:	3a01      	subs	r2, #1
 8009880:	2c00      	cmp	r4, #0
 8009882:	d1f7      	bne.n	8009874 <strncpy+0x6>
 8009884:	441a      	add	r2, r3
 8009886:	2100      	movs	r1, #0
 8009888:	4293      	cmp	r3, r2
 800988a:	d100      	bne.n	800988e <strncpy+0x20>
 800988c:	bd10      	pop	{r4, pc}
 800988e:	f803 1b01 	strb.w	r1, [r3], #1
 8009892:	e7f9      	b.n	8009888 <strncpy+0x1a>

08009894 <_close_r>:
 8009894:	b538      	push	{r3, r4, r5, lr}
 8009896:	4d06      	ldr	r5, [pc, #24]	@ (80098b0 <_close_r+0x1c>)
 8009898:	2300      	movs	r3, #0
 800989a:	4604      	mov	r4, r0
 800989c:	4608      	mov	r0, r1
 800989e:	602b      	str	r3, [r5, #0]
 80098a0:	f7fc f862 	bl	8005968 <_close>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_close_r+0x1a>
 80098a8:	682b      	ldr	r3, [r5, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_close_r+0x1a>
 80098ac:	6023      	str	r3, [r4, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	20000d38 	.word	0x20000d38

080098b4 <_lseek_r>:
 80098b4:	b538      	push	{r3, r4, r5, lr}
 80098b6:	4d07      	ldr	r5, [pc, #28]	@ (80098d4 <_lseek_r+0x20>)
 80098b8:	4604      	mov	r4, r0
 80098ba:	4608      	mov	r0, r1
 80098bc:	4611      	mov	r1, r2
 80098be:	2200      	movs	r2, #0
 80098c0:	602a      	str	r2, [r5, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	f7fc f877 	bl	80059b6 <_lseek>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_lseek_r+0x1e>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_lseek_r+0x1e>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000d38 	.word	0x20000d38

080098d8 <_read_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d07      	ldr	r5, [pc, #28]	@ (80098f8 <_read_r+0x20>)
 80098dc:	4604      	mov	r4, r0
 80098de:	4608      	mov	r0, r1
 80098e0:	4611      	mov	r1, r2
 80098e2:	2200      	movs	r2, #0
 80098e4:	602a      	str	r2, [r5, #0]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f7fc f805 	bl	80058f6 <_read>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_read_r+0x1e>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_read_r+0x1e>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	20000d38 	.word	0x20000d38

080098fc <_sbrk_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d06      	ldr	r5, [pc, #24]	@ (8009918 <_sbrk_r+0x1c>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	602b      	str	r3, [r5, #0]
 8009908:	f7fc f862 	bl	80059d0 <_sbrk>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d102      	bne.n	8009916 <_sbrk_r+0x1a>
 8009910:	682b      	ldr	r3, [r5, #0]
 8009912:	b103      	cbz	r3, 8009916 <_sbrk_r+0x1a>
 8009914:	6023      	str	r3, [r4, #0]
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	20000d38 	.word	0x20000d38

0800991c <_write_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	@ (800993c <_write_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7fc f800 	bl	8005930 <_write>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_write_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_write_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20000d38 	.word	0x20000d38

08009940 <__errno>:
 8009940:	4b01      	ldr	r3, [pc, #4]	@ (8009948 <__errno+0x8>)
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	20000284 	.word	0x20000284

0800994c <__libc_init_array>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4d0d      	ldr	r5, [pc, #52]	@ (8009984 <__libc_init_array+0x38>)
 8009950:	4c0d      	ldr	r4, [pc, #52]	@ (8009988 <__libc_init_array+0x3c>)
 8009952:	1b64      	subs	r4, r4, r5
 8009954:	10a4      	asrs	r4, r4, #2
 8009956:	2600      	movs	r6, #0
 8009958:	42a6      	cmp	r6, r4
 800995a:	d109      	bne.n	8009970 <__libc_init_array+0x24>
 800995c:	4d0b      	ldr	r5, [pc, #44]	@ (800998c <__libc_init_array+0x40>)
 800995e:	4c0c      	ldr	r4, [pc, #48]	@ (8009990 <__libc_init_array+0x44>)
 8009960:	f001 ff20 	bl	800b7a4 <_init>
 8009964:	1b64      	subs	r4, r4, r5
 8009966:	10a4      	asrs	r4, r4, #2
 8009968:	2600      	movs	r6, #0
 800996a:	42a6      	cmp	r6, r4
 800996c:	d105      	bne.n	800997a <__libc_init_array+0x2e>
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	f855 3b04 	ldr.w	r3, [r5], #4
 8009974:	4798      	blx	r3
 8009976:	3601      	adds	r6, #1
 8009978:	e7ee      	b.n	8009958 <__libc_init_array+0xc>
 800997a:	f855 3b04 	ldr.w	r3, [r5], #4
 800997e:	4798      	blx	r3
 8009980:	3601      	adds	r6, #1
 8009982:	e7f2      	b.n	800996a <__libc_init_array+0x1e>
 8009984:	080339b8 	.word	0x080339b8
 8009988:	080339b8 	.word	0x080339b8
 800998c:	080339b8 	.word	0x080339b8
 8009990:	080339bc 	.word	0x080339bc

08009994 <__retarget_lock_init_recursive>:
 8009994:	4770      	bx	lr

08009996 <__retarget_lock_acquire_recursive>:
 8009996:	4770      	bx	lr

08009998 <__retarget_lock_release_recursive>:
 8009998:	4770      	bx	lr

0800999a <strcpy>:
 800999a:	4603      	mov	r3, r0
 800999c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099a0:	f803 2b01 	strb.w	r2, [r3], #1
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	d1f9      	bne.n	800999c <strcpy+0x2>
 80099a8:	4770      	bx	lr

080099aa <memcpy>:
 80099aa:	440a      	add	r2, r1
 80099ac:	4291      	cmp	r1, r2
 80099ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80099b2:	d100      	bne.n	80099b6 <memcpy+0xc>
 80099b4:	4770      	bx	lr
 80099b6:	b510      	push	{r4, lr}
 80099b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099c0:	4291      	cmp	r1, r2
 80099c2:	d1f9      	bne.n	80099b8 <memcpy+0xe>
 80099c4:	bd10      	pop	{r4, pc}
	...

080099c8 <nan>:
 80099c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80099d0 <nan+0x8>
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	00000000 	.word	0x00000000
 80099d4:	7ff80000 	.word	0x7ff80000

080099d8 <_free_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4605      	mov	r5, r0
 80099dc:	2900      	cmp	r1, #0
 80099de:	d041      	beq.n	8009a64 <_free_r+0x8c>
 80099e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e4:	1f0c      	subs	r4, r1, #4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfb8      	it	lt
 80099ea:	18e4      	addlt	r4, r4, r3
 80099ec:	f7fe ff94 	bl	8008918 <__malloc_lock>
 80099f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a68 <_free_r+0x90>)
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	b933      	cbnz	r3, 8009a04 <_free_r+0x2c>
 80099f6:	6063      	str	r3, [r4, #4]
 80099f8:	6014      	str	r4, [r2, #0]
 80099fa:	4628      	mov	r0, r5
 80099fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a00:	f7fe bf90 	b.w	8008924 <__malloc_unlock>
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d908      	bls.n	8009a1a <_free_r+0x42>
 8009a08:	6820      	ldr	r0, [r4, #0]
 8009a0a:	1821      	adds	r1, r4, r0
 8009a0c:	428b      	cmp	r3, r1
 8009a0e:	bf01      	itttt	eq
 8009a10:	6819      	ldreq	r1, [r3, #0]
 8009a12:	685b      	ldreq	r3, [r3, #4]
 8009a14:	1809      	addeq	r1, r1, r0
 8009a16:	6021      	streq	r1, [r4, #0]
 8009a18:	e7ed      	b.n	80099f6 <_free_r+0x1e>
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	b10b      	cbz	r3, 8009a24 <_free_r+0x4c>
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	d9fa      	bls.n	8009a1a <_free_r+0x42>
 8009a24:	6811      	ldr	r1, [r2, #0]
 8009a26:	1850      	adds	r0, r2, r1
 8009a28:	42a0      	cmp	r0, r4
 8009a2a:	d10b      	bne.n	8009a44 <_free_r+0x6c>
 8009a2c:	6820      	ldr	r0, [r4, #0]
 8009a2e:	4401      	add	r1, r0
 8009a30:	1850      	adds	r0, r2, r1
 8009a32:	4283      	cmp	r3, r0
 8009a34:	6011      	str	r1, [r2, #0]
 8009a36:	d1e0      	bne.n	80099fa <_free_r+0x22>
 8009a38:	6818      	ldr	r0, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	6053      	str	r3, [r2, #4]
 8009a3e:	4408      	add	r0, r1
 8009a40:	6010      	str	r0, [r2, #0]
 8009a42:	e7da      	b.n	80099fa <_free_r+0x22>
 8009a44:	d902      	bls.n	8009a4c <_free_r+0x74>
 8009a46:	230c      	movs	r3, #12
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	e7d6      	b.n	80099fa <_free_r+0x22>
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	1821      	adds	r1, r4, r0
 8009a50:	428b      	cmp	r3, r1
 8009a52:	bf04      	itt	eq
 8009a54:	6819      	ldreq	r1, [r3, #0]
 8009a56:	685b      	ldreq	r3, [r3, #4]
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	bf04      	itt	eq
 8009a5c:	1809      	addeq	r1, r1, r0
 8009a5e:	6021      	streq	r1, [r4, #0]
 8009a60:	6054      	str	r4, [r2, #4]
 8009a62:	e7ca      	b.n	80099fa <_free_r+0x22>
 8009a64:	bd38      	pop	{r3, r4, r5, pc}
 8009a66:	bf00      	nop
 8009a68:	20000bf8 	.word	0x20000bf8

08009a6c <rshift>:
 8009a6c:	6903      	ldr	r3, [r0, #16]
 8009a6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a76:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a7a:	f100 0414 	add.w	r4, r0, #20
 8009a7e:	dd45      	ble.n	8009b0c <rshift+0xa0>
 8009a80:	f011 011f 	ands.w	r1, r1, #31
 8009a84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a8c:	d10c      	bne.n	8009aa8 <rshift+0x3c>
 8009a8e:	f100 0710 	add.w	r7, r0, #16
 8009a92:	4629      	mov	r1, r5
 8009a94:	42b1      	cmp	r1, r6
 8009a96:	d334      	bcc.n	8009b02 <rshift+0x96>
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	1eea      	subs	r2, r5, #3
 8009a9e:	4296      	cmp	r6, r2
 8009aa0:	bf38      	it	cc
 8009aa2:	2300      	movcc	r3, #0
 8009aa4:	4423      	add	r3, r4
 8009aa6:	e015      	b.n	8009ad4 <rshift+0x68>
 8009aa8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009aac:	f1c1 0820 	rsb	r8, r1, #32
 8009ab0:	40cf      	lsrs	r7, r1
 8009ab2:	f105 0e04 	add.w	lr, r5, #4
 8009ab6:	46a1      	mov	r9, r4
 8009ab8:	4576      	cmp	r6, lr
 8009aba:	46f4      	mov	ip, lr
 8009abc:	d815      	bhi.n	8009aea <rshift+0x7e>
 8009abe:	1a9a      	subs	r2, r3, r2
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	3a04      	subs	r2, #4
 8009ac4:	3501      	adds	r5, #1
 8009ac6:	42ae      	cmp	r6, r5
 8009ac8:	bf38      	it	cc
 8009aca:	2200      	movcc	r2, #0
 8009acc:	18a3      	adds	r3, r4, r2
 8009ace:	50a7      	str	r7, [r4, r2]
 8009ad0:	b107      	cbz	r7, 8009ad4 <rshift+0x68>
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	1b1a      	subs	r2, r3, r4
 8009ad6:	42a3      	cmp	r3, r4
 8009ad8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009adc:	bf08      	it	eq
 8009ade:	2300      	moveq	r3, #0
 8009ae0:	6102      	str	r2, [r0, #16]
 8009ae2:	bf08      	it	eq
 8009ae4:	6143      	streq	r3, [r0, #20]
 8009ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aea:	f8dc c000 	ldr.w	ip, [ip]
 8009aee:	fa0c fc08 	lsl.w	ip, ip, r8
 8009af2:	ea4c 0707 	orr.w	r7, ip, r7
 8009af6:	f849 7b04 	str.w	r7, [r9], #4
 8009afa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009afe:	40cf      	lsrs	r7, r1
 8009b00:	e7da      	b.n	8009ab8 <rshift+0x4c>
 8009b02:	f851 cb04 	ldr.w	ip, [r1], #4
 8009b06:	f847 cf04 	str.w	ip, [r7, #4]!
 8009b0a:	e7c3      	b.n	8009a94 <rshift+0x28>
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	e7e1      	b.n	8009ad4 <rshift+0x68>

08009b10 <__hexdig_fun>:
 8009b10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009b14:	2b09      	cmp	r3, #9
 8009b16:	d802      	bhi.n	8009b1e <__hexdig_fun+0xe>
 8009b18:	3820      	subs	r0, #32
 8009b1a:	b2c0      	uxtb	r0, r0
 8009b1c:	4770      	bx	lr
 8009b1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009b22:	2b05      	cmp	r3, #5
 8009b24:	d801      	bhi.n	8009b2a <__hexdig_fun+0x1a>
 8009b26:	3847      	subs	r0, #71	@ 0x47
 8009b28:	e7f7      	b.n	8009b1a <__hexdig_fun+0xa>
 8009b2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d801      	bhi.n	8009b36 <__hexdig_fun+0x26>
 8009b32:	3827      	subs	r0, #39	@ 0x27
 8009b34:	e7f1      	b.n	8009b1a <__hexdig_fun+0xa>
 8009b36:	2000      	movs	r0, #0
 8009b38:	4770      	bx	lr
	...

08009b3c <__gethex>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	b085      	sub	sp, #20
 8009b42:	468a      	mov	sl, r1
 8009b44:	9302      	str	r3, [sp, #8]
 8009b46:	680b      	ldr	r3, [r1, #0]
 8009b48:	9001      	str	r0, [sp, #4]
 8009b4a:	4690      	mov	r8, r2
 8009b4c:	1c9c      	adds	r4, r3, #2
 8009b4e:	46a1      	mov	r9, r4
 8009b50:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009b54:	2830      	cmp	r0, #48	@ 0x30
 8009b56:	d0fa      	beq.n	8009b4e <__gethex+0x12>
 8009b58:	eba9 0303 	sub.w	r3, r9, r3
 8009b5c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009b60:	f7ff ffd6 	bl	8009b10 <__hexdig_fun>
 8009b64:	4605      	mov	r5, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d168      	bne.n	8009c3c <__gethex+0x100>
 8009b6a:	49a0      	ldr	r1, [pc, #640]	@ (8009dec <__gethex+0x2b0>)
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	4648      	mov	r0, r9
 8009b70:	f7ff fe6b 	bl	800984a <strncmp>
 8009b74:	4607      	mov	r7, r0
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d167      	bne.n	8009c4a <__gethex+0x10e>
 8009b7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009b7e:	4626      	mov	r6, r4
 8009b80:	f7ff ffc6 	bl	8009b10 <__hexdig_fun>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d062      	beq.n	8009c4e <__gethex+0x112>
 8009b88:	4623      	mov	r3, r4
 8009b8a:	7818      	ldrb	r0, [r3, #0]
 8009b8c:	2830      	cmp	r0, #48	@ 0x30
 8009b8e:	4699      	mov	r9, r3
 8009b90:	f103 0301 	add.w	r3, r3, #1
 8009b94:	d0f9      	beq.n	8009b8a <__gethex+0x4e>
 8009b96:	f7ff ffbb 	bl	8009b10 <__hexdig_fun>
 8009b9a:	fab0 f580 	clz	r5, r0
 8009b9e:	096d      	lsrs	r5, r5, #5
 8009ba0:	f04f 0b01 	mov.w	fp, #1
 8009ba4:	464a      	mov	r2, r9
 8009ba6:	4616      	mov	r6, r2
 8009ba8:	3201      	adds	r2, #1
 8009baa:	7830      	ldrb	r0, [r6, #0]
 8009bac:	f7ff ffb0 	bl	8009b10 <__hexdig_fun>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d1f8      	bne.n	8009ba6 <__gethex+0x6a>
 8009bb4:	498d      	ldr	r1, [pc, #564]	@ (8009dec <__gethex+0x2b0>)
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	4630      	mov	r0, r6
 8009bba:	f7ff fe46 	bl	800984a <strncmp>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d13f      	bne.n	8009c42 <__gethex+0x106>
 8009bc2:	b944      	cbnz	r4, 8009bd6 <__gethex+0x9a>
 8009bc4:	1c74      	adds	r4, r6, #1
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	4616      	mov	r6, r2
 8009bca:	3201      	adds	r2, #1
 8009bcc:	7830      	ldrb	r0, [r6, #0]
 8009bce:	f7ff ff9f 	bl	8009b10 <__hexdig_fun>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d1f8      	bne.n	8009bc8 <__gethex+0x8c>
 8009bd6:	1ba4      	subs	r4, r4, r6
 8009bd8:	00a7      	lsls	r7, r4, #2
 8009bda:	7833      	ldrb	r3, [r6, #0]
 8009bdc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009be0:	2b50      	cmp	r3, #80	@ 0x50
 8009be2:	d13e      	bne.n	8009c62 <__gethex+0x126>
 8009be4:	7873      	ldrb	r3, [r6, #1]
 8009be6:	2b2b      	cmp	r3, #43	@ 0x2b
 8009be8:	d033      	beq.n	8009c52 <__gethex+0x116>
 8009bea:	2b2d      	cmp	r3, #45	@ 0x2d
 8009bec:	d034      	beq.n	8009c58 <__gethex+0x11c>
 8009bee:	1c71      	adds	r1, r6, #1
 8009bf0:	2400      	movs	r4, #0
 8009bf2:	7808      	ldrb	r0, [r1, #0]
 8009bf4:	f7ff ff8c 	bl	8009b10 <__hexdig_fun>
 8009bf8:	1e43      	subs	r3, r0, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b18      	cmp	r3, #24
 8009bfe:	d830      	bhi.n	8009c62 <__gethex+0x126>
 8009c00:	f1a0 0210 	sub.w	r2, r0, #16
 8009c04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c08:	f7ff ff82 	bl	8009b10 <__hexdig_fun>
 8009c0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009c10:	fa5f fc8c 	uxtb.w	ip, ip
 8009c14:	f1bc 0f18 	cmp.w	ip, #24
 8009c18:	f04f 030a 	mov.w	r3, #10
 8009c1c:	d91e      	bls.n	8009c5c <__gethex+0x120>
 8009c1e:	b104      	cbz	r4, 8009c22 <__gethex+0xe6>
 8009c20:	4252      	negs	r2, r2
 8009c22:	4417      	add	r7, r2
 8009c24:	f8ca 1000 	str.w	r1, [sl]
 8009c28:	b1ed      	cbz	r5, 8009c66 <__gethex+0x12a>
 8009c2a:	f1bb 0f00 	cmp.w	fp, #0
 8009c2e:	bf0c      	ite	eq
 8009c30:	2506      	moveq	r5, #6
 8009c32:	2500      	movne	r5, #0
 8009c34:	4628      	mov	r0, r5
 8009c36:	b005      	add	sp, #20
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	2500      	movs	r5, #0
 8009c3e:	462c      	mov	r4, r5
 8009c40:	e7b0      	b.n	8009ba4 <__gethex+0x68>
 8009c42:	2c00      	cmp	r4, #0
 8009c44:	d1c7      	bne.n	8009bd6 <__gethex+0x9a>
 8009c46:	4627      	mov	r7, r4
 8009c48:	e7c7      	b.n	8009bda <__gethex+0x9e>
 8009c4a:	464e      	mov	r6, r9
 8009c4c:	462f      	mov	r7, r5
 8009c4e:	2501      	movs	r5, #1
 8009c50:	e7c3      	b.n	8009bda <__gethex+0x9e>
 8009c52:	2400      	movs	r4, #0
 8009c54:	1cb1      	adds	r1, r6, #2
 8009c56:	e7cc      	b.n	8009bf2 <__gethex+0xb6>
 8009c58:	2401      	movs	r4, #1
 8009c5a:	e7fb      	b.n	8009c54 <__gethex+0x118>
 8009c5c:	fb03 0002 	mla	r0, r3, r2, r0
 8009c60:	e7ce      	b.n	8009c00 <__gethex+0xc4>
 8009c62:	4631      	mov	r1, r6
 8009c64:	e7de      	b.n	8009c24 <__gethex+0xe8>
 8009c66:	eba6 0309 	sub.w	r3, r6, r9
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	2b07      	cmp	r3, #7
 8009c70:	dc0a      	bgt.n	8009c88 <__gethex+0x14c>
 8009c72:	9801      	ldr	r0, [sp, #4]
 8009c74:	f000 fa46 	bl	800a104 <_Balloc>
 8009c78:	4604      	mov	r4, r0
 8009c7a:	b940      	cbnz	r0, 8009c8e <__gethex+0x152>
 8009c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009df0 <__gethex+0x2b4>)
 8009c7e:	4602      	mov	r2, r0
 8009c80:	21e4      	movs	r1, #228	@ 0xe4
 8009c82:	485c      	ldr	r0, [pc, #368]	@ (8009df4 <__gethex+0x2b8>)
 8009c84:	f001 faa6 	bl	800b1d4 <__assert_func>
 8009c88:	3101      	adds	r1, #1
 8009c8a:	105b      	asrs	r3, r3, #1
 8009c8c:	e7ef      	b.n	8009c6e <__gethex+0x132>
 8009c8e:	f100 0a14 	add.w	sl, r0, #20
 8009c92:	2300      	movs	r3, #0
 8009c94:	4655      	mov	r5, sl
 8009c96:	469b      	mov	fp, r3
 8009c98:	45b1      	cmp	r9, r6
 8009c9a:	d337      	bcc.n	8009d0c <__gethex+0x1d0>
 8009c9c:	f845 bb04 	str.w	fp, [r5], #4
 8009ca0:	eba5 050a 	sub.w	r5, r5, sl
 8009ca4:	10ad      	asrs	r5, r5, #2
 8009ca6:	6125      	str	r5, [r4, #16]
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f000 fb1d 	bl	800a2e8 <__hi0bits>
 8009cae:	016d      	lsls	r5, r5, #5
 8009cb0:	f8d8 6000 	ldr.w	r6, [r8]
 8009cb4:	1a2d      	subs	r5, r5, r0
 8009cb6:	42b5      	cmp	r5, r6
 8009cb8:	dd54      	ble.n	8009d64 <__gethex+0x228>
 8009cba:	1bad      	subs	r5, r5, r6
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 fea9 	bl	800aa16 <__any_on>
 8009cc4:	4681      	mov	r9, r0
 8009cc6:	b178      	cbz	r0, 8009ce8 <__gethex+0x1ac>
 8009cc8:	1e6b      	subs	r3, r5, #1
 8009cca:	1159      	asrs	r1, r3, #5
 8009ccc:	f003 021f 	and.w	r2, r3, #31
 8009cd0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009cd4:	f04f 0901 	mov.w	r9, #1
 8009cd8:	fa09 f202 	lsl.w	r2, r9, r2
 8009cdc:	420a      	tst	r2, r1
 8009cde:	d003      	beq.n	8009ce8 <__gethex+0x1ac>
 8009ce0:	454b      	cmp	r3, r9
 8009ce2:	dc36      	bgt.n	8009d52 <__gethex+0x216>
 8009ce4:	f04f 0902 	mov.w	r9, #2
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4620      	mov	r0, r4
 8009cec:	f7ff febe 	bl	8009a6c <rshift>
 8009cf0:	442f      	add	r7, r5
 8009cf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cf6:	42bb      	cmp	r3, r7
 8009cf8:	da42      	bge.n	8009d80 <__gethex+0x244>
 8009cfa:	9801      	ldr	r0, [sp, #4]
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	f000 fa41 	bl	800a184 <_Bfree>
 8009d02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d04:	2300      	movs	r3, #0
 8009d06:	6013      	str	r3, [r2, #0]
 8009d08:	25a3      	movs	r5, #163	@ 0xa3
 8009d0a:	e793      	b.n	8009c34 <__gethex+0xf8>
 8009d0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009d10:	2a2e      	cmp	r2, #46	@ 0x2e
 8009d12:	d012      	beq.n	8009d3a <__gethex+0x1fe>
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	d104      	bne.n	8009d22 <__gethex+0x1e6>
 8009d18:	f845 bb04 	str.w	fp, [r5], #4
 8009d1c:	f04f 0b00 	mov.w	fp, #0
 8009d20:	465b      	mov	r3, fp
 8009d22:	7830      	ldrb	r0, [r6, #0]
 8009d24:	9303      	str	r3, [sp, #12]
 8009d26:	f7ff fef3 	bl	8009b10 <__hexdig_fun>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	f000 000f 	and.w	r0, r0, #15
 8009d30:	4098      	lsls	r0, r3
 8009d32:	ea4b 0b00 	orr.w	fp, fp, r0
 8009d36:	3304      	adds	r3, #4
 8009d38:	e7ae      	b.n	8009c98 <__gethex+0x15c>
 8009d3a:	45b1      	cmp	r9, r6
 8009d3c:	d8ea      	bhi.n	8009d14 <__gethex+0x1d8>
 8009d3e:	492b      	ldr	r1, [pc, #172]	@ (8009dec <__gethex+0x2b0>)
 8009d40:	9303      	str	r3, [sp, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff fd80 	bl	800984a <strncmp>
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	d1e1      	bne.n	8009d14 <__gethex+0x1d8>
 8009d50:	e7a2      	b.n	8009c98 <__gethex+0x15c>
 8009d52:	1ea9      	subs	r1, r5, #2
 8009d54:	4620      	mov	r0, r4
 8009d56:	f000 fe5e 	bl	800aa16 <__any_on>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d0c2      	beq.n	8009ce4 <__gethex+0x1a8>
 8009d5e:	f04f 0903 	mov.w	r9, #3
 8009d62:	e7c1      	b.n	8009ce8 <__gethex+0x1ac>
 8009d64:	da09      	bge.n	8009d7a <__gethex+0x23e>
 8009d66:	1b75      	subs	r5, r6, r5
 8009d68:	4621      	mov	r1, r4
 8009d6a:	9801      	ldr	r0, [sp, #4]
 8009d6c:	462a      	mov	r2, r5
 8009d6e:	f000 fc19 	bl	800a5a4 <__lshift>
 8009d72:	1b7f      	subs	r7, r7, r5
 8009d74:	4604      	mov	r4, r0
 8009d76:	f100 0a14 	add.w	sl, r0, #20
 8009d7a:	f04f 0900 	mov.w	r9, #0
 8009d7e:	e7b8      	b.n	8009cf2 <__gethex+0x1b6>
 8009d80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d84:	42bd      	cmp	r5, r7
 8009d86:	dd6f      	ble.n	8009e68 <__gethex+0x32c>
 8009d88:	1bed      	subs	r5, r5, r7
 8009d8a:	42ae      	cmp	r6, r5
 8009d8c:	dc34      	bgt.n	8009df8 <__gethex+0x2bc>
 8009d8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d022      	beq.n	8009ddc <__gethex+0x2a0>
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d024      	beq.n	8009de4 <__gethex+0x2a8>
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d115      	bne.n	8009dca <__gethex+0x28e>
 8009d9e:	42ae      	cmp	r6, r5
 8009da0:	d113      	bne.n	8009dca <__gethex+0x28e>
 8009da2:	2e01      	cmp	r6, #1
 8009da4:	d10b      	bne.n	8009dbe <__gethex+0x282>
 8009da6:	9a02      	ldr	r2, [sp, #8]
 8009da8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	2301      	movs	r3, #1
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	f8ca 3000 	str.w	r3, [sl]
 8009db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db8:	2562      	movs	r5, #98	@ 0x62
 8009dba:	601c      	str	r4, [r3, #0]
 8009dbc:	e73a      	b.n	8009c34 <__gethex+0xf8>
 8009dbe:	1e71      	subs	r1, r6, #1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fe28 	bl	800aa16 <__any_on>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d1ed      	bne.n	8009da6 <__gethex+0x26a>
 8009dca:	9801      	ldr	r0, [sp, #4]
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f000 f9d9 	bl	800a184 <_Bfree>
 8009dd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	2550      	movs	r5, #80	@ 0x50
 8009dda:	e72b      	b.n	8009c34 <__gethex+0xf8>
 8009ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f3      	bne.n	8009dca <__gethex+0x28e>
 8009de2:	e7e0      	b.n	8009da6 <__gethex+0x26a>
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1dd      	bne.n	8009da6 <__gethex+0x26a>
 8009dea:	e7ee      	b.n	8009dca <__gethex+0x28e>
 8009dec:	080335f4 	.word	0x080335f4
 8009df0:	0803360a 	.word	0x0803360a
 8009df4:	0803361b 	.word	0x0803361b
 8009df8:	1e6f      	subs	r7, r5, #1
 8009dfa:	f1b9 0f00 	cmp.w	r9, #0
 8009dfe:	d130      	bne.n	8009e62 <__gethex+0x326>
 8009e00:	b127      	cbz	r7, 8009e0c <__gethex+0x2d0>
 8009e02:	4639      	mov	r1, r7
 8009e04:	4620      	mov	r0, r4
 8009e06:	f000 fe06 	bl	800aa16 <__any_on>
 8009e0a:	4681      	mov	r9, r0
 8009e0c:	117a      	asrs	r2, r7, #5
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009e14:	f007 071f 	and.w	r7, r7, #31
 8009e18:	40bb      	lsls	r3, r7
 8009e1a:	4213      	tst	r3, r2
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4620      	mov	r0, r4
 8009e20:	bf18      	it	ne
 8009e22:	f049 0902 	orrne.w	r9, r9, #2
 8009e26:	f7ff fe21 	bl	8009a6c <rshift>
 8009e2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009e2e:	1b76      	subs	r6, r6, r5
 8009e30:	2502      	movs	r5, #2
 8009e32:	f1b9 0f00 	cmp.w	r9, #0
 8009e36:	d047      	beq.n	8009ec8 <__gethex+0x38c>
 8009e38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d015      	beq.n	8009e6c <__gethex+0x330>
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d017      	beq.n	8009e74 <__gethex+0x338>
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d109      	bne.n	8009e5c <__gethex+0x320>
 8009e48:	f019 0f02 	tst.w	r9, #2
 8009e4c:	d006      	beq.n	8009e5c <__gethex+0x320>
 8009e4e:	f8da 3000 	ldr.w	r3, [sl]
 8009e52:	ea49 0903 	orr.w	r9, r9, r3
 8009e56:	f019 0f01 	tst.w	r9, #1
 8009e5a:	d10e      	bne.n	8009e7a <__gethex+0x33e>
 8009e5c:	f045 0510 	orr.w	r5, r5, #16
 8009e60:	e032      	b.n	8009ec8 <__gethex+0x38c>
 8009e62:	f04f 0901 	mov.w	r9, #1
 8009e66:	e7d1      	b.n	8009e0c <__gethex+0x2d0>
 8009e68:	2501      	movs	r5, #1
 8009e6a:	e7e2      	b.n	8009e32 <__gethex+0x2f6>
 8009e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e6e:	f1c3 0301 	rsb	r3, r3, #1
 8009e72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0f0      	beq.n	8009e5c <__gethex+0x320>
 8009e7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e7e:	f104 0314 	add.w	r3, r4, #20
 8009e82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e8a:	f04f 0c00 	mov.w	ip, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e98:	d01b      	beq.n	8009ed2 <__gethex+0x396>
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	6002      	str	r2, [r0, #0]
 8009e9e:	2d02      	cmp	r5, #2
 8009ea0:	f104 0314 	add.w	r3, r4, #20
 8009ea4:	d13c      	bne.n	8009f20 <__gethex+0x3e4>
 8009ea6:	f8d8 2000 	ldr.w	r2, [r8]
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	42b2      	cmp	r2, r6
 8009eae:	d109      	bne.n	8009ec4 <__gethex+0x388>
 8009eb0:	1171      	asrs	r1, r6, #5
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009eb8:	f006 061f 	and.w	r6, r6, #31
 8009ebc:	fa02 f606 	lsl.w	r6, r2, r6
 8009ec0:	421e      	tst	r6, r3
 8009ec2:	d13a      	bne.n	8009f3a <__gethex+0x3fe>
 8009ec4:	f045 0520 	orr.w	r5, r5, #32
 8009ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eca:	601c      	str	r4, [r3, #0]
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	601f      	str	r7, [r3, #0]
 8009ed0:	e6b0      	b.n	8009c34 <__gethex+0xf8>
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ed8:	d8d9      	bhi.n	8009e8e <__gethex+0x352>
 8009eda:	68a3      	ldr	r3, [r4, #8]
 8009edc:	459b      	cmp	fp, r3
 8009ede:	db17      	blt.n	8009f10 <__gethex+0x3d4>
 8009ee0:	6861      	ldr	r1, [r4, #4]
 8009ee2:	9801      	ldr	r0, [sp, #4]
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	f000 f90d 	bl	800a104 <_Balloc>
 8009eea:	4681      	mov	r9, r0
 8009eec:	b918      	cbnz	r0, 8009ef6 <__gethex+0x3ba>
 8009eee:	4b1a      	ldr	r3, [pc, #104]	@ (8009f58 <__gethex+0x41c>)
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	2184      	movs	r1, #132	@ 0x84
 8009ef4:	e6c5      	b.n	8009c82 <__gethex+0x146>
 8009ef6:	6922      	ldr	r2, [r4, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	f104 010c 	add.w	r1, r4, #12
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	300c      	adds	r0, #12
 8009f02:	f7ff fd52 	bl	80099aa <memcpy>
 8009f06:	4621      	mov	r1, r4
 8009f08:	9801      	ldr	r0, [sp, #4]
 8009f0a:	f000 f93b 	bl	800a184 <_Bfree>
 8009f0e:	464c      	mov	r4, r9
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	1c5a      	adds	r2, r3, #1
 8009f14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f18:	6122      	str	r2, [r4, #16]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	615a      	str	r2, [r3, #20]
 8009f1e:	e7be      	b.n	8009e9e <__gethex+0x362>
 8009f20:	6922      	ldr	r2, [r4, #16]
 8009f22:	455a      	cmp	r2, fp
 8009f24:	dd0b      	ble.n	8009f3e <__gethex+0x402>
 8009f26:	2101      	movs	r1, #1
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7ff fd9f 	bl	8009a6c <rshift>
 8009f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f32:	3701      	adds	r7, #1
 8009f34:	42bb      	cmp	r3, r7
 8009f36:	f6ff aee0 	blt.w	8009cfa <__gethex+0x1be>
 8009f3a:	2501      	movs	r5, #1
 8009f3c:	e7c2      	b.n	8009ec4 <__gethex+0x388>
 8009f3e:	f016 061f 	ands.w	r6, r6, #31
 8009f42:	d0fa      	beq.n	8009f3a <__gethex+0x3fe>
 8009f44:	4453      	add	r3, sl
 8009f46:	f1c6 0620 	rsb	r6, r6, #32
 8009f4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f4e:	f000 f9cb 	bl	800a2e8 <__hi0bits>
 8009f52:	42b0      	cmp	r0, r6
 8009f54:	dbe7      	blt.n	8009f26 <__gethex+0x3ea>
 8009f56:	e7f0      	b.n	8009f3a <__gethex+0x3fe>
 8009f58:	0803360a 	.word	0x0803360a

08009f5c <L_shift>:
 8009f5c:	f1c2 0208 	rsb	r2, r2, #8
 8009f60:	0092      	lsls	r2, r2, #2
 8009f62:	b570      	push	{r4, r5, r6, lr}
 8009f64:	f1c2 0620 	rsb	r6, r2, #32
 8009f68:	6843      	ldr	r3, [r0, #4]
 8009f6a:	6804      	ldr	r4, [r0, #0]
 8009f6c:	fa03 f506 	lsl.w	r5, r3, r6
 8009f70:	432c      	orrs	r4, r5
 8009f72:	40d3      	lsrs	r3, r2
 8009f74:	6004      	str	r4, [r0, #0]
 8009f76:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f7a:	4288      	cmp	r0, r1
 8009f7c:	d3f4      	bcc.n	8009f68 <L_shift+0xc>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}

08009f80 <__match>:
 8009f80:	b530      	push	{r4, r5, lr}
 8009f82:	6803      	ldr	r3, [r0, #0]
 8009f84:	3301      	adds	r3, #1
 8009f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f8a:	b914      	cbnz	r4, 8009f92 <__match+0x12>
 8009f8c:	6003      	str	r3, [r0, #0]
 8009f8e:	2001      	movs	r0, #1
 8009f90:	bd30      	pop	{r4, r5, pc}
 8009f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f9a:	2d19      	cmp	r5, #25
 8009f9c:	bf98      	it	ls
 8009f9e:	3220      	addls	r2, #32
 8009fa0:	42a2      	cmp	r2, r4
 8009fa2:	d0f0      	beq.n	8009f86 <__match+0x6>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	e7f3      	b.n	8009f90 <__match+0x10>

08009fa8 <__hexnan>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	680b      	ldr	r3, [r1, #0]
 8009fae:	6801      	ldr	r1, [r0, #0]
 8009fb0:	115e      	asrs	r6, r3, #5
 8009fb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fb6:	f013 031f 	ands.w	r3, r3, #31
 8009fba:	b087      	sub	sp, #28
 8009fbc:	bf18      	it	ne
 8009fbe:	3604      	addne	r6, #4
 8009fc0:	2500      	movs	r5, #0
 8009fc2:	1f37      	subs	r7, r6, #4
 8009fc4:	4682      	mov	sl, r0
 8009fc6:	4690      	mov	r8, r2
 8009fc8:	9301      	str	r3, [sp, #4]
 8009fca:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fce:	46b9      	mov	r9, r7
 8009fd0:	463c      	mov	r4, r7
 8009fd2:	9502      	str	r5, [sp, #8]
 8009fd4:	46ab      	mov	fp, r5
 8009fd6:	784a      	ldrb	r2, [r1, #1]
 8009fd8:	1c4b      	adds	r3, r1, #1
 8009fda:	9303      	str	r3, [sp, #12]
 8009fdc:	b342      	cbz	r2, 800a030 <__hexnan+0x88>
 8009fde:	4610      	mov	r0, r2
 8009fe0:	9105      	str	r1, [sp, #20]
 8009fe2:	9204      	str	r2, [sp, #16]
 8009fe4:	f7ff fd94 	bl	8009b10 <__hexdig_fun>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d151      	bne.n	800a090 <__hexnan+0xe8>
 8009fec:	9a04      	ldr	r2, [sp, #16]
 8009fee:	9905      	ldr	r1, [sp, #20]
 8009ff0:	2a20      	cmp	r2, #32
 8009ff2:	d818      	bhi.n	800a026 <__hexnan+0x7e>
 8009ff4:	9b02      	ldr	r3, [sp, #8]
 8009ff6:	459b      	cmp	fp, r3
 8009ff8:	dd13      	ble.n	800a022 <__hexnan+0x7a>
 8009ffa:	454c      	cmp	r4, r9
 8009ffc:	d206      	bcs.n	800a00c <__hexnan+0x64>
 8009ffe:	2d07      	cmp	r5, #7
 800a000:	dc04      	bgt.n	800a00c <__hexnan+0x64>
 800a002:	462a      	mov	r2, r5
 800a004:	4649      	mov	r1, r9
 800a006:	4620      	mov	r0, r4
 800a008:	f7ff ffa8 	bl	8009f5c <L_shift>
 800a00c:	4544      	cmp	r4, r8
 800a00e:	d952      	bls.n	800a0b6 <__hexnan+0x10e>
 800a010:	2300      	movs	r3, #0
 800a012:	f1a4 0904 	sub.w	r9, r4, #4
 800a016:	f844 3c04 	str.w	r3, [r4, #-4]
 800a01a:	f8cd b008 	str.w	fp, [sp, #8]
 800a01e:	464c      	mov	r4, r9
 800a020:	461d      	mov	r5, r3
 800a022:	9903      	ldr	r1, [sp, #12]
 800a024:	e7d7      	b.n	8009fd6 <__hexnan+0x2e>
 800a026:	2a29      	cmp	r2, #41	@ 0x29
 800a028:	d157      	bne.n	800a0da <__hexnan+0x132>
 800a02a:	3102      	adds	r1, #2
 800a02c:	f8ca 1000 	str.w	r1, [sl]
 800a030:	f1bb 0f00 	cmp.w	fp, #0
 800a034:	d051      	beq.n	800a0da <__hexnan+0x132>
 800a036:	454c      	cmp	r4, r9
 800a038:	d206      	bcs.n	800a048 <__hexnan+0xa0>
 800a03a:	2d07      	cmp	r5, #7
 800a03c:	dc04      	bgt.n	800a048 <__hexnan+0xa0>
 800a03e:	462a      	mov	r2, r5
 800a040:	4649      	mov	r1, r9
 800a042:	4620      	mov	r0, r4
 800a044:	f7ff ff8a 	bl	8009f5c <L_shift>
 800a048:	4544      	cmp	r4, r8
 800a04a:	d936      	bls.n	800a0ba <__hexnan+0x112>
 800a04c:	f1a8 0204 	sub.w	r2, r8, #4
 800a050:	4623      	mov	r3, r4
 800a052:	f853 1b04 	ldr.w	r1, [r3], #4
 800a056:	f842 1f04 	str.w	r1, [r2, #4]!
 800a05a:	429f      	cmp	r7, r3
 800a05c:	d2f9      	bcs.n	800a052 <__hexnan+0xaa>
 800a05e:	1b3b      	subs	r3, r7, r4
 800a060:	f023 0303 	bic.w	r3, r3, #3
 800a064:	3304      	adds	r3, #4
 800a066:	3401      	adds	r4, #1
 800a068:	3e03      	subs	r6, #3
 800a06a:	42b4      	cmp	r4, r6
 800a06c:	bf88      	it	hi
 800a06e:	2304      	movhi	r3, #4
 800a070:	4443      	add	r3, r8
 800a072:	2200      	movs	r2, #0
 800a074:	f843 2b04 	str.w	r2, [r3], #4
 800a078:	429f      	cmp	r7, r3
 800a07a:	d2fb      	bcs.n	800a074 <__hexnan+0xcc>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	b91b      	cbnz	r3, 800a088 <__hexnan+0xe0>
 800a080:	4547      	cmp	r7, r8
 800a082:	d128      	bne.n	800a0d6 <__hexnan+0x12e>
 800a084:	2301      	movs	r3, #1
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	2005      	movs	r0, #5
 800a08a:	b007      	add	sp, #28
 800a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a090:	3501      	adds	r5, #1
 800a092:	2d08      	cmp	r5, #8
 800a094:	f10b 0b01 	add.w	fp, fp, #1
 800a098:	dd06      	ble.n	800a0a8 <__hexnan+0x100>
 800a09a:	4544      	cmp	r4, r8
 800a09c:	d9c1      	bls.n	800a022 <__hexnan+0x7a>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0a4:	2501      	movs	r5, #1
 800a0a6:	3c04      	subs	r4, #4
 800a0a8:	6822      	ldr	r2, [r4, #0]
 800a0aa:	f000 000f 	and.w	r0, r0, #15
 800a0ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	e7b5      	b.n	800a022 <__hexnan+0x7a>
 800a0b6:	2508      	movs	r5, #8
 800a0b8:	e7b3      	b.n	800a022 <__hexnan+0x7a>
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0dd      	beq.n	800a07c <__hexnan+0xd4>
 800a0c0:	f1c3 0320 	rsb	r3, r3, #32
 800a0c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c8:	40da      	lsrs	r2, r3
 800a0ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a0d4:	e7d2      	b.n	800a07c <__hexnan+0xd4>
 800a0d6:	3f04      	subs	r7, #4
 800a0d8:	e7d0      	b.n	800a07c <__hexnan+0xd4>
 800a0da:	2004      	movs	r0, #4
 800a0dc:	e7d5      	b.n	800a08a <__hexnan+0xe2>

0800a0de <__ascii_mbtowc>:
 800a0de:	b082      	sub	sp, #8
 800a0e0:	b901      	cbnz	r1, 800a0e4 <__ascii_mbtowc+0x6>
 800a0e2:	a901      	add	r1, sp, #4
 800a0e4:	b142      	cbz	r2, 800a0f8 <__ascii_mbtowc+0x1a>
 800a0e6:	b14b      	cbz	r3, 800a0fc <__ascii_mbtowc+0x1e>
 800a0e8:	7813      	ldrb	r3, [r2, #0]
 800a0ea:	600b      	str	r3, [r1, #0]
 800a0ec:	7812      	ldrb	r2, [r2, #0]
 800a0ee:	1e10      	subs	r0, r2, #0
 800a0f0:	bf18      	it	ne
 800a0f2:	2001      	movne	r0, #1
 800a0f4:	b002      	add	sp, #8
 800a0f6:	4770      	bx	lr
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	e7fb      	b.n	800a0f4 <__ascii_mbtowc+0x16>
 800a0fc:	f06f 0001 	mvn.w	r0, #1
 800a100:	e7f8      	b.n	800a0f4 <__ascii_mbtowc+0x16>
	...

0800a104 <_Balloc>:
 800a104:	b570      	push	{r4, r5, r6, lr}
 800a106:	69c6      	ldr	r6, [r0, #28]
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	b976      	cbnz	r6, 800a12c <_Balloc+0x28>
 800a10e:	2010      	movs	r0, #16
 800a110:	f7fe fb50 	bl	80087b4 <malloc>
 800a114:	4602      	mov	r2, r0
 800a116:	61e0      	str	r0, [r4, #28]
 800a118:	b920      	cbnz	r0, 800a124 <_Balloc+0x20>
 800a11a:	4b18      	ldr	r3, [pc, #96]	@ (800a17c <_Balloc+0x78>)
 800a11c:	4818      	ldr	r0, [pc, #96]	@ (800a180 <_Balloc+0x7c>)
 800a11e:	216b      	movs	r1, #107	@ 0x6b
 800a120:	f001 f858 	bl	800b1d4 <__assert_func>
 800a124:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a128:	6006      	str	r6, [r0, #0]
 800a12a:	60c6      	str	r6, [r0, #12]
 800a12c:	69e6      	ldr	r6, [r4, #28]
 800a12e:	68f3      	ldr	r3, [r6, #12]
 800a130:	b183      	cbz	r3, 800a154 <_Balloc+0x50>
 800a132:	69e3      	ldr	r3, [r4, #28]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a13a:	b9b8      	cbnz	r0, 800a16c <_Balloc+0x68>
 800a13c:	2101      	movs	r1, #1
 800a13e:	fa01 f605 	lsl.w	r6, r1, r5
 800a142:	1d72      	adds	r2, r6, #5
 800a144:	0092      	lsls	r2, r2, #2
 800a146:	4620      	mov	r0, r4
 800a148:	f001 f862 	bl	800b210 <_calloc_r>
 800a14c:	b160      	cbz	r0, 800a168 <_Balloc+0x64>
 800a14e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a152:	e00e      	b.n	800a172 <_Balloc+0x6e>
 800a154:	2221      	movs	r2, #33	@ 0x21
 800a156:	2104      	movs	r1, #4
 800a158:	4620      	mov	r0, r4
 800a15a:	f001 f859 	bl	800b210 <_calloc_r>
 800a15e:	69e3      	ldr	r3, [r4, #28]
 800a160:	60f0      	str	r0, [r6, #12]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e4      	bne.n	800a132 <_Balloc+0x2e>
 800a168:	2000      	movs	r0, #0
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
 800a16c:	6802      	ldr	r2, [r0, #0]
 800a16e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a172:	2300      	movs	r3, #0
 800a174:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a178:	e7f7      	b.n	800a16a <_Balloc+0x66>
 800a17a:	bf00      	nop
 800a17c:	0803367b 	.word	0x0803367b
 800a180:	08033692 	.word	0x08033692

0800a184 <_Bfree>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	69c6      	ldr	r6, [r0, #28]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b976      	cbnz	r6, 800a1ac <_Bfree+0x28>
 800a18e:	2010      	movs	r0, #16
 800a190:	f7fe fb10 	bl	80087b4 <malloc>
 800a194:	4602      	mov	r2, r0
 800a196:	61e8      	str	r0, [r5, #28]
 800a198:	b920      	cbnz	r0, 800a1a4 <_Bfree+0x20>
 800a19a:	4b09      	ldr	r3, [pc, #36]	@ (800a1c0 <_Bfree+0x3c>)
 800a19c:	4809      	ldr	r0, [pc, #36]	@ (800a1c4 <_Bfree+0x40>)
 800a19e:	218f      	movs	r1, #143	@ 0x8f
 800a1a0:	f001 f818 	bl	800b1d4 <__assert_func>
 800a1a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1a8:	6006      	str	r6, [r0, #0]
 800a1aa:	60c6      	str	r6, [r0, #12]
 800a1ac:	b13c      	cbz	r4, 800a1be <_Bfree+0x3a>
 800a1ae:	69eb      	ldr	r3, [r5, #28]
 800a1b0:	6862      	ldr	r2, [r4, #4]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1b8:	6021      	str	r1, [r4, #0]
 800a1ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	0803367b 	.word	0x0803367b
 800a1c4:	08033692 	.word	0x08033692

0800a1c8 <__multadd>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	690d      	ldr	r5, [r1, #16]
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	f101 0c14 	add.w	ip, r1, #20
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f8dc 3000 	ldr.w	r3, [ip]
 800a1de:	b299      	uxth	r1, r3
 800a1e0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1e4:	0c1e      	lsrs	r6, r3, #16
 800a1e6:	0c0b      	lsrs	r3, r1, #16
 800a1e8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1ec:	b289      	uxth	r1, r1
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1f4:	4285      	cmp	r5, r0
 800a1f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1fe:	dcec      	bgt.n	800a1da <__multadd+0x12>
 800a200:	b30e      	cbz	r6, 800a246 <__multadd+0x7e>
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	42ab      	cmp	r3, r5
 800a206:	dc19      	bgt.n	800a23c <__multadd+0x74>
 800a208:	6861      	ldr	r1, [r4, #4]
 800a20a:	4638      	mov	r0, r7
 800a20c:	3101      	adds	r1, #1
 800a20e:	f7ff ff79 	bl	800a104 <_Balloc>
 800a212:	4680      	mov	r8, r0
 800a214:	b928      	cbnz	r0, 800a222 <__multadd+0x5a>
 800a216:	4602      	mov	r2, r0
 800a218:	4b0c      	ldr	r3, [pc, #48]	@ (800a24c <__multadd+0x84>)
 800a21a:	480d      	ldr	r0, [pc, #52]	@ (800a250 <__multadd+0x88>)
 800a21c:	21ba      	movs	r1, #186	@ 0xba
 800a21e:	f000 ffd9 	bl	800b1d4 <__assert_func>
 800a222:	6922      	ldr	r2, [r4, #16]
 800a224:	3202      	adds	r2, #2
 800a226:	f104 010c 	add.w	r1, r4, #12
 800a22a:	0092      	lsls	r2, r2, #2
 800a22c:	300c      	adds	r0, #12
 800a22e:	f7ff fbbc 	bl	80099aa <memcpy>
 800a232:	4621      	mov	r1, r4
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa5 	bl	800a184 <_Bfree>
 800a23a:	4644      	mov	r4, r8
 800a23c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a240:	3501      	adds	r5, #1
 800a242:	615e      	str	r6, [r3, #20]
 800a244:	6125      	str	r5, [r4, #16]
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24c:	0803360a 	.word	0x0803360a
 800a250:	08033692 	.word	0x08033692

0800a254 <__s2b>:
 800a254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a258:	460c      	mov	r4, r1
 800a25a:	4615      	mov	r5, r2
 800a25c:	461f      	mov	r7, r3
 800a25e:	2209      	movs	r2, #9
 800a260:	3308      	adds	r3, #8
 800a262:	4606      	mov	r6, r0
 800a264:	fb93 f3f2 	sdiv	r3, r3, r2
 800a268:	2100      	movs	r1, #0
 800a26a:	2201      	movs	r2, #1
 800a26c:	429a      	cmp	r2, r3
 800a26e:	db09      	blt.n	800a284 <__s2b+0x30>
 800a270:	4630      	mov	r0, r6
 800a272:	f7ff ff47 	bl	800a104 <_Balloc>
 800a276:	b940      	cbnz	r0, 800a28a <__s2b+0x36>
 800a278:	4602      	mov	r2, r0
 800a27a:	4b19      	ldr	r3, [pc, #100]	@ (800a2e0 <__s2b+0x8c>)
 800a27c:	4819      	ldr	r0, [pc, #100]	@ (800a2e4 <__s2b+0x90>)
 800a27e:	21d3      	movs	r1, #211	@ 0xd3
 800a280:	f000 ffa8 	bl	800b1d4 <__assert_func>
 800a284:	0052      	lsls	r2, r2, #1
 800a286:	3101      	adds	r1, #1
 800a288:	e7f0      	b.n	800a26c <__s2b+0x18>
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	6143      	str	r3, [r0, #20]
 800a28e:	2d09      	cmp	r5, #9
 800a290:	f04f 0301 	mov.w	r3, #1
 800a294:	6103      	str	r3, [r0, #16]
 800a296:	dd16      	ble.n	800a2c6 <__s2b+0x72>
 800a298:	f104 0909 	add.w	r9, r4, #9
 800a29c:	46c8      	mov	r8, r9
 800a29e:	442c      	add	r4, r5
 800a2a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2a4:	4601      	mov	r1, r0
 800a2a6:	3b30      	subs	r3, #48	@ 0x30
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff ff8c 	bl	800a1c8 <__multadd>
 800a2b0:	45a0      	cmp	r8, r4
 800a2b2:	d1f5      	bne.n	800a2a0 <__s2b+0x4c>
 800a2b4:	f1a5 0408 	sub.w	r4, r5, #8
 800a2b8:	444c      	add	r4, r9
 800a2ba:	1b2d      	subs	r5, r5, r4
 800a2bc:	1963      	adds	r3, r4, r5
 800a2be:	42bb      	cmp	r3, r7
 800a2c0:	db04      	blt.n	800a2cc <__s2b+0x78>
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	340a      	adds	r4, #10
 800a2c8:	2509      	movs	r5, #9
 800a2ca:	e7f6      	b.n	800a2ba <__s2b+0x66>
 800a2cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2d0:	4601      	mov	r1, r0
 800a2d2:	3b30      	subs	r3, #48	@ 0x30
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff76 	bl	800a1c8 <__multadd>
 800a2dc:	e7ee      	b.n	800a2bc <__s2b+0x68>
 800a2de:	bf00      	nop
 800a2e0:	0803360a 	.word	0x0803360a
 800a2e4:	08033692 	.word	0x08033692

0800a2e8 <__hi0bits>:
 800a2e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	bf36      	itet	cc
 800a2f0:	0403      	lslcc	r3, r0, #16
 800a2f2:	2000      	movcs	r0, #0
 800a2f4:	2010      	movcc	r0, #16
 800a2f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2fa:	bf3c      	itt	cc
 800a2fc:	021b      	lslcc	r3, r3, #8
 800a2fe:	3008      	addcc	r0, #8
 800a300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a304:	bf3c      	itt	cc
 800a306:	011b      	lslcc	r3, r3, #4
 800a308:	3004      	addcc	r0, #4
 800a30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a30e:	bf3c      	itt	cc
 800a310:	009b      	lslcc	r3, r3, #2
 800a312:	3002      	addcc	r0, #2
 800a314:	2b00      	cmp	r3, #0
 800a316:	db05      	blt.n	800a324 <__hi0bits+0x3c>
 800a318:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a31c:	f100 0001 	add.w	r0, r0, #1
 800a320:	bf08      	it	eq
 800a322:	2020      	moveq	r0, #32
 800a324:	4770      	bx	lr

0800a326 <__lo0bits>:
 800a326:	6803      	ldr	r3, [r0, #0]
 800a328:	4602      	mov	r2, r0
 800a32a:	f013 0007 	ands.w	r0, r3, #7
 800a32e:	d00b      	beq.n	800a348 <__lo0bits+0x22>
 800a330:	07d9      	lsls	r1, r3, #31
 800a332:	d421      	bmi.n	800a378 <__lo0bits+0x52>
 800a334:	0798      	lsls	r0, r3, #30
 800a336:	bf49      	itett	mi
 800a338:	085b      	lsrmi	r3, r3, #1
 800a33a:	089b      	lsrpl	r3, r3, #2
 800a33c:	2001      	movmi	r0, #1
 800a33e:	6013      	strmi	r3, [r2, #0]
 800a340:	bf5c      	itt	pl
 800a342:	6013      	strpl	r3, [r2, #0]
 800a344:	2002      	movpl	r0, #2
 800a346:	4770      	bx	lr
 800a348:	b299      	uxth	r1, r3
 800a34a:	b909      	cbnz	r1, 800a350 <__lo0bits+0x2a>
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	2010      	movs	r0, #16
 800a350:	b2d9      	uxtb	r1, r3
 800a352:	b909      	cbnz	r1, 800a358 <__lo0bits+0x32>
 800a354:	3008      	adds	r0, #8
 800a356:	0a1b      	lsrs	r3, r3, #8
 800a358:	0719      	lsls	r1, r3, #28
 800a35a:	bf04      	itt	eq
 800a35c:	091b      	lsreq	r3, r3, #4
 800a35e:	3004      	addeq	r0, #4
 800a360:	0799      	lsls	r1, r3, #30
 800a362:	bf04      	itt	eq
 800a364:	089b      	lsreq	r3, r3, #2
 800a366:	3002      	addeq	r0, #2
 800a368:	07d9      	lsls	r1, r3, #31
 800a36a:	d403      	bmi.n	800a374 <__lo0bits+0x4e>
 800a36c:	085b      	lsrs	r3, r3, #1
 800a36e:	f100 0001 	add.w	r0, r0, #1
 800a372:	d003      	beq.n	800a37c <__lo0bits+0x56>
 800a374:	6013      	str	r3, [r2, #0]
 800a376:	4770      	bx	lr
 800a378:	2000      	movs	r0, #0
 800a37a:	4770      	bx	lr
 800a37c:	2020      	movs	r0, #32
 800a37e:	4770      	bx	lr

0800a380 <__i2b>:
 800a380:	b510      	push	{r4, lr}
 800a382:	460c      	mov	r4, r1
 800a384:	2101      	movs	r1, #1
 800a386:	f7ff febd 	bl	800a104 <_Balloc>
 800a38a:	4602      	mov	r2, r0
 800a38c:	b928      	cbnz	r0, 800a39a <__i2b+0x1a>
 800a38e:	4b05      	ldr	r3, [pc, #20]	@ (800a3a4 <__i2b+0x24>)
 800a390:	4805      	ldr	r0, [pc, #20]	@ (800a3a8 <__i2b+0x28>)
 800a392:	f240 1145 	movw	r1, #325	@ 0x145
 800a396:	f000 ff1d 	bl	800b1d4 <__assert_func>
 800a39a:	2301      	movs	r3, #1
 800a39c:	6144      	str	r4, [r0, #20]
 800a39e:	6103      	str	r3, [r0, #16]
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0803360a 	.word	0x0803360a
 800a3a8:	08033692 	.word	0x08033692

0800a3ac <__multiply>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	4617      	mov	r7, r2
 800a3b2:	690a      	ldr	r2, [r1, #16]
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	bfa8      	it	ge
 800a3ba:	463b      	movge	r3, r7
 800a3bc:	4689      	mov	r9, r1
 800a3be:	bfa4      	itt	ge
 800a3c0:	460f      	movge	r7, r1
 800a3c2:	4699      	movge	r9, r3
 800a3c4:	693d      	ldr	r5, [r7, #16]
 800a3c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	eb05 060a 	add.w	r6, r5, sl
 800a3d2:	42b3      	cmp	r3, r6
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	bfb8      	it	lt
 800a3d8:	3101      	addlt	r1, #1
 800a3da:	f7ff fe93 	bl	800a104 <_Balloc>
 800a3de:	b930      	cbnz	r0, 800a3ee <__multiply+0x42>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4b41      	ldr	r3, [pc, #260]	@ (800a4e8 <__multiply+0x13c>)
 800a3e4:	4841      	ldr	r0, [pc, #260]	@ (800a4ec <__multiply+0x140>)
 800a3e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3ea:	f000 fef3 	bl	800b1d4 <__assert_func>
 800a3ee:	f100 0414 	add.w	r4, r0, #20
 800a3f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	4573      	cmp	r3, lr
 800a3fc:	d320      	bcc.n	800a440 <__multiply+0x94>
 800a3fe:	f107 0814 	add.w	r8, r7, #20
 800a402:	f109 0114 	add.w	r1, r9, #20
 800a406:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a40a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a40e:	9302      	str	r3, [sp, #8]
 800a410:	1beb      	subs	r3, r5, r7
 800a412:	3b15      	subs	r3, #21
 800a414:	f023 0303 	bic.w	r3, r3, #3
 800a418:	3304      	adds	r3, #4
 800a41a:	3715      	adds	r7, #21
 800a41c:	42bd      	cmp	r5, r7
 800a41e:	bf38      	it	cc
 800a420:	2304      	movcc	r3, #4
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	9b02      	ldr	r3, [sp, #8]
 800a426:	9103      	str	r1, [sp, #12]
 800a428:	428b      	cmp	r3, r1
 800a42a:	d80c      	bhi.n	800a446 <__multiply+0x9a>
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	dd03      	ble.n	800a438 <__multiply+0x8c>
 800a430:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a434:	2b00      	cmp	r3, #0
 800a436:	d055      	beq.n	800a4e4 <__multiply+0x138>
 800a438:	6106      	str	r6, [r0, #16]
 800a43a:	b005      	add	sp, #20
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	f843 2b04 	str.w	r2, [r3], #4
 800a444:	e7d9      	b.n	800a3fa <__multiply+0x4e>
 800a446:	f8b1 a000 	ldrh.w	sl, [r1]
 800a44a:	f1ba 0f00 	cmp.w	sl, #0
 800a44e:	d01f      	beq.n	800a490 <__multiply+0xe4>
 800a450:	46c4      	mov	ip, r8
 800a452:	46a1      	mov	r9, r4
 800a454:	2700      	movs	r7, #0
 800a456:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a45a:	f8d9 3000 	ldr.w	r3, [r9]
 800a45e:	fa1f fb82 	uxth.w	fp, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	fb0a 330b 	mla	r3, sl, fp, r3
 800a468:	443b      	add	r3, r7
 800a46a:	f8d9 7000 	ldr.w	r7, [r9]
 800a46e:	0c12      	lsrs	r2, r2, #16
 800a470:	0c3f      	lsrs	r7, r7, #16
 800a472:	fb0a 7202 	mla	r2, sl, r2, r7
 800a476:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a480:	4565      	cmp	r5, ip
 800a482:	f849 3b04 	str.w	r3, [r9], #4
 800a486:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a48a:	d8e4      	bhi.n	800a456 <__multiply+0xaa>
 800a48c:	9b01      	ldr	r3, [sp, #4]
 800a48e:	50e7      	str	r7, [r4, r3]
 800a490:	9b03      	ldr	r3, [sp, #12]
 800a492:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a496:	3104      	adds	r1, #4
 800a498:	f1b9 0f00 	cmp.w	r9, #0
 800a49c:	d020      	beq.n	800a4e0 <__multiply+0x134>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	4647      	mov	r7, r8
 800a4a2:	46a4      	mov	ip, r4
 800a4a4:	f04f 0a00 	mov.w	sl, #0
 800a4a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4b4:	4452      	add	r2, sl
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4bc:	f84c 3b04 	str.w	r3, [ip], #4
 800a4c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4cc:	fb09 330a 	mla	r3, r9, sl, r3
 800a4d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4d4:	42bd      	cmp	r5, r7
 800a4d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4da:	d8e5      	bhi.n	800a4a8 <__multiply+0xfc>
 800a4dc:	9a01      	ldr	r2, [sp, #4]
 800a4de:	50a3      	str	r3, [r4, r2]
 800a4e0:	3404      	adds	r4, #4
 800a4e2:	e79f      	b.n	800a424 <__multiply+0x78>
 800a4e4:	3e01      	subs	r6, #1
 800a4e6:	e7a1      	b.n	800a42c <__multiply+0x80>
 800a4e8:	0803360a 	.word	0x0803360a
 800a4ec:	08033692 	.word	0x08033692

0800a4f0 <__pow5mult>:
 800a4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	f012 0203 	ands.w	r2, r2, #3
 800a4fa:	4607      	mov	r7, r0
 800a4fc:	460e      	mov	r6, r1
 800a4fe:	d007      	beq.n	800a510 <__pow5mult+0x20>
 800a500:	4c25      	ldr	r4, [pc, #148]	@ (800a598 <__pow5mult+0xa8>)
 800a502:	3a01      	subs	r2, #1
 800a504:	2300      	movs	r3, #0
 800a506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a50a:	f7ff fe5d 	bl	800a1c8 <__multadd>
 800a50e:	4606      	mov	r6, r0
 800a510:	10ad      	asrs	r5, r5, #2
 800a512:	d03d      	beq.n	800a590 <__pow5mult+0xa0>
 800a514:	69fc      	ldr	r4, [r7, #28]
 800a516:	b97c      	cbnz	r4, 800a538 <__pow5mult+0x48>
 800a518:	2010      	movs	r0, #16
 800a51a:	f7fe f94b 	bl	80087b4 <malloc>
 800a51e:	4602      	mov	r2, r0
 800a520:	61f8      	str	r0, [r7, #28]
 800a522:	b928      	cbnz	r0, 800a530 <__pow5mult+0x40>
 800a524:	4b1d      	ldr	r3, [pc, #116]	@ (800a59c <__pow5mult+0xac>)
 800a526:	481e      	ldr	r0, [pc, #120]	@ (800a5a0 <__pow5mult+0xb0>)
 800a528:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a52c:	f000 fe52 	bl	800b1d4 <__assert_func>
 800a530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	60c4      	str	r4, [r0, #12]
 800a538:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a53c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a540:	b94c      	cbnz	r4, 800a556 <__pow5mult+0x66>
 800a542:	f240 2171 	movw	r1, #625	@ 0x271
 800a546:	4638      	mov	r0, r7
 800a548:	f7ff ff1a 	bl	800a380 <__i2b>
 800a54c:	2300      	movs	r3, #0
 800a54e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a552:	4604      	mov	r4, r0
 800a554:	6003      	str	r3, [r0, #0]
 800a556:	f04f 0900 	mov.w	r9, #0
 800a55a:	07eb      	lsls	r3, r5, #31
 800a55c:	d50a      	bpl.n	800a574 <__pow5mult+0x84>
 800a55e:	4631      	mov	r1, r6
 800a560:	4622      	mov	r2, r4
 800a562:	4638      	mov	r0, r7
 800a564:	f7ff ff22 	bl	800a3ac <__multiply>
 800a568:	4631      	mov	r1, r6
 800a56a:	4680      	mov	r8, r0
 800a56c:	4638      	mov	r0, r7
 800a56e:	f7ff fe09 	bl	800a184 <_Bfree>
 800a572:	4646      	mov	r6, r8
 800a574:	106d      	asrs	r5, r5, #1
 800a576:	d00b      	beq.n	800a590 <__pow5mult+0xa0>
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	b938      	cbnz	r0, 800a58c <__pow5mult+0x9c>
 800a57c:	4622      	mov	r2, r4
 800a57e:	4621      	mov	r1, r4
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff ff13 	bl	800a3ac <__multiply>
 800a586:	6020      	str	r0, [r4, #0]
 800a588:	f8c0 9000 	str.w	r9, [r0]
 800a58c:	4604      	mov	r4, r0
 800a58e:	e7e4      	b.n	800a55a <__pow5mult+0x6a>
 800a590:	4630      	mov	r0, r6
 800a592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a596:	bf00      	nop
 800a598:	080338b4 	.word	0x080338b4
 800a59c:	0803367b 	.word	0x0803367b
 800a5a0:	08033692 	.word	0x08033692

0800a5a4 <__lshift>:
 800a5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	6849      	ldr	r1, [r1, #4]
 800a5ac:	6923      	ldr	r3, [r4, #16]
 800a5ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	4607      	mov	r7, r0
 800a5b6:	4691      	mov	r9, r2
 800a5b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5bc:	f108 0601 	add.w	r6, r8, #1
 800a5c0:	42b3      	cmp	r3, r6
 800a5c2:	db0b      	blt.n	800a5dc <__lshift+0x38>
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	f7ff fd9d 	bl	800a104 <_Balloc>
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	b948      	cbnz	r0, 800a5e2 <__lshift+0x3e>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	4b28      	ldr	r3, [pc, #160]	@ (800a674 <__lshift+0xd0>)
 800a5d2:	4829      	ldr	r0, [pc, #164]	@ (800a678 <__lshift+0xd4>)
 800a5d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5d8:	f000 fdfc 	bl	800b1d4 <__assert_func>
 800a5dc:	3101      	adds	r1, #1
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	e7ee      	b.n	800a5c0 <__lshift+0x1c>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f100 0114 	add.w	r1, r0, #20
 800a5e8:	f100 0210 	add.w	r2, r0, #16
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	4553      	cmp	r3, sl
 800a5f0:	db33      	blt.n	800a65a <__lshift+0xb6>
 800a5f2:	6920      	ldr	r0, [r4, #16]
 800a5f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5f8:	f104 0314 	add.w	r3, r4, #20
 800a5fc:	f019 091f 	ands.w	r9, r9, #31
 800a600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a604:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a608:	d02b      	beq.n	800a662 <__lshift+0xbe>
 800a60a:	f1c9 0e20 	rsb	lr, r9, #32
 800a60e:	468a      	mov	sl, r1
 800a610:	2200      	movs	r2, #0
 800a612:	6818      	ldr	r0, [r3, #0]
 800a614:	fa00 f009 	lsl.w	r0, r0, r9
 800a618:	4310      	orrs	r0, r2
 800a61a:	f84a 0b04 	str.w	r0, [sl], #4
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	459c      	cmp	ip, r3
 800a624:	fa22 f20e 	lsr.w	r2, r2, lr
 800a628:	d8f3      	bhi.n	800a612 <__lshift+0x6e>
 800a62a:	ebac 0304 	sub.w	r3, ip, r4
 800a62e:	3b15      	subs	r3, #21
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	3304      	adds	r3, #4
 800a636:	f104 0015 	add.w	r0, r4, #21
 800a63a:	4560      	cmp	r0, ip
 800a63c:	bf88      	it	hi
 800a63e:	2304      	movhi	r3, #4
 800a640:	50ca      	str	r2, [r1, r3]
 800a642:	b10a      	cbz	r2, 800a648 <__lshift+0xa4>
 800a644:	f108 0602 	add.w	r6, r8, #2
 800a648:	3e01      	subs	r6, #1
 800a64a:	4638      	mov	r0, r7
 800a64c:	612e      	str	r6, [r5, #16]
 800a64e:	4621      	mov	r1, r4
 800a650:	f7ff fd98 	bl	800a184 <_Bfree>
 800a654:	4628      	mov	r0, r5
 800a656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a65e:	3301      	adds	r3, #1
 800a660:	e7c5      	b.n	800a5ee <__lshift+0x4a>
 800a662:	3904      	subs	r1, #4
 800a664:	f853 2b04 	ldr.w	r2, [r3], #4
 800a668:	f841 2f04 	str.w	r2, [r1, #4]!
 800a66c:	459c      	cmp	ip, r3
 800a66e:	d8f9      	bhi.n	800a664 <__lshift+0xc0>
 800a670:	e7ea      	b.n	800a648 <__lshift+0xa4>
 800a672:	bf00      	nop
 800a674:	0803360a 	.word	0x0803360a
 800a678:	08033692 	.word	0x08033692

0800a67c <__mcmp>:
 800a67c:	690a      	ldr	r2, [r1, #16]
 800a67e:	4603      	mov	r3, r0
 800a680:	6900      	ldr	r0, [r0, #16]
 800a682:	1a80      	subs	r0, r0, r2
 800a684:	b530      	push	{r4, r5, lr}
 800a686:	d10e      	bne.n	800a6a6 <__mcmp+0x2a>
 800a688:	3314      	adds	r3, #20
 800a68a:	3114      	adds	r1, #20
 800a68c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a690:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a694:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a698:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a69c:	4295      	cmp	r5, r2
 800a69e:	d003      	beq.n	800a6a8 <__mcmp+0x2c>
 800a6a0:	d205      	bcs.n	800a6ae <__mcmp+0x32>
 800a6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a6:	bd30      	pop	{r4, r5, pc}
 800a6a8:	42a3      	cmp	r3, r4
 800a6aa:	d3f3      	bcc.n	800a694 <__mcmp+0x18>
 800a6ac:	e7fb      	b.n	800a6a6 <__mcmp+0x2a>
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	e7f9      	b.n	800a6a6 <__mcmp+0x2a>
	...

0800a6b4 <__mdiff>:
 800a6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b8:	4689      	mov	r9, r1
 800a6ba:	4606      	mov	r6, r0
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4648      	mov	r0, r9
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	f7ff ffdb 	bl	800a67c <__mcmp>
 800a6c6:	1e05      	subs	r5, r0, #0
 800a6c8:	d112      	bne.n	800a6f0 <__mdiff+0x3c>
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	f7ff fd19 	bl	800a104 <_Balloc>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	b928      	cbnz	r0, 800a6e2 <__mdiff+0x2e>
 800a6d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d4 <__mdiff+0x120>)
 800a6d8:	f240 2137 	movw	r1, #567	@ 0x237
 800a6dc:	483e      	ldr	r0, [pc, #248]	@ (800a7d8 <__mdiff+0x124>)
 800a6de:	f000 fd79 	bl	800b1d4 <__assert_func>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	b003      	add	sp, #12
 800a6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f0:	bfbc      	itt	lt
 800a6f2:	464b      	movlt	r3, r9
 800a6f4:	46a1      	movlt	r9, r4
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a6fc:	bfba      	itte	lt
 800a6fe:	461c      	movlt	r4, r3
 800a700:	2501      	movlt	r5, #1
 800a702:	2500      	movge	r5, #0
 800a704:	f7ff fcfe 	bl	800a104 <_Balloc>
 800a708:	4602      	mov	r2, r0
 800a70a:	b918      	cbnz	r0, 800a714 <__mdiff+0x60>
 800a70c:	4b31      	ldr	r3, [pc, #196]	@ (800a7d4 <__mdiff+0x120>)
 800a70e:	f240 2145 	movw	r1, #581	@ 0x245
 800a712:	e7e3      	b.n	800a6dc <__mdiff+0x28>
 800a714:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a718:	6926      	ldr	r6, [r4, #16]
 800a71a:	60c5      	str	r5, [r0, #12]
 800a71c:	f109 0310 	add.w	r3, r9, #16
 800a720:	f109 0514 	add.w	r5, r9, #20
 800a724:	f104 0e14 	add.w	lr, r4, #20
 800a728:	f100 0b14 	add.w	fp, r0, #20
 800a72c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a730:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	46d9      	mov	r9, fp
 800a738:	f04f 0c00 	mov.w	ip, #0
 800a73c:	9b01      	ldr	r3, [sp, #4]
 800a73e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a742:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	fa1f f38a 	uxth.w	r3, sl
 800a74c:	4619      	mov	r1, r3
 800a74e:	b283      	uxth	r3, r0
 800a750:	1acb      	subs	r3, r1, r3
 800a752:	0c00      	lsrs	r0, r0, #16
 800a754:	4463      	add	r3, ip
 800a756:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a75a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a75e:	b29b      	uxth	r3, r3
 800a760:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a764:	4576      	cmp	r6, lr
 800a766:	f849 3b04 	str.w	r3, [r9], #4
 800a76a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a76e:	d8e5      	bhi.n	800a73c <__mdiff+0x88>
 800a770:	1b33      	subs	r3, r6, r4
 800a772:	3b15      	subs	r3, #21
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	3415      	adds	r4, #21
 800a77a:	3304      	adds	r3, #4
 800a77c:	42a6      	cmp	r6, r4
 800a77e:	bf38      	it	cc
 800a780:	2304      	movcc	r3, #4
 800a782:	441d      	add	r5, r3
 800a784:	445b      	add	r3, fp
 800a786:	461e      	mov	r6, r3
 800a788:	462c      	mov	r4, r5
 800a78a:	4544      	cmp	r4, r8
 800a78c:	d30e      	bcc.n	800a7ac <__mdiff+0xf8>
 800a78e:	f108 0103 	add.w	r1, r8, #3
 800a792:	1b49      	subs	r1, r1, r5
 800a794:	f021 0103 	bic.w	r1, r1, #3
 800a798:	3d03      	subs	r5, #3
 800a79a:	45a8      	cmp	r8, r5
 800a79c:	bf38      	it	cc
 800a79e:	2100      	movcc	r1, #0
 800a7a0:	440b      	add	r3, r1
 800a7a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7a6:	b191      	cbz	r1, 800a7ce <__mdiff+0x11a>
 800a7a8:	6117      	str	r7, [r2, #16]
 800a7aa:	e79d      	b.n	800a6e8 <__mdiff+0x34>
 800a7ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7b0:	46e6      	mov	lr, ip
 800a7b2:	0c08      	lsrs	r0, r1, #16
 800a7b4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7b8:	4471      	add	r1, lr
 800a7ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7be:	b289      	uxth	r1, r1
 800a7c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7c4:	f846 1b04 	str.w	r1, [r6], #4
 800a7c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7cc:	e7dd      	b.n	800a78a <__mdiff+0xd6>
 800a7ce:	3f01      	subs	r7, #1
 800a7d0:	e7e7      	b.n	800a7a2 <__mdiff+0xee>
 800a7d2:	bf00      	nop
 800a7d4:	0803360a 	.word	0x0803360a
 800a7d8:	08033692 	.word	0x08033692

0800a7dc <__ulp>:
 800a7dc:	b082      	sub	sp, #8
 800a7de:	ed8d 0b00 	vstr	d0, [sp]
 800a7e2:	9a01      	ldr	r2, [sp, #4]
 800a7e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a824 <__ulp+0x48>)
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dc08      	bgt.n	800a802 <__ulp+0x26>
 800a7f0:	425b      	negs	r3, r3
 800a7f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7fa:	da04      	bge.n	800a806 <__ulp+0x2a>
 800a7fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a800:	4113      	asrs	r3, r2
 800a802:	2200      	movs	r2, #0
 800a804:	e008      	b.n	800a818 <__ulp+0x3c>
 800a806:	f1a2 0314 	sub.w	r3, r2, #20
 800a80a:	2b1e      	cmp	r3, #30
 800a80c:	bfda      	itte	le
 800a80e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a812:	40da      	lsrle	r2, r3
 800a814:	2201      	movgt	r2, #1
 800a816:	2300      	movs	r3, #0
 800a818:	4619      	mov	r1, r3
 800a81a:	4610      	mov	r0, r2
 800a81c:	ec41 0b10 	vmov	d0, r0, r1
 800a820:	b002      	add	sp, #8
 800a822:	4770      	bx	lr
 800a824:	7ff00000 	.word	0x7ff00000

0800a828 <__b2d>:
 800a828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a82c:	6906      	ldr	r6, [r0, #16]
 800a82e:	f100 0814 	add.w	r8, r0, #20
 800a832:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a836:	1f37      	subs	r7, r6, #4
 800a838:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a83c:	4610      	mov	r0, r2
 800a83e:	f7ff fd53 	bl	800a2e8 <__hi0bits>
 800a842:	f1c0 0320 	rsb	r3, r0, #32
 800a846:	280a      	cmp	r0, #10
 800a848:	600b      	str	r3, [r1, #0]
 800a84a:	491b      	ldr	r1, [pc, #108]	@ (800a8b8 <__b2d+0x90>)
 800a84c:	dc15      	bgt.n	800a87a <__b2d+0x52>
 800a84e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a852:	fa22 f30c 	lsr.w	r3, r2, ip
 800a856:	45b8      	cmp	r8, r7
 800a858:	ea43 0501 	orr.w	r5, r3, r1
 800a85c:	bf34      	ite	cc
 800a85e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a862:	2300      	movcs	r3, #0
 800a864:	3015      	adds	r0, #21
 800a866:	fa02 f000 	lsl.w	r0, r2, r0
 800a86a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a86e:	4303      	orrs	r3, r0
 800a870:	461c      	mov	r4, r3
 800a872:	ec45 4b10 	vmov	d0, r4, r5
 800a876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87a:	45b8      	cmp	r8, r7
 800a87c:	bf3a      	itte	cc
 800a87e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a882:	f1a6 0708 	subcc.w	r7, r6, #8
 800a886:	2300      	movcs	r3, #0
 800a888:	380b      	subs	r0, #11
 800a88a:	d012      	beq.n	800a8b2 <__b2d+0x8a>
 800a88c:	f1c0 0120 	rsb	r1, r0, #32
 800a890:	fa23 f401 	lsr.w	r4, r3, r1
 800a894:	4082      	lsls	r2, r0
 800a896:	4322      	orrs	r2, r4
 800a898:	4547      	cmp	r7, r8
 800a89a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a89e:	bf8c      	ite	hi
 800a8a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a8a4:	2200      	movls	r2, #0
 800a8a6:	4083      	lsls	r3, r0
 800a8a8:	40ca      	lsrs	r2, r1
 800a8aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	e7de      	b.n	800a870 <__b2d+0x48>
 800a8b2:	ea42 0501 	orr.w	r5, r2, r1
 800a8b6:	e7db      	b.n	800a870 <__b2d+0x48>
 800a8b8:	3ff00000 	.word	0x3ff00000

0800a8bc <__d2b>:
 800a8bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	460f      	mov	r7, r1
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	ec59 8b10 	vmov	r8, r9, d0
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	f7ff fc1b 	bl	800a104 <_Balloc>
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	b930      	cbnz	r0, 800a8e0 <__d2b+0x24>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	4b23      	ldr	r3, [pc, #140]	@ (800a964 <__d2b+0xa8>)
 800a8d6:	4824      	ldr	r0, [pc, #144]	@ (800a968 <__d2b+0xac>)
 800a8d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8dc:	f000 fc7a 	bl	800b1d4 <__assert_func>
 800a8e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8e8:	b10d      	cbz	r5, 800a8ee <__d2b+0x32>
 800a8ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8f4:	d023      	beq.n	800a93e <__d2b+0x82>
 800a8f6:	4668      	mov	r0, sp
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	f7ff fd14 	bl	800a326 <__lo0bits>
 800a8fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a902:	b1d0      	cbz	r0, 800a93a <__d2b+0x7e>
 800a904:	f1c0 0320 	rsb	r3, r0, #32
 800a908:	fa02 f303 	lsl.w	r3, r2, r3
 800a90c:	430b      	orrs	r3, r1
 800a90e:	40c2      	lsrs	r2, r0
 800a910:	6163      	str	r3, [r4, #20]
 800a912:	9201      	str	r2, [sp, #4]
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	61a3      	str	r3, [r4, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	bf0c      	ite	eq
 800a91c:	2201      	moveq	r2, #1
 800a91e:	2202      	movne	r2, #2
 800a920:	6122      	str	r2, [r4, #16]
 800a922:	b1a5      	cbz	r5, 800a94e <__d2b+0x92>
 800a924:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a928:	4405      	add	r5, r0
 800a92a:	603d      	str	r5, [r7, #0]
 800a92c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a930:	6030      	str	r0, [r6, #0]
 800a932:	4620      	mov	r0, r4
 800a934:	b003      	add	sp, #12
 800a936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93a:	6161      	str	r1, [r4, #20]
 800a93c:	e7ea      	b.n	800a914 <__d2b+0x58>
 800a93e:	a801      	add	r0, sp, #4
 800a940:	f7ff fcf1 	bl	800a326 <__lo0bits>
 800a944:	9b01      	ldr	r3, [sp, #4]
 800a946:	6163      	str	r3, [r4, #20]
 800a948:	3020      	adds	r0, #32
 800a94a:	2201      	movs	r2, #1
 800a94c:	e7e8      	b.n	800a920 <__d2b+0x64>
 800a94e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a952:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a956:	6038      	str	r0, [r7, #0]
 800a958:	6918      	ldr	r0, [r3, #16]
 800a95a:	f7ff fcc5 	bl	800a2e8 <__hi0bits>
 800a95e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a962:	e7e5      	b.n	800a930 <__d2b+0x74>
 800a964:	0803360a 	.word	0x0803360a
 800a968:	08033692 	.word	0x08033692

0800a96c <__ratio>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	b085      	sub	sp, #20
 800a972:	e9cd 1000 	strd	r1, r0, [sp]
 800a976:	a902      	add	r1, sp, #8
 800a978:	f7ff ff56 	bl	800a828 <__b2d>
 800a97c:	9800      	ldr	r0, [sp, #0]
 800a97e:	a903      	add	r1, sp, #12
 800a980:	ec55 4b10 	vmov	r4, r5, d0
 800a984:	f7ff ff50 	bl	800a828 <__b2d>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	6919      	ldr	r1, [r3, #16]
 800a98c:	9b00      	ldr	r3, [sp, #0]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	1ac9      	subs	r1, r1, r3
 800a992:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a996:	1a9b      	subs	r3, r3, r2
 800a998:	ec5b ab10 	vmov	sl, fp, d0
 800a99c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	bfce      	itee	gt
 800a9a4:	462a      	movgt	r2, r5
 800a9a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9aa:	465a      	movle	r2, fp
 800a9ac:	462f      	mov	r7, r5
 800a9ae:	46d9      	mov	r9, fp
 800a9b0:	bfcc      	ite	gt
 800a9b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9b6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9ba:	464b      	mov	r3, r9
 800a9bc:	4652      	mov	r2, sl
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	f7f5 ff53 	bl	800086c <__aeabi_ddiv>
 800a9c6:	ec41 0b10 	vmov	d0, r0, r1
 800a9ca:	b005      	add	sp, #20
 800a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9d0 <__copybits>:
 800a9d0:	3901      	subs	r1, #1
 800a9d2:	b570      	push	{r4, r5, r6, lr}
 800a9d4:	1149      	asrs	r1, r1, #5
 800a9d6:	6914      	ldr	r4, [r2, #16]
 800a9d8:	3101      	adds	r1, #1
 800a9da:	f102 0314 	add.w	r3, r2, #20
 800a9de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9e6:	1f05      	subs	r5, r0, #4
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	d30c      	bcc.n	800aa06 <__copybits+0x36>
 800a9ec:	1aa3      	subs	r3, r4, r2
 800a9ee:	3b11      	subs	r3, #17
 800a9f0:	f023 0303 	bic.w	r3, r3, #3
 800a9f4:	3211      	adds	r2, #17
 800a9f6:	42a2      	cmp	r2, r4
 800a9f8:	bf88      	it	hi
 800a9fa:	2300      	movhi	r3, #0
 800a9fc:	4418      	add	r0, r3
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4288      	cmp	r0, r1
 800aa02:	d305      	bcc.n	800aa10 <__copybits+0x40>
 800aa04:	bd70      	pop	{r4, r5, r6, pc}
 800aa06:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa0a:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa0e:	e7eb      	b.n	800a9e8 <__copybits+0x18>
 800aa10:	f840 3b04 	str.w	r3, [r0], #4
 800aa14:	e7f4      	b.n	800aa00 <__copybits+0x30>

0800aa16 <__any_on>:
 800aa16:	f100 0214 	add.w	r2, r0, #20
 800aa1a:	6900      	ldr	r0, [r0, #16]
 800aa1c:	114b      	asrs	r3, r1, #5
 800aa1e:	4298      	cmp	r0, r3
 800aa20:	b510      	push	{r4, lr}
 800aa22:	db11      	blt.n	800aa48 <__any_on+0x32>
 800aa24:	dd0a      	ble.n	800aa3c <__any_on+0x26>
 800aa26:	f011 011f 	ands.w	r1, r1, #31
 800aa2a:	d007      	beq.n	800aa3c <__any_on+0x26>
 800aa2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa30:	fa24 f001 	lsr.w	r0, r4, r1
 800aa34:	fa00 f101 	lsl.w	r1, r0, r1
 800aa38:	428c      	cmp	r4, r1
 800aa3a:	d10b      	bne.n	800aa54 <__any_on+0x3e>
 800aa3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d803      	bhi.n	800aa4c <__any_on+0x36>
 800aa44:	2000      	movs	r0, #0
 800aa46:	bd10      	pop	{r4, pc}
 800aa48:	4603      	mov	r3, r0
 800aa4a:	e7f7      	b.n	800aa3c <__any_on+0x26>
 800aa4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa50:	2900      	cmp	r1, #0
 800aa52:	d0f5      	beq.n	800aa40 <__any_on+0x2a>
 800aa54:	2001      	movs	r0, #1
 800aa56:	e7f6      	b.n	800aa46 <__any_on+0x30>

0800aa58 <_malloc_usable_size_r>:
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f18      	subs	r0, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbc      	itt	lt
 800aa62:	580b      	ldrlt	r3, [r1, r0]
 800aa64:	18c0      	addlt	r0, r0, r3
 800aa66:	4770      	bx	lr

0800aa68 <__ascii_wctomb>:
 800aa68:	4603      	mov	r3, r0
 800aa6a:	4608      	mov	r0, r1
 800aa6c:	b141      	cbz	r1, 800aa80 <__ascii_wctomb+0x18>
 800aa6e:	2aff      	cmp	r2, #255	@ 0xff
 800aa70:	d904      	bls.n	800aa7c <__ascii_wctomb+0x14>
 800aa72:	228a      	movs	r2, #138	@ 0x8a
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	4770      	bx	lr
 800aa7c:	700a      	strb	r2, [r1, #0]
 800aa7e:	2001      	movs	r0, #1
 800aa80:	4770      	bx	lr

0800aa82 <__ssputs_r>:
 800aa82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa86:	688e      	ldr	r6, [r1, #8]
 800aa88:	461f      	mov	r7, r3
 800aa8a:	42be      	cmp	r6, r7
 800aa8c:	680b      	ldr	r3, [r1, #0]
 800aa8e:	4682      	mov	sl, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	4690      	mov	r8, r2
 800aa94:	d82d      	bhi.n	800aaf2 <__ssputs_r+0x70>
 800aa96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa9a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa9e:	d026      	beq.n	800aaee <__ssputs_r+0x6c>
 800aaa0:	6965      	ldr	r5, [r4, #20]
 800aaa2:	6909      	ldr	r1, [r1, #16]
 800aaa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa8:	eba3 0901 	sub.w	r9, r3, r1
 800aaac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aab0:	1c7b      	adds	r3, r7, #1
 800aab2:	444b      	add	r3, r9
 800aab4:	106d      	asrs	r5, r5, #1
 800aab6:	429d      	cmp	r5, r3
 800aab8:	bf38      	it	cc
 800aaba:	461d      	movcc	r5, r3
 800aabc:	0553      	lsls	r3, r2, #21
 800aabe:	d527      	bpl.n	800ab10 <__ssputs_r+0x8e>
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7fd fea9 	bl	8008818 <_malloc_r>
 800aac6:	4606      	mov	r6, r0
 800aac8:	b360      	cbz	r0, 800ab24 <__ssputs_r+0xa2>
 800aaca:	6921      	ldr	r1, [r4, #16]
 800aacc:	464a      	mov	r2, r9
 800aace:	f7fe ff6c 	bl	80099aa <memcpy>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	6126      	str	r6, [r4, #16]
 800aae0:	6165      	str	r5, [r4, #20]
 800aae2:	444e      	add	r6, r9
 800aae4:	eba5 0509 	sub.w	r5, r5, r9
 800aae8:	6026      	str	r6, [r4, #0]
 800aaea:	60a5      	str	r5, [r4, #8]
 800aaec:	463e      	mov	r6, r7
 800aaee:	42be      	cmp	r6, r7
 800aaf0:	d900      	bls.n	800aaf4 <__ssputs_r+0x72>
 800aaf2:	463e      	mov	r6, r7
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	4641      	mov	r1, r8
 800aafa:	f000 fb51 	bl	800b1a0 <memmove>
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	1b9b      	subs	r3, r3, r6
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	4433      	add	r3, r6
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab10:	462a      	mov	r2, r5
 800ab12:	f7fd ff15 	bl	8008940 <_realloc_r>
 800ab16:	4606      	mov	r6, r0
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	d1e0      	bne.n	800aade <__ssputs_r+0x5c>
 800ab1c:	6921      	ldr	r1, [r4, #16]
 800ab1e:	4650      	mov	r0, sl
 800ab20:	f7fe ff5a 	bl	80099d8 <_free_r>
 800ab24:	230c      	movs	r3, #12
 800ab26:	f8ca 3000 	str.w	r3, [sl]
 800ab2a:	89a3      	ldrh	r3, [r4, #12]
 800ab2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab30:	81a3      	strh	r3, [r4, #12]
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	e7e9      	b.n	800ab0c <__ssputs_r+0x8a>

0800ab38 <_svfiprintf_r>:
 800ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4698      	mov	r8, r3
 800ab3e:	898b      	ldrh	r3, [r1, #12]
 800ab40:	061b      	lsls	r3, r3, #24
 800ab42:	b09d      	sub	sp, #116	@ 0x74
 800ab44:	4607      	mov	r7, r0
 800ab46:	460d      	mov	r5, r1
 800ab48:	4614      	mov	r4, r2
 800ab4a:	d510      	bpl.n	800ab6e <_svfiprintf_r+0x36>
 800ab4c:	690b      	ldr	r3, [r1, #16]
 800ab4e:	b973      	cbnz	r3, 800ab6e <_svfiprintf_r+0x36>
 800ab50:	2140      	movs	r1, #64	@ 0x40
 800ab52:	f7fd fe61 	bl	8008818 <_malloc_r>
 800ab56:	6028      	str	r0, [r5, #0]
 800ab58:	6128      	str	r0, [r5, #16]
 800ab5a:	b930      	cbnz	r0, 800ab6a <_svfiprintf_r+0x32>
 800ab5c:	230c      	movs	r3, #12
 800ab5e:	603b      	str	r3, [r7, #0]
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b01d      	add	sp, #116	@ 0x74
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	2340      	movs	r3, #64	@ 0x40
 800ab6c:	616b      	str	r3, [r5, #20]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab72:	2320      	movs	r3, #32
 800ab74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab78:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab7c:	2330      	movs	r3, #48	@ 0x30
 800ab7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad1c <_svfiprintf_r+0x1e4>
 800ab82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab86:	f04f 0901 	mov.w	r9, #1
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	469a      	mov	sl, r3
 800ab8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab92:	b10a      	cbz	r2, 800ab98 <_svfiprintf_r+0x60>
 800ab94:	2a25      	cmp	r2, #37	@ 0x25
 800ab96:	d1f9      	bne.n	800ab8c <_svfiprintf_r+0x54>
 800ab98:	ebba 0b04 	subs.w	fp, sl, r4
 800ab9c:	d00b      	beq.n	800abb6 <_svfiprintf_r+0x7e>
 800ab9e:	465b      	mov	r3, fp
 800aba0:	4622      	mov	r2, r4
 800aba2:	4629      	mov	r1, r5
 800aba4:	4638      	mov	r0, r7
 800aba6:	f7ff ff6c 	bl	800aa82 <__ssputs_r>
 800abaa:	3001      	adds	r0, #1
 800abac:	f000 80a7 	beq.w	800acfe <_svfiprintf_r+0x1c6>
 800abb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb2:	445a      	add	r2, fp
 800abb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800abb6:	f89a 3000 	ldrb.w	r3, [sl]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	f000 809f 	beq.w	800acfe <_svfiprintf_r+0x1c6>
 800abc0:	2300      	movs	r3, #0
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295
 800abc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abca:	f10a 0a01 	add.w	sl, sl, #1
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	9307      	str	r3, [sp, #28]
 800abd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abd6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd8:	4654      	mov	r4, sl
 800abda:	2205      	movs	r2, #5
 800abdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe0:	484e      	ldr	r0, [pc, #312]	@ (800ad1c <_svfiprintf_r+0x1e4>)
 800abe2:	f7f5 fb0d 	bl	8000200 <memchr>
 800abe6:	9a04      	ldr	r2, [sp, #16]
 800abe8:	b9d8      	cbnz	r0, 800ac22 <_svfiprintf_r+0xea>
 800abea:	06d0      	lsls	r0, r2, #27
 800abec:	bf44      	itt	mi
 800abee:	2320      	movmi	r3, #32
 800abf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf4:	0711      	lsls	r1, r2, #28
 800abf6:	bf44      	itt	mi
 800abf8:	232b      	movmi	r3, #43	@ 0x2b
 800abfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ac02:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac04:	d015      	beq.n	800ac32 <_svfiprintf_r+0xfa>
 800ac06:	9a07      	ldr	r2, [sp, #28]
 800ac08:	4654      	mov	r4, sl
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f04f 0c0a 	mov.w	ip, #10
 800ac10:	4621      	mov	r1, r4
 800ac12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac16:	3b30      	subs	r3, #48	@ 0x30
 800ac18:	2b09      	cmp	r3, #9
 800ac1a:	d94b      	bls.n	800acb4 <_svfiprintf_r+0x17c>
 800ac1c:	b1b0      	cbz	r0, 800ac4c <_svfiprintf_r+0x114>
 800ac1e:	9207      	str	r2, [sp, #28]
 800ac20:	e014      	b.n	800ac4c <_svfiprintf_r+0x114>
 800ac22:	eba0 0308 	sub.w	r3, r0, r8
 800ac26:	fa09 f303 	lsl.w	r3, r9, r3
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	46a2      	mov	sl, r4
 800ac30:	e7d2      	b.n	800abd8 <_svfiprintf_r+0xa0>
 800ac32:	9b03      	ldr	r3, [sp, #12]
 800ac34:	1d19      	adds	r1, r3, #4
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	9103      	str	r1, [sp, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bfbb      	ittet	lt
 800ac3e:	425b      	neglt	r3, r3
 800ac40:	f042 0202 	orrlt.w	r2, r2, #2
 800ac44:	9307      	strge	r3, [sp, #28]
 800ac46:	9307      	strlt	r3, [sp, #28]
 800ac48:	bfb8      	it	lt
 800ac4a:	9204      	strlt	r2, [sp, #16]
 800ac4c:	7823      	ldrb	r3, [r4, #0]
 800ac4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac50:	d10a      	bne.n	800ac68 <_svfiprintf_r+0x130>
 800ac52:	7863      	ldrb	r3, [r4, #1]
 800ac54:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac56:	d132      	bne.n	800acbe <_svfiprintf_r+0x186>
 800ac58:	9b03      	ldr	r3, [sp, #12]
 800ac5a:	1d1a      	adds	r2, r3, #4
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	9203      	str	r2, [sp, #12]
 800ac60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac64:	3402      	adds	r4, #2
 800ac66:	9305      	str	r3, [sp, #20]
 800ac68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad2c <_svfiprintf_r+0x1f4>
 800ac6c:	7821      	ldrb	r1, [r4, #0]
 800ac6e:	2203      	movs	r2, #3
 800ac70:	4650      	mov	r0, sl
 800ac72:	f7f5 fac5 	bl	8000200 <memchr>
 800ac76:	b138      	cbz	r0, 800ac88 <_svfiprintf_r+0x150>
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	eba0 000a 	sub.w	r0, r0, sl
 800ac7e:	2240      	movs	r2, #64	@ 0x40
 800ac80:	4082      	lsls	r2, r0
 800ac82:	4313      	orrs	r3, r2
 800ac84:	3401      	adds	r4, #1
 800ac86:	9304      	str	r3, [sp, #16]
 800ac88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac8c:	4824      	ldr	r0, [pc, #144]	@ (800ad20 <_svfiprintf_r+0x1e8>)
 800ac8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac92:	2206      	movs	r2, #6
 800ac94:	f7f5 fab4 	bl	8000200 <memchr>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d036      	beq.n	800ad0a <_svfiprintf_r+0x1d2>
 800ac9c:	4b21      	ldr	r3, [pc, #132]	@ (800ad24 <_svfiprintf_r+0x1ec>)
 800ac9e:	bb1b      	cbnz	r3, 800ace8 <_svfiprintf_r+0x1b0>
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	3307      	adds	r3, #7
 800aca4:	f023 0307 	bic.w	r3, r3, #7
 800aca8:	3308      	adds	r3, #8
 800acaa:	9303      	str	r3, [sp, #12]
 800acac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acae:	4433      	add	r3, r6
 800acb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800acb2:	e76a      	b.n	800ab8a <_svfiprintf_r+0x52>
 800acb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb8:	460c      	mov	r4, r1
 800acba:	2001      	movs	r0, #1
 800acbc:	e7a8      	b.n	800ac10 <_svfiprintf_r+0xd8>
 800acbe:	2300      	movs	r3, #0
 800acc0:	3401      	adds	r4, #1
 800acc2:	9305      	str	r3, [sp, #20]
 800acc4:	4619      	mov	r1, r3
 800acc6:	f04f 0c0a 	mov.w	ip, #10
 800acca:	4620      	mov	r0, r4
 800accc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acd0:	3a30      	subs	r2, #48	@ 0x30
 800acd2:	2a09      	cmp	r2, #9
 800acd4:	d903      	bls.n	800acde <_svfiprintf_r+0x1a6>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d0c6      	beq.n	800ac68 <_svfiprintf_r+0x130>
 800acda:	9105      	str	r1, [sp, #20]
 800acdc:	e7c4      	b.n	800ac68 <_svfiprintf_r+0x130>
 800acde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ace2:	4604      	mov	r4, r0
 800ace4:	2301      	movs	r3, #1
 800ace6:	e7f0      	b.n	800acca <_svfiprintf_r+0x192>
 800ace8:	ab03      	add	r3, sp, #12
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	462a      	mov	r2, r5
 800acee:	4b0e      	ldr	r3, [pc, #56]	@ (800ad28 <_svfiprintf_r+0x1f0>)
 800acf0:	a904      	add	r1, sp, #16
 800acf2:	4638      	mov	r0, r7
 800acf4:	f3af 8000 	nop.w
 800acf8:	1c42      	adds	r2, r0, #1
 800acfa:	4606      	mov	r6, r0
 800acfc:	d1d6      	bne.n	800acac <_svfiprintf_r+0x174>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	065b      	lsls	r3, r3, #25
 800ad02:	f53f af2d 	bmi.w	800ab60 <_svfiprintf_r+0x28>
 800ad06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad08:	e72c      	b.n	800ab64 <_svfiprintf_r+0x2c>
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <_svfiprintf_r+0x1f0>)
 800ad12:	a904      	add	r1, sp, #16
 800ad14:	4638      	mov	r0, r7
 800ad16:	f000 f879 	bl	800ae0c <_printf_i>
 800ad1a:	e7ed      	b.n	800acf8 <_svfiprintf_r+0x1c0>
 800ad1c:	080336eb 	.word	0x080336eb
 800ad20:	080336f5 	.word	0x080336f5
 800ad24:	00000000 	.word	0x00000000
 800ad28:	0800aa83 	.word	0x0800aa83
 800ad2c:	080336f1 	.word	0x080336f1

0800ad30 <_printf_common>:
 800ad30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad34:	4616      	mov	r6, r2
 800ad36:	4698      	mov	r8, r3
 800ad38:	688a      	ldr	r2, [r1, #8]
 800ad3a:	690b      	ldr	r3, [r1, #16]
 800ad3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad40:	4293      	cmp	r3, r2
 800ad42:	bfb8      	it	lt
 800ad44:	4613      	movlt	r3, r2
 800ad46:	6033      	str	r3, [r6, #0]
 800ad48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad4c:	4607      	mov	r7, r0
 800ad4e:	460c      	mov	r4, r1
 800ad50:	b10a      	cbz	r2, 800ad56 <_printf_common+0x26>
 800ad52:	3301      	adds	r3, #1
 800ad54:	6033      	str	r3, [r6, #0]
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	0699      	lsls	r1, r3, #26
 800ad5a:	bf42      	ittt	mi
 800ad5c:	6833      	ldrmi	r3, [r6, #0]
 800ad5e:	3302      	addmi	r3, #2
 800ad60:	6033      	strmi	r3, [r6, #0]
 800ad62:	6825      	ldr	r5, [r4, #0]
 800ad64:	f015 0506 	ands.w	r5, r5, #6
 800ad68:	d106      	bne.n	800ad78 <_printf_common+0x48>
 800ad6a:	f104 0a19 	add.w	sl, r4, #25
 800ad6e:	68e3      	ldr	r3, [r4, #12]
 800ad70:	6832      	ldr	r2, [r6, #0]
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	42ab      	cmp	r3, r5
 800ad76:	dc26      	bgt.n	800adc6 <_printf_common+0x96>
 800ad78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad7c:	6822      	ldr	r2, [r4, #0]
 800ad7e:	3b00      	subs	r3, #0
 800ad80:	bf18      	it	ne
 800ad82:	2301      	movne	r3, #1
 800ad84:	0692      	lsls	r2, r2, #26
 800ad86:	d42b      	bmi.n	800ade0 <_printf_common+0xb0>
 800ad88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad8c:	4641      	mov	r1, r8
 800ad8e:	4638      	mov	r0, r7
 800ad90:	47c8      	blx	r9
 800ad92:	3001      	adds	r0, #1
 800ad94:	d01e      	beq.n	800add4 <_printf_common+0xa4>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	f003 0306 	and.w	r3, r3, #6
 800ad9e:	2b04      	cmp	r3, #4
 800ada0:	bf02      	ittt	eq
 800ada2:	68e5      	ldreq	r5, [r4, #12]
 800ada4:	6833      	ldreq	r3, [r6, #0]
 800ada6:	1aed      	subeq	r5, r5, r3
 800ada8:	68a3      	ldr	r3, [r4, #8]
 800adaa:	bf0c      	ite	eq
 800adac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800adb0:	2500      	movne	r5, #0
 800adb2:	4293      	cmp	r3, r2
 800adb4:	bfc4      	itt	gt
 800adb6:	1a9b      	subgt	r3, r3, r2
 800adb8:	18ed      	addgt	r5, r5, r3
 800adba:	2600      	movs	r6, #0
 800adbc:	341a      	adds	r4, #26
 800adbe:	42b5      	cmp	r5, r6
 800adc0:	d11a      	bne.n	800adf8 <_printf_common+0xc8>
 800adc2:	2000      	movs	r0, #0
 800adc4:	e008      	b.n	800add8 <_printf_common+0xa8>
 800adc6:	2301      	movs	r3, #1
 800adc8:	4652      	mov	r2, sl
 800adca:	4641      	mov	r1, r8
 800adcc:	4638      	mov	r0, r7
 800adce:	47c8      	blx	r9
 800add0:	3001      	adds	r0, #1
 800add2:	d103      	bne.n	800addc <_printf_common+0xac>
 800add4:	f04f 30ff 	mov.w	r0, #4294967295
 800add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800addc:	3501      	adds	r5, #1
 800adde:	e7c6      	b.n	800ad6e <_printf_common+0x3e>
 800ade0:	18e1      	adds	r1, r4, r3
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	2030      	movs	r0, #48	@ 0x30
 800ade6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800adea:	4422      	add	r2, r4
 800adec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800adf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800adf4:	3302      	adds	r3, #2
 800adf6:	e7c7      	b.n	800ad88 <_printf_common+0x58>
 800adf8:	2301      	movs	r3, #1
 800adfa:	4622      	mov	r2, r4
 800adfc:	4641      	mov	r1, r8
 800adfe:	4638      	mov	r0, r7
 800ae00:	47c8      	blx	r9
 800ae02:	3001      	adds	r0, #1
 800ae04:	d0e6      	beq.n	800add4 <_printf_common+0xa4>
 800ae06:	3601      	adds	r6, #1
 800ae08:	e7d9      	b.n	800adbe <_printf_common+0x8e>
	...

0800ae0c <_printf_i>:
 800ae0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae10:	7e0f      	ldrb	r7, [r1, #24]
 800ae12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae14:	2f78      	cmp	r7, #120	@ 0x78
 800ae16:	4691      	mov	r9, r2
 800ae18:	4680      	mov	r8, r0
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	469a      	mov	sl, r3
 800ae1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae22:	d807      	bhi.n	800ae34 <_printf_i+0x28>
 800ae24:	2f62      	cmp	r7, #98	@ 0x62
 800ae26:	d80a      	bhi.n	800ae3e <_printf_i+0x32>
 800ae28:	2f00      	cmp	r7, #0
 800ae2a:	f000 80d1 	beq.w	800afd0 <_printf_i+0x1c4>
 800ae2e:	2f58      	cmp	r7, #88	@ 0x58
 800ae30:	f000 80b8 	beq.w	800afa4 <_printf_i+0x198>
 800ae34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae3c:	e03a      	b.n	800aeb4 <_printf_i+0xa8>
 800ae3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae42:	2b15      	cmp	r3, #21
 800ae44:	d8f6      	bhi.n	800ae34 <_printf_i+0x28>
 800ae46:	a101      	add	r1, pc, #4	@ (adr r1, 800ae4c <_printf_i+0x40>)
 800ae48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae4c:	0800aea5 	.word	0x0800aea5
 800ae50:	0800aeb9 	.word	0x0800aeb9
 800ae54:	0800ae35 	.word	0x0800ae35
 800ae58:	0800ae35 	.word	0x0800ae35
 800ae5c:	0800ae35 	.word	0x0800ae35
 800ae60:	0800ae35 	.word	0x0800ae35
 800ae64:	0800aeb9 	.word	0x0800aeb9
 800ae68:	0800ae35 	.word	0x0800ae35
 800ae6c:	0800ae35 	.word	0x0800ae35
 800ae70:	0800ae35 	.word	0x0800ae35
 800ae74:	0800ae35 	.word	0x0800ae35
 800ae78:	0800afb7 	.word	0x0800afb7
 800ae7c:	0800aee3 	.word	0x0800aee3
 800ae80:	0800af71 	.word	0x0800af71
 800ae84:	0800ae35 	.word	0x0800ae35
 800ae88:	0800ae35 	.word	0x0800ae35
 800ae8c:	0800afd9 	.word	0x0800afd9
 800ae90:	0800ae35 	.word	0x0800ae35
 800ae94:	0800aee3 	.word	0x0800aee3
 800ae98:	0800ae35 	.word	0x0800ae35
 800ae9c:	0800ae35 	.word	0x0800ae35
 800aea0:	0800af79 	.word	0x0800af79
 800aea4:	6833      	ldr	r3, [r6, #0]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	6032      	str	r2, [r6, #0]
 800aeac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aeb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e09c      	b.n	800aff2 <_printf_i+0x1e6>
 800aeb8:	6833      	ldr	r3, [r6, #0]
 800aeba:	6820      	ldr	r0, [r4, #0]
 800aebc:	1d19      	adds	r1, r3, #4
 800aebe:	6031      	str	r1, [r6, #0]
 800aec0:	0606      	lsls	r6, r0, #24
 800aec2:	d501      	bpl.n	800aec8 <_printf_i+0xbc>
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	e003      	b.n	800aed0 <_printf_i+0xc4>
 800aec8:	0645      	lsls	r5, r0, #25
 800aeca:	d5fb      	bpl.n	800aec4 <_printf_i+0xb8>
 800aecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	da03      	bge.n	800aedc <_printf_i+0xd0>
 800aed4:	232d      	movs	r3, #45	@ 0x2d
 800aed6:	426d      	negs	r5, r5
 800aed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aedc:	4858      	ldr	r0, [pc, #352]	@ (800b040 <_printf_i+0x234>)
 800aede:	230a      	movs	r3, #10
 800aee0:	e011      	b.n	800af06 <_printf_i+0xfa>
 800aee2:	6821      	ldr	r1, [r4, #0]
 800aee4:	6833      	ldr	r3, [r6, #0]
 800aee6:	0608      	lsls	r0, r1, #24
 800aee8:	f853 5b04 	ldr.w	r5, [r3], #4
 800aeec:	d402      	bmi.n	800aef4 <_printf_i+0xe8>
 800aeee:	0649      	lsls	r1, r1, #25
 800aef0:	bf48      	it	mi
 800aef2:	b2ad      	uxthmi	r5, r5
 800aef4:	2f6f      	cmp	r7, #111	@ 0x6f
 800aef6:	4852      	ldr	r0, [pc, #328]	@ (800b040 <_printf_i+0x234>)
 800aef8:	6033      	str	r3, [r6, #0]
 800aefa:	bf14      	ite	ne
 800aefc:	230a      	movne	r3, #10
 800aefe:	2308      	moveq	r3, #8
 800af00:	2100      	movs	r1, #0
 800af02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af06:	6866      	ldr	r6, [r4, #4]
 800af08:	60a6      	str	r6, [r4, #8]
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	db05      	blt.n	800af1a <_printf_i+0x10e>
 800af0e:	6821      	ldr	r1, [r4, #0]
 800af10:	432e      	orrs	r6, r5
 800af12:	f021 0104 	bic.w	r1, r1, #4
 800af16:	6021      	str	r1, [r4, #0]
 800af18:	d04b      	beq.n	800afb2 <_printf_i+0x1a6>
 800af1a:	4616      	mov	r6, r2
 800af1c:	fbb5 f1f3 	udiv	r1, r5, r3
 800af20:	fb03 5711 	mls	r7, r3, r1, r5
 800af24:	5dc7      	ldrb	r7, [r0, r7]
 800af26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af2a:	462f      	mov	r7, r5
 800af2c:	42bb      	cmp	r3, r7
 800af2e:	460d      	mov	r5, r1
 800af30:	d9f4      	bls.n	800af1c <_printf_i+0x110>
 800af32:	2b08      	cmp	r3, #8
 800af34:	d10b      	bne.n	800af4e <_printf_i+0x142>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	07df      	lsls	r7, r3, #31
 800af3a:	d508      	bpl.n	800af4e <_printf_i+0x142>
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	6861      	ldr	r1, [r4, #4]
 800af40:	4299      	cmp	r1, r3
 800af42:	bfde      	ittt	le
 800af44:	2330      	movle	r3, #48	@ 0x30
 800af46:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af4e:	1b92      	subs	r2, r2, r6
 800af50:	6122      	str	r2, [r4, #16]
 800af52:	f8cd a000 	str.w	sl, [sp]
 800af56:	464b      	mov	r3, r9
 800af58:	aa03      	add	r2, sp, #12
 800af5a:	4621      	mov	r1, r4
 800af5c:	4640      	mov	r0, r8
 800af5e:	f7ff fee7 	bl	800ad30 <_printf_common>
 800af62:	3001      	adds	r0, #1
 800af64:	d14a      	bne.n	800affc <_printf_i+0x1f0>
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	b004      	add	sp, #16
 800af6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af70:	6823      	ldr	r3, [r4, #0]
 800af72:	f043 0320 	orr.w	r3, r3, #32
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	4832      	ldr	r0, [pc, #200]	@ (800b044 <_printf_i+0x238>)
 800af7a:	2778      	movs	r7, #120	@ 0x78
 800af7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af80:	6823      	ldr	r3, [r4, #0]
 800af82:	6831      	ldr	r1, [r6, #0]
 800af84:	061f      	lsls	r7, r3, #24
 800af86:	f851 5b04 	ldr.w	r5, [r1], #4
 800af8a:	d402      	bmi.n	800af92 <_printf_i+0x186>
 800af8c:	065f      	lsls	r7, r3, #25
 800af8e:	bf48      	it	mi
 800af90:	b2ad      	uxthmi	r5, r5
 800af92:	6031      	str	r1, [r6, #0]
 800af94:	07d9      	lsls	r1, r3, #31
 800af96:	bf44      	itt	mi
 800af98:	f043 0320 	orrmi.w	r3, r3, #32
 800af9c:	6023      	strmi	r3, [r4, #0]
 800af9e:	b11d      	cbz	r5, 800afa8 <_printf_i+0x19c>
 800afa0:	2310      	movs	r3, #16
 800afa2:	e7ad      	b.n	800af00 <_printf_i+0xf4>
 800afa4:	4826      	ldr	r0, [pc, #152]	@ (800b040 <_printf_i+0x234>)
 800afa6:	e7e9      	b.n	800af7c <_printf_i+0x170>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	f023 0320 	bic.w	r3, r3, #32
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	e7f6      	b.n	800afa0 <_printf_i+0x194>
 800afb2:	4616      	mov	r6, r2
 800afb4:	e7bd      	b.n	800af32 <_printf_i+0x126>
 800afb6:	6833      	ldr	r3, [r6, #0]
 800afb8:	6825      	ldr	r5, [r4, #0]
 800afba:	6961      	ldr	r1, [r4, #20]
 800afbc:	1d18      	adds	r0, r3, #4
 800afbe:	6030      	str	r0, [r6, #0]
 800afc0:	062e      	lsls	r6, r5, #24
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	d501      	bpl.n	800afca <_printf_i+0x1be>
 800afc6:	6019      	str	r1, [r3, #0]
 800afc8:	e002      	b.n	800afd0 <_printf_i+0x1c4>
 800afca:	0668      	lsls	r0, r5, #25
 800afcc:	d5fb      	bpl.n	800afc6 <_printf_i+0x1ba>
 800afce:	8019      	strh	r1, [r3, #0]
 800afd0:	2300      	movs	r3, #0
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	4616      	mov	r6, r2
 800afd6:	e7bc      	b.n	800af52 <_printf_i+0x146>
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	1d1a      	adds	r2, r3, #4
 800afdc:	6032      	str	r2, [r6, #0]
 800afde:	681e      	ldr	r6, [r3, #0]
 800afe0:	6862      	ldr	r2, [r4, #4]
 800afe2:	2100      	movs	r1, #0
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7f5 f90b 	bl	8000200 <memchr>
 800afea:	b108      	cbz	r0, 800aff0 <_printf_i+0x1e4>
 800afec:	1b80      	subs	r0, r0, r6
 800afee:	6060      	str	r0, [r4, #4]
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	6123      	str	r3, [r4, #16]
 800aff4:	2300      	movs	r3, #0
 800aff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800affa:	e7aa      	b.n	800af52 <_printf_i+0x146>
 800affc:	6923      	ldr	r3, [r4, #16]
 800affe:	4632      	mov	r2, r6
 800b000:	4649      	mov	r1, r9
 800b002:	4640      	mov	r0, r8
 800b004:	47d0      	blx	sl
 800b006:	3001      	adds	r0, #1
 800b008:	d0ad      	beq.n	800af66 <_printf_i+0x15a>
 800b00a:	6823      	ldr	r3, [r4, #0]
 800b00c:	079b      	lsls	r3, r3, #30
 800b00e:	d413      	bmi.n	800b038 <_printf_i+0x22c>
 800b010:	68e0      	ldr	r0, [r4, #12]
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	4298      	cmp	r0, r3
 800b016:	bfb8      	it	lt
 800b018:	4618      	movlt	r0, r3
 800b01a:	e7a6      	b.n	800af6a <_printf_i+0x15e>
 800b01c:	2301      	movs	r3, #1
 800b01e:	4632      	mov	r2, r6
 800b020:	4649      	mov	r1, r9
 800b022:	4640      	mov	r0, r8
 800b024:	47d0      	blx	sl
 800b026:	3001      	adds	r0, #1
 800b028:	d09d      	beq.n	800af66 <_printf_i+0x15a>
 800b02a:	3501      	adds	r5, #1
 800b02c:	68e3      	ldr	r3, [r4, #12]
 800b02e:	9903      	ldr	r1, [sp, #12]
 800b030:	1a5b      	subs	r3, r3, r1
 800b032:	42ab      	cmp	r3, r5
 800b034:	dcf2      	bgt.n	800b01c <_printf_i+0x210>
 800b036:	e7eb      	b.n	800b010 <_printf_i+0x204>
 800b038:	2500      	movs	r5, #0
 800b03a:	f104 0619 	add.w	r6, r4, #25
 800b03e:	e7f5      	b.n	800b02c <_printf_i+0x220>
 800b040:	080336fc 	.word	0x080336fc
 800b044:	0803370d 	.word	0x0803370d

0800b048 <__sflush_r>:
 800b048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	0716      	lsls	r6, r2, #28
 800b052:	4605      	mov	r5, r0
 800b054:	460c      	mov	r4, r1
 800b056:	d454      	bmi.n	800b102 <__sflush_r+0xba>
 800b058:	684b      	ldr	r3, [r1, #4]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc02      	bgt.n	800b064 <__sflush_r+0x1c>
 800b05e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b060:	2b00      	cmp	r3, #0
 800b062:	dd48      	ble.n	800b0f6 <__sflush_r+0xae>
 800b064:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b066:	2e00      	cmp	r6, #0
 800b068:	d045      	beq.n	800b0f6 <__sflush_r+0xae>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b070:	682f      	ldr	r7, [r5, #0]
 800b072:	6a21      	ldr	r1, [r4, #32]
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	d030      	beq.n	800b0da <__sflush_r+0x92>
 800b078:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	0759      	lsls	r1, r3, #29
 800b07e:	d505      	bpl.n	800b08c <__sflush_r+0x44>
 800b080:	6863      	ldr	r3, [r4, #4]
 800b082:	1ad2      	subs	r2, r2, r3
 800b084:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b086:	b10b      	cbz	r3, 800b08c <__sflush_r+0x44>
 800b088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b08a:	1ad2      	subs	r2, r2, r3
 800b08c:	2300      	movs	r3, #0
 800b08e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	4628      	mov	r0, r5
 800b094:	47b0      	blx	r6
 800b096:	1c43      	adds	r3, r0, #1
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	d106      	bne.n	800b0aa <__sflush_r+0x62>
 800b09c:	6829      	ldr	r1, [r5, #0]
 800b09e:	291d      	cmp	r1, #29
 800b0a0:	d82b      	bhi.n	800b0fa <__sflush_r+0xb2>
 800b0a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b14c <__sflush_r+0x104>)
 800b0a4:	40ca      	lsrs	r2, r1
 800b0a6:	07d6      	lsls	r6, r2, #31
 800b0a8:	d527      	bpl.n	800b0fa <__sflush_r+0xb2>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6062      	str	r2, [r4, #4]
 800b0ae:	04d9      	lsls	r1, r3, #19
 800b0b0:	6922      	ldr	r2, [r4, #16]
 800b0b2:	6022      	str	r2, [r4, #0]
 800b0b4:	d504      	bpl.n	800b0c0 <__sflush_r+0x78>
 800b0b6:	1c42      	adds	r2, r0, #1
 800b0b8:	d101      	bne.n	800b0be <__sflush_r+0x76>
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	b903      	cbnz	r3, 800b0c0 <__sflush_r+0x78>
 800b0be:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0c2:	602f      	str	r7, [r5, #0]
 800b0c4:	b1b9      	cbz	r1, 800b0f6 <__sflush_r+0xae>
 800b0c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	d002      	beq.n	800b0d4 <__sflush_r+0x8c>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f7fe fc82 	bl	80099d8 <_free_r>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0d8:	e00d      	b.n	800b0f6 <__sflush_r+0xae>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	4628      	mov	r0, r5
 800b0de:	47b0      	blx	r6
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	1c50      	adds	r0, r2, #1
 800b0e4:	d1c9      	bne.n	800b07a <__sflush_r+0x32>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d0c6      	beq.n	800b07a <__sflush_r+0x32>
 800b0ec:	2b1d      	cmp	r3, #29
 800b0ee:	d001      	beq.n	800b0f4 <__sflush_r+0xac>
 800b0f0:	2b16      	cmp	r3, #22
 800b0f2:	d11e      	bne.n	800b132 <__sflush_r+0xea>
 800b0f4:	602f      	str	r7, [r5, #0]
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	e022      	b.n	800b140 <__sflush_r+0xf8>
 800b0fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0fe:	b21b      	sxth	r3, r3
 800b100:	e01b      	b.n	800b13a <__sflush_r+0xf2>
 800b102:	690f      	ldr	r7, [r1, #16]
 800b104:	2f00      	cmp	r7, #0
 800b106:	d0f6      	beq.n	800b0f6 <__sflush_r+0xae>
 800b108:	0793      	lsls	r3, r2, #30
 800b10a:	680e      	ldr	r6, [r1, #0]
 800b10c:	bf08      	it	eq
 800b10e:	694b      	ldreq	r3, [r1, #20]
 800b110:	600f      	str	r7, [r1, #0]
 800b112:	bf18      	it	ne
 800b114:	2300      	movne	r3, #0
 800b116:	eba6 0807 	sub.w	r8, r6, r7
 800b11a:	608b      	str	r3, [r1, #8]
 800b11c:	f1b8 0f00 	cmp.w	r8, #0
 800b120:	dde9      	ble.n	800b0f6 <__sflush_r+0xae>
 800b122:	6a21      	ldr	r1, [r4, #32]
 800b124:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b126:	4643      	mov	r3, r8
 800b128:	463a      	mov	r2, r7
 800b12a:	4628      	mov	r0, r5
 800b12c:	47b0      	blx	r6
 800b12e:	2800      	cmp	r0, #0
 800b130:	dc08      	bgt.n	800b144 <__sflush_r+0xfc>
 800b132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b13a:	81a3      	strh	r3, [r4, #12]
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4407      	add	r7, r0
 800b146:	eba8 0800 	sub.w	r8, r8, r0
 800b14a:	e7e7      	b.n	800b11c <__sflush_r+0xd4>
 800b14c:	20400001 	.word	0x20400001

0800b150 <_fflush_r>:
 800b150:	b538      	push	{r3, r4, r5, lr}
 800b152:	690b      	ldr	r3, [r1, #16]
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	b913      	cbnz	r3, 800b160 <_fflush_r+0x10>
 800b15a:	2500      	movs	r5, #0
 800b15c:	4628      	mov	r0, r5
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	b118      	cbz	r0, 800b16a <_fflush_r+0x1a>
 800b162:	6a03      	ldr	r3, [r0, #32]
 800b164:	b90b      	cbnz	r3, 800b16a <_fflush_r+0x1a>
 800b166:	f7fe fab3 	bl	80096d0 <__sinit>
 800b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0f3      	beq.n	800b15a <_fflush_r+0xa>
 800b172:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b174:	07d0      	lsls	r0, r2, #31
 800b176:	d404      	bmi.n	800b182 <_fflush_r+0x32>
 800b178:	0599      	lsls	r1, r3, #22
 800b17a:	d402      	bmi.n	800b182 <_fflush_r+0x32>
 800b17c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b17e:	f7fe fc0a 	bl	8009996 <__retarget_lock_acquire_recursive>
 800b182:	4628      	mov	r0, r5
 800b184:	4621      	mov	r1, r4
 800b186:	f7ff ff5f 	bl	800b048 <__sflush_r>
 800b18a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b18c:	07da      	lsls	r2, r3, #31
 800b18e:	4605      	mov	r5, r0
 800b190:	d4e4      	bmi.n	800b15c <_fflush_r+0xc>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	059b      	lsls	r3, r3, #22
 800b196:	d4e1      	bmi.n	800b15c <_fflush_r+0xc>
 800b198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b19a:	f7fe fbfd 	bl	8009998 <__retarget_lock_release_recursive>
 800b19e:	e7dd      	b.n	800b15c <_fflush_r+0xc>

0800b1a0 <memmove>:
 800b1a0:	4288      	cmp	r0, r1
 800b1a2:	b510      	push	{r4, lr}
 800b1a4:	eb01 0402 	add.w	r4, r1, r2
 800b1a8:	d902      	bls.n	800b1b0 <memmove+0x10>
 800b1aa:	4284      	cmp	r4, r0
 800b1ac:	4623      	mov	r3, r4
 800b1ae:	d807      	bhi.n	800b1c0 <memmove+0x20>
 800b1b0:	1e43      	subs	r3, r0, #1
 800b1b2:	42a1      	cmp	r1, r4
 800b1b4:	d008      	beq.n	800b1c8 <memmove+0x28>
 800b1b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1be:	e7f8      	b.n	800b1b2 <memmove+0x12>
 800b1c0:	4402      	add	r2, r0
 800b1c2:	4601      	mov	r1, r0
 800b1c4:	428a      	cmp	r2, r1
 800b1c6:	d100      	bne.n	800b1ca <memmove+0x2a>
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1d2:	e7f7      	b.n	800b1c4 <memmove+0x24>

0800b1d4 <__assert_func>:
 800b1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4b09      	ldr	r3, [pc, #36]	@ (800b200 <__assert_func+0x2c>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4605      	mov	r5, r0
 800b1e0:	68d8      	ldr	r0, [r3, #12]
 800b1e2:	b14c      	cbz	r4, 800b1f8 <__assert_func+0x24>
 800b1e4:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <__assert_func+0x30>)
 800b1e6:	9100      	str	r1, [sp, #0]
 800b1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1ec:	4906      	ldr	r1, [pc, #24]	@ (800b208 <__assert_func+0x34>)
 800b1ee:	462b      	mov	r3, r5
 800b1f0:	f000 f822 	bl	800b238 <fiprintf>
 800b1f4:	f000 f832 	bl	800b25c <abort>
 800b1f8:	4b04      	ldr	r3, [pc, #16]	@ (800b20c <__assert_func+0x38>)
 800b1fa:	461c      	mov	r4, r3
 800b1fc:	e7f3      	b.n	800b1e6 <__assert_func+0x12>
 800b1fe:	bf00      	nop
 800b200:	20000284 	.word	0x20000284
 800b204:	0803371e 	.word	0x0803371e
 800b208:	0803372b 	.word	0x0803372b
 800b20c:	08033759 	.word	0x08033759

0800b210 <_calloc_r>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	fba1 5402 	umull	r5, r4, r1, r2
 800b216:	b934      	cbnz	r4, 800b226 <_calloc_r+0x16>
 800b218:	4629      	mov	r1, r5
 800b21a:	f7fd fafd 	bl	8008818 <_malloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	b928      	cbnz	r0, 800b22e <_calloc_r+0x1e>
 800b222:	4630      	mov	r0, r6
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	220c      	movs	r2, #12
 800b228:	6002      	str	r2, [r0, #0]
 800b22a:	2600      	movs	r6, #0
 800b22c:	e7f9      	b.n	800b222 <_calloc_r+0x12>
 800b22e:	462a      	mov	r2, r5
 800b230:	4621      	mov	r1, r4
 800b232:	f7fe fae7 	bl	8009804 <memset>
 800b236:	e7f4      	b.n	800b222 <_calloc_r+0x12>

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	@ (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f837 	bl	800b2bc <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	20000284 	.word	0x20000284

0800b25c <abort>:
 800b25c:	b508      	push	{r3, lr}
 800b25e:	2006      	movs	r0, #6
 800b260:	f000 fa00 	bl	800b664 <raise>
 800b264:	2001      	movs	r0, #1
 800b266:	f7fa fb3b 	bl	80058e0 <_exit>

0800b26a <__sfputc_r>:
 800b26a:	6893      	ldr	r3, [r2, #8]
 800b26c:	3b01      	subs	r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	b410      	push	{r4}
 800b272:	6093      	str	r3, [r2, #8]
 800b274:	da08      	bge.n	800b288 <__sfputc_r+0x1e>
 800b276:	6994      	ldr	r4, [r2, #24]
 800b278:	42a3      	cmp	r3, r4
 800b27a:	db01      	blt.n	800b280 <__sfputc_r+0x16>
 800b27c:	290a      	cmp	r1, #10
 800b27e:	d103      	bne.n	800b288 <__sfputc_r+0x1e>
 800b280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b284:	f000 b932 	b.w	800b4ec <__swbuf_r>
 800b288:	6813      	ldr	r3, [r2, #0]
 800b28a:	1c58      	adds	r0, r3, #1
 800b28c:	6010      	str	r0, [r2, #0]
 800b28e:	7019      	strb	r1, [r3, #0]
 800b290:	4608      	mov	r0, r1
 800b292:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <__sfputs_r>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	4606      	mov	r6, r0
 800b29c:	460f      	mov	r7, r1
 800b29e:	4614      	mov	r4, r2
 800b2a0:	18d5      	adds	r5, r2, r3
 800b2a2:	42ac      	cmp	r4, r5
 800b2a4:	d101      	bne.n	800b2aa <__sfputs_r+0x12>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e007      	b.n	800b2ba <__sfputs_r+0x22>
 800b2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ae:	463a      	mov	r2, r7
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff ffda 	bl	800b26a <__sfputc_r>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	d1f3      	bne.n	800b2a2 <__sfputs_r+0xa>
 800b2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2bc <_vfiprintf_r>:
 800b2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c0:	460d      	mov	r5, r1
 800b2c2:	b09d      	sub	sp, #116	@ 0x74
 800b2c4:	4614      	mov	r4, r2
 800b2c6:	4698      	mov	r8, r3
 800b2c8:	4606      	mov	r6, r0
 800b2ca:	b118      	cbz	r0, 800b2d4 <_vfiprintf_r+0x18>
 800b2cc:	6a03      	ldr	r3, [r0, #32]
 800b2ce:	b90b      	cbnz	r3, 800b2d4 <_vfiprintf_r+0x18>
 800b2d0:	f7fe f9fe 	bl	80096d0 <__sinit>
 800b2d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2d6:	07d9      	lsls	r1, r3, #31
 800b2d8:	d405      	bmi.n	800b2e6 <_vfiprintf_r+0x2a>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	059a      	lsls	r2, r3, #22
 800b2de:	d402      	bmi.n	800b2e6 <_vfiprintf_r+0x2a>
 800b2e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b2e2:	f7fe fb58 	bl	8009996 <__retarget_lock_acquire_recursive>
 800b2e6:	89ab      	ldrh	r3, [r5, #12]
 800b2e8:	071b      	lsls	r3, r3, #28
 800b2ea:	d501      	bpl.n	800b2f0 <_vfiprintf_r+0x34>
 800b2ec:	692b      	ldr	r3, [r5, #16]
 800b2ee:	b99b      	cbnz	r3, 800b318 <_vfiprintf_r+0x5c>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f000 f938 	bl	800b568 <__swsetup_r>
 800b2f8:	b170      	cbz	r0, 800b318 <_vfiprintf_r+0x5c>
 800b2fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b2fc:	07dc      	lsls	r4, r3, #31
 800b2fe:	d504      	bpl.n	800b30a <_vfiprintf_r+0x4e>
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	b01d      	add	sp, #116	@ 0x74
 800b306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30a:	89ab      	ldrh	r3, [r5, #12]
 800b30c:	0598      	lsls	r0, r3, #22
 800b30e:	d4f7      	bmi.n	800b300 <_vfiprintf_r+0x44>
 800b310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b312:	f7fe fb41 	bl	8009998 <__retarget_lock_release_recursive>
 800b316:	e7f3      	b.n	800b300 <_vfiprintf_r+0x44>
 800b318:	2300      	movs	r3, #0
 800b31a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b31c:	2320      	movs	r3, #32
 800b31e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b322:	f8cd 800c 	str.w	r8, [sp, #12]
 800b326:	2330      	movs	r3, #48	@ 0x30
 800b328:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b4d8 <_vfiprintf_r+0x21c>
 800b32c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b330:	f04f 0901 	mov.w	r9, #1
 800b334:	4623      	mov	r3, r4
 800b336:	469a      	mov	sl, r3
 800b338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b33c:	b10a      	cbz	r2, 800b342 <_vfiprintf_r+0x86>
 800b33e:	2a25      	cmp	r2, #37	@ 0x25
 800b340:	d1f9      	bne.n	800b336 <_vfiprintf_r+0x7a>
 800b342:	ebba 0b04 	subs.w	fp, sl, r4
 800b346:	d00b      	beq.n	800b360 <_vfiprintf_r+0xa4>
 800b348:	465b      	mov	r3, fp
 800b34a:	4622      	mov	r2, r4
 800b34c:	4629      	mov	r1, r5
 800b34e:	4630      	mov	r0, r6
 800b350:	f7ff ffa2 	bl	800b298 <__sfputs_r>
 800b354:	3001      	adds	r0, #1
 800b356:	f000 80a7 	beq.w	800b4a8 <_vfiprintf_r+0x1ec>
 800b35a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35c:	445a      	add	r2, fp
 800b35e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b360:	f89a 3000 	ldrb.w	r3, [sl]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 809f 	beq.w	800b4a8 <_vfiprintf_r+0x1ec>
 800b36a:	2300      	movs	r3, #0
 800b36c:	f04f 32ff 	mov.w	r2, #4294967295
 800b370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b374:	f10a 0a01 	add.w	sl, sl, #1
 800b378:	9304      	str	r3, [sp, #16]
 800b37a:	9307      	str	r3, [sp, #28]
 800b37c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b380:	931a      	str	r3, [sp, #104]	@ 0x68
 800b382:	4654      	mov	r4, sl
 800b384:	2205      	movs	r2, #5
 800b386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b38a:	4853      	ldr	r0, [pc, #332]	@ (800b4d8 <_vfiprintf_r+0x21c>)
 800b38c:	f7f4 ff38 	bl	8000200 <memchr>
 800b390:	9a04      	ldr	r2, [sp, #16]
 800b392:	b9d8      	cbnz	r0, 800b3cc <_vfiprintf_r+0x110>
 800b394:	06d1      	lsls	r1, r2, #27
 800b396:	bf44      	itt	mi
 800b398:	2320      	movmi	r3, #32
 800b39a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b39e:	0713      	lsls	r3, r2, #28
 800b3a0:	bf44      	itt	mi
 800b3a2:	232b      	movmi	r3, #43	@ 0x2b
 800b3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ae:	d015      	beq.n	800b3dc <_vfiprintf_r+0x120>
 800b3b0:	9a07      	ldr	r2, [sp, #28]
 800b3b2:	4654      	mov	r4, sl
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	f04f 0c0a 	mov.w	ip, #10
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3c0:	3b30      	subs	r3, #48	@ 0x30
 800b3c2:	2b09      	cmp	r3, #9
 800b3c4:	d94b      	bls.n	800b45e <_vfiprintf_r+0x1a2>
 800b3c6:	b1b0      	cbz	r0, 800b3f6 <_vfiprintf_r+0x13a>
 800b3c8:	9207      	str	r2, [sp, #28]
 800b3ca:	e014      	b.n	800b3f6 <_vfiprintf_r+0x13a>
 800b3cc:	eba0 0308 	sub.w	r3, r0, r8
 800b3d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	9304      	str	r3, [sp, #16]
 800b3d8:	46a2      	mov	sl, r4
 800b3da:	e7d2      	b.n	800b382 <_vfiprintf_r+0xc6>
 800b3dc:	9b03      	ldr	r3, [sp, #12]
 800b3de:	1d19      	adds	r1, r3, #4
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	9103      	str	r1, [sp, #12]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfbb      	ittet	lt
 800b3e8:	425b      	neglt	r3, r3
 800b3ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b3ee:	9307      	strge	r3, [sp, #28]
 800b3f0:	9307      	strlt	r3, [sp, #28]
 800b3f2:	bfb8      	it	lt
 800b3f4:	9204      	strlt	r2, [sp, #16]
 800b3f6:	7823      	ldrb	r3, [r4, #0]
 800b3f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3fa:	d10a      	bne.n	800b412 <_vfiprintf_r+0x156>
 800b3fc:	7863      	ldrb	r3, [r4, #1]
 800b3fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b400:	d132      	bne.n	800b468 <_vfiprintf_r+0x1ac>
 800b402:	9b03      	ldr	r3, [sp, #12]
 800b404:	1d1a      	adds	r2, r3, #4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	9203      	str	r2, [sp, #12]
 800b40a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b40e:	3402      	adds	r4, #2
 800b410:	9305      	str	r3, [sp, #20]
 800b412:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b4e8 <_vfiprintf_r+0x22c>
 800b416:	7821      	ldrb	r1, [r4, #0]
 800b418:	2203      	movs	r2, #3
 800b41a:	4650      	mov	r0, sl
 800b41c:	f7f4 fef0 	bl	8000200 <memchr>
 800b420:	b138      	cbz	r0, 800b432 <_vfiprintf_r+0x176>
 800b422:	9b04      	ldr	r3, [sp, #16]
 800b424:	eba0 000a 	sub.w	r0, r0, sl
 800b428:	2240      	movs	r2, #64	@ 0x40
 800b42a:	4082      	lsls	r2, r0
 800b42c:	4313      	orrs	r3, r2
 800b42e:	3401      	adds	r4, #1
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b436:	4829      	ldr	r0, [pc, #164]	@ (800b4dc <_vfiprintf_r+0x220>)
 800b438:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b43c:	2206      	movs	r2, #6
 800b43e:	f7f4 fedf 	bl	8000200 <memchr>
 800b442:	2800      	cmp	r0, #0
 800b444:	d03f      	beq.n	800b4c6 <_vfiprintf_r+0x20a>
 800b446:	4b26      	ldr	r3, [pc, #152]	@ (800b4e0 <_vfiprintf_r+0x224>)
 800b448:	bb1b      	cbnz	r3, 800b492 <_vfiprintf_r+0x1d6>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	3307      	adds	r3, #7
 800b44e:	f023 0307 	bic.w	r3, r3, #7
 800b452:	3308      	adds	r3, #8
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b458:	443b      	add	r3, r7
 800b45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45c:	e76a      	b.n	800b334 <_vfiprintf_r+0x78>
 800b45e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b462:	460c      	mov	r4, r1
 800b464:	2001      	movs	r0, #1
 800b466:	e7a8      	b.n	800b3ba <_vfiprintf_r+0xfe>
 800b468:	2300      	movs	r3, #0
 800b46a:	3401      	adds	r4, #1
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	4619      	mov	r1, r3
 800b470:	f04f 0c0a 	mov.w	ip, #10
 800b474:	4620      	mov	r0, r4
 800b476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b47a:	3a30      	subs	r2, #48	@ 0x30
 800b47c:	2a09      	cmp	r2, #9
 800b47e:	d903      	bls.n	800b488 <_vfiprintf_r+0x1cc>
 800b480:	2b00      	cmp	r3, #0
 800b482:	d0c6      	beq.n	800b412 <_vfiprintf_r+0x156>
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	e7c4      	b.n	800b412 <_vfiprintf_r+0x156>
 800b488:	fb0c 2101 	mla	r1, ip, r1, r2
 800b48c:	4604      	mov	r4, r0
 800b48e:	2301      	movs	r3, #1
 800b490:	e7f0      	b.n	800b474 <_vfiprintf_r+0x1b8>
 800b492:	ab03      	add	r3, sp, #12
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	462a      	mov	r2, r5
 800b498:	4b12      	ldr	r3, [pc, #72]	@ (800b4e4 <_vfiprintf_r+0x228>)
 800b49a:	a904      	add	r1, sp, #16
 800b49c:	4630      	mov	r0, r6
 800b49e:	f3af 8000 	nop.w
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	1c78      	adds	r0, r7, #1
 800b4a6:	d1d6      	bne.n	800b456 <_vfiprintf_r+0x19a>
 800b4a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4aa:	07d9      	lsls	r1, r3, #31
 800b4ac:	d405      	bmi.n	800b4ba <_vfiprintf_r+0x1fe>
 800b4ae:	89ab      	ldrh	r3, [r5, #12]
 800b4b0:	059a      	lsls	r2, r3, #22
 800b4b2:	d402      	bmi.n	800b4ba <_vfiprintf_r+0x1fe>
 800b4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4b6:	f7fe fa6f 	bl	8009998 <__retarget_lock_release_recursive>
 800b4ba:	89ab      	ldrh	r3, [r5, #12]
 800b4bc:	065b      	lsls	r3, r3, #25
 800b4be:	f53f af1f 	bmi.w	800b300 <_vfiprintf_r+0x44>
 800b4c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b4c4:	e71e      	b.n	800b304 <_vfiprintf_r+0x48>
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	462a      	mov	r2, r5
 800b4cc:	4b05      	ldr	r3, [pc, #20]	@ (800b4e4 <_vfiprintf_r+0x228>)
 800b4ce:	a904      	add	r1, sp, #16
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f7ff fc9b 	bl	800ae0c <_printf_i>
 800b4d6:	e7e4      	b.n	800b4a2 <_vfiprintf_r+0x1e6>
 800b4d8:	080336eb 	.word	0x080336eb
 800b4dc:	080336f5 	.word	0x080336f5
 800b4e0:	00000000 	.word	0x00000000
 800b4e4:	0800b299 	.word	0x0800b299
 800b4e8:	080336f1 	.word	0x080336f1

0800b4ec <__swbuf_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	b118      	cbz	r0, 800b4fe <__swbuf_r+0x12>
 800b4f6:	6a03      	ldr	r3, [r0, #32]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <__swbuf_r+0x12>
 800b4fa:	f7fe f8e9 	bl	80096d0 <__sinit>
 800b4fe:	69a3      	ldr	r3, [r4, #24]
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	89a3      	ldrh	r3, [r4, #12]
 800b504:	071a      	lsls	r2, r3, #28
 800b506:	d501      	bpl.n	800b50c <__swbuf_r+0x20>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	b943      	cbnz	r3, 800b51e <__swbuf_r+0x32>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 f82a 	bl	800b568 <__swsetup_r>
 800b514:	b118      	cbz	r0, 800b51e <__swbuf_r+0x32>
 800b516:	f04f 37ff 	mov.w	r7, #4294967295
 800b51a:	4638      	mov	r0, r7
 800b51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	6922      	ldr	r2, [r4, #16]
 800b522:	1a98      	subs	r0, r3, r2
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	b2f6      	uxtb	r6, r6
 800b528:	4283      	cmp	r3, r0
 800b52a:	4637      	mov	r7, r6
 800b52c:	dc05      	bgt.n	800b53a <__swbuf_r+0x4e>
 800b52e:	4621      	mov	r1, r4
 800b530:	4628      	mov	r0, r5
 800b532:	f7ff fe0d 	bl	800b150 <_fflush_r>
 800b536:	2800      	cmp	r0, #0
 800b538:	d1ed      	bne.n	800b516 <__swbuf_r+0x2a>
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	3b01      	subs	r3, #1
 800b53e:	60a3      	str	r3, [r4, #8]
 800b540:	6823      	ldr	r3, [r4, #0]
 800b542:	1c5a      	adds	r2, r3, #1
 800b544:	6022      	str	r2, [r4, #0]
 800b546:	701e      	strb	r6, [r3, #0]
 800b548:	6962      	ldr	r2, [r4, #20]
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d004      	beq.n	800b55a <__swbuf_r+0x6e>
 800b550:	89a3      	ldrh	r3, [r4, #12]
 800b552:	07db      	lsls	r3, r3, #31
 800b554:	d5e1      	bpl.n	800b51a <__swbuf_r+0x2e>
 800b556:	2e0a      	cmp	r6, #10
 800b558:	d1df      	bne.n	800b51a <__swbuf_r+0x2e>
 800b55a:	4621      	mov	r1, r4
 800b55c:	4628      	mov	r0, r5
 800b55e:	f7ff fdf7 	bl	800b150 <_fflush_r>
 800b562:	2800      	cmp	r0, #0
 800b564:	d0d9      	beq.n	800b51a <__swbuf_r+0x2e>
 800b566:	e7d6      	b.n	800b516 <__swbuf_r+0x2a>

0800b568 <__swsetup_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	4b29      	ldr	r3, [pc, #164]	@ (800b610 <__swsetup_r+0xa8>)
 800b56c:	4605      	mov	r5, r0
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	460c      	mov	r4, r1
 800b572:	b118      	cbz	r0, 800b57c <__swsetup_r+0x14>
 800b574:	6a03      	ldr	r3, [r0, #32]
 800b576:	b90b      	cbnz	r3, 800b57c <__swsetup_r+0x14>
 800b578:	f7fe f8aa 	bl	80096d0 <__sinit>
 800b57c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b580:	0719      	lsls	r1, r3, #28
 800b582:	d422      	bmi.n	800b5ca <__swsetup_r+0x62>
 800b584:	06da      	lsls	r2, r3, #27
 800b586:	d407      	bmi.n	800b598 <__swsetup_r+0x30>
 800b588:	2209      	movs	r2, #9
 800b58a:	602a      	str	r2, [r5, #0]
 800b58c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b590:	81a3      	strh	r3, [r4, #12]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295
 800b596:	e033      	b.n	800b600 <__swsetup_r+0x98>
 800b598:	0758      	lsls	r0, r3, #29
 800b59a:	d512      	bpl.n	800b5c2 <__swsetup_r+0x5a>
 800b59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b59e:	b141      	cbz	r1, 800b5b2 <__swsetup_r+0x4a>
 800b5a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5a4:	4299      	cmp	r1, r3
 800b5a6:	d002      	beq.n	800b5ae <__swsetup_r+0x46>
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7fe fa15 	bl	80099d8 <_free_r>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5b8:	81a3      	strh	r3, [r4, #12]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6923      	ldr	r3, [r4, #16]
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f043 0308 	orr.w	r3, r3, #8
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	6923      	ldr	r3, [r4, #16]
 800b5cc:	b94b      	cbnz	r3, 800b5e2 <__swsetup_r+0x7a>
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b5d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5d8:	d003      	beq.n	800b5e2 <__swsetup_r+0x7a>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f883 	bl	800b6e8 <__smakebuf_r>
 800b5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e6:	f013 0201 	ands.w	r2, r3, #1
 800b5ea:	d00a      	beq.n	800b602 <__swsetup_r+0x9a>
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	60a2      	str	r2, [r4, #8]
 800b5f0:	6962      	ldr	r2, [r4, #20]
 800b5f2:	4252      	negs	r2, r2
 800b5f4:	61a2      	str	r2, [r4, #24]
 800b5f6:	6922      	ldr	r2, [r4, #16]
 800b5f8:	b942      	cbnz	r2, 800b60c <__swsetup_r+0xa4>
 800b5fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b5fe:	d1c5      	bne.n	800b58c <__swsetup_r+0x24>
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	0799      	lsls	r1, r3, #30
 800b604:	bf58      	it	pl
 800b606:	6962      	ldrpl	r2, [r4, #20]
 800b608:	60a2      	str	r2, [r4, #8]
 800b60a:	e7f4      	b.n	800b5f6 <__swsetup_r+0x8e>
 800b60c:	2000      	movs	r0, #0
 800b60e:	e7f7      	b.n	800b600 <__swsetup_r+0x98>
 800b610:	20000284 	.word	0x20000284

0800b614 <_raise_r>:
 800b614:	291f      	cmp	r1, #31
 800b616:	b538      	push	{r3, r4, r5, lr}
 800b618:	4605      	mov	r5, r0
 800b61a:	460c      	mov	r4, r1
 800b61c:	d904      	bls.n	800b628 <_raise_r+0x14>
 800b61e:	2316      	movs	r3, #22
 800b620:	6003      	str	r3, [r0, #0]
 800b622:	f04f 30ff 	mov.w	r0, #4294967295
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b62a:	b112      	cbz	r2, 800b632 <_raise_r+0x1e>
 800b62c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b630:	b94b      	cbnz	r3, 800b646 <_raise_r+0x32>
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f830 	bl	800b698 <_getpid_r>
 800b638:	4622      	mov	r2, r4
 800b63a:	4601      	mov	r1, r0
 800b63c:	4628      	mov	r0, r5
 800b63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b642:	f000 b817 	b.w	800b674 <_kill_r>
 800b646:	2b01      	cmp	r3, #1
 800b648:	d00a      	beq.n	800b660 <_raise_r+0x4c>
 800b64a:	1c59      	adds	r1, r3, #1
 800b64c:	d103      	bne.n	800b656 <_raise_r+0x42>
 800b64e:	2316      	movs	r3, #22
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	2001      	movs	r0, #1
 800b654:	e7e7      	b.n	800b626 <_raise_r+0x12>
 800b656:	2100      	movs	r1, #0
 800b658:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b65c:	4620      	mov	r0, r4
 800b65e:	4798      	blx	r3
 800b660:	2000      	movs	r0, #0
 800b662:	e7e0      	b.n	800b626 <_raise_r+0x12>

0800b664 <raise>:
 800b664:	4b02      	ldr	r3, [pc, #8]	@ (800b670 <raise+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f7ff bfd3 	b.w	800b614 <_raise_r>
 800b66e:	bf00      	nop
 800b670:	20000284 	.word	0x20000284

0800b674 <_kill_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	@ (800b694 <_kill_r+0x20>)
 800b678:	2300      	movs	r3, #0
 800b67a:	4604      	mov	r4, r0
 800b67c:	4608      	mov	r0, r1
 800b67e:	4611      	mov	r1, r2
 800b680:	602b      	str	r3, [r5, #0]
 800b682:	f7fa f91d 	bl	80058c0 <_kill>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	d102      	bne.n	800b690 <_kill_r+0x1c>
 800b68a:	682b      	ldr	r3, [r5, #0]
 800b68c:	b103      	cbz	r3, 800b690 <_kill_r+0x1c>
 800b68e:	6023      	str	r3, [r4, #0]
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	bf00      	nop
 800b694:	20000d38 	.word	0x20000d38

0800b698 <_getpid_r>:
 800b698:	f7fa b90a 	b.w	80058b0 <_getpid>

0800b69c <__swhatbuf_r>:
 800b69c:	b570      	push	{r4, r5, r6, lr}
 800b69e:	460c      	mov	r4, r1
 800b6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	b096      	sub	sp, #88	@ 0x58
 800b6a8:	4615      	mov	r5, r2
 800b6aa:	461e      	mov	r6, r3
 800b6ac:	da0d      	bge.n	800b6ca <__swhatbuf_r+0x2e>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6b4:	f04f 0100 	mov.w	r1, #0
 800b6b8:	bf14      	ite	ne
 800b6ba:	2340      	movne	r3, #64	@ 0x40
 800b6bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	6031      	str	r1, [r6, #0]
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	b016      	add	sp, #88	@ 0x58
 800b6c8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ca:	466a      	mov	r2, sp
 800b6cc:	f000 f848 	bl	800b760 <_fstat_r>
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	dbec      	blt.n	800b6ae <__swhatbuf_r+0x12>
 800b6d4:	9901      	ldr	r1, [sp, #4]
 800b6d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b6da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b6de:	4259      	negs	r1, r3
 800b6e0:	4159      	adcs	r1, r3
 800b6e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b6e6:	e7eb      	b.n	800b6c0 <__swhatbuf_r+0x24>

0800b6e8 <__smakebuf_r>:
 800b6e8:	898b      	ldrh	r3, [r1, #12]
 800b6ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ec:	079d      	lsls	r5, r3, #30
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	d507      	bpl.n	800b704 <__smakebuf_r+0x1c>
 800b6f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	6123      	str	r3, [r4, #16]
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	6163      	str	r3, [r4, #20]
 800b700:	b003      	add	sp, #12
 800b702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b704:	ab01      	add	r3, sp, #4
 800b706:	466a      	mov	r2, sp
 800b708:	f7ff ffc8 	bl	800b69c <__swhatbuf_r>
 800b70c:	9f00      	ldr	r7, [sp, #0]
 800b70e:	4605      	mov	r5, r0
 800b710:	4639      	mov	r1, r7
 800b712:	4630      	mov	r0, r6
 800b714:	f7fd f880 	bl	8008818 <_malloc_r>
 800b718:	b948      	cbnz	r0, 800b72e <__smakebuf_r+0x46>
 800b71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b71e:	059a      	lsls	r2, r3, #22
 800b720:	d4ee      	bmi.n	800b700 <__smakebuf_r+0x18>
 800b722:	f023 0303 	bic.w	r3, r3, #3
 800b726:	f043 0302 	orr.w	r3, r3, #2
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	e7e2      	b.n	800b6f4 <__smakebuf_r+0xc>
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	6020      	str	r0, [r4, #0]
 800b732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	9b01      	ldr	r3, [sp, #4]
 800b73a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b73e:	b15b      	cbz	r3, 800b758 <__smakebuf_r+0x70>
 800b740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b744:	4630      	mov	r0, r6
 800b746:	f000 f81d 	bl	800b784 <_isatty_r>
 800b74a:	b128      	cbz	r0, 800b758 <__smakebuf_r+0x70>
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	f023 0303 	bic.w	r3, r3, #3
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	431d      	orrs	r5, r3
 800b75c:	81a5      	strh	r5, [r4, #12]
 800b75e:	e7cf      	b.n	800b700 <__smakebuf_r+0x18>

0800b760 <_fstat_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d07      	ldr	r5, [pc, #28]	@ (800b780 <_fstat_r+0x20>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	4611      	mov	r1, r2
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	f7fa f907 	bl	8005980 <_fstat>
 800b772:	1c43      	adds	r3, r0, #1
 800b774:	d102      	bne.n	800b77c <_fstat_r+0x1c>
 800b776:	682b      	ldr	r3, [r5, #0]
 800b778:	b103      	cbz	r3, 800b77c <_fstat_r+0x1c>
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
 800b77e:	bf00      	nop
 800b780:	20000d38 	.word	0x20000d38

0800b784 <_isatty_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	@ (800b7a0 <_isatty_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7fa f906 	bl	80059a0 <_isatty>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_isatty_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_isatty_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000d38 	.word	0x20000d38

0800b7a4 <_init>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr

0800b7b0 <_fini>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	bf00      	nop
 800b7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b6:	bc08      	pop	{r3}
 800b7b8:	469e      	mov	lr, r3
 800b7ba:	4770      	bx	lr
