
Do_An_NKD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b86c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00028210  0800ba00  0800ba00  0000ca00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033c10  08033c10  000352d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08033c10  08033c10  00034c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033c18  08033c18  000352d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033c18  08033c18  00034c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08033c1c  08033c1c  00034c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08033c20  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000352d4  2**0
                  CONTENTS
 10 .bss          00000b3c  200002d4  200002d4  000352d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e10  20000e10  000352d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000352d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fe0  00000000  00000000  00035304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbd  00000000  00000000  000472e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00049fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a5b  00000000  00000000  0004b1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013df8  00000000  00000000  0006ec03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf047  00000000  00000000  000829fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151a42  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000df4  00000000  00000000  00151a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dc8  00000000  00000000  0015287c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00158644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d4 	.word	0x200002d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e4 	.word	0x0800b9e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d8 	.word	0x200002d8
 80001cc:	0800b9e4 	.word	0x0800b9e4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9be 	b.w	8000f70 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7e:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <XPT2046_TouchSelect+0x14>)
 8000f80:	f005 fa82 	bl	8006488 <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020400 	.word	0x40020400

08000f8c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f96:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <XPT2046_TouchUnselect+0x14>)
 8000f98:	f005 fa76 	bl	8006488 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <XPT2046_TouchPressed+0x1c>)
 8000fac:	f005 fa54 	bl	8006458 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	@ 0x30
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 8000fce:	f7ff ffd1 	bl	8000f74 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	77bb      	strb	r3, [r7, #30]
 8000fe2:	e03f      	b.n	8001064 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000fe4:	f7ff ffde 	bl	8000fa4 <XPT2046_TouchPressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d13b      	bne.n	800106c <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000ff4:	7ffb      	ldrb	r3, [r7, #31]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4945      	ldr	r1, [pc, #276]	@ (8001118 <XPT2046_TouchGetCoordinates+0x154>)
 8001002:	4846      	ldr	r0, [pc, #280]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001004:	f005 ff93 	bl	8006f2e <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	4942      	ldr	r1, [pc, #264]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001016:	4841      	ldr	r0, [pc, #260]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001018:	f006 f8cd 	bl	80071b6 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2201      	movs	r2, #1
 8001022:	4940      	ldr	r1, [pc, #256]	@ (8001124 <XPT2046_TouchGetCoordinates+0x160>)
 8001024:	483d      	ldr	r0, [pc, #244]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001026:	f005 ff82 	bl	8006f2e <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	493a      	ldr	r1, [pc, #232]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001038:	4838      	ldr	r0, [pc, #224]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 800103a:	f006 f8bc 	bl	80071b6 <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	7b7a      	ldrb	r2, [r7, #13]
 8001044:	4313      	orrs	r3, r2
 8001046:	461a      	mov	r2, r3
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	4413      	add	r3, r2
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	7c7a      	ldrb	r2, [r7, #17]
 8001054:	4313      	orrs	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800105e:	7fbb      	ldrb	r3, [r7, #30]
 8001060:	3301      	adds	r3, #1
 8001062:	77bb      	strb	r3, [r7, #30]
 8001064:	7fbb      	ldrb	r3, [r7, #30]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d9bc      	bls.n	8000fe4 <XPT2046_TouchGetCoordinates+0x20>
 800106a:	e000      	b.n	800106e <XPT2046_TouchGetCoordinates+0xaa>
            break;
 800106c:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800106e:	f7ff ff8d 	bl	8000f8c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d801      	bhi.n	800107c <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8001078:	2300      	movs	r3, #0
 800107a:	e049      	b.n	8001110 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001088:	4293      	cmp	r3, r2
 800108a:	d802      	bhi.n	8001092 <XPT2046_TouchGetCoordinates+0xce>
 800108c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001090:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f247 1248 	movw	r2, #29000	@ 0x7148
 8001098:	4293      	cmp	r3, r2
 800109a:	d902      	bls.n	80010a2 <XPT2046_TouchGetCoordinates+0xde>
 800109c:	f247 1348 	movw	r3, #29000	@ 0x7148
 80010a0:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <XPT2046_TouchGetCoordinates+0xf4>
 80010b2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80010b6:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010be:	4293      	cmp	r3, r2
 80010c0:	d902      	bls.n	80010c8 <XPT2046_TouchGetCoordinates+0x104>
 80010c2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80010c6:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4613      	mov	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	f5a3 2347 	sub.w	r3, r3, #815104	@ 0xc7000
 80010d6:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <XPT2046_TouchGetCoordinates+0x164>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0b5b      	lsrs	r3, r3, #13
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80010f6:	f5a3 53e8 	sub.w	r3, r3, #7424	@ 0x1d00
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <XPT2046_TouchGetCoordinates+0x168>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0b5b      	lsrs	r3, r3, #13
 8001102:	b29b      	uxth	r3, r3
 8001104:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001108:	b29a      	uxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08031904 	.word	0x08031904
 800111c:	20000500 	.word	0x20000500
 8001120:	08031908 	.word	0x08031908
 8001124:	0803190c 	.word	0x0803190c
 8001128:	51eb851f 	.word	0x51eb851f
 800112c:	4e8b8659 	.word	0x4e8b8659

08001130 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <case_insensitive_strcmp+0x16>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e056      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d10d      	bne.n	800116e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e050      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800115e:	2300      	movs	r3, #0
 8001160:	e04a      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d103      	bne.n	800118e <case_insensitive_strcmp+0x5e>
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f103 0220 	add.w	r2, r3, #32
 800118c:	e000      	b.n	8001190 <case_insensitive_strcmp+0x60>
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73bb      	strb	r3, [r7, #14]
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	3301      	adds	r3, #1
 800119a:	491a      	ldr	r1, [pc, #104]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <case_insensitive_strcmp+0x7e>
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	3320      	adds	r3, #32
 80011ac:	e000      	b.n	80011b0 <case_insensitive_strcmp+0x80>
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d0d0      	beq.n	8001156 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	737b      	strb	r3, [r7, #13]
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d103      	bne.n	80011d4 <case_insensitive_strcmp+0xa4>
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	f103 0220 	add.w	r2, r3, #32
 80011d2:	e000      	b.n	80011d6 <case_insensitive_strcmp+0xa6>
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	733b      	strb	r3, [r7, #12]
 80011dc:	7b3b      	ldrb	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011e2:	440b      	add	r3, r1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <case_insensitive_strcmp+0xc4>
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	3320      	adds	r3, #32
 80011f2:	e000      	b.n	80011f6 <case_insensitive_strcmp+0xc6>
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	08033a10 	.word	0x08033a10

08001208 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	4798      	blx	r3
 8001218:	60f8      	str	r0, [r7, #12]
    if (node)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001220:	2228      	movs	r2, #40	@ 0x28
 8001222:	2100      	movs	r1, #0
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f008 fc0b 	bl	8009a40 <memset>
    }

    return node;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001240:	e03d      	b.n	80012be <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <cJSON_Delete+0x32>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffe7 	bl	8001234 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <cJSON_Delete+0x58>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <cJSON_Delete+0x9c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6912      	ldr	r2, [r2, #16]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
            item->valuestring = NULL;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <cJSON_Delete+0x7e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6a12      	ldr	r2, [r2, #32]
 80012a8:	4610      	mov	r0, r2
 80012aa:	4798      	blx	r3
            item->string = NULL;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
        item = next;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1be      	bne.n	8001242 <cJSON_Delete+0xe>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000

080012d4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80012d8:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	0000      	movs	r0, r0
	...

080012e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b098      	sub	sp, #96	@ 0x60
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001302:	f7ff ffe7 	bl	80012d4 <get_decimal_point>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <parse_number+0x36>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <parse_number+0x3a>
    {
        return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e0a0      	b.n	8001464 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001326:	e03d      	b.n	80013a4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001332:	440b      	add	r3, r1
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b45      	cmp	r3, #69	@ 0x45
 800133a:	dc17      	bgt.n	800136c <parse_number+0x84>
 800133c:	2b2b      	cmp	r3, #43	@ 0x2b
 800133e:	db40      	blt.n	80013c2 <parse_number+0xda>
 8001340:	3b2b      	subs	r3, #43	@ 0x2b
 8001342:	2201      	movs	r2, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	4b4c      	ldr	r3, [pc, #304]	@ (8001478 <parse_number+0x190>)
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10b      	bne.n	8001370 <parse_number+0x88>
 8001358:	f002 0308 	and.w	r3, r2, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800136a:	e02a      	b.n	80013c2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800136c:	2b65      	cmp	r3, #101	@ 0x65
 800136e:	d128      	bne.n	80013c2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137a:	440b      	add	r3, r1
 800137c:	4413      	add	r3, r2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f107 0208 	add.w	r2, r7, #8
 8001384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
                break;
 800138c:	e007      	b.n	800139e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001394:	4413      	add	r3, r2
 8001396:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800139a:	701a      	strb	r2, [r3, #0]
                break;
 800139c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800139e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a0:	3301      	adds	r3, #1
 80013a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80013a8:	d80d      	bhi.n	80013c6 <parse_number+0xde>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <parse_number+0xde>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013b6:	441a      	add	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3b3      	bcc.n	8001328 <parse_number+0x40>
        }
    }
loop_end:
 80013c0:	e001      	b.n	80013c6 <parse_number+0xde>
                goto loop_end;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <parse_number+0xe0>
loop_end:
 80013c6:	bf00      	nop
    number_c_string[i] = '\0';
 80013c8:	f107 0208 	add.w	r2, r7, #8
 80013cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80013d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 f9da 	bl	8009798 <strtod>
 80013e4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80013e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80013f2:	2300      	movs	r3, #0
 80013f4:	e036      	b.n	8001464 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001400:	a31b      	add	r3, pc, #108	@ (adr r3, 8001470 <parse_number+0x188>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800140a:	f7ff fb8b 	bl	8000b24 <__aeabi_dcmpge>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	e015      	b.n	800144a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <parse_number+0x194>)
 8001424:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001428:	f7ff fb72 	bl	8000b10 <__aeabi_dcmple>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	e006      	b.n	800144a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800143c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001440:	f7ff fb84 	bl	8000b4c <__aeabi_d2iz>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2208      	movs	r2, #8
 800144e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	1a8a      	subs	r2, r1, r2
 800145c:	441a      	add	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	609a      	str	r2, [r3, #8]
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3760      	adds	r7, #96	@ 0x60
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	ffc00000 	.word	0xffc00000
 8001474:	41dfffff 	.word	0x41dfffff
 8001478:	04007fe5 	.word	0x04007fe5
 800147c:	c1e00000 	.word	0xc1e00000

08001480 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	e04c      	b.n	8001530 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2f      	cmp	r3, #47	@ 0x2f
 80014a0:	d90f      	bls.n	80014c2 <parse_hex4+0x42>
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b39      	cmp	r3, #57	@ 0x39
 80014ac:	d809      	bhi.n	80014c2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	3b30      	subs	r3, #48	@ 0x30
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e02d      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b40      	cmp	r3, #64	@ 0x40
 80014cc:	d90f      	bls.n	80014ee <parse_hex4+0x6e>
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b46      	cmp	r3, #70	@ 0x46
 80014d8:	d809      	bhi.n	80014ee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	3b37      	subs	r3, #55	@ 0x37
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e017      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b60      	cmp	r3, #96	@ 0x60
 80014f8:	d90f      	bls.n	800151a <parse_hex4+0x9a>
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b66      	cmp	r3, #102	@ 0x66
 8001504:	d809      	bhi.n	800151a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	3b57      	subs	r3, #87	@ 0x57
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e001      	b.n	800151e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e00c      	b.n	8001538 <parse_hex4+0xb8>
        }

        if (i < 3)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d802      	bhi.n	800152a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d9af      	bls.n	8001496 <parse_hex4+0x16>
        }
    }

    return h;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b05      	cmp	r3, #5
 800157c:	f340 80b7 	ble.w	80016ee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	3302      	adds	r3, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff7b 	bl	8001480 <parse_hex4>
 800158a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001592:	d304      	bcc.n	800159e <utf16_literal_to_utf8+0x5a>
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800159a:	f0c0 80aa 	bcc.w	80016f2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80015a4:	d337      	bcc.n	8001616 <utf16_literal_to_utf8+0xd2>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015ac:	d233      	bcs.n	8001616 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80015b8:	230c      	movs	r3, #12
 80015ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	f340 8096 	ble.w	80016f6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d0:	f040 8093 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b75      	cmp	r3, #117	@ 0x75
 80015dc:	f040 808d 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3302      	adds	r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff4b 	bl	8001480 <parse_hex4>
 80015ea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015f2:	f0c0 8084 	bcc.w	80016fe <utf16_literal_to_utf8+0x1ba>
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80015fc:	d27f      	bcs.n	80016fe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	029a      	lsls	r2, r3, #10
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <utf16_literal_to_utf8+0x1cc>)
 8001604:	4013      	ands	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800160c:	4313      	orrs	r3, r2
 800160e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001614:	e004      	b.n	8001620 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001616:	2306      	movs	r3, #6
 8001618:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	2b7f      	cmp	r3, #127	@ 0x7f
 8001624:	d803      	bhi.n	800162e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800162c:	e01f      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001634:	d206      	bcs.n	8001644 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001636:	2302      	movs	r3, #2
 8001638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	f887 3020 	strb.w	r3, [r7, #32]
 8001642:	e014      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164a:	d206      	bcs.n	800165a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001652:	23e0      	movs	r3, #224	@ 0xe0
 8001654:	f887 3020 	strb.w	r3, [r7, #32]
 8001658:	e009      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001660:	d24f      	bcs.n	8001702 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001668:	23f0      	movs	r3, #240	@ 0xf0
 800166a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800166e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001672:	3b01      	subs	r3, #1
 8001674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001678:	e015      	b.n	80016a6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800168c:	440b      	add	r3, r1
 800168e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800169c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016a0:	3b01      	subs	r3, #1
 80016a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e5      	bne.n	800167a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80016ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d909      	bls.n	80016ca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80016e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80016ec:	e00b      	b.n	8001706 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80016ee:	bf00      	nop
 80016f0:	e008      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80016f2:	bf00      	nop
 80016f4:	e006      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016f6:	bf00      	nop
 80016f8:	e004      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001702:	bf00      	nop

fail:
    return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000ffc00 	.word	0x000ffc00

08001714 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b22      	cmp	r3, #34	@ 0x22
 8001750:	f040 8103 	bne.w	800195a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800175c:	e017      	b.n	800178e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b5c      	cmp	r3, #92	@ 0x5c
 8001764:	d110      	bne.n	8001788 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	461a      	mov	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	f080 80f1 	bcs.w	800195e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	3301      	adds	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	3301      	adds	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	461a      	mov	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d203      	bcs.n	80017a8 <parse_string+0x94>
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b22      	cmp	r3, #34	@ 0x22
 80017a6:	d1da      	bne.n	800175e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	f080 80d3 	bcs.w	8001962 <parse_string+0x24e>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b22      	cmp	r3, #34	@ 0x22
 80017c2:	f040 80ce 	bne.w	8001962 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	3201      	adds	r2, #1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3
 80017e8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ba 	beq.w	8001966 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80017f6:	e094      	b.n	8001922 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80017fe:	d008      	beq.n	8001812 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001802:	1c53      	adds	r3, r2, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c59      	adds	r1, r3, #1
 800180a:	60f9      	str	r1, [r7, #12]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e087      	b.n	8001922 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001812:	2302      	movs	r3, #2
 8001814:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f340 80a4 	ble.w	800196a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b75      	cmp	r3, #117	@ 0x75
 800182a:	f300 80a0 	bgt.w	800196e <parse_string+0x25a>
 800182e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001830:	da04      	bge.n	800183c <parse_string+0x128>
 8001832:	2b22      	cmp	r3, #34	@ 0x22
 8001834:	d05c      	beq.n	80018f0 <parse_string+0x1dc>
 8001836:	2b2f      	cmp	r3, #47	@ 0x2f
 8001838:	d05a      	beq.n	80018f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800183a:	e098      	b.n	800196e <parse_string+0x25a>
            switch (input_pointer[1])
 800183c:	3b5c      	subs	r3, #92	@ 0x5c
 800183e:	2b19      	cmp	r3, #25
 8001840:	f200 8095 	bhi.w	800196e <parse_string+0x25a>
 8001844:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <parse_string+0x138>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	080018f1 	.word	0x080018f1
 8001850:	0800196f 	.word	0x0800196f
 8001854:	0800196f 	.word	0x0800196f
 8001858:	0800196f 	.word	0x0800196f
 800185c:	0800196f 	.word	0x0800196f
 8001860:	0800196f 	.word	0x0800196f
 8001864:	080018b5 	.word	0x080018b5
 8001868:	0800196f 	.word	0x0800196f
 800186c:	0800196f 	.word	0x0800196f
 8001870:	0800196f 	.word	0x0800196f
 8001874:	080018c1 	.word	0x080018c1
 8001878:	0800196f 	.word	0x0800196f
 800187c:	0800196f 	.word	0x0800196f
 8001880:	0800196f 	.word	0x0800196f
 8001884:	0800196f 	.word	0x0800196f
 8001888:	0800196f 	.word	0x0800196f
 800188c:	0800196f 	.word	0x0800196f
 8001890:	0800196f 	.word	0x0800196f
 8001894:	080018cd 	.word	0x080018cd
 8001898:	0800196f 	.word	0x0800196f
 800189c:	0800196f 	.word	0x0800196f
 80018a0:	0800196f 	.word	0x0800196f
 80018a4:	080018d9 	.word	0x080018d9
 80018a8:	0800196f 	.word	0x0800196f
 80018ac:	080018e5 	.word	0x080018e5
 80018b0:	08001901 	.word	0x08001901
                    *output_pointer++ = '\b';
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60fa      	str	r2, [r7, #12]
 80018ba:	2208      	movs	r2, #8
 80018bc:	701a      	strb	r2, [r3, #0]
                    break;
 80018be:	e02c      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60fa      	str	r2, [r7, #12]
 80018c6:	220c      	movs	r2, #12
 80018c8:	701a      	strb	r2, [r3, #0]
                    break;
 80018ca:	e026      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60fa      	str	r2, [r7, #12]
 80018d2:	220a      	movs	r2, #10
 80018d4:	701a      	strb	r2, [r3, #0]
                    break;
 80018d6:	e020      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60fa      	str	r2, [r7, #12]
 80018de:	220d      	movs	r2, #13
 80018e0:	701a      	strb	r2, [r3, #0]
                    break;
 80018e2:	e01a      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60fa      	str	r2, [r7, #12]
 80018ea:	2209      	movs	r2, #9
 80018ec:	701a      	strb	r2, [r3, #0]
                    break;
 80018ee:	e014      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	60f9      	str	r1, [r7, #12]
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	701a      	strb	r2, [r3, #0]
                    break;
 80018fe:	e00c      	b.n	800191a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	461a      	mov	r2, r3
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190a:	f7ff fe1b 	bl	8001544 <utf16_literal_to_utf8>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d02c      	beq.n	8001972 <parse_string+0x25e>
                    break;
 8001918:	bf00      	nop
            }
            input_pointer += sequence_length;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4413      	add	r3, r2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	f4ff af66 	bcc.w	80017f8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2210      	movs	r2, #16
 8001936:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	609a      	str	r2, [r3, #8]

    return true;
 8001956:	2301      	movs	r3, #1
 8001958:	e020      	b.n	800199c <parse_string+0x288>
        goto fail;
 800195a:	bf00      	nop
 800195c:	e00a      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800195e:	bf00      	nop
 8001960:	e008      	b.n	8001974 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001962:	bf00      	nop
 8001964:	e006      	b.n	8001974 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001966:	bf00      	nop
 8001968:	e004      	b.n	8001974 <parse_string+0x260>
                goto fail;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <parse_string+0x260>
                        goto fail;
 8001972:	bf00      	nop

fail:
    if (output != NULL)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	69f8      	ldr	r0, [r7, #28]
 8001980:	4798      	blx	r3
        output = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	461a      	mov	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	609a      	str	r2, [r3, #8]
    }

    return false;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <buffer_skip_whitespace+0x16>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e02c      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <buffer_skip_whitespace+0x2c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d306      	bcc.n	80019de <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e021      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d9e9      	bls.n	80019d4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d104      	bne.n	8001a16 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e01c      	b.n	8001a80 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <skip_utf8_bom+0x5a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d211      	bcs.n	8001a7e <skip_utf8_bom+0x5a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	2203      	movs	r2, #3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <skip_utf8_bom+0x64>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 f80c 	bl	8009a86 <strncmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d104      	bne.n	8001a7e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	1cda      	adds	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800ba38 	.word	0x0800ba38

08001a8c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e00c      	b.n	8001abc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7fe fb9e 	bl	80001e4 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	6979      	ldr	r1, [r7, #20]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f805 	bl	8001ac4 <cJSON_ParseWithLengthOpts>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	@ 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d042      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03f      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001b0e:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001b1a:	4836      	ldr	r0, [pc, #216]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b1c:	f7ff fb74 	bl	8001208 <cJSON_New_Item>
 8001b20:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02e      	beq.n	8001b86 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff79 	bl	8001a24 <skip_utf8_bom>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff35 	bl	80019a4 <buffer_skip_whitespace>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b40:	f000 f868 	bl	8001c14 <parse_value>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01f      	beq.n	8001b8a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff25 	bl	80019a4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d215      	bcs.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	e031      	b.n	8001be6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001b82:	bf00      	nop
 8001b84:	e004      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001b8e:	bf00      	nop

fail:
    if (item != NULL)
 8001b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001b96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b98:	f7ff fb4c 	bl	8001234 <cJSON_Delete>
    }

    if (value != NULL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d202      	bcs.n	8001bb8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e005      	b.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	441a      	add	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3738      	adds	r7, #56	@ 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200002f0 	.word	0x200002f0
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff41 	bl	8001a8c <cJSON_ParseWithOpts>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <parse_value+0x18>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <parse_value+0x1c>
    {
        return false; /* no input */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e0d2      	b.n	8001dd6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01d      	beq.n	8001c72 <parse_value+0x5e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d816      	bhi.n	8001c72 <parse_value+0x5e>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4963      	ldr	r1, [pc, #396]	@ (8001de0 <parse_value+0x1cc>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 ff17 	bl	8009a86 <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1d1a      	adds	r2, r3, #4
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]
        return true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0b1      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01d      	beq.n	8001cb4 <parse_value+0xa0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	1d5a      	adds	r2, r3, #5
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d816      	bhi.n	8001cb4 <parse_value+0xa0>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2205      	movs	r2, #5
 8001c92:	4954      	ldr	r1, [pc, #336]	@ (8001de4 <parse_value+0x1d0>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 fef6 	bl	8009a86 <strncmp>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	1d5a      	adds	r2, r3, #5
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	609a      	str	r2, [r3, #8]
        return true;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e090      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <parse_value+0xe8>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d819      	bhi.n	8001cfc <parse_value+0xe8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4944      	ldr	r1, [pc, #272]	@ (8001de8 <parse_value+0x1d4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f007 fed5 	bl	8009a86 <strncmp>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
        return true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e06c      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d013      	beq.n	8001d2a <parse_value+0x116>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20d      	bcs.n	8001d2a <parse_value+0x116>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b22      	cmp	r3, #34	@ 0x22
 8001d1c:	d105      	bne.n	8001d2a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fcf7 	bl	8001714 <parse_string>
 8001d26:	4603      	mov	r3, r0
 8001d28:	e055      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <parse_value+0x164>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d21d      	bcs.n	8001d78 <parse_value+0x164>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d4a:	d00f      	beq.n	8001d6c <parse_value+0x158>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d5a:	d90d      	bls.n	8001d78 <parse_value+0x164>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b39      	cmp	r3, #57	@ 0x39
 8001d6a:	d805      	bhi.n	8001d78 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff faba 	bl	80012e8 <parse_number>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e02e      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d013      	beq.n	8001da6 <parse_value+0x192>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d20d      	bcs.n	8001da6 <parse_value+0x192>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d98:	d105      	bne.n	8001da6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f825 	bl	8001dec <parse_array>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e017      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <parse_value+0x1c0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20d      	bcs.n	8001dd4 <parse_value+0x1c0>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b7b      	cmp	r3, #123	@ 0x7b
 8001dc6:	d105      	bne.n	8001dd4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8d2 	bl	8001f74 <parse_object>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	e000      	b.n	8001dd6 <parse_value+0x1c2>
    }

    return false;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800ba0c 	.word	0x0800ba0c
 8001de4:	0800ba3c 	.word	0x0800ba3c
 8001de8:	0800ba44 	.word	0x0800ba44

08001dec <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d301      	bcc.n	8001e0c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e0af      	b.n	8001f6c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e24:	f040 8094 	bne.w	8001f50 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f7ff fdb6 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <parse_array+0x6e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d207      	bcs.n	8001e5a <parse_array+0x6e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e58:	d061      	beq.n	8001f1e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <parse_array+0x80>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d305      	bcc.n	8001e78 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e76:	e072      	b.n	8001f5e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9be 	bl	8001208 <cJSON_New_Item>
 8001e8c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05f      	beq.n	8001f54 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e007      	b.n	8001eb4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff fd70 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f7ff fea4 	bl	8001c14 <parse_value>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d042      	beq.n	8001f58 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fd66 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <parse_array+0x10e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d207      	bcs.n	8001efa <parse_array+0x10e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ef8:	d0c3      	beq.n	8001e82 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02d      	beq.n	8001f5c <parse_array+0x170>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d227      	bcs.n	8001f5c <parse_array+0x170>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b5d      	cmp	r3, #93	@ 0x5d
 8001f1a:	d11f      	bne.n	8001f5c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001f1c:	e000      	b.n	8001f20 <parse_array+0x134>
        goto success;
 8001f1e:	bf00      	nop
    input_buffer->depth--;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <parse_array+0x14a>
        head->prev = current_item;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	609a      	str	r2, [r3, #8]

    return true;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e00d      	b.n	8001f6c <parse_array+0x180>
        goto fail;
 8001f50:	bf00      	nop
 8001f52:	e004      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001f54:	bf00      	nop
 8001f56:	e002      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001f5c:	bf00      	nop

fail:
    if (head != NULL)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f7ff f965 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f8e:	d301      	bcc.n	8001f94 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001f90:	2300      	movs	r3, #0
 8001f92:	e0f7      	b.n	8002184 <parse_object+0x210>
    }
    input_buffer->depth++;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80db 	beq.w	800215c <parse_object+0x1e8>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f080 80d4 	bcs.w	800215c <parse_object+0x1e8>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b7b      	cmp	r3, #123	@ 0x7b
 8001fc2:	f040 80cb 	bne.w	800215c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f7ff fce7 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <parse_object+0x86>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <parse_object+0x86>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ff6:	f000 8098 	beq.w	800212a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <parse_object+0x98>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d305      	bcc.n	8002018 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
        goto fail;
 8002016:	e0ae      	b.n	8002176 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3310      	adds	r3, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f8ee 	bl	8001208 <cJSON_New_Item>
 800202c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8095 	beq.w	8002160 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e007      	b.n	8002056 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8083 	beq.w	8002164 <parse_object+0x1f0>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d27b      	bcs.n	8002164 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7ff fc94 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	6938      	ldr	r0, [r7, #16]
 8002080:	f7ff fb48 	bl	8001714 <parse_string>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06e      	beq.n	8002168 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f7ff fc8a 	bl	80019a4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d063      	beq.n	800216c <parse_object+0x1f8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d25d      	bcs.n	800216c <parse_object+0x1f8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80020be:	d155      	bne.n	800216c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f7ff fc6a 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	6938      	ldr	r0, [r7, #16]
 80020d4:	f7ff fd9e 	bl	8001c14 <parse_value>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d048      	beq.n	8002170 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7ff fc60 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <parse_object+0x192>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d207      	bcs.n	8002106 <parse_object+0x192>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2c      	cmp	r3, #44	@ 0x2c
 8002104:	d08d      	beq.n	8002022 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d033      	beq.n	8002174 <parse_object+0x200>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d22d      	bcs.n	8002174 <parse_object+0x200>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b7d      	cmp	r3, #125	@ 0x7d
 8002126:	d125      	bne.n	8002174 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002128:	e000      	b.n	800212c <parse_object+0x1b8>
        goto success; /* empty object */
 800212a:	bf00      	nop
    input_buffer->depth--;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <parse_object+0x1ce>
        head->prev = current_item;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	609a      	str	r2, [r3, #8]
    return true;
 8002158:	2301      	movs	r3, #1
 800215a:	e013      	b.n	8002184 <parse_object+0x210>
        goto fail; /* not an object */
 800215c:	bf00      	nop
 800215e:	e00a      	b.n	8002176 <parse_object+0x202>
            goto fail; /* allocation failure */
 8002160:	bf00      	nop
 8002162:	e008      	b.n	8002176 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002164:	bf00      	nop
 8002166:	e006      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <parse_object+0x202>
            goto fail; /* invalid object */
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <parse_object+0x202>
        goto fail; /* expected end of object */
 8002174:	bf00      	nop

fail:
    if (head != NULL)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff f859 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <get_array_item+0x18>
    {
        return NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e010      	b.n	80021c6 <get_array_item+0x3a>
    }

    current_child = array->child;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021aa:	e005      	b.n	80021b8 <get_array_item+0x2c>
    {
        index--;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <get_array_item+0x38>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f3      	bne.n	80021ac <get_array_item+0x20>
    }

    return current_child;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da01      	bge.n	80021e6 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e005      	b.n	80021f2 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffce 	bl	800218c <get_array_item>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <get_object_item+0x1c>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <get_object_item+0x20>
    {
        return NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	e033      	b.n	8002282 <get_object_item+0x88>
    }

    current_element = object->child;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002226:	e002      	b.n	800222e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <get_object_item+0x74>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <get_object_item+0x74>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4619      	mov	r1, r3
 8002242:	68b8      	ldr	r0, [r7, #8]
 8002244:	f7fd ffc4 	bl	80001d0 <strcmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ec      	bne.n	8002228 <get_object_item+0x2e>
 800224e:	e00e      	b.n	800226e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <get_object_item+0x74>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4619      	mov	r1, r3
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f7fe ff64 	bl	8001130 <case_insensitive_strcmp>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <get_object_item+0x82>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <get_object_item+0x86>
        return NULL;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <get_object_item+0x88>
    }

    return current_element;
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002294:	2200      	movs	r2, #0
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffae 	bl	80021fa <get_object_item>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <cJSON_IsTrue>:

    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <cJSON_IsTrue+0x12>
    {
        return false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e007      	b.n	80022ca <cJSON_IsTrue+0x22>
    }

    return (item->type & 0xff) == cJSON_True;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <cJSON_IsBool+0x12>
    {
        return false;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e008      	b.n	80022fa <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <cJSON_IsString+0x12>
    {
        return false;
 8002314:	2300      	movs	r3, #0
 8002316:	e007      	b.n	8002328 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b10      	cmp	r3, #16
 8002320:	bf0c      	ite	eq
 8002322:	2301      	moveq	r3, #1
 8002324:	2300      	movne	r3, #0
 8002326:	b2db      	uxtb	r3, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <cJSON_IsArray>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <cJSON_IsArray+0x12>
    {
        return false;
 8002342:	2300      	movs	r3, #0
 8002344:	e007      	b.n	8002356 <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b20      	cmp	r3, #32
 800234e:	bf0c      	ite	eq
 8002350:	2301      	moveq	r3, #1
 8002352:	2300      	movne	r3, #0
 8002354:	b2db      	uxtb	r3, r3
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800236a:	2300      	movs	r3, #0
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	2301      	movs	r3, #1
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	2200      	movs	r2, #0
 8002376:	2101      	movs	r1, #1
 8002378:	2000      	movs	r0, #0
 800237a:	f001 fccf 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4bae      	ldr	r3, [pc, #696]	@ (800263c <lcdInit+0x2d8>)
 8002384:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8002386:	2300      	movs	r3, #0
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2301      	movs	r3, #1
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	2201      	movs	r2, #1
 8002392:	2100      	movs	r1, #0
 8002394:	2000      	movs	r0, #0
 8002396:	f001 fcc1 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4ba8      	ldr	r3, [pc, #672]	@ (8002640 <lcdInit+0x2dc>)
 80023a0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80023a2:	2300      	movs	r3, #0
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2001      	movs	r0, #1
 80023b2:	f001 fcb3 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4ba2      	ldr	r3, [pc, #648]	@ (8002644 <lcdInit+0x2e0>)
 80023bc:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80023be:	2300      	movs	r3, #0
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	2301      	movs	r3, #1
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	2201      	movs	r2, #1
 80023ca:	2101      	movs	r1, #1
 80023cc:	2001      	movs	r0, #1
 80023ce:	f001 fca5 	bl	8003d1c <lcdBuildMemoryAccessControlConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002648 <lcdInit+0x2e4>)
 80023d8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80023da:	f001 fc75 	bl	8003cc8 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80023de:	2028      	movs	r0, #40	@ 0x28
 80023e0:	f001 fc7c 	bl	8003cdc <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80023e4:	20cf      	movs	r0, #207	@ 0xcf
 80023e6:	f001 fc79 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 fc86 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x83);
 80023f0:	2083      	movs	r0, #131	@ 0x83
 80023f2:	f001 fc83 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x30);
 80023f6:	2030      	movs	r0, #48	@ 0x30
 80023f8:	f001 fc80 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xED);
 80023fc:	20ed      	movs	r0, #237	@ 0xed
 80023fe:	f001 fc6d 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x64);
 8002402:	2064      	movs	r0, #100	@ 0x64
 8002404:	f001 fc7a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x03);
 8002408:	2003      	movs	r0, #3
 800240a:	f001 fc77 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x12);
 800240e:	2012      	movs	r0, #18
 8002410:	f001 fc74 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x81);
 8002414:	2081      	movs	r0, #129	@ 0x81
 8002416:	f001 fc71 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xE8);
 800241a:	20e8      	movs	r0, #232	@ 0xe8
 800241c:	f001 fc5e 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x85);
 8002420:	2085      	movs	r0, #133	@ 0x85
 8002422:	f001 fc6b 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x01);
 8002426:	2001      	movs	r0, #1
 8002428:	f001 fc68 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x79);
 800242c:	2079      	movs	r0, #121	@ 0x79
 800242e:	f001 fc65 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xCB);
 8002432:	20cb      	movs	r0, #203	@ 0xcb
 8002434:	f001 fc52 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x39);
 8002438:	2039      	movs	r0, #57	@ 0x39
 800243a:	f001 fc5f 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x2C);
 800243e:	202c      	movs	r0, #44	@ 0x2c
 8002440:	f001 fc5c 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f001 fc59 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x34);
 800244a:	2034      	movs	r0, #52	@ 0x34
 800244c:	f001 fc56 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x02);
 8002450:	2002      	movs	r0, #2
 8002452:	f001 fc53 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xF7);
 8002456:	20f7      	movs	r0, #247	@ 0xf7
 8002458:	f001 fc40 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x20);
 800245c:	2020      	movs	r0, #32
 800245e:	f001 fc4d 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xEA);
 8002462:	20ea      	movs	r0, #234	@ 0xea
 8002464:	f001 fc3a 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f001 fc47 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f001 fc44 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8002474:	20c0      	movs	r0, #192	@ 0xc0
 8002476:	f001 fc31 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x26);
 800247a:	2026      	movs	r0, #38	@ 0x26
 800247c:	f001 fc3e 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8002480:	20c1      	movs	r0, #193	@ 0xc1
 8002482:	f001 fc2b 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x11);
 8002486:	2011      	movs	r0, #17
 8002488:	f001 fc38 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 800248c:	20c5      	movs	r0, #197	@ 0xc5
 800248e:	f001 fc25 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x35);
 8002492:	2035      	movs	r0, #53	@ 0x35
 8002494:	f001 fc32 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3E);
 8002498:	203e      	movs	r0, #62	@ 0x3e
 800249a:	f001 fc2f 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 800249e:	20c7      	movs	r0, #199	@ 0xc7
 80024a0:	f001 fc1c 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0xBE);
 80024a4:	20be      	movs	r0, #190	@ 0xbe
 80024a6:	f001 fc29 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80024aa:	2036      	movs	r0, #54	@ 0x36
 80024ac:	f001 fc16 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80024b0:	4b62      	ldr	r3, [pc, #392]	@ (800263c <lcdInit+0x2d8>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fc21 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80024ba:	203a      	movs	r0, #58	@ 0x3a
 80024bc:	f001 fc0e 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x55);
 80024c0:	2055      	movs	r0, #85	@ 0x55
 80024c2:	f001 fc1b 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80024c6:	20b1      	movs	r0, #177	@ 0xb1
 80024c8:	f001 fc08 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f001 fc15 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1B);
 80024d2:	201b      	movs	r0, #27
 80024d4:	f001 fc12 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(0xF2);
 80024d8:	20f2      	movs	r0, #242	@ 0xf2
 80024da:	f001 fbff 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x08);
 80024de:	2008      	movs	r0, #8
 80024e0:	f001 fc0c 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80024e4:	2026      	movs	r0, #38	@ 0x26
 80024e6:	f001 fbf9 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x01);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f001 fc06 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80024f0:	20e0      	movs	r0, #224	@ 0xe0
 80024f2:	f001 fbf3 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x1F);
 80024f6:	201f      	movs	r0, #31
 80024f8:	f001 fc00 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1A);
 80024fc:	201a      	movs	r0, #26
 80024fe:	f001 fbfd 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x18);
 8002502:	2018      	movs	r0, #24
 8002504:	f001 fbfa 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0A);
 8002508:	200a      	movs	r0, #10
 800250a:	f001 fbf7 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0F);
 800250e:	200f      	movs	r0, #15
 8002510:	f001 fbf4 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x06);
 8002514:	2006      	movs	r0, #6
 8002516:	f001 fbf1 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x45);
 800251a:	2045      	movs	r0, #69	@ 0x45
 800251c:	f001 fbee 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x87);
 8002520:	2087      	movs	r0, #135	@ 0x87
 8002522:	f001 fbeb 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x32);
 8002526:	2032      	movs	r0, #50	@ 0x32
 8002528:	f001 fbe8 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0A);
 800252c:	200a      	movs	r0, #10
 800252e:	f001 fbe5 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x07);
 8002532:	2007      	movs	r0, #7
 8002534:	f001 fbe2 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x02);
 8002538:	2002      	movs	r0, #2
 800253a:	f001 fbdf 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x07);
 800253e:	2007      	movs	r0, #7
 8002540:	f001 fbdc 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 8002544:	2005      	movs	r0, #5
 8002546:	f001 fbd9 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 800254a:	2000      	movs	r0, #0
 800254c:	f001 fbd6 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8002550:	20e1      	movs	r0, #225	@ 0xe1
 8002552:	f001 fbc3 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f001 fbd0 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x25);
 800255c:	2025      	movs	r0, #37	@ 0x25
 800255e:	f001 fbcd 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x27);
 8002562:	2027      	movs	r0, #39	@ 0x27
 8002564:	f001 fbca 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 8002568:	2005      	movs	r0, #5
 800256a:	f001 fbc7 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x10);
 800256e:	2010      	movs	r0, #16
 8002570:	f001 fbc4 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x09);
 8002574:	2009      	movs	r0, #9
 8002576:	f001 fbc1 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3A);
 800257a:	203a      	movs	r0, #58	@ 0x3a
 800257c:	f001 fbbe 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x78);
 8002580:	2078      	movs	r0, #120	@ 0x78
 8002582:	f001 fbbb 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x4D);
 8002586:	204d      	movs	r0, #77	@ 0x4d
 8002588:	f001 fbb8 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x05);
 800258c:	2005      	movs	r0, #5
 800258e:	f001 fbb5 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x18);
 8002592:	2018      	movs	r0, #24
 8002594:	f001 fbb2 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x0D);
 8002598:	200d      	movs	r0, #13
 800259a:	f001 fbaf 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x38);
 800259e:	2038      	movs	r0, #56	@ 0x38
 80025a0:	f001 fbac 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3A);
 80025a4:	203a      	movs	r0, #58	@ 0x3a
 80025a6:	f001 fba9 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x1F);
 80025aa:	201f      	movs	r0, #31
 80025ac:	f001 fba6 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80025b0:	202a      	movs	r0, #42	@ 0x2a
 80025b2:	f001 fb93 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f001 fba0 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f001 fb9d 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f001 fb9a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0xEF);
 80025c8:	20ef      	movs	r0, #239	@ 0xef
 80025ca:	f001 fb97 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80025ce:	202b      	movs	r0, #43	@ 0x2b
 80025d0:	f001 fb84 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f001 fb91 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 80025da:	2000      	movs	r0, #0
 80025dc:	f001 fb8e 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x01);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f001 fb8b 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x3F);
 80025e6:	203f      	movs	r0, #63	@ 0x3f
 80025e8:	f001 fb88 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80025ec:	20b7      	movs	r0, #183	@ 0xb7
 80025ee:	f001 fb75 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x07);
 80025f2:	2007      	movs	r0, #7
 80025f4:	f001 fb82 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80025f8:	20b6      	movs	r0, #182	@ 0xb6
 80025fa:	f001 fb6f 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData(0x0A);
 80025fe:	200a      	movs	r0, #10
 8002600:	f001 fb7c 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x82);
 8002604:	2082      	movs	r0, #130	@ 0x82
 8002606:	f001 fb79 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x27);
 800260a:	2027      	movs	r0, #39	@ 0x27
 800260c:	f001 fb76 	bl	8003cfc <lcdWriteData>
  lcdWriteData(0x00);
 8002610:	2000      	movs	r0, #0
 8002612:	f001 fb73 	bl	8003cfc <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8002616:	2011      	movs	r0, #17
 8002618:	f001 fb60 	bl	8003cdc <lcdWriteCommand>
  HAL_Delay(100);
 800261c:	2064      	movs	r0, #100	@ 0x64
 800261e:	f003 fbb7 	bl	8005d90 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8002622:	2029      	movs	r0, #41	@ 0x29
 8002624:	f001 fb5a 	bl	8003cdc <lcdWriteCommand>
  HAL_Delay(100);
 8002628:	2064      	movs	r0, #100	@ 0x64
 800262a:	f003 fbb1 	bl	8005d90 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800262e:	202c      	movs	r0, #44	@ 0x2c
 8002630:	f001 fb54 	bl	8003cdc <lcdWriteCommand>
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	200002fc 	.word	0x200002fc
 8002640:	200002fd 	.word	0x200002fd
 8002644:	200002fe 	.word	0x200002fe
 8002648:	200002ff 	.word	0x200002ff

0800264c <drawAlignedText>:

void drawAlignedText(char *text, int yPosition, int sectionWidth, int size, int backColor)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
    int textWidth = getTextWidth(text, size);
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 faec 	bl	8002c3a <getTextWidth>
 8002662:	6178      	str	r0, [r7, #20]
    int xPosition = (sectionWidth - textWidth) / 2;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	0fda      	lsrs	r2, r3, #31
 800266c:	4413      	add	r3, r2
 800266e:	105b      	asrs	r3, r3, #1
 8002670:	613b      	str	r3, [r7, #16]
    lcdSetCursor(xPosition, yPosition);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	b29b      	uxth	r3, r3
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	b292      	uxth	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fa91 	bl	8003ba4 <lcdSetCursor>
    if (backColor == 1)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d103      	bne.n	8002690 <drawAlignedText+0x44>
    {
    	lcdPrintf(text);
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f001 f8e9 	bl	8003860 <lcdPrintf>
    }
    else
    {
    	lcdPrintfNoBackColor(text);
    }
}
 800268e:	e002      	b.n	8002696 <drawAlignedText+0x4a>
    	lcdPrintfNoBackColor(text);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f001 f971 	bl	8003978 <lcdPrintfNoBackColor>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <drawClearDay>:

void drawClearDay(uint16_t xPosition, uint16_t yPosition)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	460a      	mov	r2, r1
 80026a8:	80fb      	strh	r3, [r7, #6]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80bb      	strh	r3, [r7, #4]
	uint8_t sunRadius = 12;
 80026ae:	230c      	movs	r3, #12
 80026b0:	73fb      	strb	r3, [r7, #15]

	lcdFillCircle(xPosition, yPosition, sunRadius, COLOR_YELLOW);
 80026b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026b6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	b21a      	sxth	r2, r3
 80026be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80026c2:	f000 fc57 	bl	8002f74 <lcdFillCircle>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <drawCloudyDay>:

void drawCloudyDay(uint16_t xPosition, uint16_t yPosition)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	460a      	mov	r2, r1
 80026d8:	80fb      	strh	r3, [r7, #6]
 80026da:	4613      	mov	r3, r2
 80026dc:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	3b0b      	subs	r3, #11
 80026e2:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	3305      	adds	r3, #5
 80026e8:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 80026ea:	88fb      	ldrh	r3, [r7, #6]
 80026ec:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 80026ee:	88bb      	ldrh	r3, [r7, #4]
 80026f0:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	3308      	adds	r3, #8
 80026f6:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 80026f8:	88bb      	ldrh	r3, [r7, #4]
 80026fa:	3308      	adds	r3, #8
 80026fc:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 80026fe:	2308      	movs	r3, #8
 8002700:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002702:	230a      	movs	r3, #10
 8002704:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 8002706:	2308      	movs	r3, #8
 8002708:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 800270a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 800270e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002712:	7afb      	ldrb	r3, [r7, #11]
 8002714:	b21a      	sxth	r2, r3
 8002716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800271a:	f000 fc2b 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 800271e:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002722:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002726:	7abb      	ldrb	r3, [r7, #10]
 8002728:	b21a      	sxth	r2, r3
 800272a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272e:	f000 fc21 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 8002732:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002736:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800273a:	7a7b      	ldrb	r3, [r7, #9]
 800273c:	b21a      	sxth	r2, r3
 800273e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002742:	f000 fc17 	bl	8002f74 <lcdFillCircle>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <drawRainyDay>:

void drawRainyDay(uint16_t xPosition, uint16_t yPosition)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af02      	add	r7, sp, #8
 8002754:	4603      	mov	r3, r0
 8002756:	460a      	mov	r2, r1
 8002758:	80fb      	strh	r3, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	80bb      	strh	r3, [r7, #4]
	drawDiagonal(xPosition - 10, yPosition - 4, 11, COLOR_WHITE, -1);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	3b0a      	subs	r3, #10
 8002762:	b29b      	uxth	r3, r3
 8002764:	b218      	sxth	r0, r3
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	3b04      	subs	r3, #4
 800276a:	b29b      	uxth	r3, r3
 800276c:	b219      	sxth	r1, r3
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002778:	220b      	movs	r2, #11
 800277a:	f000 fa29 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition + 2, yPosition, 15, COLOR_WHITE, -1);
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	3302      	adds	r3, #2
 8002782:	b29b      	uxth	r3, r3
 8002784:	b218      	sxth	r0, r3
 8002786:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002794:	220f      	movs	r2, #15
 8002796:	f000 fa1b 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 17, yPosition + 9, 13, COLOR_WHITE, -1);
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	3b11      	subs	r3, #17
 800279e:	b29b      	uxth	r3, r3
 80027a0:	b218      	sxth	r0, r3
 80027a2:	88bb      	ldrh	r3, [r7, #4]
 80027a4:	3309      	adds	r3, #9
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	b219      	sxth	r1, r3
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027b4:	220d      	movs	r2, #13
 80027b6:	f000 fa0b 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 7, yPosition + 3, 10, COLOR_WHITE, -1);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	3b07      	subs	r3, #7
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b218      	sxth	r0, r3
 80027c2:	88bb      	ldrh	r3, [r7, #4]
 80027c4:	3303      	adds	r3, #3
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b219      	sxth	r1, r3
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027d4:	220a      	movs	r2, #10
 80027d6:	f000 f9fb 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 4, yPosition + 15, 12, COLOR_WHITE, -1);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	3b04      	subs	r3, #4
 80027de:	b29b      	uxth	r3, r3
 80027e0:	b218      	sxth	r0, r3
 80027e2:	88bb      	ldrh	r3, [r7, #4]
 80027e4:	330f      	adds	r3, #15
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b219      	sxth	r1, r3
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027f4:	220c      	movs	r2, #12
 80027f6:	f000 f9eb 	bl	8002bd0 <drawDiagonal>
	drawDiagonal(xPosition - 9, yPosition + 13, 8, COLOR_WHITE, -1);
 80027fa:	88fb      	ldrh	r3, [r7, #6]
 80027fc:	3b09      	subs	r3, #9
 80027fe:	b29b      	uxth	r3, r3
 8002800:	b218      	sxth	r0, r3
 8002802:	88bb      	ldrh	r3, [r7, #4]
 8002804:	330d      	adds	r3, #13
 8002806:	b29b      	uxth	r3, r3
 8002808:	b219      	sxth	r1, r3
 800280a:	f04f 33ff 	mov.w	r3, #4294967295
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002814:	2208      	movs	r2, #8
 8002816:	f000 f9db 	bl	8002bd0 <drawDiagonal>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <drawSnowyDay>:

void drawSnowyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	80fb      	strh	r3, [r7, #6]
 8002830:	4613      	mov	r3, r2
 8002832:	80bb      	strh	r3, [r7, #4]
	lcdSetTextFont(&Font16);
 8002834:	4823      	ldr	r0, [pc, #140]	@ (80028c4 <drawSnowyDay+0xa0>)
 8002836:	f001 f925 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(xPosition, yPosition);
 800283a:	88ba      	ldrh	r2, [r7, #4]
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	4611      	mov	r1, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f9af 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002846:	4820      	ldr	r0, [pc, #128]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002848:	f001 f896 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition - 10);
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	3b0a      	subs	r3, #10
 8002850:	b29a      	uxth	r2, r3
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	3b0a      	subs	r3, #10
 8002856:	b29b      	uxth	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4610      	mov	r0, r2
 800285c:	f001 f9a2 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002860:	4819      	ldr	r0, [pc, #100]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002862:	f001 f889 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition + 10);
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	330a      	adds	r3, #10
 800286a:	b29a      	uxth	r2, r3
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	330a      	adds	r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f001 f995 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 800287a:	4813      	ldr	r0, [pc, #76]	@ (80028c8 <drawSnowyDay+0xa4>)
 800287c:	f001 f87c 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition - 10);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	330a      	adds	r3, #10
 8002884:	b29a      	uxth	r2, r3
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	3b0a      	subs	r3, #10
 800288a:	b29b      	uxth	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f001 f988 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <drawSnowyDay+0xa4>)
 8002896:	f001 f86f 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition + 10);
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	3b0a      	subs	r3, #10
 800289e:	b29a      	uxth	r2, r3
 80028a0:	88bb      	ldrh	r3, [r7, #4]
 80028a2:	330a      	adds	r3, #10
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f001 f97b 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 80028ae:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <drawSnowyDay+0xa4>)
 80028b0:	f001 f862 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font12);
 80028b4:	4805      	ldr	r0, [pc, #20]	@ (80028cc <drawSnowyDay+0xa8>)
 80028b6:	f001 f8e5 	bl	8003a84 <lcdSetTextFont>

}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000014 	.word	0x20000014
 80028c8:	0800ba4c 	.word	0x0800ba4c
 80028cc:	2000000c 	.word	0x2000000c

080028d0 <drawFoggyDay>:

void drawFoggyDay(uint16_t xPosition, uint16_t yPosition)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b089      	sub	sp, #36	@ 0x24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4603      	mov	r3, r0
 80028d8:	460a      	mov	r2, r1
 80028da:	80fb      	strh	r3, [r7, #6]
 80028dc:	4613      	mov	r3, r2
 80028de:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	3b0b      	subs	r3, #11
 80028e4:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 80028e6:	88bb      	ldrh	r3, [r7, #4]
 80028e8:	3305      	adds	r3, #5
 80028ea:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 80028f0:	88bb      	ldrh	r3, [r7, #4]
 80028f2:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	3308      	adds	r3, #8
 80028f8:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 80028fa:	88bb      	ldrh	r3, [r7, #4]
 80028fc:	3308      	adds	r3, #8
 80028fe:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 8002900:	2308      	movs	r3, #8
 8002902:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002904:	230a      	movs	r3, #10
 8002906:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 8002908:	2308      	movs	r3, #8
 800290a:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 800290c:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002910:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	b21a      	sxth	r2, r3
 8002918:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800291c:	f000 fb2a 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 8002920:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002924:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	b21a      	sxth	r2, r3
 800292c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002930:	f000 fb20 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 8002934:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002938:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800293c:	7a7b      	ldrb	r3, [r7, #9]
 800293e:	b21a      	sxth	r2, r3
 8002940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002944:	f000 fb16 	bl	8002f74 <lcdFillCircle>

	lcdDrawLine(xPosition - 10, yPosition + 2, xPosition + 10, yPosition + 2, COLOR_BLACK);
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	3b0a      	subs	r3, #10
 800294c:	b29b      	uxth	r3, r3
 800294e:	b218      	sxth	r0, r3
 8002950:	88bb      	ldrh	r3, [r7, #4]
 8002952:	3302      	adds	r3, #2
 8002954:	b29b      	uxth	r3, r3
 8002956:	b219      	sxth	r1, r3
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	330a      	adds	r3, #10
 800295c:	b29b      	uxth	r3, r3
 800295e:	b21a      	sxth	r2, r3
 8002960:	88bb      	ldrh	r3, [r7, #4]
 8002962:	3302      	adds	r3, #2
 8002964:	b29b      	uxth	r3, r3
 8002966:	b21b      	sxth	r3, r3
 8002968:	2400      	movs	r4, #0
 800296a:	9400      	str	r4, [sp, #0]
 800296c:	f000 fa64 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 10, yPosition + 3, xPosition + 10, yPosition + 3, COLOR_BLACK);
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	3b0a      	subs	r3, #10
 8002974:	b29b      	uxth	r3, r3
 8002976:	b218      	sxth	r0, r3
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	3303      	adds	r3, #3
 800297c:	b29b      	uxth	r3, r3
 800297e:	b219      	sxth	r1, r3
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	330a      	adds	r3, #10
 8002984:	b29b      	uxth	r3, r3
 8002986:	b21a      	sxth	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	3303      	adds	r3, #3
 800298c:	b29b      	uxth	r3, r3
 800298e:	b21b      	sxth	r3, r3
 8002990:	2400      	movs	r4, #0
 8002992:	9400      	str	r4, [sp, #0]
 8002994:	f000 fa50 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 6, xPosition - 9, yPosition + 6, COLOR_BLACK);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	3b19      	subs	r3, #25
 800299c:	b29b      	uxth	r3, r3
 800299e:	b218      	sxth	r0, r3
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	3306      	adds	r3, #6
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	b219      	sxth	r1, r3
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	3b09      	subs	r3, #9
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21a      	sxth	r2, r3
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	3306      	adds	r3, #6
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	b21b      	sxth	r3, r3
 80029b8:	2400      	movs	r4, #0
 80029ba:	9400      	str	r4, [sp, #0]
 80029bc:	f000 fa3c 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 7, xPosition - 9, yPosition + 7, COLOR_BLACK);
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	3b19      	subs	r3, #25
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	b218      	sxth	r0, r3
 80029c8:	88bb      	ldrh	r3, [r7, #4]
 80029ca:	3307      	adds	r3, #7
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b219      	sxth	r1, r3
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	3b09      	subs	r3, #9
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b21a      	sxth	r2, r3
 80029d8:	88bb      	ldrh	r3, [r7, #4]
 80029da:	3307      	adds	r3, #7
 80029dc:	b29b      	uxth	r3, r3
 80029de:	b21b      	sxth	r3, r3
 80029e0:	2400      	movs	r4, #0
 80029e2:	9400      	str	r4, [sp, #0]
 80029e4:	f000 fa28 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 8, xPosition + 15, yPosition + 8, COLOR_BLACK);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	3302      	adds	r3, #2
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b218      	sxth	r0, r3
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	3308      	adds	r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b219      	sxth	r1, r3
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	330f      	adds	r3, #15
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	3308      	adds	r3, #8
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	b21b      	sxth	r3, r3
 8002a08:	2400      	movs	r4, #0
 8002a0a:	9400      	str	r4, [sp, #0]
 8002a0c:	f000 fa14 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 9, xPosition + 15, yPosition + 9, COLOR_BLACK);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	3302      	adds	r3, #2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b218      	sxth	r0, r3
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	3309      	adds	r3, #9
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	b219      	sxth	r1, r3
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	330f      	adds	r3, #15
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	88bb      	ldrh	r3, [r7, #4]
 8002a2a:	3309      	adds	r3, #9
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	2400      	movs	r4, #0
 8002a32:	9400      	str	r4, [sp, #0]
 8002a34:	f000 fa00 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 10, xPosition + 5, yPosition + 10, COLOR_BLACK);
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	3b09      	subs	r3, #9
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b218      	sxth	r0, r3
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	330a      	adds	r3, #10
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b219      	sxth	r1, r3
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	3305      	adds	r3, #5
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	b21a      	sxth	r2, r3
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	330a      	adds	r3, #10
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	2400      	movs	r4, #0
 8002a5a:	9400      	str	r4, [sp, #0]
 8002a5c:	f000 f9ec 	bl	8002e38 <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 11, xPosition + 5, yPosition + 11, COLOR_BLACK);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	3b09      	subs	r3, #9
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b218      	sxth	r0, r3
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	330b      	adds	r3, #11
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b219      	sxth	r1, r3
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	3305      	adds	r3, #5
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	88bb      	ldrh	r3, [r7, #4]
 8002a7a:	330b      	adds	r3, #11
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	2400      	movs	r4, #0
 8002a82:	9400      	str	r4, [sp, #0]
 8002a84:	f000 f9d8 	bl	8002e38 <lcdDrawLine>
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}

08002a90 <drawStormyDay>:

void drawStormyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002a90:	b590      	push	{r4, r7, lr}
 8002a92:	b08b      	sub	sp, #44	@ 0x2c
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	4603      	mov	r3, r0
 8002a98:	460a      	mov	r2, r1
 8002a9a:	80fb      	strh	r3, [r7, #6]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	3b0b      	subs	r3, #11
 8002aa4:	837b      	strh	r3, [r7, #26]
	uint16_t cloudCenterY1 = yPosition + 5;
 8002aa6:	88bb      	ldrh	r3, [r7, #4]
 8002aa8:	3305      	adds	r3, #5
 8002aaa:	833b      	strh	r3, [r7, #24]

	uint16_t cloudCenterX2 = xPosition;
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY2 = yPosition;
 8002ab0:	88bb      	ldrh	r3, [r7, #4]
 8002ab2:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX3 = xPosition + 8;
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY3 = yPosition + 8;
 8002aba:	88bb      	ldrh	r3, [r7, #4]
 8002abc:	3308      	adds	r3, #8
 8002abe:	823b      	strh	r3, [r7, #16]

	uint8_t cloudRadius1 = 8;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	73fb      	strb	r3, [r7, #15]
	uint8_t cloudRadius2 = 10;
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	73bb      	strb	r3, [r7, #14]
	uint8_t cloudRadius3 = 8;
 8002ac8:	2308      	movs	r3, #8
 8002aca:	737b      	strb	r3, [r7, #13]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_BLACK);
 8002acc:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 8002ad0:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f000 fa4b 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_BLACK);
 8002ade:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002ae2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002ae6:	7bbb      	ldrb	r3, [r7, #14]
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	2300      	movs	r3, #0
 8002aec:	f000 fa42 	bl	8002f74 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_BLACK);
 8002af0:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002af4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	b21a      	sxth	r2, r3
 8002afc:	2300      	movs	r3, #0
 8002afe:	f000 fa39 	bl	8002f74 <lcdFillCircle>

	for (uint16_t i = 0; i <= 8; i++)
 8002b02:	2300      	movs	r3, #0
 8002b04:	83fb      	strh	r3, [r7, #30]
 8002b06:	e024      	b.n	8002b52 <drawStormyDay+0xc2>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 4 + i, xPosition + 5 - i, yPosition + 4 + i, COLOR_YELLOW);
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	8bfb      	ldrh	r3, [r7, #30]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b05      	subs	r3, #5
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	b218      	sxth	r0, r3
 8002b16:	88ba      	ldrh	r2, [r7, #4]
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3304      	adds	r3, #4
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b219      	sxth	r1, r3
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	8bfb      	ldrh	r3, [r7, #30]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3305      	adds	r3, #5
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	b21c      	sxth	r4, r3
 8002b32:	88ba      	ldrh	r2, [r7, #4]
 8002b34:	8bfb      	ldrh	r3, [r7, #30]
 8002b36:	4413      	add	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b21b      	sxth	r3, r3
 8002b40:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b44:	9200      	str	r2, [sp, #0]
 8002b46:	4622      	mov	r2, r4
 8002b48:	f000 f976 	bl	8002e38 <lcdDrawLine>
	for (uint16_t i = 0; i <= 8; i++)
 8002b4c:	8bfb      	ldrh	r3, [r7, #30]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	83fb      	strh	r3, [r7, #30]
 8002b52:	8bfb      	ldrh	r3, [r7, #30]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d9d7      	bls.n	8002b08 <drawStormyDay+0x78>
	}
	for (uint16_t i = 0; i <= 7; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	83bb      	strh	r3, [r7, #28]
 8002b5c:	e026      	b.n	8002bac <drawStormyDay+0x11c>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 13 + i, xPosition + 3 - 2 * i, yPosition + 13 + i, COLOR_YELLOW);
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	8bbb      	ldrh	r3, [r7, #28]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b05      	subs	r3, #5
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	b218      	sxth	r0, r3
 8002b6c:	88ba      	ldrh	r2, [r7, #4]
 8002b6e:	8bbb      	ldrh	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	330d      	adds	r3, #13
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b219      	sxth	r1, r3
 8002b7a:	8bbb      	ldrh	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	88fa      	ldrh	r2, [r7, #6]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3303      	adds	r3, #3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	b21c      	sxth	r4, r3
 8002b8c:	88ba      	ldrh	r2, [r7, #4]
 8002b8e:	8bbb      	ldrh	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	330d      	adds	r3, #13
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b9e:	9200      	str	r2, [sp, #0]
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	f000 f949 	bl	8002e38 <lcdDrawLine>
	for (uint16_t i = 0; i <= 7; i++)
 8002ba6:	8bbb      	ldrh	r3, [r7, #28]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	83bb      	strh	r3, [r7, #28]
 8002bac:	8bbb      	ldrh	r3, [r7, #28]
 8002bae:	2b07      	cmp	r3, #7
 8002bb0:	d9d5      	bls.n	8002b5e <drawStormyDay+0xce>
	}
	lcdDrawPixel(xPosition - 13, yPosition + 21, COLOR_YELLOW);
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	3b0d      	subs	r3, #13
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	3315      	adds	r3, #21
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f000 f87e 	bl	8002cc4 <lcdDrawPixel>
}
 8002bc8:	bf00      	nop
 8002bca:	3724      	adds	r7, #36	@ 0x24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}

08002bd0 <drawDiagonal>:

void drawDiagonal(int16_t x, int16_t y, int16_t length, uint16_t color, int8_t direction)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4608      	mov	r0, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	80fb      	strh	r3, [r7, #6]
 8002be2:	4603      	mov	r3, r0
 8002be4:	80bb      	strh	r3, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	807b      	strh	r3, [r7, #2]
 8002bea:	4613      	mov	r3, r2
 8002bec:	803b      	strh	r3, [r7, #0]
    for (int16_t i = 0; i < length; i++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	81fb      	strh	r3, [r7, #14]
 8002bf2:	e017      	b.n	8002c24 <drawDiagonal+0x54>
    {
        lcdDrawPixel(x + i, y + i * direction, color);
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b298      	uxth	r0, r3
 8002bfc:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	89fb      	ldrh	r3, [r7, #14]
 8002c04:	fb12 f303 	smulbb	r3, r2, r3
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	883a      	ldrh	r2, [r7, #0]
 8002c12:	4619      	mov	r1, r3
 8002c14:	f000 f856 	bl	8002cc4 <lcdDrawPixel>
    for (int16_t i = 0; i < length; i++)
 8002c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	81fb      	strh	r3, [r7, #14]
 8002c24:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002c28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	dbe1      	blt.n	8002bf4 <drawDiagonal+0x24>
    }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd90      	pop	{r4, r7, pc}

08002c3a <getTextWidth>:


int getTextWidth(const char *text, int size)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int characterWidth;
	if (size == 12)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d102      	bne.n	8002c50 <getTextWidth+0x16>
    {
    	characterWidth = 7;
 8002c4a:	2307      	movs	r3, #7
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	e001      	b.n	8002c54 <getTextWidth+0x1a>
    }
    else
    {
    	characterWidth = 11;
 8002c50:	230b      	movs	r3, #11
 8002c52:	60fb      	str	r3, [r7, #12]
    }
    int length = strlen(text);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd fac5 	bl	80001e4 <strlen>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	60bb      	str	r3, [r7, #8]

    return length * characterWidth;
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <lcdFillRGB>:

void lcdFillRGB(uint16_t color)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c84:	885b      	ldrh	r3, [r3, #2]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 ffa3 	bl	8003bd8 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <lcdFillRGB+0x50>)
 8002c9a:	885b      	ldrh	r3, [r3, #2]
 8002c9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8002ca2:	e003      	b.n	8002cac <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f828 	bl	8003cfc <lcdWriteData>
  while(dimensions--)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	60fa      	str	r2, [r7, #12]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f6      	bne.n	8002ca4 <lcdFillRGB+0x34>
  }
}
 8002cb6:	bf00      	nop
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000024 	.word	0x20000024

08002cc4 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	80bb      	strh	r3, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <lcdDrawPixel+0x44>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d20f      	bcs.n	8002d00 <lcdDrawPixel+0x3c>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <lcdDrawPixel+0x44>)
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20a      	bcs.n	8002d00 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	88fa      	ldrh	r2, [r7, #6]
 8002cee:	88b9      	ldrh	r1, [r7, #4]
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	f000 ff71 	bl	8003bd8 <lcdSetWindow>
    lcdWriteData(color);
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 ffff 	bl	8003cfc <lcdWriteData>
 8002cfe:	e000      	b.n	8002d02 <lcdDrawPixel+0x3e>
        return;
 8002d00:	bf00      	nop
}
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000024 	.word	0x20000024

08002d0c <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8002d2a:	88ba      	ldrh	r2, [r7, #4]
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d205      	bcs.n	8002d3e <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	88bb      	ldrh	r3, [r7, #4]
 8002d38:	80fb      	strh	r3, [r7, #6]
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8002d3e:	4b15      	ldr	r3, [pc, #84]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	88ba      	ldrh	r2, [r7, #4]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d303      	bcc.n	8002d50 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8002d48:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d303      	bcc.n	8002d62 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8002d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d94 <lcdDrawHLine+0x88>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	88ba      	ldrh	r2, [r7, #4]
 8002d66:	8879      	ldrh	r1, [r7, #2]
 8002d68:	88f8      	ldrh	r0, [r7, #6]
 8002d6a:	f000 ff35 	bl	8003bd8 <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e006      	b.n	8002d82 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8002d74:	883b      	ldrh	r3, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ffc0 	bl	8003cfc <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	88bb      	ldrh	r3, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	ddf4      	ble.n	8002d74 <lcdDrawHLine+0x68>
	}
}
 8002d8a:	bf00      	nop
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd90      	pop	{r4, r7, pc}
 8002d94:	20000024 	.word	0x20000024

08002d98 <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	80fb      	strh	r3, [r7, #6]
 8002daa:	4603      	mov	r3, r0
 8002dac:	80bb      	strh	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	88bb      	ldrh	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d205      	bcs.n	8002dca <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8002dbe:	88bb      	ldrh	r3, [r7, #4]
 8002dc0:	817b      	strh	r3, [r7, #10]
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	80bb      	strh	r3, [r7, #4]
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d303      	bcc.n	8002ddc <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8002ddc:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dde:	885b      	ldrh	r3, [r3, #2]
 8002de0:	88ba      	ldrh	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d303      	bcc.n	8002dee <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002de8:	885b      	ldrh	r3, [r3, #2]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002df0:	885b      	ldrh	r3, [r3, #2]
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d303      	bcc.n	8002e00 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8002df8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <lcdDrawVLine+0x9c>)
 8002dfa:	885b      	ldrh	r3, [r3, #2]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	88b9      	ldrh	r1, [r7, #4]
 8002e06:	88f8      	ldrh	r0, [r7, #6]
 8002e08:	f000 fee6 	bl	8003bd8 <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e006      	b.n	8002e20 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8002e12:	883b      	ldrh	r3, [r7, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 ff71 	bl	8003cfc <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	ddf4      	ble.n	8002e12 <lcdDrawVLine+0x7a>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000024 	.word	0x20000024

08002e38 <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b089      	sub	sp, #36	@ 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4604      	mov	r4, r0
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	80fb      	strh	r3, [r7, #6]
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80bb      	strh	r3, [r7, #4]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	807b      	strh	r3, [r7, #2]
 8002e52:	4613      	mov	r3, r2
 8002e54:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002e56:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e64:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002e68:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002e6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e70:	1acb      	subs	r3, r1, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bfb8      	it	lt
 8002e76:	425b      	neglt	r3, r3
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	bfcc      	ite	gt
 8002e7c:	2301      	movgt	r3, #1
 8002e7e:	2300      	movle	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	837b      	strh	r3, [r7, #26]
	if (steep)
 8002e84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	833b      	strh	r3, [r7, #24]
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	80fb      	strh	r3, [r7, #6]
 8002e94:	8b3b      	ldrh	r3, [r7, #24]
 8002e96:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	82fb      	strh	r3, [r7, #22]
 8002e9c:	883b      	ldrh	r3, [r7, #0]
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	8afb      	ldrh	r3, [r7, #22]
 8002ea2:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8002ea4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ea8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	dd0b      	ble.n	8002ec8 <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	82bb      	strh	r3, [r7, #20]
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	80fb      	strh	r3, [r7, #6]
 8002eb8:	8abb      	ldrh	r3, [r7, #20]
 8002eba:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	827b      	strh	r3, [r7, #18]
 8002ec0:	883b      	ldrh	r3, [r7, #0]
 8002ec2:	80bb      	strh	r3, [r7, #4]
 8002ec4:	8a7b      	ldrh	r3, [r7, #18]
 8002ec6:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8002ec8:	887a      	ldrh	r2, [r7, #2]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8002ed2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002ed6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bfb8      	it	lt
 8002ee0:	425b      	neglt	r3, r3
 8002ee2:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8002ee4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ee8:	0fda      	lsrs	r2, r3, #31
 8002eea:	4413      	add	r3, r2
 8002eec:	105b      	asrs	r3, r3, #1
 8002eee:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8002ef0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ef4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	da02      	bge.n	8002f02 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	83bb      	strh	r3, [r7, #28]
 8002f00:	e02d      	b.n	8002f5e <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8002f02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f06:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8002f08:	e029      	b.n	8002f5e <lcdDrawLine+0x126>
	{
		if (steep)
 8002f0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d006      	beq.n	8002f20 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8002f12:	88bb      	ldrh	r3, [r7, #4]
 8002f14:	88f9      	ldrh	r1, [r7, #6]
 8002f16:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fed3 	bl	8002cc4 <lcdDrawPixel>
 8002f1e:	e005      	b.n	8002f2c <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	88b9      	ldrh	r1, [r7, #4]
 8002f24:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fecc 	bl	8002cc4 <lcdDrawPixel>
		}
		err -= dy;
 8002f2c:	8bfa      	ldrh	r2, [r7, #30]
 8002f2e:	89fb      	ldrh	r3, [r7, #14]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8002f36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da09      	bge.n	8002f52 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8002f3e:	88ba      	ldrh	r2, [r7, #4]
 8002f40:	8bbb      	ldrh	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8002f48:	8bfa      	ldrh	r2, [r7, #30]
 8002f4a:	8a3b      	ldrh	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8002f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	80fb      	strh	r3, [r7, #6]
 8002f5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	ddcf      	ble.n	8002f0a <lcdDrawLine+0xd2>
		}
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3724      	adds	r7, #36	@ 0x24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	461a      	mov	r2, r3
 8002f82:	4623      	mov	r3, r4
 8002f84:	80fb      	strh	r3, [r7, #6]
 8002f86:	4603      	mov	r3, r0
 8002f88:	80bb      	strh	r3, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	807b      	strh	r3, [r7, #2]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8002f92:	88f8      	ldrh	r0, [r7, #6]
 8002f94:	88ba      	ldrh	r2, [r7, #4]
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b299      	uxth	r1, r3
 8002f9c:	88ba      	ldrh	r2, [r7, #4]
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	f7ff fef5 	bl	8002d98 <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8002fae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002fb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002fb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002fba:	883b      	ldrh	r3, [r7, #0]
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	f000 f804 	bl	8002fd0 <lcdFillCircleHelper>
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4623      	mov	r3, r4
 8002fe0:	80fb      	strh	r3, [r7, #6]
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	80bb      	strh	r3, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
 8002fea:	4613      	mov	r3, r2
 8002fec:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	f1c3 0301 	rsb	r3, r3, #1
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	461a      	mov	r2, r3
 8003000:	03d2      	lsls	r2, r2, #15
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	b29b      	uxth	r3, r3
 8003008:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8003012:	e07b      	b.n	800310c <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8003014:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003018:	2b00      	cmp	r3, #0
 800301a:	db0e      	blt.n	800303a <lcdFillCircleHelper+0x6a>
		{
			y--;
 800301c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8003028:	8a7b      	ldrh	r3, [r7, #18]
 800302a:	3302      	adds	r3, #2
 800302c:	b29b      	uxth	r3, r3
 800302e:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8003030:	8afa      	ldrh	r2, [r7, #22]
 8003032:	8a7b      	ldrh	r3, [r7, #18]
 8003034:	4413      	add	r3, r2
 8003036:	b29b      	uxth	r3, r3
 8003038:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800303a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800303e:	b29b      	uxth	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8003046:	8abb      	ldrh	r3, [r7, #20]
 8003048:	3302      	adds	r3, #2
 800304a:	b29b      	uxth	r3, r3
 800304c:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800304e:	8afa      	ldrh	r2, [r7, #22]
 8003050:	8abb      	ldrh	r3, [r7, #20]
 8003052:	4413      	add	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d027      	beq.n	80030b2 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8003062:	88fa      	ldrh	r2, [r7, #6]
 8003064:	8a3b      	ldrh	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	b298      	uxth	r0, r3
 800306a:	88ba      	ldrh	r2, [r7, #4]
 800306c:	89fb      	ldrh	r3, [r7, #14]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	b299      	uxth	r1, r3
 8003072:	88ba      	ldrh	r2, [r7, #4]
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800307c:	4413      	add	r3, r2
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003086:	f7ff fe87 	bl	8002d98 <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 800308a:	88fa      	ldrh	r2, [r7, #6]
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	4413      	add	r3, r2
 8003090:	b298      	uxth	r0, r3
 8003092:	88ba      	ldrh	r2, [r7, #4]
 8003094:	8a3b      	ldrh	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	b299      	uxth	r1, r3
 800309a:	88ba      	ldrh	r2, [r7, #4]
 800309c:	8a3b      	ldrh	r3, [r7, #16]
 800309e:	4413      	add	r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030a4:	4413      	add	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030ae:	f7ff fe73 	bl	8002d98 <lcdDrawVLine>
		}
		if (cornername & 0x2)
 80030b2:	787b      	ldrb	r3, [r7, #1]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d027      	beq.n	800310c <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 80030bc:	88fa      	ldrh	r2, [r7, #6]
 80030be:	8a3b      	ldrh	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b298      	uxth	r0, r3
 80030c4:	88ba      	ldrh	r2, [r7, #4]
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b299      	uxth	r1, r3
 80030cc:	88ba      	ldrh	r2, [r7, #4]
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	4413      	add	r3, r2
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030d6:	4413      	add	r3, r2
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3301      	adds	r3, #1
 80030dc:	b29a      	uxth	r2, r3
 80030de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80030e0:	f7ff fe5a 	bl	8002d98 <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	89fb      	ldrh	r3, [r7, #14]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b298      	uxth	r0, r3
 80030ec:	88ba      	ldrh	r2, [r7, #4]
 80030ee:	8a3b      	ldrh	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	b299      	uxth	r1, r3
 80030f4:	88ba      	ldrh	r2, [r7, #4]
 80030f6:	8a3b      	ldrh	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030fe:	4413      	add	r3, r2
 8003100:	b29b      	uxth	r3, r3
 8003102:	3301      	adds	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003108:	f7ff fe46 	bl	8002d98 <lcdDrawVLine>
	while (x < y)
 800310c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003114:	429a      	cmp	r2, r3
 8003116:	f6ff af7d 	blt.w	8003014 <lcdFillCircleHelper+0x44>
		}
	}
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}

08003124 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4603      	mov	r3, r0
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]
 800313e:	4613      	mov	r3, r2
 8003140:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003146:	4a24      	ldr	r2, [pc, #144]	@ (80031d8 <lcdFillRect+0xb4>)
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	4293      	cmp	r3, r2
 800314c:	da3f      	bge.n	80031ce <lcdFillRect+0xaa>
 800314e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003152:	4a21      	ldr	r2, [pc, #132]	@ (80031d8 <lcdFillRect+0xb4>)
 8003154:	8852      	ldrh	r2, [r2, #2]
 8003156:	4293      	cmp	r3, r2
 8003158:	da39      	bge.n	80031ce <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 800315a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800315e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003162:	4413      	add	r3, r2
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <lcdFillRect+0xb4>)
 8003166:	8812      	ldrh	r2, [r2, #0]
 8003168:	4293      	cmp	r3, r2
 800316a:	dd05      	ble.n	8003178 <lcdFillRect+0x54>
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <lcdFillRect+0xb4>)
 800316e:	881a      	ldrh	r2, [r3, #0]
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b29b      	uxth	r3, r3
 8003176:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8003178:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800317c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003180:	4413      	add	r3, r2
 8003182:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <lcdFillRect+0xb4>)
 8003184:	8852      	ldrh	r2, [r2, #2]
 8003186:	4293      	cmp	r3, r2
 8003188:	dd05      	ble.n	8003196 <lcdFillRect+0x72>
 800318a:	4b13      	ldr	r3, [pc, #76]	@ (80031d8 <lcdFillRect+0xb4>)
 800318c:	885a      	ldrh	r2, [r3, #2]
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8003196:	88bb      	ldrh	r3, [r7, #4]
 8003198:	81fb      	strh	r3, [r7, #14]
 800319a:	e00e      	b.n	80031ba <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 800319c:	88f8      	ldrh	r0, [r7, #6]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	4413      	add	r3, r2
 80031a4:	b299      	uxth	r1, r3
 80031a6:	89fa      	ldrh	r2, [r7, #14]
 80031a8:	8c3b      	ldrh	r3, [r7, #32]
 80031aa:	f7ff fdaf 	bl	8002d0c <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 80031ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	81fb      	strh	r3, [r7, #14]
 80031ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80031be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80031c2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031c6:	440b      	add	r3, r1
 80031c8:	429a      	cmp	r2, r3
 80031ca:	dde7      	ble.n	800319c <lcdFillRect+0x78>
 80031cc:	e000      	b.n	80031d0 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80031ce:	bf00      	nop
	}
}
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000024 	.word	0x20000024

080031dc <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b085      	sub	sp, #20
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	80fb      	strh	r3, [r7, #6]
 80031ee:	4603      	mov	r3, r0
 80031f0:	80bb      	strh	r3, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	807b      	strh	r3, [r7, #2]
 80031f6:	4613      	mov	r3, r2
 80031f8:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	8b3b      	ldrh	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	b218      	sxth	r0, r3
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	8b3b      	ldrh	r3, [r7, #24]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	b21a      	sxth	r2, r3
 8003212:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003216:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800321a:	8bbb      	ldrh	r3, [r7, #28]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4623      	mov	r3, r4
 8003220:	f7ff ff80 	bl	8003124 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	4413      	add	r3, r2
 800322a:	b29a      	uxth	r2, r3
 800322c:	8b3b      	ldrh	r3, [r7, #24]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29b      	uxth	r3, r3
 8003236:	b218      	sxth	r0, r3
 8003238:	88ba      	ldrh	r2, [r7, #4]
 800323a:	8b3b      	ldrh	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	b219      	sxth	r1, r3
 8003242:	883a      	ldrh	r2, [r7, #0]
 8003244:	8b3b      	ldrh	r3, [r7, #24]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	b21b      	sxth	r3, r3
 8003254:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003258:	8bba      	ldrh	r2, [r7, #28]
 800325a:	9201      	str	r2, [sp, #4]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	4622      	mov	r2, r4
 8003262:	f7ff feb5 	bl	8002fd0 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	8b3b      	ldrh	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	b218      	sxth	r0, r3
 8003270:	88ba      	ldrh	r2, [r7, #4]
 8003272:	8b3b      	ldrh	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	b219      	sxth	r1, r3
 800327a:	883a      	ldrh	r2, [r7, #0]
 800327c:	8b3b      	ldrh	r3, [r7, #24]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	b21b      	sxth	r3, r3
 800328c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003290:	8bba      	ldrh	r2, [r7, #28]
 8003292:	9201      	str	r2, [sp, #4]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2302      	movs	r3, #2
 8003298:	4622      	mov	r2, r4
 800329a:	f7ff fe99 	bl	8002fd0 <lcdFillCircleHelper>
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd90      	pop	{r4, r7, pc}

080032a6 <lcdFillTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void lcdFillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80032a6:	b590      	push	{r4, r7, lr}
 80032a8:	b08f      	sub	sp, #60	@ 0x3c
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4604      	mov	r4, r0
 80032ae:	4608      	mov	r0, r1
 80032b0:	4611      	mov	r1, r2
 80032b2:	461a      	mov	r2, r3
 80032b4:	4623      	mov	r3, r4
 80032b6:	80fb      	strh	r3, [r7, #6]
 80032b8:	4603      	mov	r3, r0
 80032ba:	80bb      	strh	r3, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
 80032c0:	4613      	mov	r3, r2
 80032c2:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1)
 80032c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80032c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	dd0b      	ble.n	80032e8 <lcdFillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 80032d0:	88bb      	ldrh	r3, [r7, #4]
 80032d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80032d4:	883b      	ldrh	r3, [r7, #0]
 80032d6:	80bb      	strh	r3, [r7, #4]
 80032d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032da:	803b      	strh	r3, [r7, #0]
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	80fb      	strh	r3, [r7, #6]
 80032e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80032e6:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2)
 80032e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80032ec:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80032f0:	429a      	cmp	r2, r3
 80032f2:	dd0f      	ble.n	8003314 <lcdFillTriangle+0x6e>
    {
        swap(y2, y1); swap(x2, x1);
 80032f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032f8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80032fa:	883b      	ldrh	r3, [r7, #0]
 80032fc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003302:	803b      	strh	r3, [r7, #0]
 8003304:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003308:	843b      	strh	r3, [r7, #32]
 800330a:	887b      	ldrh	r3, [r7, #2]
 800330c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003310:	8c3b      	ldrh	r3, [r7, #32]
 8003312:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1)
 8003314:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003318:	f9b7 3000 	ldrsh.w	r3, [r7]
 800331c:	429a      	cmp	r2, r3
 800331e:	dd0b      	ble.n	8003338 <lcdFillTriangle+0x92>
    {
        swap(y0, y1); swap(x0, x1);
 8003320:	88bb      	ldrh	r3, [r7, #4]
 8003322:	83fb      	strh	r3, [r7, #30]
 8003324:	883b      	ldrh	r3, [r7, #0]
 8003326:	80bb      	strh	r3, [r7, #4]
 8003328:	8bfb      	ldrh	r3, [r7, #30]
 800332a:	803b      	strh	r3, [r7, #0]
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	83bb      	strh	r3, [r7, #28]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	80fb      	strh	r3, [r7, #6]
 8003334:	8bbb      	ldrh	r3, [r7, #28]
 8003336:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2)
 8003338:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800333c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003340:	429a      	cmp	r2, r3
 8003342:	d131      	bne.n	80033a8 <lcdFillTriangle+0x102>
    { // Handle awkward all-on-same-line case as its own thing
        a = b = x0;
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8003348:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800334a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 800334c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003350:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003354:	429a      	cmp	r2, r3
 8003356:	da02      	bge.n	800335e <lcdFillTriangle+0xb8>
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800335c:	e007      	b.n	800336e <lcdFillTriangle+0xc8>
        else if(x1 > b) b = x1;
 800335e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003362:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003366:	429a      	cmp	r2, r3
 8003368:	dd01      	ble.n	800336e <lcdFillTriangle+0xc8>
 800336a:	887b      	ldrh	r3, [r7, #2]
 800336c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 800336e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8003372:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8003376:	429a      	cmp	r2, r3
 8003378:	da03      	bge.n	8003382 <lcdFillTriangle+0xdc>
 800337a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800337e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003380:	e008      	b.n	8003394 <lcdFillTriangle+0xee>
        else if(x2 > b) b = x2;
 8003382:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 8003386:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800338a:	429a      	cmp	r2, r3
 800338c:	dd02      	ble.n	8003394 <lcdFillTriangle+0xee>
 800338e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003392:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y0, color);
 8003394:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8003396:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003398:	3301      	adds	r3, #1
 800339a:	b299      	uxth	r1, r3
 800339c:	88ba      	ldrh	r2, [r7, #4]
 800339e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033a2:	f7ff fcb3 	bl	8002d0c <lcdDrawHLine>
        return;
 80033a6:	e0c8      	b.n	800353a <lcdFillTriangle+0x294>
    }

    int16_t
    dx01 = x1 - x0,
 80033a8:	887a      	ldrh	r2, [r7, #2]
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 80033b2:	883a      	ldrh	r2, [r7, #0]
 80033b4:	88bb      	ldrh	r3, [r7, #4]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 80033bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 80033c8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80033cc:	88bb      	ldrh	r3, [r7, #4]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 80033d4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 80033e0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80033e4:	883b      	ldrh	r3, [r7, #0]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 80033ec:	2300      	movs	r3, #0
 80033ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80033f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80033f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d102      	bne.n	8003406 <lcdFillTriangle+0x160>
 8003400:	883b      	ldrh	r3, [r7, #0]
 8003402:	863b      	strh	r3, [r7, #48]	@ 0x30
 8003404:	e003      	b.n	800340e <lcdFillTriangle+0x168>
    else         last = y1-1; // Skip it
 8003406:	883b      	ldrh	r3, [r7, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	b29b      	uxth	r3, r3
 800340c:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++)
 800340e:	88bb      	ldrh	r3, [r7, #4]
 8003410:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003412:	e038      	b.n	8003486 <lcdFillTriangle+0x1e0>
    {
        a   = x0 + sa / dy01;
 8003414:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800341a:	fb92 f3f3 	sdiv	r3, r2, r3
 800341e:	b29a      	uxth	r2, r3
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	4413      	add	r3, r2
 8003424:	b29b      	uxth	r3, r3
 8003426:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8003428:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800342c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800342e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003432:	b29a      	uxth	r2, r3
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4413      	add	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 800343c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003442:	4413      	add	r3, r2
 8003444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8003446:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800344a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344c:	4413      	add	r3, r2
 800344e:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 8003450:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8003454:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003458:	429a      	cmp	r2, r3
 800345a:	dd05      	ble.n	8003468 <lcdFillTriangle+0x1c2>
 800345c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800345e:	81bb      	strh	r3, [r7, #12]
 8003460:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003462:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8003468:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 800346a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800346c:	3301      	adds	r3, #1
 800346e:	b299      	uxth	r1, r3
 8003470:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8003472:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003476:	f7ff fc49 	bl	8002d0c <lcdDrawHLine>
    for(y=y0; y<=last; y++)
 800347a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800347e:	b29b      	uxth	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003486:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800348a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800348e:	429a      	cmp	r2, r3
 8003490:	ddc0      	ble.n	8003414 <lcdFillTriangle+0x16e>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003496:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800349a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800349e:	1a8a      	subs	r2, r1, r2
 80034a0:	fb02 f303 	mul.w	r3, r2, r3
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80034a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034aa:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 80034ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80034b2:	1a8a      	subs	r2, r1, r2
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++)
 80034ba:	e038      	b.n	800352e <lcdFillTriangle+0x288>
    {
        a   = x1 + sa / dy12;
 80034bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80034c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	4413      	add	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 80034d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80034da:	b29a      	uxth	r2, r3
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	4413      	add	r3, r2
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 80034e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80034e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ea:	4413      	add	r3, r2
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80034ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80034f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034f4:	4413      	add	r3, r2
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 80034f8:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80034fc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003500:	429a      	cmp	r2, r3
 8003502:	dd05      	ble.n	8003510 <lcdFillTriangle+0x26a>
 8003504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003506:	81fb      	strh	r3, [r7, #14]
 8003508:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800350a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800350c:	89fb      	ldrh	r3, [r7, #14]
 800350e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8003510:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8003512:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003514:	3301      	adds	r3, #1
 8003516:	b299      	uxth	r1, r3
 8003518:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800351a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800351e:	f7ff fbf5 	bl	8002d0c <lcdDrawHLine>
    for(; y<=y2; y++)
 8003522:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003526:	b29b      	uxth	r3, r3
 8003528:	3301      	adds	r3, #1
 800352a:	b29b      	uxth	r3, r3
 800352c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800352e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8003532:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003536:	429a      	cmp	r2, r3
 8003538:	ddc0      	ble.n	80034bc <lcdFillTriangle+0x216>
    }
}
 800353a:	373c      	adds	r7, #60	@ 0x3c
 800353c:	46bd      	mov	sp, r7
 800353e:	bd90      	pop	{r4, r7, pc}

08003540 <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	603a      	str	r2, [r7, #0]
 800354a:	80fb      	strh	r3, [r7, #6]
 800354c:	460b      	mov	r3, r1
 800354e:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003550:	4b24      	ldr	r3, [pc, #144]	@ (80035e4 <lcdDrawImage+0xa4>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	429a      	cmp	r2, r3
 8003558:	d23c      	bcs.n	80035d4 <lcdDrawImage+0x94>
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <lcdDrawImage+0xa4>)
 800355c:	885b      	ldrh	r3, [r3, #2]
 800355e:	88ba      	ldrh	r2, [r7, #4]
 8003560:	429a      	cmp	r2, r3
 8003562:	d237      	bcs.n	80035d4 <lcdDrawImage+0x94>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	8812      	ldrh	r2, [r2, #0]
 800356a:	4413      	add	r3, r2
 800356c:	4a1d      	ldr	r2, [pc, #116]	@ (80035e4 <lcdDrawImage+0xa4>)
 800356e:	8812      	ldrh	r2, [r2, #0]
 8003570:	4293      	cmp	r3, r2
 8003572:	dc31      	bgt.n	80035d8 <lcdDrawImage+0x98>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8003574:	88bb      	ldrh	r3, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	8852      	ldrh	r2, [r2, #2]
 800357a:	4413      	add	r3, r2
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <lcdDrawImage+0xa4>)
 800357e:	8852      	ldrh	r2, [r2, #2]
 8003580:	4293      	cmp	r3, r2
 8003582:	dc2b      	bgt.n	80035dc <lcdDrawImage+0x9c>

	for (int i = 0; i < pBitmap->ySize; ++i)
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e01d      	b.n	80035c6 <lcdDrawImage+0x86>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	b29a      	uxth	r2, r3
 800358e:	88bb      	ldrh	r3, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	b299      	uxth	r1, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	4618      	mov	r0, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	fb00 f303 	mul.w	r3, r0, r3
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	441a      	add	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	889b      	ldrh	r3, [r3, #4]
 80035ac:	4618      	mov	r0, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	08db      	lsrs	r3, r3, #3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	fb90 f3f3 	sdiv	r3, r0, r3
 80035ba:	88f8      	ldrh	r0, [r7, #6]
 80035bc:	f000 fb58 	bl	8003c70 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	885b      	ldrh	r3, [r3, #2]
 80035ca:	461a      	mov	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4293      	cmp	r3, r2
 80035d0:	dbdb      	blt.n	800358a <lcdDrawImage+0x4a>
 80035d2:	e004      	b.n	80035de <lcdDrawImage+0x9e>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80035d4:	bf00      	nop
 80035d6:	e002      	b.n	80035de <lcdDrawImage+0x9e>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80035d8:	bf00      	nop
 80035da:	e000      	b.n	80035de <lcdDrawImage+0x9e>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80035dc:	bf00      	nop
	}
}
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000024 	.word	0x20000024

080035e8 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	80fb      	strh	r3, [r7, #6]
 80035fa:	4603      	mov	r3, r0
 80035fc:	80bb      	strh	r3, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	70fb      	strb	r3, [r7, #3]
 8003602:	4613      	mov	r3, r2
 8003604:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8003606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800360a:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <lcdDrawChar+0x14c>)
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	4293      	cmp	r3, r2
 8003610:	f280 808c 	bge.w	800372c <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8003614:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003618:	4a46      	ldr	r2, [pc, #280]	@ (8003734 <lcdDrawChar+0x14c>)
 800361a:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800361c:	4293      	cmp	r3, r2
 800361e:	f280 8085 	bge.w	800372c <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003626:	4a44      	ldr	r2, [pc, #272]	@ (8003738 <lcdDrawChar+0x150>)
 8003628:	6892      	ldr	r2, [r2, #8]
 800362a:	8892      	ldrh	r2, [r2, #4]
 800362c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800362e:	2b00      	cmp	r3, #0
 8003630:	db7c      	blt.n	800372c <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8003632:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003636:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <lcdDrawChar+0x150>)
 8003638:	6892      	ldr	r2, [r2, #8]
 800363a:	88d2      	ldrh	r2, [r2, #6]
 800363c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800363e:	2b00      	cmp	r3, #0
 8003640:	db74      	blt.n	800372c <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8003642:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <lcdDrawChar+0x150>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	88db      	ldrh	r3, [r3, #6]
 8003648:	08db      	lsrs	r3, r3, #3
 800364a:	b29b      	uxth	r3, r3
 800364c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003652:	2300      	movs	r3, #0
 8003654:	73bb      	strb	r3, [r7, #14]
 8003656:	e061      	b.n	800371c <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8003658:	2300      	movs	r3, #0
 800365a:	733b      	strb	r3, [r7, #12]
 800365c:	e055      	b.n	800370a <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800365e:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <lcdDrawChar+0x150>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	3a20      	subs	r2, #32
 8003668:	4933      	ldr	r1, [pc, #204]	@ (8003738 <lcdDrawChar+0x150>)
 800366a:	6889      	ldr	r1, [r1, #8]
 800366c:	88c9      	ldrh	r1, [r1, #6]
 800366e:	fb01 f202 	mul.w	r2, r1, r2
 8003672:	7ab9      	ldrb	r1, [r7, #10]
 8003674:	fb02 f101 	mul.w	r1, r2, r1
 8003678:	7bba      	ldrb	r2, [r7, #14]
 800367a:	7ab8      	ldrb	r0, [r7, #10]
 800367c:	fb00 f202 	mul.w	r2, r0, r2
 8003680:	4411      	add	r1, r2
 8003682:	7b3a      	ldrb	r2, [r7, #12]
 8003684:	440a      	add	r2, r1
 8003686:	4413      	add	r3, r2
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 800368c:	2300      	movs	r3, #0
 800368e:	72fb      	strb	r3, [r7, #11]
 8003690:	e032      	b.n	80036f8 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8003692:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003696:	2b00      	cmp	r3, #0
 8003698:	da12      	bge.n	80036c0 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	b29a      	uxth	r2, r3
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4413      	add	r3, r2
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4413      	add	r3, r2
 80036aa:	b298      	uxth	r0, r3
 80036ac:	7bbb      	ldrb	r3, [r7, #14]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	88bb      	ldrh	r3, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	883a      	ldrh	r2, [r7, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f7ff fb03 	bl	8002cc4 <lcdDrawPixel>
 80036be:	e015      	b.n	80036ec <lcdDrawChar+0x104>
				}
				else if (bg != color)
 80036c0:	8c3a      	ldrh	r2, [r7, #32]
 80036c2:	883b      	ldrh	r3, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d011      	beq.n	80036ec <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80036c8:	7afb      	ldrb	r3, [r7, #11]
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	4413      	add	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	4413      	add	r3, r2
 80036d8:	b298      	uxth	r0, r3
 80036da:	7bbb      	ldrb	r3, [r7, #14]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	88bb      	ldrh	r3, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8c3a      	ldrh	r2, [r7, #32]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7ff faec 	bl	8002cc4 <lcdDrawPixel>
				}
				line <<= 1;
 80036ec:	7b7b      	ldrb	r3, [r7, #13]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80036f2:	7afb      	ldrb	r3, [r7, #11]
 80036f4:	3301      	adds	r3, #1
 80036f6:	72fb      	strb	r3, [r7, #11]
 80036f8:	7afb      	ldrb	r3, [r7, #11]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d9c9      	bls.n	8003692 <lcdDrawChar+0xaa>
			}

			xP += 8;
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	3308      	adds	r3, #8
 8003702:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8003704:	7b3b      	ldrb	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	733b      	strb	r3, [r7, #12]
 800370a:	7b3a      	ldrb	r2, [r7, #12]
 800370c:	7abb      	ldrb	r3, [r7, #10]
 800370e:	429a      	cmp	r2, r3
 8003710:	d3a5      	bcc.n	800365e <lcdDrawChar+0x76>
		}

		xP = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	3301      	adds	r3, #1
 800371a:	73bb      	strb	r3, [r7, #14]
 800371c:	7bbb      	ldrb	r3, [r7, #14]
 800371e:	b29a      	uxth	r2, r3
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <lcdDrawChar+0x150>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	88db      	ldrh	r3, [r3, #6]
 8003726:	429a      	cmp	r2, r3
 8003728:	d396      	bcc.n	8003658 <lcdDrawChar+0x70>
 800372a:	e000      	b.n	800372e <lcdDrawChar+0x146>
		return;
 800372c:	bf00      	nop
	}
}
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}
 8003734:	20000024 	.word	0x20000024
 8003738:	2000002c 	.word	0x2000002c

0800373c <lcdDrawCharNoBackColor>:

void lcdDrawCharNoBackColor(int16_t x, int16_t y, unsigned char c, uint16_t color)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	80fb      	strh	r3, [r7, #6]
 800374e:	4603      	mov	r3, r0
 8003750:	80bb      	strh	r3, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	70fb      	strb	r3, [r7, #3]
 8003756:	4613      	mov	r3, r2
 8003758:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 800375a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800375e:	4a3e      	ldr	r2, [pc, #248]	@ (8003858 <lcdDrawCharNoBackColor+0x11c>)
 8003760:	8812      	ldrh	r2, [r2, #0]
 8003762:	4293      	cmp	r3, r2
 8003764:	da73      	bge.n	800384e <lcdDrawCharNoBackColor+0x112>
			(y >= lcdProperties.height) || 		// Clip bottom
 8003766:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800376a:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <lcdDrawCharNoBackColor+0x11c>)
 800376c:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 800376e:	4293      	cmp	r3, r2
 8003770:	da6d      	bge.n	800384e <lcdDrawCharNoBackColor+0x112>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	4a39      	ldr	r2, [pc, #228]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	8892      	ldrh	r2, [r2, #4]
 800377c:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800377e:	2b00      	cmp	r3, #0
 8003780:	db65      	blt.n	800384e <lcdDrawCharNoBackColor+0x112>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8003782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003786:	4a35      	ldr	r2, [pc, #212]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	88d2      	ldrh	r2, [r2, #6]
 800378c:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800378e:	2b00      	cmp	r3, #0
 8003790:	db5d      	blt.n	800384e <lcdDrawCharNoBackColor+0x112>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8003792:	4b32      	ldr	r3, [pc, #200]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	88db      	ldrh	r3, [r3, #6]
 8003798:	08db      	lsrs	r3, r3, #3
 800379a:	b29b      	uxth	r3, r3
 800379c:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	73bb      	strb	r3, [r7, #14]
 80037a6:	e04a      	b.n	800383e <lcdDrawCharNoBackColor+0x102>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 80037a8:	2300      	movs	r3, #0
 80037aa:	733b      	strb	r3, [r7, #12]
 80037ac:	e03e      	b.n	800382c <lcdDrawCharNoBackColor+0xf0>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	3a20      	subs	r2, #32
 80037b8:	4928      	ldr	r1, [pc, #160]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 80037ba:	6889      	ldr	r1, [r1, #8]
 80037bc:	88c9      	ldrh	r1, [r1, #6]
 80037be:	fb01 f202 	mul.w	r2, r1, r2
 80037c2:	7ab9      	ldrb	r1, [r7, #10]
 80037c4:	fb02 f101 	mul.w	r1, r2, r1
 80037c8:	7bba      	ldrb	r2, [r7, #14]
 80037ca:	7ab8      	ldrb	r0, [r7, #10]
 80037cc:	fb00 f202 	mul.w	r2, r0, r2
 80037d0:	4411      	add	r1, r2
 80037d2:	7b3a      	ldrb	r2, [r7, #12]
 80037d4:	440a      	add	r2, r1
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 80037dc:	2300      	movs	r3, #0
 80037de:	72fb      	strb	r3, [r7, #11]
 80037e0:	e01b      	b.n	800381a <lcdDrawCharNoBackColor+0xde>
			{
				if((line & 0x80) == 0x80)
 80037e2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da11      	bge.n	800380e <lcdDrawCharNoBackColor+0xd2>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 80037ea:	7afb      	ldrb	r3, [r7, #11]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	4413      	add	r3, r2
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	b298      	uxth	r0, r3
 80037fc:	7bbb      	ldrb	r3, [r7, #14]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	88bb      	ldrh	r3, [r7, #4]
 8003802:	4413      	add	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	883a      	ldrh	r2, [r7, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	f7ff fa5b 	bl	8002cc4 <lcdDrawPixel>
				}
				line <<= 1;
 800380e:	7b7b      	ldrb	r3, [r7, #13]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8003814:	7afb      	ldrb	r3, [r7, #11]
 8003816:	3301      	adds	r3, #1
 8003818:	72fb      	strb	r3, [r7, #11]
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	2b07      	cmp	r3, #7
 800381e:	d9e0      	bls.n	80037e2 <lcdDrawCharNoBackColor+0xa6>
			}

			xP += 8;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	3308      	adds	r3, #8
 8003824:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8003826:	7b3b      	ldrb	r3, [r7, #12]
 8003828:	3301      	adds	r3, #1
 800382a:	733b      	strb	r3, [r7, #12]
 800382c:	7b3a      	ldrb	r2, [r7, #12]
 800382e:	7abb      	ldrb	r3, [r7, #10]
 8003830:	429a      	cmp	r2, r3
 8003832:	d3bc      	bcc.n	80037ae <lcdDrawCharNoBackColor+0x72>
		}

		xP = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003838:	7bbb      	ldrb	r3, [r7, #14]
 800383a:	3301      	adds	r3, #1
 800383c:	73bb      	strb	r3, [r7, #14]
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	b29a      	uxth	r2, r3
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <lcdDrawCharNoBackColor+0x120>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	88db      	ldrh	r3, [r3, #6]
 8003848:	429a      	cmp	r2, r3
 800384a:	d3ad      	bcc.n	80037a8 <lcdDrawCharNoBackColor+0x6c>
 800384c:	e000      	b.n	8003850 <lcdDrawCharNoBackColor+0x114>
		return;
 800384e:	bf00      	nop
	}
}
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	bd90      	pop	{r4, r7, pc}
 8003856:	bf00      	nop
 8003858:	20000024 	.word	0x20000024
 800385c:	2000002c 	.word	0x2000002c

08003860 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8003860:	b40f      	push	{r0, r1, r2, r3}
 8003862:	b590      	push	{r4, r7, lr}
 8003864:	b085      	sub	sp, #20
 8003866:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	483d      	ldr	r0, [pc, #244]	@ (8003968 <lcdPrintf+0x108>)
 8003874:	f006 f8da 	bl	8009a2c <vsiprintf>
	va_end(lst);

	p = buf;
 8003878:	4b3b      	ldr	r3, [pc, #236]	@ (8003968 <lcdPrintf+0x108>)
 800387a:	607b      	str	r3, [r7, #4]
	while (*p)
 800387c:	e067      	b.n	800394e <lcdPrintf+0xee>
	{
		if (*p == '\n')
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d10c      	bne.n	80038a0 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8003886:	4b39      	ldr	r3, [pc, #228]	@ (800396c <lcdPrintf+0x10c>)
 8003888:	885a      	ldrh	r2, [r3, #2]
 800388a:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <lcdPrintf+0x110>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	88db      	ldrh	r3, [r3, #6]
 8003890:	4413      	add	r3, r2
 8003892:	b29a      	uxth	r2, r3
 8003894:	4b35      	ldr	r3, [pc, #212]	@ (800396c <lcdPrintf+0x10c>)
 8003896:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8003898:	4b34      	ldr	r3, [pc, #208]	@ (800396c <lcdPrintf+0x10c>)
 800389a:	2200      	movs	r2, #0
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e04a      	b.n	8003936 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0d      	cmp	r3, #13
 80038a6:	d046      	beq.n	8003936 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d10b      	bne.n	80038c8 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <lcdPrintf+0x10c>)
 80038b2:	881a      	ldrh	r2, [r3, #0]
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <lcdPrintf+0x110>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	b29b      	uxth	r3, r3
 80038be:	4413      	add	r3, r2
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	4b2a      	ldr	r3, [pc, #168]	@ (800396c <lcdPrintf+0x10c>)
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e036      	b.n	8003936 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80038c8:	4b28      	ldr	r3, [pc, #160]	@ (800396c <lcdPrintf+0x10c>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	b218      	sxth	r0, r3
 80038ce:	4b27      	ldr	r3, [pc, #156]	@ (800396c <lcdPrintf+0x10c>)
 80038d0:	885b      	ldrh	r3, [r3, #2]
 80038d2:	b219      	sxth	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	4b25      	ldr	r3, [pc, #148]	@ (8003970 <lcdPrintf+0x110>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	b29c      	uxth	r4, r3
 80038de:	4b24      	ldr	r3, [pc, #144]	@ (8003970 <lcdPrintf+0x110>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4623      	mov	r3, r4
 80038e8:	f7ff fe7e 	bl	80035e8 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 80038ec:	4b1f      	ldr	r3, [pc, #124]	@ (800396c <lcdPrintf+0x10c>)
 80038ee:	881a      	ldrh	r2, [r3, #0]
 80038f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003970 <lcdPrintf+0x110>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	4b1c      	ldr	r3, [pc, #112]	@ (800396c <lcdPrintf+0x10c>)
 80038fc:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80038fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003970 <lcdPrintf+0x110>)
 8003900:	7b1b      	ldrb	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <lcdPrintf+0xd6>
 8003906:	4b19      	ldr	r3, [pc, #100]	@ (800396c <lcdPrintf+0x10c>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <lcdPrintf+0x114>)
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	4619      	mov	r1, r3
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <lcdPrintf+0x110>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	889b      	ldrh	r3, [r3, #4]
 8003918:	1acb      	subs	r3, r1, r3
 800391a:	429a      	cmp	r2, r3
 800391c:	dd0b      	ble.n	8003936 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 800391e:	4b13      	ldr	r3, [pc, #76]	@ (800396c <lcdPrintf+0x10c>)
 8003920:	885a      	ldrh	r2, [r3, #2]
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <lcdPrintf+0x110>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	88db      	ldrh	r3, [r3, #6]
 8003928:	4413      	add	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	4b0f      	ldr	r3, [pc, #60]	@ (800396c <lcdPrintf+0x10c>)
 800392e:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8003930:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <lcdPrintf+0x10c>)
 8003932:	2200      	movs	r2, #0
 8003934:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3301      	adds	r3, #1
 800393a:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <lcdPrintf+0x10c>)
 800393e:	885a      	ldrh	r2, [r3, #2]
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <lcdPrintf+0x114>)
 8003942:	885b      	ldrh	r3, [r3, #2]
 8003944:	429a      	cmp	r2, r3
 8003946:	d302      	bcc.n	800394e <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8003948:	4b08      	ldr	r3, [pc, #32]	@ (800396c <lcdPrintf+0x10c>)
 800394a:	2200      	movs	r2, #0
 800394c:	805a      	strh	r2, [r3, #2]
	while (*p)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d193      	bne.n	800387e <lcdPrintf+0x1e>
		}
	}
}
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003962:	b004      	add	sp, #16
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000300 	.word	0x20000300
 800396c:	200002f8 	.word	0x200002f8
 8003970:	2000002c 	.word	0x2000002c
 8003974:	20000024 	.word	0x20000024

08003978 <lcdPrintfNoBackColor>:

void lcdPrintfNoBackColor(const char *fmt, ...)
{
 8003978:	b40f      	push	{r0, r1, r2, r3}
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	483a      	ldr	r0, [pc, #232]	@ (8003a74 <lcdPrintfNoBackColor+0xfc>)
 800398c:	f006 f84e 	bl	8009a2c <vsiprintf>
	va_end(lst);

	p = buf;
 8003990:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <lcdPrintfNoBackColor+0xfc>)
 8003992:	607b      	str	r3, [r7, #4]
	while (*p)
 8003994:	e062      	b.n	8003a5c <lcdPrintfNoBackColor+0xe4>
	{
		if (*p == '\n')
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b0a      	cmp	r3, #10
 800399c:	d10c      	bne.n	80039b8 <lcdPrintfNoBackColor+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800399e:	4b36      	ldr	r3, [pc, #216]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039a0:	885a      	ldrh	r2, [r3, #2]
 80039a2:	4b36      	ldr	r3, [pc, #216]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	88db      	ldrh	r3, [r3, #6]
 80039a8:	4413      	add	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039ae:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 80039b0:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	e045      	b.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		}
		else if (*p == '\r')
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b0d      	cmp	r3, #13
 80039be:	d041      	beq.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		{
			// skip em
		}
		else if (*p == '\t')
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d10b      	bne.n	80039e0 <lcdPrintfNoBackColor+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	889b      	ldrh	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e031      	b.n	8003a44 <lcdPrintfNoBackColor+0xcc>
		}
		else
		{
			lcdDrawCharNoBackColor(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor);
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b218      	sxth	r0, r3
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039e8:	885b      	ldrh	r3, [r3, #2]
 80039ea:	b219      	sxth	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	781a      	ldrb	r2, [r3, #0]
 80039f0:	4b22      	ldr	r3, [pc, #136]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f7ff fea1 	bl	800373c <lcdDrawCharNoBackColor>
			cursorXY.x += lcdFont.pFont->Width;
 80039fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	4b1f      	ldr	r3, [pc, #124]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	889b      	ldrh	r3, [r3, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a0a:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a0e:	7b1b      	ldrb	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d017      	beq.n	8003a44 <lcdPrintfNoBackColor+0xcc>
 8003a14:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <lcdPrintfNoBackColor+0x108>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	889b      	ldrh	r3, [r3, #4]
 8003a26:	1acb      	subs	r3, r1, r3
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	dd0b      	ble.n	8003a44 <lcdPrintfNoBackColor+0xcc>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8003a2c:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a2e:	885a      	ldrh	r2, [r3, #2]
 8003a30:	4b12      	ldr	r3, [pc, #72]	@ (8003a7c <lcdPrintfNoBackColor+0x104>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	88db      	ldrh	r3, [r3, #6]
 8003a36:	4413      	add	r3, r2
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a3c:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8003a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a4c:	885a      	ldrh	r2, [r3, #2]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <lcdPrintfNoBackColor+0x108>)
 8003a50:	885b      	ldrh	r3, [r3, #2]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d302      	bcc.n	8003a5c <lcdPrintfNoBackColor+0xe4>
		{
			cursorXY.y = 0;
 8003a56:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <lcdPrintfNoBackColor+0x100>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	805a      	strh	r2, [r3, #2]
	while (*p)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d198      	bne.n	8003996 <lcdPrintfNoBackColor+0x1e>
		}
	}
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	20000400 	.word	0x20000400
 8003a78:	200002f8 	.word	0x200002f8
 8003a7c:	2000002c 	.word	0x2000002c
 8003a80:	20000024 	.word	0x20000024

08003a84 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8003a8c:	4a04      	ldr	r2, [pc, #16]	@ (8003aa0 <lcdSetTextFont+0x1c>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6093      	str	r3, [r2, #8]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	2000002c 	.word	0x2000002c

08003aa4 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460a      	mov	r2, r1
 8003aae:	80fb      	strh	r3, [r7, #6]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4a05      	ldr	r2, [pc, #20]	@ (8003acc <lcdSetTextColor+0x28>)
 8003ab8:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8003aba:	88bb      	ldrh	r3, [r7, #4]
 8003abc:	4a03      	ldr	r2, [pc, #12]	@ (8003acc <lcdSetTextColor+0x28>)
 8003abe:	6053      	str	r3, [r2, #4]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	2000002c 	.word	0x2000002c

08003ad0 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8003ada:	4a2d      	ldr	r2, [pc, #180]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8003ae0:	2036      	movs	r0, #54	@ 0x36
 8003ae2:	f000 f8fb 	bl	8003cdc <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8003ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d83e      	bhi.n	8003b6c <lcdSetOrientation+0x9c>
 8003aee:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <lcdSetOrientation+0x24>)
 8003af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b39 	.word	0x08003b39
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b53 	.word	0x08003b53
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8003b04:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <lcdSetOrientation+0xc4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f8f7 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b10:	22f0      	movs	r2, #240	@ 0xf0
 8003b12:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003b14:	4b1e      	ldr	r3, [pc, #120]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b1a:	805a      	strh	r2, [r3, #2]
			break;
 8003b1c:	e027      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <lcdSetOrientation+0xc8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f8ea 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003b28:	4b19      	ldr	r3, [pc, #100]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b2a:	22f0      	movs	r2, #240	@ 0xf0
 8003b2c:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003b2e:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b30:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b34:	805a      	strh	r2, [r3, #2]
			break;
 8003b36:	e01a      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8003b38:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <lcdSetOrientation+0xcc>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f8dd 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b44:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b48:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003b4a:	4b11      	ldr	r3, [pc, #68]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b4c:	22f0      	movs	r2, #240	@ 0xf0
 8003b4e:	805a      	strh	r2, [r3, #2]
			break;
 8003b50:	e00d      	b.n	8003b6e <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <lcdSetOrientation+0xd0>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 f8d0 	bl	8003cfc <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b5e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b62:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b66:	22f0      	movs	r2, #240	@ 0xf0
 8003b68:	805a      	strh	r2, [r3, #2]
			break;
 8003b6a:	e000      	b.n	8003b6e <lcdSetOrientation+0x9e>
		default:
			break;
 8003b6c:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <lcdSetOrientation+0xc0>)
 8003b78:	885b      	ldrh	r3, [r3, #2]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2000      	movs	r0, #0
 8003b82:	f000 f829 	bl	8003bd8 <lcdSetWindow>
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000024 	.word	0x20000024
 8003b94:	200002fc 	.word	0x200002fc
 8003b98:	200002fe 	.word	0x200002fe
 8003b9c:	200002fd 	.word	0x200002fd
 8003ba0:	200002ff 	.word	0x200002ff

08003ba4 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	460a      	mov	r2, r1
 8003bae:	80fb      	strh	r3, [r7, #6]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8003bb4:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <lcdSetCursor+0x30>)
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8003bba:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <lcdSetCursor+0x30>)
 8003bbc:	88bb      	ldrh	r3, [r7, #4]
 8003bbe:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8003bc0:	88bb      	ldrh	r3, [r7, #4]
 8003bc2:	88fa      	ldrh	r2, [r7, #6]
 8003bc4:	88b9      	ldrh	r1, [r7, #4]
 8003bc6:	88f8      	ldrh	r0, [r7, #6]
 8003bc8:	f000 f806 	bl	8003bd8 <lcdSetWindow>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200002f8 	.word	0x200002f8

08003bd8 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	4611      	mov	r1, r2
 8003be4:	461a      	mov	r2, r3
 8003be6:	4623      	mov	r3, r4
 8003be8:	80fb      	strh	r3, [r7, #6]
 8003bea:	4603      	mov	r3, r0
 8003bec:	80bb      	strh	r3, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	807b      	strh	r3, [r7, #2]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8003bf6:	202a      	movs	r0, #42	@ 0x2a
 8003bf8:	f000 f870 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f87a 	bl	8003cfc <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 f874 	bl	8003cfc <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8003c14:	887b      	ldrh	r3, [r7, #2]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f86e 	bl	8003cfc <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f868 	bl	8003cfc <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8003c2c:	202b      	movs	r0, #43	@ 0x2b
 8003c2e:	f000 f855 	bl	8003cdc <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8003c32:	88bb      	ldrh	r3, [r7, #4]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f85f 	bl	8003cfc <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8003c3e:	88bb      	ldrh	r3, [r7, #4]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f859 	bl	8003cfc <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8003c4a:	883b      	ldrh	r3, [r7, #0]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f853 	bl	8003cfc <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8003c56:	883b      	ldrh	r3, [r7, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 f84d 	bl	8003cfc <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8003c62:	202c      	movs	r0, #44	@ 0x2c
 8003c64:	f000 f83a 	bl	8003cdc <lcdWriteCommand>
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60ba      	str	r2, [r7, #8]
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	81fb      	strh	r3, [r7, #14]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8003c86:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc4 <lcdDrawPixels+0x54>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc4 <lcdDrawPixels+0x54>)
 8003c90:	885b      	ldrh	r3, [r3, #2]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	89b9      	ldrh	r1, [r7, #12]
 8003c98:	89f8      	ldrh	r0, [r7, #14]
 8003c9a:	f7ff ff9d 	bl	8003bd8 <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f825 	bl	8003cfc <lcdWriteData>
  }
  while (i < dataLength);
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d3f1      	bcc.n	8003c9e <lcdDrawPixels+0x2e>
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000024 	.word	0x20000024

08003cc8 <lcdReset>:

static void lcdReset(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8003ccc:	2001      	movs	r0, #1
 8003cce:	f000 f805 	bl	8003cdc <lcdWriteCommand>
	HAL_Delay(50);
 8003cd2:	2032      	movs	r0, #50	@ 0x32
 8003cd4:	f002 f85c 	bl	8005d90 <HAL_Delay>
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8003ce6:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8003cea:	79fa      	ldrb	r2, [r7, #7]
 8003cec:	b292      	uxth	r2, r2
 8003cee:	801a      	strh	r2, [r3, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <lcdWriteData+0x1c>)
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	8013      	strh	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	60080000 	.word	0x60080000

08003d1c <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8003d1c:	b490      	push	{r4, r7}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	4611      	mov	r1, r2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4623      	mov	r3, r4
 8003d2c:	71fb      	strb	r3, [r7, #7]
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71bb      	strb	r3, [r7, #6]
 8003d32:	460b      	mov	r3, r1
 8003d34:	717b      	strb	r3, [r7, #5]
 8003d36:	4613      	mov	r3, r2
 8003d38:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8003d3e:	7f3b      	ldrb	r3, [r7, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <lcdBuildMemoryAccessControlConfig+0x30>
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
 8003d46:	f043 0304 	orr.w	r3, r3, #4
 8003d4a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8003d4c:	7e3b      	ldrb	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <lcdBuildMemoryAccessControlConfig+0x3e>
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	f043 0308 	orr.w	r3, r3, #8
 8003d58:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8003d5a:	793b      	ldrb	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <lcdBuildMemoryAccessControlConfig+0x4c>
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	f043 0310 	orr.w	r3, r3, #16
 8003d66:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8003d68:	797b      	ldrb	r3, [r7, #5]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <lcdBuildMemoryAccessControlConfig+0x5a>
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	f043 0320 	orr.w	r3, r3, #32
 8003d74:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8003d76:	79bb      	ldrb	r3, [r7, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <lcdBuildMemoryAccessControlConfig+0x68>
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d82:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <lcdBuildMemoryAccessControlConfig+0x76>
 8003d8a:	7bfb      	ldrb	r3, [r7, #15]
 8003d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d90:	73fb      	strb	r3, [r7, #15]
  return value;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc90      	pop	{r4, r7}
 8003d9c:	4770      	bx	lr
	...

08003da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003da4:	f001 ff82 	bl	8005cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003da8:	f000 f858 	bl	8003e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003dac:	f000 f920 	bl	8003ff0 <MX_GPIO_Init>
  MX_FSMC_Init();
 8003db0:	f000 f9c4 	bl	800413c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003db4:	f000 f8f2 	bl	8003f9c <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003db8:	f000 f8ba 	bl	8003f30 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	481c      	ldr	r0, [pc, #112]	@ (8003e34 <main+0x94>)
 8003dc2:	f002 fb61 	bl	8006488 <HAL_GPIO_WritePin>
  lcdInit();
 8003dc6:	f7fe facd 	bl	8002364 <lcdInit>
  lcdSetOrientation(PORTRAIT);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7ff fe80 	bl	8003ad0 <lcdSetOrientation>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4919      	ldr	r1, [pc, #100]	@ (8003e38 <main+0x98>)
 8003dd4:	4819      	ldr	r0, [pc, #100]	@ (8003e3c <main+0x9c>)
 8003dd6:	f003 fd96 	bl	8007906 <HAL_UART_Receive_IT>
  mainMenu();
 8003dda:	f000 fdf7 	bl	80049cc <mainMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  allowTouch = true;
 8003dde:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <main+0xa0>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
	  if(rxComplete)
 8003de4:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <main+0xa4>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01e      	beq.n	8003e2a <main+0x8a>
	  {
		  rxComplete = 0;
 8003dec:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <main+0xa4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
		  rxIndex = 0;
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <main+0xa8>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	801a      	strh	r2, [r3, #0]
		  processData((const char*) rxBuffer);
 8003df8:	4814      	ldr	r0, [pc, #80]	@ (8003e4c <main+0xac>)
 8003dfa:	f001 fb15 	bl	8005428 <processData>
		  if (processComplete)
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <main+0xb0>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00a      	beq.n	8003e1c <main+0x7c>
		  {
			  processComplete = 0;
 8003e06:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <main+0xb0>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
			  weatherIndex = 0;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	@ (8003e54 <main+0xb4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	801a      	strh	r2, [r3, #0]
			  dateIndex = 0;
 8003e12:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <main+0xb8>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	801a      	strh	r2, [r3, #0]
			  drawInterface();
 8003e18:	f001 f9a6 	bl	8005168 <drawInterface>
		  }
		  resetBuffer();
 8003e1c:	f001 fccc 	bl	80057b8 <resetBuffer>
		  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003e20:	2201      	movs	r2, #1
 8003e22:	4905      	ldr	r1, [pc, #20]	@ (8003e38 <main+0x98>)
 8003e24:	4805      	ldr	r0, [pc, #20]	@ (8003e3c <main+0x9c>)
 8003e26:	f003 fd6e 	bl	8007906 <HAL_UART_Receive_IT>
	  }
	  HAL_Delay(500);
 8003e2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e2e:	f001 ffaf 	bl	8005d90 <HAL_Delay>
	  allowTouch = true;
 8003e32:	e7d4      	b.n	8003dde <main+0x3e>
 8003e34:	40020400 	.word	0x40020400
 8003e38:	200005f0 	.word	0x200005f0
 8003e3c:	20000558 	.word	0x20000558
 8003e40:	20000059 	.word	0x20000059
 8003e44:	200009f6 	.word	0x200009f6
 8003e48:	200009f4 	.word	0x200009f4
 8003e4c:	200005f4 	.word	0x200005f4
 8003e50:	20000a30 	.word	0x20000a30
 8003e54:	20000a2c 	.word	0x20000a2c
 8003e58:	20000a2e 	.word	0x20000a2e

08003e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b094      	sub	sp, #80	@ 0x50
 8003e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e62:	f107 0320 	add.w	r3, r7, #32
 8003e66:	2230      	movs	r2, #48	@ 0x30
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f005 fde8 	bl	8009a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	4b28      	ldr	r3, [pc, #160]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	4a27      	ldr	r2, [pc, #156]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e90:	4b25      	ldr	r3, [pc, #148]	@ (8003f28 <SystemClock_Config+0xcc>)
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	607b      	str	r3, [r7, #4]
 8003ea0:	4b22      	ldr	r3, [pc, #136]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a21      	ldr	r2, [pc, #132]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b1f      	ldr	r3, [pc, #124]	@ (8003f2c <SystemClock_Config+0xd0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eb4:	607b      	str	r3, [r7, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ecc:	2304      	movs	r3, #4
 8003ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ed0:	23a8      	movs	r3, #168	@ 0xa8
 8003ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ed8:	2304      	movs	r3, #4
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003edc:	f107 0320 	add.w	r3, r7, #32
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 fb03 	bl	80064ec <HAL_RCC_OscConfig>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003eec:	f001 fc80 	bl	80057f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003efc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f08:	f107 030c 	add.w	r3, r7, #12
 8003f0c:	2105      	movs	r1, #5
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 fd64 	bl	80069dc <HAL_RCC_ClockConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003f1a:	f001 fc69 	bl	80057f0 <Error_Handler>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	3750      	adds	r7, #80	@ 0x50
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40007000 	.word	0x40007000

08003f30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f34:	4b17      	ldr	r3, [pc, #92]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f36:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <MX_SPI2_Init+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f48:	4b12      	ldr	r3, [pc, #72]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f4e:	4b11      	ldr	r3, [pc, #68]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f64:	2220      	movs	r2, #32
 8003f66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f6e:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f74:	4b07      	ldr	r3, [pc, #28]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f7c:	220a      	movs	r2, #10
 8003f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f80:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <MX_SPI2_Init+0x64>)
 8003f82:	f002 ff4b 	bl	8006e1c <HAL_SPI_Init>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f8c:	f001 fc30 	bl	80057f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	20000500 	.word	0x20000500
 8003f98:	40003800 	.word	0x40003800

08003f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa2:	4a12      	ldr	r2, [pc, #72]	@ (8003fec <MX_USART1_UART_Init+0x50>)
 8003fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fa8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fae:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc2:	220c      	movs	r2, #12
 8003fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003fd2:	4805      	ldr	r0, [pc, #20]	@ (8003fe8 <MX_USART1_UART_Init+0x4c>)
 8003fd4:	f003 fbbc 	bl	8007750 <HAL_UART_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003fde:	f001 fc07 	bl	80057f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000558 	.word	0x20000558
 8003fec:	40011000 	.word	0x40011000

08003ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	@ 0x30
 8003ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <MX_GPIO_Init+0x140>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a48      	ldr	r2, [pc, #288]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b46      	ldr	r3, [pc, #280]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	4b42      	ldr	r3, [pc, #264]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4a41      	ldr	r2, [pc, #260]	@ (8004130 <MX_GPIO_Init+0x140>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6313      	str	r3, [r2, #48]	@ 0x30
 8004032:	4b3f      	ldr	r3, [pc, #252]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	4b3b      	ldr	r3, [pc, #236]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004046:	4a3a      	ldr	r2, [pc, #232]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6313      	str	r3, [r2, #48]	@ 0x30
 800404e:	4b38      	ldr	r3, [pc, #224]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	4a33      	ldr	r2, [pc, #204]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004064:	f043 0310 	orr.w	r3, r3, #16
 8004068:	6313      	str	r3, [r2, #48]	@ 0x30
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <MX_GPIO_Init+0x140>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	4b2d      	ldr	r3, [pc, #180]	@ (8004130 <MX_GPIO_Init+0x140>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004080:	f043 0308 	orr.w	r3, r3, #8
 8004084:	6313      	str	r3, [r2, #48]	@ 0x30
 8004086:	4b2a      	ldr	r3, [pc, #168]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	60bb      	str	r3, [r7, #8]
 8004090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	607b      	str	r3, [r7, #4]
 8004096:	4b26      	ldr	r3, [pc, #152]	@ (8004130 <MX_GPIO_Init+0x140>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a25      	ldr	r2, [pc, #148]	@ (8004130 <MX_GPIO_Init+0x140>)
 800409c:	f043 0301 	orr.w	r3, r3, #1
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b23      	ldr	r3, [pc, #140]	@ (8004130 <MX_GPIO_Init+0x140>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80040ae:	2200      	movs	r2, #0
 80040b0:	2102      	movs	r1, #2
 80040b2:	4820      	ldr	r0, [pc, #128]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040b4:	f002 f9e8 	bl	8006488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 80040b8:	2201      	movs	r2, #1
 80040ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040be:	481d      	ldr	r0, [pc, #116]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040c0:	f002 f9e2 	bl	8006488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80040c4:	2320      	movs	r3, #32
 80040c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80040c8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80040cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ce:	2301      	movs	r3, #1
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80040d2:	f107 031c 	add.w	r3, r7, #28
 80040d6:	4619      	mov	r1, r3
 80040d8:	4817      	ldr	r0, [pc, #92]	@ (8004138 <MX_GPIO_Init+0x148>)
 80040da:	f002 f821 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80040de:	2302      	movs	r3, #2
 80040e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e2:	2301      	movs	r3, #1
 80040e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80040ee:	f107 031c 	add.w	r3, r7, #28
 80040f2:	4619      	mov	r1, r3
 80040f4:	480f      	ldr	r0, [pc, #60]	@ (8004134 <MX_GPIO_Init+0x144>)
 80040f6:	f002 f813 	bl	8006120 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 80040fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004100:	2301      	movs	r3, #1
 8004102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004108:	2302      	movs	r3, #2
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 800410c:	f107 031c 	add.w	r3, r7, #28
 8004110:	4619      	mov	r1, r3
 8004112:	4808      	ldr	r0, [pc, #32]	@ (8004134 <MX_GPIO_Init+0x144>)
 8004114:	f002 f804 	bl	8006120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004118:	2200      	movs	r2, #0
 800411a:	2100      	movs	r1, #0
 800411c:	2017      	movs	r0, #23
 800411e:	f001 ff36 	bl	8005f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004122:	2017      	movs	r0, #23
 8004124:	f001 ff4f 	bl	8005fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004128:	bf00      	nop
 800412a:	3730      	adds	r7, #48	@ 0x30
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	40020400 	.word	0x40020400
 8004138:	40020800 	.word	0x40020800

0800413c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	611a      	str	r2, [r3, #16]
 8004150:	615a      	str	r2, [r3, #20]
 8004152:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8004154:	4b27      	ldr	r3, [pc, #156]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004156:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800415a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800415c:	4b25      	ldr	r3, [pc, #148]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800415e:	4a26      	ldr	r2, [pc, #152]	@ (80041f8 <MX_FSMC_Init+0xbc>)
 8004160:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8004162:	4b24      	ldr	r3, [pc, #144]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004168:	4b22      	ldr	r3, [pc, #136]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800416e:	4b21      	ldr	r3, [pc, #132]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004176:	2210      	movs	r2, #16
 8004178:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800417a:	4b1e      	ldr	r3, [pc, #120]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004180:	4b1c      	ldr	r3, [pc, #112]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004186:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004192:	4b18      	ldr	r3, [pc, #96]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 8004194:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004198:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800419a:	4b16      	ldr	r3, [pc, #88]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 800419c:	2200      	movs	r2, #0
 800419e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80041a6:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80041b2:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80041bc:	230f      	movs	r3, #15
 80041be:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 80041c0:	2305      	movs	r3, #5
 80041c2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80041c8:	2310      	movs	r3, #16
 80041ca:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80041cc:	2311      	movs	r3, #17
 80041ce:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	2200      	movs	r2, #0
 80041d8:	4619      	mov	r1, r3
 80041da:	4806      	ldr	r0, [pc, #24]	@ (80041f4 <MX_FSMC_Init+0xb8>)
 80041dc:	f003 fa70 	bl	80076c0 <HAL_SRAM_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80041e6:	f001 fb03 	bl	80057f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80041ea:	bf00      	nop
 80041ec:	3720      	adds	r7, #32
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200005a0 	.word	0x200005a0
 80041f8:	a0000104 	.word	0xa0000104

080041fc <drawBackIcon>:

/* USER CODE BEGIN 4 */
void drawBackIcon()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af04      	add	r7, sp, #16
	lcdFillRoundRect(0, 0, 27, 23, 8, COLOR_WHITE);
 8004202:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004206:	9301      	str	r3, [sp, #4]
 8004208:	2308      	movs	r3, #8
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2317      	movs	r3, #23
 800420e:	221b      	movs	r2, #27
 8004210:	2100      	movs	r1, #0
 8004212:	2000      	movs	r0, #0
 8004214:	f7fe ffe2 	bl	80031dc <lcdFillRoundRect>
	lcdFillRect(10, 7, 13, 8, COLOR_BLACK);
 8004218:	2300      	movs	r3, #0
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	2308      	movs	r3, #8
 800421e:	220d      	movs	r2, #13
 8004220:	2107      	movs	r1, #7
 8004222:	200a      	movs	r0, #10
 8004224:	f7fe ff7e 	bl	8003124 <lcdFillRect>
	lcdFillTriangle(1, 11, 13, 2, 13, 20, COLOR_BLACK);
 8004228:	2300      	movs	r3, #0
 800422a:	9302      	str	r3, [sp, #8]
 800422c:	2314      	movs	r3, #20
 800422e:	9301      	str	r3, [sp, #4]
 8004230:	230d      	movs	r3, #13
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2302      	movs	r3, #2
 8004236:	220d      	movs	r2, #13
 8004238:	210b      	movs	r1, #11
 800423a:	2001      	movs	r0, #1
 800423c:	f7ff f833 	bl	80032a6 <lcdFillTriangle>
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <drawKeyboard>:

void drawKeyboard()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	@ 0x30
 800424c:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font12);
 800424e:	485b      	ldr	r0, [pc, #364]	@ (80043bc <drawKeyboard+0x174>)
 8004250:	f7ff fc18 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004254:	2100      	movs	r1, #0
 8004256:	2000      	movs	r0, #0
 8004258:	f7ff fc24 	bl	8003aa4 <lcdSetTextColor>
	for (int y = 200; y < 320; y++)
 800425c:	23c8      	movs	r3, #200	@ 0xc8
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	e014      	b.n	800428c <drawKeyboard+0x44>
	{
		for (int x = 0; x < 240; x++)
 8004262:	2300      	movs	r3, #0
 8004264:	623b      	str	r3, [r7, #32]
 8004266:	e00b      	b.n	8004280 <drawKeyboard+0x38>
		{
			lcdDrawPixel(x, y, COLOR_WHITE);
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	b29b      	uxth	r3, r3
 800426c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800426e:	b291      	uxth	r1, r2
 8004270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fd25 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	3301      	adds	r3, #1
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2bef      	cmp	r3, #239	@ 0xef
 8004284:	ddf0      	ble.n	8004268 <drawKeyboard+0x20>
	for (int y = 200; y < 320; y++)
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004292:	dbe6      	blt.n	8004262 <drawKeyboard+0x1a>
		}
	}
    int column = 0, row = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < (sizeof(keyMap) / sizeof(keyMap[0])) - 1; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e032      	b.n	8004308 <drawKeyboard+0xc0>
    {
    	int x = keyboardX0 + column * keyboardButtonWidth;
 80042a2:	2300      	movs	r3, #0
 80042a4:	461a      	mov	r2, r3
 80042a6:	2318      	movs	r3, #24
 80042a8:	4619      	mov	r1, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fb01 f303 	mul.w	r3, r1, r3
 80042b0:	4413      	add	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
    	int y = keyboardY0 + row * keyboardButtonHeight;
 80042b4:	23c8      	movs	r3, #200	@ 0xc8
 80042b6:	461a      	mov	r2, r3
 80042b8:	231e      	movs	r3, #30
 80042ba:	4619      	mov	r1, r3
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	607b      	str	r3, [r7, #4]
        lcdSetCursor(x + 8, y + 10);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3308      	adds	r3, #8
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	330a      	adds	r3, #10
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff fc63 	bl	8003ba4 <lcdSetCursor>
        lcdPrintfNoBackColor((char*)keyMap[i]);
 80042de:	4a38      	ldr	r2, [pc, #224]	@ (80043c0 <drawKeyboard+0x178>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff fb46 	bl	8003978 <lcdPrintfNoBackColor>

        column++;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]
        if (column == 10)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	2b0a      	cmp	r3, #10
 80042f6:	d104      	bne.n	8004302 <drawKeyboard+0xba>
        {
            column = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
            row++;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	3301      	adds	r3, #1
 8004300:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < (sizeof(keyMap) / sizeof(keyMap[0])) - 1; i++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2b26      	cmp	r3, #38	@ 0x26
 800430c:	d9c9      	bls.n	80042a2 <drawKeyboard+0x5a>
        }
    }
    lcdDrawLine(0, 230, 240, 230, COLOR_BLACK);
 800430e:	2300      	movs	r3, #0
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	23e6      	movs	r3, #230	@ 0xe6
 8004314:	22f0      	movs	r2, #240	@ 0xf0
 8004316:	21e6      	movs	r1, #230	@ 0xe6
 8004318:	2000      	movs	r0, #0
 800431a:	f7fe fd8d 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 260, 240, 260, COLOR_BLACK);
 800431e:	2300      	movs	r3, #0
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004326:	22f0      	movs	r2, #240	@ 0xf0
 8004328:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800432c:	2000      	movs	r0, #0
 800432e:	f7fe fd83 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 290, 240, 290, COLOR_BLACK);
 8004332:	2300      	movs	r3, #0
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f44f 7391 	mov.w	r3, #290	@ 0x122
 800433a:	22f0      	movs	r2, #240	@ 0xf0
 800433c:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004340:	2000      	movs	r0, #0
 8004342:	f7fe fd79 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(0, 200, 240, 200, COLOR_BLACK);
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	23c8      	movs	r3, #200	@ 0xc8
 800434c:	22f0      	movs	r2, #240	@ 0xf0
 800434e:	21c8      	movs	r1, #200	@ 0xc8
 8004350:	2000      	movs	r0, #0
 8004352:	f7fe fd71 	bl	8002e38 <lcdDrawLine>
    for (int i = 1; i <= 8; i++)
 8004356:	2301      	movs	r3, #1
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e016      	b.n	800438a <drawKeyboard+0x142>
    {
    	int x = keyboardX0 + i * keyboardButtonWidth;
 800435c:	2300      	movs	r3, #0
 800435e:	461a      	mov	r2, r3
 8004360:	2318      	movs	r3, #24
 8004362:	4619      	mov	r1, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    	lcdDrawLine(x, 200, x, 320, COLOR_BLACK);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	b218      	sxth	r0, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	b21a      	sxth	r2, r3
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800437e:	21c8      	movs	r1, #200	@ 0xc8
 8004380:	f7fe fd5a 	bl	8002e38 <lcdDrawLine>
    for (int i = 1; i <= 8; i++)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	3301      	adds	r3, #1
 8004388:	613b      	str	r3, [r7, #16]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b08      	cmp	r3, #8
 800438e:	dde5      	ble.n	800435c <drawKeyboard+0x114>
    }
    lcdDrawLine(216, 200, 216, 290, COLOR_BLACK);
 8004390:	2300      	movs	r3, #0
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f44f 7391 	mov.w	r3, #290	@ 0x122
 8004398:	22d8      	movs	r2, #216	@ 0xd8
 800439a:	21c8      	movs	r1, #200	@ 0xc8
 800439c:	20d8      	movs	r0, #216	@ 0xd8
 800439e:	f7fe fd4b 	bl	8002e38 <lcdDrawLine>
    lcdDrawLine(239, 230, 239, 320, COLOR_BLACK);
 80043a2:	2300      	movs	r3, #0
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80043aa:	22ef      	movs	r2, #239	@ 0xef
 80043ac:	21e6      	movs	r1, #230	@ 0xe6
 80043ae:	20ef      	movs	r0, #239	@ 0xef
 80043b0:	f7fe fd42 	bl	8002e38 <lcdDrawLine>
}
 80043b4:	bf00      	nop
 80043b6:	3728      	adds	r7, #40	@ 0x28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	20000060 	.word	0x20000060

080043c4 <applyShift>:

char applyShift(char character)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4603      	mov	r3, r0
 80043cc:	71fb      	strb	r3, [r7, #7]
    if (character >= 'a' && character <= 'z')
 80043ce:	79fb      	ldrb	r3, [r7, #7]
 80043d0:	2b60      	cmp	r3, #96	@ 0x60
 80043d2:	d906      	bls.n	80043e2 <applyShift+0x1e>
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80043d8:	d803      	bhi.n	80043e2 <applyShift+0x1e>
    {
        return character - ('a' - 'A');
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	3b20      	subs	r3, #32
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	e000      	b.n	80043e4 <applyShift+0x20>
    }
    return character;
 80043e2:	79fb      	ldrb	r3, [r7, #7]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <handleKeyboardTouch>:

void handleKeyboardTouch()
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
	if ((yCoordinates <= 23 && xCoordinates <= 27) && wifiConnect == 1)
 80043f6:	4b5e      	ldr	r3, [pc, #376]	@ (8004570 <handleKeyboardTouch+0x180>)
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	2b17      	cmp	r3, #23
 80043fc:	d80a      	bhi.n	8004414 <handleKeyboardTouch+0x24>
 80043fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004574 <handleKeyboardTouch+0x184>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	2b1b      	cmp	r3, #27
 8004404:	d806      	bhi.n	8004414 <handleKeyboardTouch+0x24>
 8004406:	4b5c      	ldr	r3, [pc, #368]	@ (8004578 <handleKeyboardTouch+0x188>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <handleKeyboardTouch+0x24>
	{
		wifiMenu();
 800440e:	f000 f917 	bl	8004640 <wifiMenu>
		return;
 8004412:	e0aa      	b.n	800456a <handleKeyboardTouch+0x17a>
	}
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004414:	2100      	movs	r1, #0
 8004416:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800441a:	f7ff fb43 	bl	8003aa4 <lcdSetTextColor>
	uint8_t column = (xCoordinates - keyboardX0) / keyboardButtonWidth;
 800441e:	4b55      	ldr	r3, [pc, #340]	@ (8004574 <handleKeyboardTouch+0x184>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2218      	movs	r2, #24
 800442a:	fb93 f3f2 	sdiv	r3, r3, r2
 800442e:	71fb      	strb	r3, [r7, #7]
	if (xCoordinates == 240)
 8004430:	4b50      	ldr	r3, [pc, #320]	@ (8004574 <handleKeyboardTouch+0x184>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	2bf0      	cmp	r3, #240	@ 0xf0
 8004436:	d109      	bne.n	800444c <handleKeyboardTouch+0x5c>
	{
		column = (xCoordinates - keyboardX0 - 1) / keyboardButtonWidth;
 8004438:	4b4e      	ldr	r3, [pc, #312]	@ (8004574 <handleKeyboardTouch+0x184>)
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	2218      	movs	r2, #24
 8004446:	fb93 f3f2 	sdiv	r3, r3, r2
 800444a:	71fb      	strb	r3, [r7, #7]
	}
    uint8_t row = (yCoordinates - keyboardY0) / keyboardButtonHeight;
 800444c:	4b48      	ldr	r3, [pc, #288]	@ (8004570 <handleKeyboardTouch+0x180>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	23c8      	movs	r3, #200	@ 0xc8
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	221e      	movs	r2, #30
 8004458:	fb93 f3f2 	sdiv	r3, r3, r2
 800445c:	717b      	strb	r3, [r7, #5]
    uint8_t keyIndex = row * 10 + column;
 800445e:	797b      	ldrb	r3, [r7, #5]
 8004460:	461a      	mov	r2, r3
 8004462:	0092      	lsls	r2, r2, #2
 8004464:	4413      	add	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4413      	add	r3, r2
 800446e:	713b      	strb	r3, [r7, #4]
    if (keyIndex >= sizeof(keyMap) / sizeof(keyMap[0])) return;
 8004470:	793b      	ldrb	r3, [r7, #4]
 8004472:	2b27      	cmp	r3, #39	@ 0x27
 8004474:	d878      	bhi.n	8004568 <handleKeyboardTouch+0x178>

    const char* key = keyMap[keyIndex];
 8004476:	793b      	ldrb	r3, [r7, #4]
 8004478:	4a40      	ldr	r2, [pc, #256]	@ (800457c <handleKeyboardTouch+0x18c>)
 800447a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447e:	603b      	str	r3, [r7, #0]
    if (strcmp(key, "Del") == 0)
 8004480:	493f      	ldr	r1, [pc, #252]	@ (8004580 <handleKeyboardTouch+0x190>)
 8004482:	6838      	ldr	r0, [r7, #0]
 8004484:	f7fb fea4 	bl	80001d0 <strcmp>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d110      	bne.n	80044b0 <handleKeyboardTouch+0xc0>
    {
    	if (passwordIndex > 0)
 800448e:	4b3d      	ldr	r3, [pc, #244]	@ (8004584 <handleKeyboardTouch+0x194>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d060      	beq.n	8004558 <handleKeyboardTouch+0x168>
    	{
    		passwordIndex--;
 8004496:	4b3b      	ldr	r3, [pc, #236]	@ (8004584 <handleKeyboardTouch+0x194>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	4b39      	ldr	r3, [pc, #228]	@ (8004584 <handleKeyboardTouch+0x194>)
 80044a0:	701a      	strb	r2, [r3, #0]
    		wifiPassword[passwordIndex] = '\0';
 80044a2:	4b38      	ldr	r3, [pc, #224]	@ (8004584 <handleKeyboardTouch+0x194>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b37      	ldr	r3, [pc, #220]	@ (8004588 <handleKeyboardTouch+0x198>)
 80044aa:	2100      	movs	r1, #0
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	e053      	b.n	8004558 <handleKeyboardTouch+0x168>
    	}
    }
    else if (strcmp(key, "^") == 0)
 80044b0:	4936      	ldr	r1, [pc, #216]	@ (800458c <handleKeyboardTouch+0x19c>)
 80044b2:	6838      	ldr	r0, [r7, #0]
 80044b4:	f7fb fe8c 	bl	80001d0 <strcmp>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <handleKeyboardTouch+0xee>
    {
        keyboardShift = !keyboardShift;
 80044be:	4b34      	ldr	r3, [pc, #208]	@ (8004590 <handleKeyboardTouch+0x1a0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	bf14      	ite	ne
 80044c6:	2301      	movne	r3, #1
 80044c8:	2300      	moveq	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <handleKeyboardTouch+0x1a0>)
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e03c      	b.n	8004558 <handleKeyboardTouch+0x168>
    }
    else if (strcmp(key, "<-") == 0)
 80044de:	492d      	ldr	r1, [pc, #180]	@ (8004594 <handleKeyboardTouch+0x1a4>)
 80044e0:	6838      	ldr	r0, [r7, #0]
 80044e2:	f7fb fe75 	bl	80001d0 <strcmp>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d114      	bne.n	8004516 <handleKeyboardTouch+0x126>
    {
    	sprintf(wifiConnectionInfo, "{\"ssid\":\"%s\", \"password\":\"%s\"}+", selectedSSID, wifiPassword);
 80044ec:	4b26      	ldr	r3, [pc, #152]	@ (8004588 <handleKeyboardTouch+0x198>)
 80044ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004598 <handleKeyboardTouch+0x1a8>)
 80044f0:	492a      	ldr	r1, [pc, #168]	@ (800459c <handleKeyboardTouch+0x1ac>)
 80044f2:	482b      	ldr	r0, [pc, #172]	@ (80045a0 <handleKeyboardTouch+0x1b0>)
 80044f4:	f005 fa1e 	bl	8009934 <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*)wifiConnectionInfo, strlen(wifiConnectionInfo), HAL_MAX_DELAY);
 80044f8:	4829      	ldr	r0, [pc, #164]	@ (80045a0 <handleKeyboardTouch+0x1b0>)
 80044fa:	f7fb fe73 	bl	80001e4 <strlen>
 80044fe:	4603      	mov	r3, r0
 8004500:	b29a      	uxth	r2, r3
 8004502:	f04f 33ff 	mov.w	r3, #4294967295
 8004506:	4926      	ldr	r1, [pc, #152]	@ (80045a0 <handleKeyboardTouch+0x1b0>)
 8004508:	4826      	ldr	r0, [pc, #152]	@ (80045a4 <handleKeyboardTouch+0x1b4>)
 800450a:	f003 f971 	bl	80077f0 <HAL_UART_Transmit>
    	passwordIndex = 0;
 800450e:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <handleKeyboardTouch+0x194>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e020      	b.n	8004558 <handleKeyboardTouch+0x168>
    }
    else if (passwordIndex <= MAX_PASSWORD_LENGTH)
 8004516:	4b1b      	ldr	r3, [pc, #108]	@ (8004584 <handleKeyboardTouch+0x194>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b20      	cmp	r3, #32
 800451c:	d81c      	bhi.n	8004558 <handleKeyboardTouch+0x168>
    {
    	char character = key[0];
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	71bb      	strb	r3, [r7, #6]
    	if (keyboardShift)
 8004524:	4b1a      	ldr	r3, [pc, #104]	@ (8004590 <handleKeyboardTouch+0x1a0>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <handleKeyboardTouch+0x148>
    	{
    	    character = applyShift(character);
 800452c:	79bb      	ldrb	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff48 	bl	80043c4 <applyShift>
 8004534:	4603      	mov	r3, r0
 8004536:	71bb      	strb	r3, [r7, #6]
    	}
    	wifiPassword[passwordIndex++] = character;
 8004538:	4b12      	ldr	r3, [pc, #72]	@ (8004584 <handleKeyboardTouch+0x194>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	b2d1      	uxtb	r1, r2
 8004540:	4a10      	ldr	r2, [pc, #64]	@ (8004584 <handleKeyboardTouch+0x194>)
 8004542:	7011      	strb	r1, [r2, #0]
 8004544:	4619      	mov	r1, r3
 8004546:	4a10      	ldr	r2, [pc, #64]	@ (8004588 <handleKeyboardTouch+0x198>)
 8004548:	79bb      	ldrb	r3, [r7, #6]
 800454a:	5453      	strb	r3, [r2, r1]
    	wifiPassword[passwordIndex] = '\0';
 800454c:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <handleKeyboardTouch+0x194>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <handleKeyboardTouch+0x198>)
 8004554:	2100      	movs	r1, #0
 8004556:	5499      	strb	r1, [r3, r2]
    }
    lcdSetCursor(0, 180);
 8004558:	21b4      	movs	r1, #180	@ 0xb4
 800455a:	2000      	movs	r0, #0
 800455c:	f7ff fb22 	bl	8003ba4 <lcdSetCursor>
    lcdPrintf(wifiPassword);
 8004560:	4809      	ldr	r0, [pc, #36]	@ (8004588 <handleKeyboardTouch+0x198>)
 8004562:	f7ff f97d 	bl	8003860 <lcdPrintf>
 8004566:	e000      	b.n	800456a <handleKeyboardTouch+0x17a>
    if (keyIndex >= sizeof(keyMap) / sizeof(keyMap[0])) return;
 8004568:	bf00      	nop
}
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200009fa 	.word	0x200009fa
 8004574:	200009f8 	.word	0x200009f8
 8004578:	200009fd 	.word	0x200009fd
 800457c:	20000060 	.word	0x20000060
 8004580:	0800beb0 	.word	0x0800beb0
 8004584:	20000cac 	.word	0x20000cac
 8004588:	20000c04 	.word	0x20000c04
 800458c:	0800beac 	.word	0x0800beac
 8004590:	20000cad 	.word	0x20000cad
 8004594:	0800be8c 	.word	0x0800be8c
 8004598:	20000c28 	.word	0x20000c28
 800459c:	0800beb4 	.word	0x0800beb4
 80045a0:	20000c48 	.word	0x20000c48
 80045a4:	20000558 	.word	0x20000558

080045a8 <handleWifiListTouch>:

void handleWifiListTouch()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
	if ((yCoordinates <= 23 && xCoordinates <= 27) && wifiList == 1)
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <handleWifiListTouch+0x7c>)
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	2b17      	cmp	r3, #23
 80045b4:	d80a      	bhi.n	80045cc <handleWifiListTouch+0x24>
 80045b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004628 <handleWifiListTouch+0x80>)
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	2b1b      	cmp	r3, #27
 80045bc:	d806      	bhi.n	80045cc <handleWifiListTouch+0x24>
 80045be:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <handleWifiListTouch+0x84>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d102      	bne.n	80045cc <handleWifiListTouch+0x24>
	{
		mainMenu();
 80045c6:	f000 fa01 	bl	80049cc <mainMenu>
		return;
 80045ca:	e028      	b.n	800461e <handleWifiListTouch+0x76>
	}
	uint8_t column = xCoordinates / 120;
 80045cc:	4b16      	ldr	r3, [pc, #88]	@ (8004628 <handleWifiListTouch+0x80>)
 80045ce:	881b      	ldrh	r3, [r3, #0]
 80045d0:	4a17      	ldr	r2, [pc, #92]	@ (8004630 <handleWifiListTouch+0x88>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	b29b      	uxth	r3, r3
 80045da:	71fb      	strb	r3, [r7, #7]
	uint8_t row = (yCoordinates - 25) / 50;
 80045dc:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <handleWifiListTouch+0x7c>)
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	3b19      	subs	r3, #25
 80045e2:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <handleWifiListTouch+0x8c>)
 80045e4:	fb82 1203 	smull	r1, r2, r2, r3
 80045e8:	1112      	asrs	r2, r2, #4
 80045ea:	17db      	asrs	r3, r3, #31
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	71bb      	strb	r3, [r7, #6]
	strncpy(selectedSSID, networkList[row + column * 6].ssid, MAX_SSID_LENGTH - 1);
 80045f0:	79b9      	ldrb	r1, [r7, #6]
 80045f2:	79fa      	ldrb	r2, [r7, #7]
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	18ca      	adds	r2, r1, r3
 80045fe:	4613      	mov	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a0c      	ldr	r2, [pc, #48]	@ (8004638 <handleWifiListTouch+0x90>)
 8004608:	4413      	add	r3, r2
 800460a:	221f      	movs	r2, #31
 800460c:	4619      	mov	r1, r3
 800460e:	480b      	ldr	r0, [pc, #44]	@ (800463c <handleWifiListTouch+0x94>)
 8004610:	f005 fa4b 	bl	8009aaa <strncpy>
	selectedSSID[MAX_SSID_LENGTH - 1] = '\0';
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <handleWifiListTouch+0x94>)
 8004616:	2200      	movs	r2, #0
 8004618:	77da      	strb	r2, [r3, #31]
	connectToWifi();
 800461a:	f000 f8b7 	bl	800478c <connectToWifi>
}
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200009fa 	.word	0x200009fa
 8004628:	200009f8 	.word	0x200009f8
 800462c:	200009fc 	.word	0x200009fc
 8004630:	88888889 	.word	0x88888889
 8004634:	51eb851f 	.word	0x51eb851f
 8004638:	20000a50 	.word	0x20000a50
 800463c:	20000c28 	.word	0x20000c28

08004640 <wifiMenu>:

void wifiMenu()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_BLACK);
 8004646:	2000      	movs	r0, #0
 8004648:	f7fe fb12 	bl	8002c70 <lcdFillRGB>
	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800464c:	2100      	movs	r1, #0
 800464e:	2000      	movs	r0, #0
 8004650:	f7ff fa28 	bl	8003aa4 <lcdSetTextColor>
	lcdSetTextFont(&Font12);
 8004654:	4844      	ldr	r0, [pc, #272]	@ (8004768 <wifiMenu+0x128>)
 8004656:	f7ff fa15 	bl	8003a84 <lcdSetTextFont>
	drawBackIcon();
 800465a:	f7ff fdcf 	bl	80041fc <drawBackIcon>
	wifiList = 1;
 800465e:	4b43      	ldr	r3, [pc, #268]	@ (800476c <wifiMenu+0x12c>)
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
	wifiConnect = 0;
 8004664:	4b42      	ldr	r3, [pc, #264]	@ (8004770 <wifiMenu+0x130>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
	menu = 0;
 800466a:	4b42      	ldr	r3, [pc, #264]	@ (8004774 <wifiMenu+0x134>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < networkCount / 2; i++)
 8004670:	2300      	movs	r3, #0
 8004672:	607b      	str	r3, [r7, #4]
 8004674:	e05c      	b.n	8004730 <wifiMenu+0xf0>
	{
		lcdFillRoundRect(0, 25 + 50 * i, 118, 45, 10, COLOR_WHITE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	0092      	lsls	r2, r2, #2
 800467e:	4413      	add	r3, r2
 8004680:	461a      	mov	r2, r3
 8004682:	0091      	lsls	r1, r2, #2
 8004684:	461a      	mov	r2, r3
 8004686:	460b      	mov	r3, r1
 8004688:	4413      	add	r3, r2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	b29b      	uxth	r3, r3
 800468e:	3319      	adds	r3, #25
 8004690:	b29b      	uxth	r3, r3
 8004692:	b219      	sxth	r1, r3
 8004694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	230a      	movs	r3, #10
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	232d      	movs	r3, #45	@ 0x2d
 80046a0:	2276      	movs	r2, #118	@ 0x76
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fe fd9a 	bl	80031dc <lcdFillRoundRect>
		drawAlignedText(networkList[i].ssid, 45 + 50 * i, 120, 12, NOBACKCOLOR);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4a31      	ldr	r2, [pc, #196]	@ (8004778 <wifiMenu+0x138>)
 80046b4:	1898      	adds	r0, r3, r2
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2232      	movs	r2, #50	@ 0x32
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	230c      	movs	r3, #12
 80046c8:	2278      	movs	r2, #120	@ 0x78
 80046ca:	f7fd ffbf 	bl	800264c <drawAlignedText>
		lcdFillRoundRect(120, 25 + 50 * i, 122, 45, 10, COLOR_WHITE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	0091      	lsls	r1, r2, #2
 80046dc:	461a      	mov	r2, r3
 80046de:	460b      	mov	r3, r1
 80046e0:	4413      	add	r3, r2
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3319      	adds	r3, #25
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b219      	sxth	r1, r3
 80046ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	230a      	movs	r3, #10
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	232d      	movs	r3, #45	@ 0x2d
 80046f8:	227a      	movs	r2, #122	@ 0x7a
 80046fa:	2078      	movs	r0, #120	@ 0x78
 80046fc:	f7fe fd6e 	bl	80031dc <lcdFillRoundRect>
		drawAlignedText(networkList[i + 6].ssid, 45 + 50 * i, 360, 12, NOBACKCOLOR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	1d9a      	adds	r2, r3, #6
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	4413      	add	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <wifiMenu+0x138>)
 800470e:	1898      	adds	r0, r3, r2
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2232      	movs	r2, #50	@ 0x32
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	230c      	movs	r3, #12
 8004722:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8004726:	f7fd ff91 	bl	800264c <drawAlignedText>
	for (int i = 0; i < networkCount / 2; i++)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3301      	adds	r3, #1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	4b12      	ldr	r3, [pc, #72]	@ (800477c <wifiMenu+0x13c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0fda      	lsrs	r2, r3, #31
 8004736:	4413      	add	r3, r2
 8004738:	105b      	asrs	r3, r3, #1
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4293      	cmp	r3, r2
 8004740:	db99      	blt.n	8004676 <wifiMenu+0x36>
	}
	memset(selectedSSID, 0, sizeof(selectedSSID));
 8004742:	2220      	movs	r2, #32
 8004744:	2100      	movs	r1, #0
 8004746:	480e      	ldr	r0, [pc, #56]	@ (8004780 <wifiMenu+0x140>)
 8004748:	f005 f97a 	bl	8009a40 <memset>
	memset(wifiPassword, 0, sizeof(wifiPassword));
 800474c:	2221      	movs	r2, #33	@ 0x21
 800474e:	2100      	movs	r1, #0
 8004750:	480c      	ldr	r0, [pc, #48]	@ (8004784 <wifiMenu+0x144>)
 8004752:	f005 f975 	bl	8009a40 <memset>
	memset(wifiConnectionInfo, 0, sizeof(wifiConnectionInfo));
 8004756:	2264      	movs	r2, #100	@ 0x64
 8004758:	2100      	movs	r1, #0
 800475a:	480b      	ldr	r0, [pc, #44]	@ (8004788 <wifiMenu+0x148>)
 800475c:	f005 f970 	bl	8009a40 <memset>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	2000000c 	.word	0x2000000c
 800476c:	200009fc 	.word	0x200009fc
 8004770:	200009fd 	.word	0x200009fd
 8004774:	20000058 	.word	0x20000058
 8004778:	20000a50 	.word	0x20000a50
 800477c:	20000c00 	.word	0x20000c00
 8004780:	20000c28 	.word	0x20000c28
 8004784:	20000c04 	.word	0x20000c04
 8004788:	20000c48 	.word	0x20000c48

0800478c <connectToWifi>:

void connectToWifi()
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af02      	add	r7, sp, #8
	lcdFillRGB(COLOR_BLACK);
 8004792:	2000      	movs	r0, #0
 8004794:	f7fe fa6c 	bl	8002c70 <lcdFillRGB>
	drawKeyboard();
 8004798:	f7ff fd56 	bl	8004248 <drawKeyboard>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800479c:	2100      	movs	r1, #0
 800479e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80047a2:	f7ff f97f 	bl	8003aa4 <lcdSetTextColor>
	drawBackIcon();
 80047a6:	f7ff fd29 	bl	80041fc <drawBackIcon>
	wifiList = 0;
 80047aa:	4b08      	ldr	r3, [pc, #32]	@ (80047cc <connectToWifi+0x40>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
	wifiConnect = 1;
 80047b0:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <connectToWifi+0x44>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
	drawAlignedText(selectedSSID, 70, 240, 12, NOBACKCOLOR);
 80047b6:	2300      	movs	r3, #0
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	230c      	movs	r3, #12
 80047bc:	22f0      	movs	r2, #240	@ 0xf0
 80047be:	2146      	movs	r1, #70	@ 0x46
 80047c0:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <connectToWifi+0x48>)
 80047c2:	f7fd ff43 	bl	800264c <drawAlignedText>
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	200009fc 	.word	0x200009fc
 80047d0:	200009fd 	.word	0x200009fd
 80047d4:	20000c28 	.word	0x20000c28

080047d8 <weatherForecastMenu>:

void weatherForecastMenu()
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 80047de:	484c      	ldr	r0, [pc, #304]	@ (8004910 <weatherForecastMenu+0x138>)
 80047e0:	f7ff f950 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80047e4:	2100      	movs	r1, #0
 80047e6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80047ea:	f7ff f95b 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 80047ee:	2000      	movs	r0, #0
 80047f0:	f7fe fa3e 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 80047f4:	f7ff fd02 	bl	80041fc <drawBackIcon>
	weatherForecast = 1;
 80047f8:	4b46      	ldr	r3, [pc, #280]	@ (8004914 <weatherForecastMenu+0x13c>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
	showWeather = 0;
 80047fe:	4b46      	ldr	r3, [pc, #280]	@ (8004918 <weatherForecastMenu+0x140>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004804:	4b45      	ldr	r3, [pc, #276]	@ (800491c <weatherForecastMenu+0x144>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
	drawAlignedText(" Choose a location", 0, 240, 16, NOBACKCOLOR);
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2310      	movs	r3, #16
 8004810:	22f0      	movs	r2, #240	@ 0xf0
 8004812:	2100      	movs	r1, #0
 8004814:	4842      	ldr	r0, [pc, #264]	@ (8004920 <weatherForecastMenu+0x148>)
 8004816:	f7fd ff19 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800481a:	2100      	movs	r1, #0
 800481c:	2000      	movs	r0, #0
 800481e:	f7ff f941 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 8004822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	230a      	movs	r3, #10
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	2328      	movs	r3, #40	@ 0x28
 800482e:	22f0      	movs	r2, #240	@ 0xf0
 8004830:	2120      	movs	r1, #32
 8004832:	2000      	movs	r0, #0
 8004834:	f7fe fcd2 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Sai Gon", 45, 240, 16, NOBACKCOLOR);
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	2310      	movs	r3, #16
 800483e:	22f0      	movs	r2, #240	@ 0xf0
 8004840:	212d      	movs	r1, #45	@ 0x2d
 8004842:	4838      	ldr	r0, [pc, #224]	@ (8004924 <weatherForecastMenu+0x14c>)
 8004844:	f7fd ff02 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 8004848:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	230a      	movs	r3, #10
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2328      	movs	r3, #40	@ 0x28
 8004854:	22f0      	movs	r2, #240	@ 0xf0
 8004856:	2150      	movs	r1, #80	@ 0x50
 8004858:	2000      	movs	r0, #0
 800485a:	f7fe fcbf 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Nha Trang", 93, 240, 16, NOBACKCOLOR);
 800485e:	2300      	movs	r3, #0
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	2310      	movs	r3, #16
 8004864:	22f0      	movs	r2, #240	@ 0xf0
 8004866:	215d      	movs	r1, #93	@ 0x5d
 8004868:	482f      	ldr	r0, [pc, #188]	@ (8004928 <weatherForecastMenu+0x150>)
 800486a:	f7fd feef 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 800486e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	230a      	movs	r3, #10
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	2328      	movs	r3, #40	@ 0x28
 800487a:	22f0      	movs	r2, #240	@ 0xf0
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	2000      	movs	r0, #0
 8004880:	f7fe fcac 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Ha Noi", 141, 240, 16, NOBACKCOLOR);
 8004884:	2300      	movs	r3, #0
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2310      	movs	r3, #16
 800488a:	22f0      	movs	r2, #240	@ 0xf0
 800488c:	218d      	movs	r1, #141	@ 0x8d
 800488e:	4827      	ldr	r0, [pc, #156]	@ (800492c <weatherForecastMenu+0x154>)
 8004890:	f7fd fedc 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 176, 240, 40, 10, COLOR_WHITE);
 8004894:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004898:	9301      	str	r3, [sp, #4]
 800489a:	230a      	movs	r3, #10
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	2328      	movs	r3, #40	@ 0x28
 80048a0:	22f0      	movs	r2, #240	@ 0xf0
 80048a2:	21b0      	movs	r1, #176	@ 0xb0
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fe fc99 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Tampere", 189, 240, 16, NOBACKCOLOR);
 80048aa:	2300      	movs	r3, #0
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	2310      	movs	r3, #16
 80048b0:	22f0      	movs	r2, #240	@ 0xf0
 80048b2:	21bd      	movs	r1, #189	@ 0xbd
 80048b4:	481e      	ldr	r0, [pc, #120]	@ (8004930 <weatherForecastMenu+0x158>)
 80048b6:	f7fd fec9 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 224, 240, 40, 10, COLOR_WHITE);
 80048ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048be:	9301      	str	r3, [sp, #4]
 80048c0:	230a      	movs	r3, #10
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2328      	movs	r3, #40	@ 0x28
 80048c6:	22f0      	movs	r2, #240	@ 0xf0
 80048c8:	21e0      	movs	r1, #224	@ 0xe0
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7fe fc86 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Arnhem", 237, 240, 16, NOBACKCOLOR);
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	22f0      	movs	r2, #240	@ 0xf0
 80048d8:	21ed      	movs	r1, #237	@ 0xed
 80048da:	4816      	ldr	r0, [pc, #88]	@ (8004934 <weatherForecastMenu+0x15c>)
 80048dc:	f7fd feb6 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 272, 240, 40, 10, COLOR_WHITE);
 80048e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	230a      	movs	r3, #10
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	2328      	movs	r3, #40	@ 0x28
 80048ec:	22f0      	movs	r2, #240	@ 0xf0
 80048ee:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80048f2:	2000      	movs	r0, #0
 80048f4:	f7fe fc72 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Sydney", 285, 240, 16, NOBACKCOLOR);
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2310      	movs	r3, #16
 80048fe:	22f0      	movs	r2, #240	@ 0xf0
 8004900:	f240 111d 	movw	r1, #285	@ 0x11d
 8004904:	480c      	ldr	r0, [pc, #48]	@ (8004938 <weatherForecastMenu+0x160>)
 8004906:	f7fd fea1 	bl	800264c <drawAlignedText>
}
 800490a:	bf00      	nop
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	20000014 	.word	0x20000014
 8004914:	200009fe 	.word	0x200009fe
 8004918:	200009ff 	.word	0x200009ff
 800491c:	20000058 	.word	0x20000058
 8004920:	0800bed4 	.word	0x0800bed4
 8004924:	0800bee8 	.word	0x0800bee8
 8004928:	0800bef0 	.word	0x0800bef0
 800492c:	0800befc 	.word	0x0800befc
 8004930:	0800bf04 	.word	0x0800bf04
 8004934:	0800bf0c 	.word	0x0800bf0c
 8004938:	0800bf14 	.word	0x0800bf14

0800493c <gardenStateMenu>:

void gardenStateMenu()
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 8004942:	481c      	ldr	r0, [pc, #112]	@ (80049b4 <gardenStateMenu+0x78>)
 8004944:	f7ff f89e 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004948:	2100      	movs	r1, #0
 800494a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800494e:	f7ff f8a9 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 8004952:	2000      	movs	r0, #0
 8004954:	f7fe f98c 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 8004958:	f7ff fc50 	bl	80041fc <drawBackIcon>
	gardenState = 1;
 800495c:	4b16      	ldr	r3, [pc, #88]	@ (80049b8 <gardenStateMenu+0x7c>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
	showGardenState = 0;
 8004962:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <gardenStateMenu+0x80>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <gardenStateMenu+0x84>)
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
	drawAlignedText(" Choose a garden", 0, 240, 16, NOBACKCOLOR);
 800496e:	2300      	movs	r3, #0
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2310      	movs	r3, #16
 8004974:	22f0      	movs	r2, #240	@ 0xf0
 8004976:	2100      	movs	r1, #0
 8004978:	4812      	ldr	r0, [pc, #72]	@ (80049c4 <gardenStateMenu+0x88>)
 800497a:	f7fd fe67 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800497e:	2100      	movs	r1, #0
 8004980:	2000      	movs	r0, #0
 8004982:	f7ff f88f 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 8004986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	230a      	movs	r3, #10
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2328      	movs	r3, #40	@ 0x28
 8004992:	22f0      	movs	r2, #240	@ 0xf0
 8004994:	2120      	movs	r1, #32
 8004996:	2000      	movs	r0, #0
 8004998:	f7fe fc20 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Phu Nhuan", 45, 240, 16, NOBACKCOLOR);
 800499c:	2300      	movs	r3, #0
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2310      	movs	r3, #16
 80049a2:	22f0      	movs	r2, #240	@ 0xf0
 80049a4:	212d      	movs	r1, #45	@ 0x2d
 80049a6:	4808      	ldr	r0, [pc, #32]	@ (80049c8 <gardenStateMenu+0x8c>)
 80049a8:	f7fd fe50 	bl	800264c <drawAlignedText>
}
 80049ac:	bf00      	nop
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000014 	.word	0x20000014
 80049b8:	20000a00 	.word	0x20000a00
 80049bc:	20000a01 	.word	0x20000a01
 80049c0:	20000058 	.word	0x20000058
 80049c4:	0800bf1c 	.word	0x0800bf1c
 80049c8:	0800bf30 	.word	0x0800bf30

080049cc <mainMenu>:

void mainMenu()
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 80049d2:	482f      	ldr	r0, [pc, #188]	@ (8004a90 <mainMenu+0xc4>)
 80049d4:	f7ff f856 	bl	8003a84 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80049d8:	2100      	movs	r1, #0
 80049da:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80049de:	f7ff f861 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fe f944 	bl	8002c70 <lcdFillRGB>
	menu = 1;
 80049e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a94 <mainMenu+0xc8>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
	gardenState = 0;
 80049ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004a98 <mainMenu+0xcc>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	701a      	strb	r2, [r3, #0]
	weatherForecast = 0;
 80049f4:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <mainMenu+0xd0>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
	wifiList = 0;
 80049fa:	4b29      	ldr	r3, [pc, #164]	@ (8004aa0 <mainMenu+0xd4>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
	drawAlignedText("Choose an option", 0, 240, 16, NOBACKCOLOR);
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2310      	movs	r3, #16
 8004a06:	22f0      	movs	r2, #240	@ 0xf0
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4826      	ldr	r0, [pc, #152]	@ (8004aa4 <mainMenu+0xd8>)
 8004a0c:	f7fd fe1e 	bl	800264c <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004a10:	2100      	movs	r1, #0
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7ff f846 	bl	8003aa4 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 8004a18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	230a      	movs	r3, #10
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2328      	movs	r3, #40	@ 0x28
 8004a24:	22f0      	movs	r2, #240	@ 0xf0
 8004a26:	2120      	movs	r1, #32
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7fe fbd7 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Connect to WiFi", 45, 240, 16, NOBACKCOLOR);
 8004a2e:	2300      	movs	r3, #0
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2310      	movs	r3, #16
 8004a34:	22f0      	movs	r2, #240	@ 0xf0
 8004a36:	212d      	movs	r1, #45	@ 0x2d
 8004a38:	481b      	ldr	r0, [pc, #108]	@ (8004aa8 <mainMenu+0xdc>)
 8004a3a:	f7fd fe07 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 8004a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a42:	9301      	str	r3, [sp, #4]
 8004a44:	230a      	movs	r3, #10
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	2328      	movs	r3, #40	@ 0x28
 8004a4a:	22f0      	movs	r2, #240	@ 0xf0
 8004a4c:	2150      	movs	r1, #80	@ 0x50
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f7fe fbc4 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Weather forecast", 93, 240, 16, NOBACKCOLOR);
 8004a54:	2300      	movs	r3, #0
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2310      	movs	r3, #16
 8004a5a:	22f0      	movs	r2, #240	@ 0xf0
 8004a5c:	215d      	movs	r1, #93	@ 0x5d
 8004a5e:	4813      	ldr	r0, [pc, #76]	@ (8004aac <mainMenu+0xe0>)
 8004a60:	f7fd fdf4 	bl	800264c <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 8004a64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	2328      	movs	r3, #40	@ 0x28
 8004a70:	22f0      	movs	r2, #240	@ 0xf0
 8004a72:	2180      	movs	r1, #128	@ 0x80
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fe fbb1 	bl	80031dc <lcdFillRoundRect>
	drawAlignedText("Show garden state", 141, 240, 16, NOBACKCOLOR);
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	2310      	movs	r3, #16
 8004a80:	22f0      	movs	r2, #240	@ 0xf0
 8004a82:	218d      	movs	r1, #141	@ 0x8d
 8004a84:	480a      	ldr	r0, [pc, #40]	@ (8004ab0 <mainMenu+0xe4>)
 8004a86:	f7fd fde1 	bl	800264c <drawAlignedText>
}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000014 	.word	0x20000014
 8004a94:	20000058 	.word	0x20000058
 8004a98:	20000a00 	.word	0x20000a00
 8004a9c:	200009fe 	.word	0x200009fe
 8004aa0:	200009fc 	.word	0x200009fc
 8004aa4:	0800bf3c 	.word	0x0800bf3c
 8004aa8:	0800bf50 	.word	0x0800bf50
 8004aac:	0800bf60 	.word	0x0800bf60
 8004ab0:	0800bf74 	.word	0x0800bf74

08004ab4 <drawBufferScreen>:

void drawBufferScreen()
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af02      	add	r7, sp, #8
	menu = 0;
 8004aba:	4b0c      	ldr	r3, [pc, #48]	@ (8004aec <drawBufferScreen+0x38>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_BLACK);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7fe f8d5 	bl	8002c70 <lcdFillRGB>
	drawBackIcon();
 8004ac6:	f7ff fb99 	bl	80041fc <drawBackIcon>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004aca:	2100      	movs	r1, #0
 8004acc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004ad0:	f7fe ffe8 	bl	8003aa4 <lcdSetTextColor>
	drawAlignedText("Fetching data", 160, 240, 16, NOBACKCOLOR);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2310      	movs	r3, #16
 8004ada:	22f0      	movs	r2, #240	@ 0xf0
 8004adc:	21a0      	movs	r1, #160	@ 0xa0
 8004ade:	4804      	ldr	r0, [pc, #16]	@ (8004af0 <drawBufferScreen+0x3c>)
 8004ae0:	f7fd fdb4 	bl	800264c <drawAlignedText>
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000058 	.word	0x20000058
 8004af0:	0800bf88 	.word	0x0800bf88

08004af4 <checkCoordinates>:

void checkCoordinates()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	if ((yCoordinates >= 32 && yCoordinates <= 72) && menu == 1)
 8004af8:	4b76      	ldr	r3, [pc, #472]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	2b1f      	cmp	r3, #31
 8004afe:	d90f      	bls.n	8004b20 <checkCoordinates+0x2c>
 8004b00:	4b74      	ldr	r3, [pc, #464]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	2b48      	cmp	r3, #72	@ 0x48
 8004b06:	d80b      	bhi.n	8004b20 <checkCoordinates+0x2c>
 8004b08:	4b73      	ldr	r3, [pc, #460]	@ (8004cd8 <checkCoordinates+0x1e4>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <checkCoordinates+0x2c>
	{
		drawBufferScreen();
 8004b10:	f7ff ffd0 	bl	8004ab4 <drawBufferScreen>
		sendWifiRequest();
 8004b14:	f000 fc24 	bl	8005360 <sendWifiRequest>
		wifiList = 1;
 8004b18:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <checkCoordinates+0x1e8>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e0d6      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120 && menu == 1) || (yCoordinates <= 23 && xCoordinates <= 27 && showWeather == 1))
 8004b20:	4b6c      	ldr	r3, [pc, #432]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b26:	d907      	bls.n	8004b38 <checkCoordinates+0x44>
 8004b28:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	2b78      	cmp	r3, #120	@ 0x78
 8004b2e:	d803      	bhi.n	8004b38 <checkCoordinates+0x44>
 8004b30:	4b69      	ldr	r3, [pc, #420]	@ (8004cd8 <checkCoordinates+0x1e4>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d00b      	beq.n	8004b50 <checkCoordinates+0x5c>
 8004b38:	4b66      	ldr	r3, [pc, #408]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	2b17      	cmp	r3, #23
 8004b3e:	d80a      	bhi.n	8004b56 <checkCoordinates+0x62>
 8004b40:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <checkCoordinates+0x1ec>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	2b1b      	cmp	r3, #27
 8004b46:	d806      	bhi.n	8004b56 <checkCoordinates+0x62>
 8004b48:	4b66      	ldr	r3, [pc, #408]	@ (8004ce4 <checkCoordinates+0x1f0>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <checkCoordinates+0x62>
	{
		weatherForecastMenu();
 8004b50:	f7ff fe42 	bl	80047d8 <weatherForecastMenu>
 8004b54:	e0bb      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 128 && yCoordinates <= 168 && menu == 1) || (yCoordinates <= 23 && xCoordinates <= 27 && showGardenState == 1))
 8004b56:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5c:	d907      	bls.n	8004b6e <checkCoordinates+0x7a>
 8004b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	2ba8      	cmp	r3, #168	@ 0xa8
 8004b64:	d803      	bhi.n	8004b6e <checkCoordinates+0x7a>
 8004b66:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd8 <checkCoordinates+0x1e4>)
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d00b      	beq.n	8004b86 <checkCoordinates+0x92>
 8004b6e:	4b59      	ldr	r3, [pc, #356]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	2b17      	cmp	r3, #23
 8004b74:	d80a      	bhi.n	8004b8c <checkCoordinates+0x98>
 8004b76:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce0 <checkCoordinates+0x1ec>)
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	2b1b      	cmp	r3, #27
 8004b7c:	d806      	bhi.n	8004b8c <checkCoordinates+0x98>
 8004b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8004ce8 <checkCoordinates+0x1f4>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d102      	bne.n	8004b8c <checkCoordinates+0x98>
	{
		gardenStateMenu();
 8004b86:	f7ff fed9 	bl	800493c <gardenStateMenu>
 8004b8a:	e0a0      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates <= 23 && xCoordinates <= 27) && menu != 1)
 8004b8c:	4b51      	ldr	r3, [pc, #324]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	2b17      	cmp	r3, #23
 8004b92:	d80a      	bhi.n	8004baa <checkCoordinates+0xb6>
 8004b94:	4b52      	ldr	r3, [pc, #328]	@ (8004ce0 <checkCoordinates+0x1ec>)
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	2b1b      	cmp	r3, #27
 8004b9a:	d806      	bhi.n	8004baa <checkCoordinates+0xb6>
 8004b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd8 <checkCoordinates+0x1e4>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d002      	beq.n	8004baa <checkCoordinates+0xb6>
	{
		mainMenu();
 8004ba4:	f7ff ff12 	bl	80049cc <mainMenu>
 8004ba8:	e091      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 32 && yCoordinates <= 72) && weatherForecast == 1)
 8004baa:	4b4a      	ldr	r3, [pc, #296]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	2b1f      	cmp	r3, #31
 8004bb0:	d910      	bls.n	8004bd4 <checkCoordinates+0xe0>
 8004bb2:	4b48      	ldr	r3, [pc, #288]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	2b48      	cmp	r3, #72	@ 0x48
 8004bb8:	d80c      	bhi.n	8004bd4 <checkCoordinates+0xe0>
 8004bba:	4b4c      	ldr	r3, [pc, #304]	@ (8004cec <checkCoordinates+0x1f8>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d108      	bne.n	8004bd4 <checkCoordinates+0xe0>
	{
		drawBufferScreen();
 8004bc2:	f7ff ff77 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(SAIGON);
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	f000 fb28 	bl	800521c <sendAPIURL>
		currentCity = SAIGON;
 8004bcc:	4b48      	ldr	r3, [pc, #288]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
 8004bd2:	e07c      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120) && weatherForecast == 1)
 8004bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	2b4f      	cmp	r3, #79	@ 0x4f
 8004bda:	d910      	bls.n	8004bfe <checkCoordinates+0x10a>
 8004bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b78      	cmp	r3, #120	@ 0x78
 8004be2:	d80c      	bhi.n	8004bfe <checkCoordinates+0x10a>
 8004be4:	4b41      	ldr	r3, [pc, #260]	@ (8004cec <checkCoordinates+0x1f8>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d108      	bne.n	8004bfe <checkCoordinates+0x10a>
	{
		drawBufferScreen();
 8004bec:	f7ff ff62 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(NHATRANG);
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f000 fb13 	bl	800521c <sendAPIURL>
		currentCity = NHATRANG;
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e067      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 128 && yCoordinates <= 168) && weatherForecast == 1)
 8004bfe:	4b35      	ldr	r3, [pc, #212]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c04:	d910      	bls.n	8004c28 <checkCoordinates+0x134>
 8004c06:	4b33      	ldr	r3, [pc, #204]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c0c:	d80c      	bhi.n	8004c28 <checkCoordinates+0x134>
 8004c0e:	4b37      	ldr	r3, [pc, #220]	@ (8004cec <checkCoordinates+0x1f8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d108      	bne.n	8004c28 <checkCoordinates+0x134>
	{
		drawBufferScreen();
 8004c16:	f7ff ff4d 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(HANOI);
 8004c1a:	2002      	movs	r0, #2
 8004c1c:	f000 fafe 	bl	800521c <sendAPIURL>
		currentCity = HANOI;
 8004c20:	4b33      	ldr	r3, [pc, #204]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004c22:	2202      	movs	r2, #2
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	e052      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 176 && yCoordinates <= 216) && weatherForecast == 1)
 8004c28:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	2baf      	cmp	r3, #175	@ 0xaf
 8004c2e:	d910      	bls.n	8004c52 <checkCoordinates+0x15e>
 8004c30:	4b28      	ldr	r3, [pc, #160]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	2bd8      	cmp	r3, #216	@ 0xd8
 8004c36:	d80c      	bhi.n	8004c52 <checkCoordinates+0x15e>
 8004c38:	4b2c      	ldr	r3, [pc, #176]	@ (8004cec <checkCoordinates+0x1f8>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d108      	bne.n	8004c52 <checkCoordinates+0x15e>
	{
		drawBufferScreen();
 8004c40:	f7ff ff38 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(TAMPERE);
 8004c44:	2003      	movs	r0, #3
 8004c46:	f000 fae9 	bl	800521c <sendAPIURL>
		currentCity = TAMPERE;
 8004c4a:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e03d      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 224 && yCoordinates <= 264) && weatherForecast == 1)
 8004c52:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	2bdf      	cmp	r3, #223	@ 0xdf
 8004c58:	d911      	bls.n	8004c7e <checkCoordinates+0x18a>
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8004c62:	d80c      	bhi.n	8004c7e <checkCoordinates+0x18a>
 8004c64:	4b21      	ldr	r3, [pc, #132]	@ (8004cec <checkCoordinates+0x1f8>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d108      	bne.n	8004c7e <checkCoordinates+0x18a>
	{
		drawBufferScreen();
 8004c6c:	f7ff ff22 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(ARNHEM);
 8004c70:	2004      	movs	r0, #4
 8004c72:	f000 fad3 	bl	800521c <sendAPIURL>
		currentCity = ARNHEM;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004c78:	2204      	movs	r2, #4
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e027      	b.n	8004cce <checkCoordinates+0x1da>
	}
	else if ((yCoordinates >= 272 && yCoordinates <= 312) && weatherForecast == 1)
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c80:	881b      	ldrh	r3, [r3, #0]
 8004c82:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8004c86:	d311      	bcc.n	8004cac <checkCoordinates+0x1b8>
 8004c88:	4b12      	ldr	r3, [pc, #72]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8004c90:	d80c      	bhi.n	8004cac <checkCoordinates+0x1b8>
 8004c92:	4b16      	ldr	r3, [pc, #88]	@ (8004cec <checkCoordinates+0x1f8>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d108      	bne.n	8004cac <checkCoordinates+0x1b8>
	{
		drawBufferScreen();
 8004c9a:	f7ff ff0b 	bl	8004ab4 <drawBufferScreen>
		sendAPIURL(SYDNEY);
 8004c9e:	2005      	movs	r0, #5
 8004ca0:	f000 fabc 	bl	800521c <sendAPIURL>
		currentCity = SYDNEY;
 8004ca4:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <checkCoordinates+0x1fc>)
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e010      	b.n	8004cce <checkCoordinates+0x1da>
	}

	else if ((yCoordinates >= 32 && yCoordinates <= 72) && gardenState == 1)
 8004cac:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	2b1f      	cmp	r3, #31
 8004cb2:	d90c      	bls.n	8004cce <checkCoordinates+0x1da>
 8004cb4:	4b07      	ldr	r3, [pc, #28]	@ (8004cd4 <checkCoordinates+0x1e0>)
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	2b48      	cmp	r3, #72	@ 0x48
 8004cba:	d808      	bhi.n	8004cce <checkCoordinates+0x1da>
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <checkCoordinates+0x200>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d104      	bne.n	8004cce <checkCoordinates+0x1da>
	{
		drawBufferScreen();
 8004cc4:	f7ff fef6 	bl	8004ab4 <drawBufferScreen>
		sendGardenStateRequest();
 8004cc8:	f000 fb32 	bl	8005330 <sendGardenStateRequest>
	}
}
 8004ccc:	e7ff      	b.n	8004cce <checkCoordinates+0x1da>
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	200009fa 	.word	0x200009fa
 8004cd8:	20000058 	.word	0x20000058
 8004cdc:	200009fc 	.word	0x200009fc
 8004ce0:	200009f8 	.word	0x200009f8
 8004ce4:	200009ff 	.word	0x200009ff
 8004ce8:	20000a01 	.word	0x20000a01
 8004cec:	200009fe 	.word	0x200009fe
 8004cf0:	20000a28 	.word	0x20000a28
 8004cf4:	20000a00 	.word	0x20000a00

08004cf8 <drawWeather>:

void drawWeather(uint16_t xPosition, uint16_t yPosition, int weatherCode)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	603a      	str	r2, [r7, #0]
 8004d02:	80fb      	strh	r3, [r7, #6]
 8004d04:	460b      	mov	r3, r1
 8004d06:	80bb      	strh	r3, [r7, #4]
	if (weatherCode == 0)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <drawWeather+0x24>
	{
		drawClearDay(xPosition, yPosition);
 8004d0e:	88ba      	ldrh	r2, [r7, #4]
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fd fcc2 	bl	800269e <drawClearDay>
	}
	else if (weatherCode == 45 || weatherCode == 48)
	{
		drawFoggyDay(xPosition, yPosition);
	}
}
 8004d1a:	e04c      	b.n	8004db6 <drawWeather+0xbe>
	else if (weatherCode >= 1 && weatherCode <= 3)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	dd09      	ble.n	8004d36 <drawWeather+0x3e>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	dc06      	bgt.n	8004d36 <drawWeather+0x3e>
		drawCloudyDay(xPosition, yPosition);
 8004d28:	88ba      	ldrh	r2, [r7, #4]
 8004d2a:	88fb      	ldrh	r3, [r7, #6]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fccd 	bl	80026ce <drawCloudyDay>
 8004d34:	e03f      	b.n	8004db6 <drawWeather+0xbe>
	else if ((weatherCode >= 51 && weatherCode <= 67) || (weatherCode >= 80 && weatherCode <= 82))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b32      	cmp	r3, #50	@ 0x32
 8004d3a:	dd02      	ble.n	8004d42 <drawWeather+0x4a>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b43      	cmp	r3, #67	@ 0x43
 8004d40:	dd05      	ble.n	8004d4e <drawWeather+0x56>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d46:	dd09      	ble.n	8004d5c <drawWeather+0x64>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b52      	cmp	r3, #82	@ 0x52
 8004d4c:	dc06      	bgt.n	8004d5c <drawWeather+0x64>
		drawRainyDay(xPosition, yPosition);
 8004d4e:	88ba      	ldrh	r2, [r7, #4]
 8004d50:	88fb      	ldrh	r3, [r7, #6]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fcfa 	bl	800274e <drawRainyDay>
 8004d5a:	e02c      	b.n	8004db6 <drawWeather+0xbe>
	else if ((weatherCode >= 71 && weatherCode <= 77) || (weatherCode == 85 || weatherCode == 86))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b46      	cmp	r3, #70	@ 0x46
 8004d60:	dd02      	ble.n	8004d68 <drawWeather+0x70>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b4d      	cmp	r3, #77	@ 0x4d
 8004d66:	dd05      	ble.n	8004d74 <drawWeather+0x7c>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b55      	cmp	r3, #85	@ 0x55
 8004d6c:	d002      	beq.n	8004d74 <drawWeather+0x7c>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b56      	cmp	r3, #86	@ 0x56
 8004d72:	d106      	bne.n	8004d82 <drawWeather+0x8a>
		drawSnowyDay(xPosition, yPosition);
 8004d74:	88ba      	ldrh	r2, [r7, #4]
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fd52 	bl	8002824 <drawSnowyDay>
 8004d80:	e019      	b.n	8004db6 <drawWeather+0xbe>
	else if (weatherCode >= 95 && weatherCode <= 99)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b5e      	cmp	r3, #94	@ 0x5e
 8004d86:	dd09      	ble.n	8004d9c <drawWeather+0xa4>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2b63      	cmp	r3, #99	@ 0x63
 8004d8c:	dc06      	bgt.n	8004d9c <drawWeather+0xa4>
		drawStormyDay(xPosition, yPosition);
 8004d8e:	88ba      	ldrh	r2, [r7, #4]
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	4611      	mov	r1, r2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd fe7b 	bl	8002a90 <drawStormyDay>
 8004d9a:	e00c      	b.n	8004db6 <drawWeather+0xbe>
	else if (weatherCode == 45 || weatherCode == 48)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004da0:	d002      	beq.n	8004da8 <drawWeather+0xb0>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b30      	cmp	r3, #48	@ 0x30
 8004da6:	d106      	bne.n	8004db6 <drawWeather+0xbe>
		drawFoggyDay(xPosition, yPosition);
 8004da8:	88ba      	ldrh	r2, [r7, #4]
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd fd8e 	bl	80028d0 <drawFoggyDay>
}
 8004db4:	e7ff      	b.n	8004db6 <drawWeather+0xbe>
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <weatherForecastInterface>:

void weatherForecastInterface()
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
	showWeather = 1;
 8004dc6:	4b8c      	ldr	r3, [pc, #560]	@ (8004ff8 <weatherForecastInterface+0x238>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
	uint16_t color;
	if (isDay == 0)
 8004dcc:	4b8b      	ldr	r3, [pc, #556]	@ (8004ffc <weatherForecastInterface+0x23c>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10c      	bne.n	8004dee <weatherForecastInterface+0x2e>
	{
		lcdDrawImage(0, 0, &imageNight);
 8004dd4:	4a8a      	ldr	r2, [pc, #552]	@ (8005000 <weatherForecastInterface+0x240>)
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fe fbb1 	bl	8003540 <lcdDrawImage>
		color = COLOR_NAVY;
 8004dde:	230f      	movs	r3, #15
 8004de0:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004de2:	2100      	movs	r1, #0
 8004de4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004de8:	f7fe fe5c 	bl	8003aa4 <lcdSetTextColor>
 8004dec:	e00b      	b.n	8004e06 <weatherForecastInterface+0x46>
	}
	else
	{
		lcdDrawImage(0, 0, &imageDay);
 8004dee:	4a85      	ldr	r2, [pc, #532]	@ (8005004 <weatherForecastInterface+0x244>)
 8004df0:	2100      	movs	r1, #0
 8004df2:	2000      	movs	r0, #0
 8004df4:	f7fe fba4 	bl	8003540 <lcdDrawImage>
		color = COLOR_CYAN;
 8004df8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004dfc:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2000      	movs	r0, #0
 8004e02:	f7fe fe4f 	bl	8003aa4 <lcdSetTextColor>
	}
	drawBackIcon();
 8004e06:	f7ff f9f9 	bl	80041fc <drawBackIcon>

	for (int y = 160; y < 320; y++)
 8004e0a:	23a0      	movs	r3, #160	@ 0xa0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	e013      	b.n	8004e38 <weatherForecastInterface+0x78>
	{
		for (int x = 0; x < 240; x++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	607b      	str	r3, [r7, #4]
 8004e14:	e00a      	b.n	8004e2c <weatherForecastInterface+0x6c>
		{
		    lcdDrawPixel(x, y, color);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	b291      	uxth	r1, r2
 8004e1e:	89fa      	ldrh	r2, [r7, #14]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd ff4f 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3301      	adds	r3, #1
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2bef      	cmp	r3, #239	@ 0xef
 8004e30:	ddf1      	ble.n	8004e16 <weatherForecastInterface+0x56>
	for (int y = 160; y < 320; y++)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3301      	adds	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e3e:	dbe7      	blt.n	8004e10 <weatherForecastInterface+0x50>
		}
	}

	lcdSetTextFont(&Font12);
 8004e40:	4871      	ldr	r0, [pc, #452]	@ (8005008 <weatherForecastInterface+0x248>)
 8004e42:	f7fe fe1f 	bl	8003a84 <lcdSetTextFont>

	reformatDate();
 8004e46:	f000 f9ad 	bl	80051a4 <reformatDate>

	drawWeather(40, 190, weather[0]);
 8004e4a:	4b70      	ldr	r3, [pc, #448]	@ (800500c <weatherForecastInterface+0x24c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	21be      	movs	r1, #190	@ 0xbe
 8004e52:	2028      	movs	r0, #40	@ 0x28
 8004e54:	f7ff ff50 	bl	8004cf8 <drawWeather>
	lcdSetCursor(25, 160);
 8004e58:	21a0      	movs	r1, #160	@ 0xa0
 8004e5a:	2019      	movs	r0, #25
 8004e5c:	f7fe fea2 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[0]);
 8004e60:	4b6b      	ldr	r3, [pc, #428]	@ (8005010 <weatherForecastInterface+0x250>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fe fd87 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(90, 190, weather[1]);
 8004e6a:	4b68      	ldr	r3, [pc, #416]	@ (800500c <weatherForecastInterface+0x24c>)
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	21be      	movs	r1, #190	@ 0xbe
 8004e72:	205a      	movs	r0, #90	@ 0x5a
 8004e74:	f7ff ff40 	bl	8004cf8 <drawWeather>
	lcdSetCursor(75, 160);
 8004e78:	21a0      	movs	r1, #160	@ 0xa0
 8004e7a:	204b      	movs	r0, #75	@ 0x4b
 8004e7c:	f7fe fe92 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[1]);
 8004e80:	4b63      	ldr	r3, [pc, #396]	@ (8005010 <weatherForecastInterface+0x250>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fd77 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(150, 190, weather[2]);
 8004e8a:	4b60      	ldr	r3, [pc, #384]	@ (800500c <weatherForecastInterface+0x24c>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	21be      	movs	r1, #190	@ 0xbe
 8004e92:	2096      	movs	r0, #150	@ 0x96
 8004e94:	f7ff ff30 	bl	8004cf8 <drawWeather>
	lcdSetCursor(135, 160);
 8004e98:	21a0      	movs	r1, #160	@ 0xa0
 8004e9a:	2087      	movs	r0, #135	@ 0x87
 8004e9c:	f7fe fe82 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[2]);
 8004ea0:	4b5b      	ldr	r3, [pc, #364]	@ (8005010 <weatherForecastInterface+0x250>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe fd67 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(200, 190, weather[3]);
 8004eaa:	4b58      	ldr	r3, [pc, #352]	@ (800500c <weatherForecastInterface+0x24c>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	21be      	movs	r1, #190	@ 0xbe
 8004eb2:	20c8      	movs	r0, #200	@ 0xc8
 8004eb4:	f7ff ff20 	bl	8004cf8 <drawWeather>
	lcdSetCursor(185, 160);
 8004eb8:	21a0      	movs	r1, #160	@ 0xa0
 8004eba:	20b9      	movs	r0, #185	@ 0xb9
 8004ebc:	f7fe fe72 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[3]);
 8004ec0:	4b53      	ldr	r3, [pc, #332]	@ (8005010 <weatherForecastInterface+0x250>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fe fd57 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(65, 270, weather[4]);
 8004eca:	4b50      	ldr	r3, [pc, #320]	@ (800500c <weatherForecastInterface+0x24c>)
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004ed4:	2041      	movs	r0, #65	@ 0x41
 8004ed6:	f7ff ff0f 	bl	8004cf8 <drawWeather>
	lcdSetCursor(50, 240);
 8004eda:	21f0      	movs	r1, #240	@ 0xf0
 8004edc:	2032      	movs	r0, #50	@ 0x32
 8004ede:	f7fe fe61 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[4]);
 8004ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8005010 <weatherForecastInterface+0x250>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe fd46 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(120, 270, weather[5]);
 8004eec:	4b47      	ldr	r3, [pc, #284]	@ (800500c <weatherForecastInterface+0x24c>)
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004ef6:	2078      	movs	r0, #120	@ 0x78
 8004ef8:	f7ff fefe 	bl	8004cf8 <drawWeather>
	lcdSetCursor(105, 240);
 8004efc:	21f0      	movs	r1, #240	@ 0xf0
 8004efe:	2069      	movs	r0, #105	@ 0x69
 8004f00:	f7fe fe50 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[5]);
 8004f04:	4b42      	ldr	r3, [pc, #264]	@ (8005010 <weatherForecastInterface+0x250>)
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fe fd35 	bl	8003978 <lcdPrintfNoBackColor>

	drawWeather(175, 270, weather[6]);
 8004f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800500c <weatherForecastInterface+0x24c>)
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	461a      	mov	r2, r3
 8004f14:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004f18:	20af      	movs	r0, #175	@ 0xaf
 8004f1a:	f7ff feed 	bl	8004cf8 <drawWeather>
	lcdSetCursor(160, 240);
 8004f1e:	21f0      	movs	r1, #240	@ 0xf0
 8004f20:	20a0      	movs	r0, #160	@ 0xa0
 8004f22:	f7fe fe3f 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor(date[6]);
 8004f26:	4b3a      	ldr	r3, [pc, #232]	@ (8005010 <weatherForecastInterface+0x250>)
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fd24 	bl	8003978 <lcdPrintfNoBackColor>

	lcdSetCursor(80, 110);
 8004f30:	216e      	movs	r1, #110	@ 0x6e
 8004f32:	2050      	movs	r0, #80	@ 0x50
 8004f34:	f7fe fe36 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", currentHumidity);
 8004f38:	4b36      	ldr	r3, [pc, #216]	@ (8005014 <weatherForecastInterface+0x254>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4836      	ldr	r0, [pc, #216]	@ (8005018 <weatherForecastInterface+0x258>)
 8004f40:	f7fe fd1a 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font20);
 8004f44:	4835      	ldr	r0, [pc, #212]	@ (800501c <weatherForecastInterface+0x25c>)
 8004f46:	f7fe fd9d 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 8004f4a:	215a      	movs	r1, #90	@ 0x5a
 8004f4c:	206e      	movs	r0, #110	@ 0x6e
 8004f4e:	f7fe fe29 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", currentTemperature);
 8004f52:	4b33      	ldr	r3, [pc, #204]	@ (8005020 <weatherForecastInterface+0x260>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4832      	ldr	r0, [pc, #200]	@ (8005024 <weatherForecastInterface+0x264>)
 8004f5a:	f7fe fd0d 	bl	8003978 <lcdPrintfNoBackColor>

	switch (currentCity)
 8004f5e:	4b32      	ldr	r3, [pc, #200]	@ (8005028 <weatherForecastInterface+0x268>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d844      	bhi.n	8004ff0 <weatherForecastInterface+0x230>
 8004f66:	a201      	add	r2, pc, #4	@ (adr r2, 8004f6c <weatherForecastInterface+0x1ac>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004f85 	.word	0x08004f85
 8004f70:	08004f97 	.word	0x08004f97
 8004f74:	08004fa9 	.word	0x08004fa9
 8004f78:	08004fbb 	.word	0x08004fbb
 8004f7c:	08004fcd 	.word	0x08004fcd
 8004f80:	08004fdf 	.word	0x08004fdf
	{
		case NHATRANG:
			drawAlignedText("Nha Trang", 10, 240, 16, NOBACKCOLOR);
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2310      	movs	r3, #16
 8004f8a:	22f0      	movs	r2, #240	@ 0xf0
 8004f8c:	210a      	movs	r1, #10
 8004f8e:	4827      	ldr	r0, [pc, #156]	@ (800502c <weatherForecastInterface+0x26c>)
 8004f90:	f7fd fb5c 	bl	800264c <drawAlignedText>
			break;
 8004f94:	e02c      	b.n	8004ff0 <weatherForecastInterface+0x230>
		case SAIGON:
			drawAlignedText("Sai Gon", 10, 240, 16, NOBACKCOLOR);
 8004f96:	2300      	movs	r3, #0
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	22f0      	movs	r2, #240	@ 0xf0
 8004f9e:	210a      	movs	r1, #10
 8004fa0:	4823      	ldr	r0, [pc, #140]	@ (8005030 <weatherForecastInterface+0x270>)
 8004fa2:	f7fd fb53 	bl	800264c <drawAlignedText>
			break;
 8004fa6:	e023      	b.n	8004ff0 <weatherForecastInterface+0x230>
		case HANOI:
			drawAlignedText("Ha Noi", 10, 240, 16, NOBACKCOLOR);
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2310      	movs	r3, #16
 8004fae:	22f0      	movs	r2, #240	@ 0xf0
 8004fb0:	210a      	movs	r1, #10
 8004fb2:	4820      	ldr	r0, [pc, #128]	@ (8005034 <weatherForecastInterface+0x274>)
 8004fb4:	f7fd fb4a 	bl	800264c <drawAlignedText>
			break;
 8004fb8:	e01a      	b.n	8004ff0 <weatherForecastInterface+0x230>
		case TAMPERE:
			drawAlignedText("Tampere", 10, 240, 16, NOBACKCOLOR);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	2310      	movs	r3, #16
 8004fc0:	22f0      	movs	r2, #240	@ 0xf0
 8004fc2:	210a      	movs	r1, #10
 8004fc4:	481c      	ldr	r0, [pc, #112]	@ (8005038 <weatherForecastInterface+0x278>)
 8004fc6:	f7fd fb41 	bl	800264c <drawAlignedText>
			break;
 8004fca:	e011      	b.n	8004ff0 <weatherForecastInterface+0x230>
		case ARNHEM:
			drawAlignedText("Arnhem", 10, 240, 16, NOBACKCOLOR);
 8004fcc:	2300      	movs	r3, #0
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	22f0      	movs	r2, #240	@ 0xf0
 8004fd4:	210a      	movs	r1, #10
 8004fd6:	4819      	ldr	r0, [pc, #100]	@ (800503c <weatherForecastInterface+0x27c>)
 8004fd8:	f7fd fb38 	bl	800264c <drawAlignedText>
			break;
 8004fdc:	e008      	b.n	8004ff0 <weatherForecastInterface+0x230>
		case SYDNEY:
			drawAlignedText("Sydney", 10, 240, 16, NOBACKCOLOR);
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	22f0      	movs	r2, #240	@ 0xf0
 8004fe6:	210a      	movs	r1, #10
 8004fe8:	4815      	ldr	r0, [pc, #84]	@ (8005040 <weatherForecastInterface+0x280>)
 8004fea:	f7fd fb2f 	bl	800264c <drawAlignedText>
			break;
 8004fee:	bf00      	nop
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	200009ff 	.word	0x200009ff
 8004ffc:	20000a31 	.word	0x20000a31
 8005000:	080318f8 	.word	0x080318f8
 8005004:	0801ecec 	.word	0x0801ecec
 8005008:	2000000c 	.word	0x2000000c
 800500c:	20000a04 	.word	0x20000a04
 8005010:	20000a34 	.word	0x20000a34
 8005014:	20000a24 	.word	0x20000a24
 8005018:	0800bf98 	.word	0x0800bf98
 800501c:	2000001c 	.word	0x2000001c
 8005020:	20000a20 	.word	0x20000a20
 8005024:	0800bfa8 	.word	0x0800bfa8
 8005028:	20000a28 	.word	0x20000a28
 800502c:	0800bef0 	.word	0x0800bef0
 8005030:	0800bee8 	.word	0x0800bee8
 8005034:	0800befc 	.word	0x0800befc
 8005038:	0800bf04 	.word	0x0800bf04
 800503c:	0800bf0c 	.word	0x0800bf0c
 8005040:	0800bf14 	.word	0x0800bf14

08005044 <gardenStateInterface>:

void gardenStateInterface()
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af02      	add	r7, sp, #8
	showGardenState = 1;
 800504a:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <gardenStateInterface+0xf4>)
 800504c:	2201      	movs	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
	lcdDrawImage(0, 0, &imageDay);
 8005050:	4a3a      	ldr	r2, [pc, #232]	@ (800513c <gardenStateInterface+0xf8>)
 8005052:	2100      	movs	r1, #0
 8005054:	2000      	movs	r0, #0
 8005056:	f7fe fa73 	bl	8003540 <lcdDrawImage>
	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800505a:	2100      	movs	r1, #0
 800505c:	2000      	movs	r0, #0
 800505e:	f7fe fd21 	bl	8003aa4 <lcdSetTextColor>
	drawBackIcon();
 8005062:	f7ff f8cb 	bl	80041fc <drawBackIcon>
	for (int y = 160; y < 320; y++)
 8005066:	23a0      	movs	r3, #160	@ 0xa0
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	e014      	b.n	8005096 <gardenStateInterface+0x52>
	{
		for (int x = 0; x < 240; x++)
 800506c:	2300      	movs	r3, #0
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	e00b      	b.n	800508a <gardenStateInterface+0x46>
		{
			lcdDrawPixel(x, y, COLOR_CYAN);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	b291      	uxth	r1, r2
 800507a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800507e:	4618      	mov	r0, r3
 8005080:	f7fd fe20 	bl	8002cc4 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	3301      	adds	r3, #1
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2bef      	cmp	r3, #239	@ 0xef
 800508e:	ddf0      	ble.n	8005072 <gardenStateInterface+0x2e>
	for (int y = 160; y < 320; y++)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800509c:	dbe6      	blt.n	800506c <gardenStateInterface+0x28>
		}
	}
	lcdSetTextFont(&Font20);
 800509e:	4828      	ldr	r0, [pc, #160]	@ (8005140 <gardenStateInterface+0xfc>)
 80050a0:	f7fe fcf0 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 80050a4:	215a      	movs	r1, #90	@ 0x5a
 80050a6:	206e      	movs	r0, #110	@ 0x6e
 80050a8:	f7fe fd7c 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", gardenTemperature);
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <gardenStateInterface+0x100>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	4825      	ldr	r0, [pc, #148]	@ (8005148 <gardenStateInterface+0x104>)
 80050b4:	f7fe fc60 	bl	8003978 <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font12);
 80050b8:	4824      	ldr	r0, [pc, #144]	@ (800514c <gardenStateInterface+0x108>)
 80050ba:	f7fe fce3 	bl	8003a84 <lcdSetTextFont>
	lcdSetCursor(80, 110);
 80050be:	216e      	movs	r1, #110	@ 0x6e
 80050c0:	2050      	movs	r0, #80	@ 0x50
 80050c2:	f7fe fd6f 	bl	8003ba4 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", gardenHumidity);
 80050c6:	4b22      	ldr	r3, [pc, #136]	@ (8005150 <gardenStateInterface+0x10c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4619      	mov	r1, r3
 80050cc:	4821      	ldr	r0, [pc, #132]	@ (8005154 <gardenStateInterface+0x110>)
 80050ce:	f7fe fc53 	bl	8003978 <lcdPrintfNoBackColor>
	drawAlignedText("Currently in: Phu Nhuan", 10, 240, 12, NOBACKCOLOR);
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	230c      	movs	r3, #12
 80050d8:	22f0      	movs	r2, #240	@ 0xf0
 80050da:	210a      	movs	r1, #10
 80050dc:	481e      	ldr	r0, [pc, #120]	@ (8005158 <gardenStateInterface+0x114>)
 80050de:	f7fd fab5 	bl	800264c <drawAlignedText>
	if (gardenHumidity <= 80 || gardenTemperature >= 30)
 80050e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <gardenStateInterface+0x10c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b50      	cmp	r3, #80	@ 0x50
 80050e8:	dd03      	ble.n	80050f2 <gardenStateInterface+0xae>
 80050ea:	4b16      	ldr	r3, [pc, #88]	@ (8005144 <gardenStateInterface+0x100>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b1d      	cmp	r3, #29
 80050f0:	dd1e      	ble.n	8005130 <gardenStateInterface+0xec>
	{
		drawAlignedText("Please water your garden!", 240, 240, 12, NOBACKCOLOR);
 80050f2:	2300      	movs	r3, #0
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	230c      	movs	r3, #12
 80050f8:	22f0      	movs	r2, #240	@ 0xf0
 80050fa:	21f0      	movs	r1, #240	@ 0xf0
 80050fc:	4817      	ldr	r0, [pc, #92]	@ (800515c <gardenStateInterface+0x118>)
 80050fe:	f7fd faa5 	bl	800264c <drawAlignedText>
		if (gardenHumidity <= 80)
 8005102:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <gardenStateInterface+0x10c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b50      	cmp	r3, #80	@ 0x50
 8005108:	dc09      	bgt.n	800511e <gardenStateInterface+0xda>
		{
			drawAlignedText("Problem: Low humidity", 270, 240, 12, NOBACKCOLOR);
 800510a:	2300      	movs	r3, #0
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	230c      	movs	r3, #12
 8005110:	22f0      	movs	r2, #240	@ 0xf0
 8005112:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8005116:	4812      	ldr	r0, [pc, #72]	@ (8005160 <gardenStateInterface+0x11c>)
 8005118:	f7fd fa98 	bl	800264c <drawAlignedText>
			return;
 800511c:	e008      	b.n	8005130 <gardenStateInterface+0xec>
		}
		drawAlignedText("Problem: High temperature", 270, 240, 12, NOBACKCOLOR);
 800511e:	2300      	movs	r3, #0
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	230c      	movs	r3, #12
 8005124:	22f0      	movs	r2, #240	@ 0xf0
 8005126:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800512a:	480e      	ldr	r0, [pc, #56]	@ (8005164 <gardenStateInterface+0x120>)
 800512c:	f7fd fa8e 	bl	800264c <drawAlignedText>
	}
}
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000a01 	.word	0x20000a01
 800513c:	0801ecec 	.word	0x0801ecec
 8005140:	2000001c 	.word	0x2000001c
 8005144:	20000cb0 	.word	0x20000cb0
 8005148:	0800bfa8 	.word	0x0800bfa8
 800514c:	2000000c 	.word	0x2000000c
 8005150:	20000cb4 	.word	0x20000cb4
 8005154:	0800bf98 	.word	0x0800bf98
 8005158:	0800bfac 	.word	0x0800bfac
 800515c:	0800bfc4 	.word	0x0800bfc4
 8005160:	0800bfe0 	.word	0x0800bfe0
 8005164:	0800bff8 	.word	0x0800bff8

08005168 <drawInterface>:

void drawInterface()
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
	if (wifiList == 1)
 800516c:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <drawInterface+0x30>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d102      	bne.n	800517a <drawInterface+0x12>
	{
		wifiMenu();
 8005174:	f7ff fa64 	bl	8004640 <wifiMenu>
	}
	else if (gardenState == 1)
	{
		gardenStateInterface();
	}
}
 8005178:	e00c      	b.n	8005194 <drawInterface+0x2c>
	else if (weatherForecast == 1)
 800517a:	4b08      	ldr	r3, [pc, #32]	@ (800519c <drawInterface+0x34>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <drawInterface+0x20>
		weatherForecastInterface();
 8005182:	f7ff fe1d 	bl	8004dc0 <weatherForecastInterface>
}
 8005186:	e005      	b.n	8005194 <drawInterface+0x2c>
	else if (gardenState == 1)
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <drawInterface+0x38>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <drawInterface+0x2c>
		gardenStateInterface();
 8005190:	f7ff ff58 	bl	8005044 <gardenStateInterface>
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}
 8005198:	200009fc 	.word	0x200009fc
 800519c:	200009fe 	.word	0x200009fe
 80051a0:	20000a00 	.word	0x20000a00

080051a4 <reformatDate>:

void reformatDate()
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
	char temp[6];
	for (int i = 0; i < 7; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e02b      	b.n	8005208 <reformatDate+0x64>
	{
	    if (date[i])
 80051b0:	4a19      	ldr	r2, [pc, #100]	@ (8005218 <reformatDate+0x74>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d022      	beq.n	8005202 <reformatDate+0x5e>
	    {
	        strncpy(temp, &date[i][8], 2);
 80051bc:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <reformatDate+0x74>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c4:	f103 0108 	add.w	r1, r3, #8
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	2202      	movs	r2, #2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f004 fc6c 	bl	8009aaa <strncpy>
	        temp[2] = '-';
 80051d2:	232d      	movs	r3, #45	@ 0x2d
 80051d4:	71bb      	strb	r3, [r7, #6]
	        strncpy(&temp[3], &date[i][5], 2);
 80051d6:	4a10      	ldr	r2, [pc, #64]	@ (8005218 <reformatDate+0x74>)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051de:	1d59      	adds	r1, r3, #5
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	3303      	adds	r3, #3
 80051e4:	2202      	movs	r2, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f004 fc5f 	bl	8009aaa <strncpy>
	        temp[5] = '\0';
 80051ec:	2300      	movs	r3, #0
 80051ee:	727b      	strb	r3, [r7, #9]
	        strcpy(date[i], temp);
 80051f0:	4a09      	ldr	r2, [pc, #36]	@ (8005218 <reformatDate+0x74>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f8:	1d3a      	adds	r2, r7, #4
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f004 fcea 	bl	8009bd6 <strcpy>
	for (int i = 0; i < 7; i++)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b06      	cmp	r3, #6
 800520c:	ddd0      	ble.n	80051b0 <reformatDate+0xc>
	    }
	}
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000a34 	.word	0x20000a34

0800521c <sendAPIURL>:

void sendAPIURL(uint16_t chooseCity)
{
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	80fb      	strh	r3, [r7, #6]
    switch(chooseCity)
 8005226:	88fb      	ldrh	r3, [r7, #6]
 8005228:	2b05      	cmp	r3, #5
 800522a:	d86f      	bhi.n	800530c <sendAPIURL+0xf0>
 800522c:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <sendAPIURL+0x18>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	0800524d 	.word	0x0800524d
 8005238:	0800526d 	.word	0x0800526d
 800523c:	0800528d 	.word	0x0800528d
 8005240:	080052ad 	.word	0x080052ad
 8005244:	080052cd 	.word	0x080052cd
 8005248:	080052ed 	.word	0x080052ed
    {
    	case NHATRANG:
    		HAL_UART_Transmit(&huart1, (uint8_t*)nhaTrangURL, strlen(nhaTrangURL), HAL_MAX_DELAY);
 800524c:	4b31      	ldr	r3, [pc, #196]	@ (8005314 <sendAPIURL+0xf8>)
 800524e:	681c      	ldr	r4, [r3, #0]
 8005250:	4b30      	ldr	r3, [pc, #192]	@ (8005314 <sendAPIURL+0xf8>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7fa ffc5 	bl	80001e4 <strlen>
 800525a:	4603      	mov	r3, r0
 800525c:	b29a      	uxth	r2, r3
 800525e:	f04f 33ff 	mov.w	r3, #4294967295
 8005262:	4621      	mov	r1, r4
 8005264:	482c      	ldr	r0, [pc, #176]	@ (8005318 <sendAPIURL+0xfc>)
 8005266:	f002 fac3 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 800526a:	e04f      	b.n	800530c <sendAPIURL+0xf0>
    	case SAIGON:
    		HAL_UART_Transmit(&huart1, (uint8_t*)saiGonURL, strlen(saiGonURL), HAL_MAX_DELAY);
 800526c:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <sendAPIURL+0x100>)
 800526e:	681c      	ldr	r4, [r3, #0]
 8005270:	4b2a      	ldr	r3, [pc, #168]	@ (800531c <sendAPIURL+0x100>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fa ffb5 	bl	80001e4 <strlen>
 800527a:	4603      	mov	r3, r0
 800527c:	b29a      	uxth	r2, r3
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	4621      	mov	r1, r4
 8005284:	4824      	ldr	r0, [pc, #144]	@ (8005318 <sendAPIURL+0xfc>)
 8005286:	f002 fab3 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 800528a:	e03f      	b.n	800530c <sendAPIURL+0xf0>
    	case HANOI:
    		HAL_UART_Transmit(&huart1, (uint8_t*)haNoiURL, strlen(haNoiURL), HAL_MAX_DELAY);
 800528c:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <sendAPIURL+0x104>)
 800528e:	681c      	ldr	r4, [r3, #0]
 8005290:	4b23      	ldr	r3, [pc, #140]	@ (8005320 <sendAPIURL+0x104>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fa ffa5 	bl	80001e4 <strlen>
 800529a:	4603      	mov	r3, r0
 800529c:	b29a      	uxth	r2, r3
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	4621      	mov	r1, r4
 80052a4:	481c      	ldr	r0, [pc, #112]	@ (8005318 <sendAPIURL+0xfc>)
 80052a6:	f002 faa3 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 80052aa:	e02f      	b.n	800530c <sendAPIURL+0xf0>
    	case TAMPERE:
    		HAL_UART_Transmit(&huart1, (uint8_t*)tampereURL, strlen(tampereURL), HAL_MAX_DELAY);
 80052ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005324 <sendAPIURL+0x108>)
 80052ae:	681c      	ldr	r4, [r3, #0]
 80052b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005324 <sendAPIURL+0x108>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fa ff95 	bl	80001e4 <strlen>
 80052ba:	4603      	mov	r3, r0
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	4621      	mov	r1, r4
 80052c4:	4814      	ldr	r0, [pc, #80]	@ (8005318 <sendAPIURL+0xfc>)
 80052c6:	f002 fa93 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 80052ca:	e01f      	b.n	800530c <sendAPIURL+0xf0>
    	case ARNHEM:
    		HAL_UART_Transmit(&huart1, (uint8_t*)arnhemURL, strlen(arnhemURL), HAL_MAX_DELAY);
 80052cc:	4b16      	ldr	r3, [pc, #88]	@ (8005328 <sendAPIURL+0x10c>)
 80052ce:	681c      	ldr	r4, [r3, #0]
 80052d0:	4b15      	ldr	r3, [pc, #84]	@ (8005328 <sendAPIURL+0x10c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fa ff85 	bl	80001e4 <strlen>
 80052da:	4603      	mov	r3, r0
 80052dc:	b29a      	uxth	r2, r3
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	4621      	mov	r1, r4
 80052e4:	480c      	ldr	r0, [pc, #48]	@ (8005318 <sendAPIURL+0xfc>)
 80052e6:	f002 fa83 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 80052ea:	e00f      	b.n	800530c <sendAPIURL+0xf0>
    	case SYDNEY:
    		HAL_UART_Transmit(&huart1, (uint8_t*)sydneyURL, strlen(sydneyURL), HAL_MAX_DELAY);
 80052ec:	4b0f      	ldr	r3, [pc, #60]	@ (800532c <sendAPIURL+0x110>)
 80052ee:	681c      	ldr	r4, [r3, #0]
 80052f0:	4b0e      	ldr	r3, [pc, #56]	@ (800532c <sendAPIURL+0x110>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fa ff75 	bl	80001e4 <strlen>
 80052fa:	4603      	mov	r3, r0
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	4621      	mov	r1, r4
 8005304:	4804      	ldr	r0, [pc, #16]	@ (8005318 <sendAPIURL+0xfc>)
 8005306:	f002 fa73 	bl	80077f0 <HAL_UART_Transmit>
    		break;
 800530a:	bf00      	nop
    }
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}
 8005314:	2000003c 	.word	0x2000003c
 8005318:	20000558 	.word	0x20000558
 800531c:	20000040 	.word	0x20000040
 8005320:	20000044 	.word	0x20000044
 8005324:	20000048 	.word	0x20000048
 8005328:	2000004c 	.word	0x2000004c
 800532c:	20000050 	.word	0x20000050

08005330 <sendGardenStateRequest>:

void sendGardenStateRequest()
{
 8005330:	b598      	push	{r3, r4, r7, lr}
 8005332:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)requestGardenInfo, strlen(requestGardenInfo), HAL_MAX_DELAY);
 8005334:	4b08      	ldr	r3, [pc, #32]	@ (8005358 <sendGardenStateRequest+0x28>)
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	4b07      	ldr	r3, [pc, #28]	@ (8005358 <sendGardenStateRequest+0x28>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f7fa ff51 	bl	80001e4 <strlen>
 8005342:	4603      	mov	r3, r0
 8005344:	b29a      	uxth	r2, r3
 8005346:	f04f 33ff 	mov.w	r3, #4294967295
 800534a:	4621      	mov	r1, r4
 800534c:	4803      	ldr	r0, [pc, #12]	@ (800535c <sendGardenStateRequest+0x2c>)
 800534e:	f002 fa4f 	bl	80077f0 <HAL_UART_Transmit>
}
 8005352:	bf00      	nop
 8005354:	bd98      	pop	{r3, r4, r7, pc}
 8005356:	bf00      	nop
 8005358:	20000054 	.word	0x20000054
 800535c:	20000558 	.word	0x20000558

08005360 <sendWifiRequest>:

void sendWifiRequest()
{
 8005360:	b598      	push	{r3, r4, r7, lr}
 8005362:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)requestWifiInfo, strlen(requestWifiInfo), HAL_MAX_DELAY);
 8005364:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <sendWifiRequest+0x28>)
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <sendWifiRequest+0x28>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f7fa ff39 	bl	80001e4 <strlen>
 8005372:	4603      	mov	r3, r0
 8005374:	b29a      	uxth	r2, r3
 8005376:	f04f 33ff 	mov.w	r3, #4294967295
 800537a:	4621      	mov	r1, r4
 800537c:	4803      	ldr	r0, [pc, #12]	@ (800538c <sendWifiRequest+0x2c>)
 800537e:	f002 fa37 	bl	80077f0 <HAL_UART_Transmit>
}
 8005382:	bf00      	nop
 8005384:	bd98      	pop	{r3, r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	2000005c 	.word	0x2000005c
 800538c:	20000558 	.word	0x20000558

08005390 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	if (rxIndex < BUFFER_SIZE - 1)
 8005398:	4b1c      	ldr	r3, [pc, #112]	@ (800540c <HAL_UART_RxCpltCallback+0x7c>)
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d828      	bhi.n	80053f6 <HAL_UART_RxCpltCallback+0x66>
	{
		if (tempBuffer[0] == '!')
 80053a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005410 <HAL_UART_RxCpltCallback+0x80>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b21      	cmp	r3, #33	@ 0x21
 80053aa:	d103      	bne.n	80053b4 <HAL_UART_RxCpltCallback+0x24>
		{
			rxComplete = 1;
 80053ac:	4b19      	ldr	r3, [pc, #100]	@ (8005414 <HAL_UART_RxCpltCallback+0x84>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
			return;
 80053b2:	e028      	b.n	8005406 <HAL_UART_RxCpltCallback+0x76>
		}
		else if (tempBuffer[0] == '?')
 80053b4:	4b16      	ldr	r3, [pc, #88]	@ (8005410 <HAL_UART_RxCpltCallback+0x80>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80053ba:	d110      	bne.n	80053de <HAL_UART_RxCpltCallback+0x4e>
		{
			lcdPrintf("Error fetching data\n");
 80053bc:	4816      	ldr	r0, [pc, #88]	@ (8005418 <HAL_UART_RxCpltCallback+0x88>)
 80053be:	f7fe fa4f 	bl	8003860 <lcdPrintf>
			lcdPrintf("Go back to menu!\n");
 80053c2:	4816      	ldr	r0, [pc, #88]	@ (800541c <HAL_UART_RxCpltCallback+0x8c>)
 80053c4:	f7fe fa4c 	bl	8003860 <lcdPrintf>
			rxIndex = 0;
 80053c8:	4b10      	ldr	r3, [pc, #64]	@ (800540c <HAL_UART_RxCpltCallback+0x7c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	801a      	strh	r2, [r3, #0]
			resetBuffer();
 80053ce:	f000 f9f3 	bl	80057b8 <resetBuffer>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 80053d2:	2201      	movs	r2, #1
 80053d4:	490e      	ldr	r1, [pc, #56]	@ (8005410 <HAL_UART_RxCpltCallback+0x80>)
 80053d6:	4812      	ldr	r0, [pc, #72]	@ (8005420 <HAL_UART_RxCpltCallback+0x90>)
 80053d8:	f002 fa95 	bl	8007906 <HAL_UART_Receive_IT>
			return;
 80053dc:	e013      	b.n	8005406 <HAL_UART_RxCpltCallback+0x76>
		}
		rxBuffer[rxIndex++] = tempBuffer[0];
 80053de:	4b0b      	ldr	r3, [pc, #44]	@ (800540c <HAL_UART_RxCpltCallback+0x7c>)
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	1c5a      	adds	r2, r3, #1
 80053e4:	b291      	uxth	r1, r2
 80053e6:	4a09      	ldr	r2, [pc, #36]	@ (800540c <HAL_UART_RxCpltCallback+0x7c>)
 80053e8:	8011      	strh	r1, [r2, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <HAL_UART_RxCpltCallback+0x80>)
 80053ee:	7819      	ldrb	r1, [r3, #0]
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <HAL_UART_RxCpltCallback+0x94>)
 80053f2:	5499      	strb	r1, [r3, r2]
 80053f4:	e002      	b.n	80053fc <HAL_UART_RxCpltCallback+0x6c>
	}
	else
	{
	    rxIndex = 0;
 80053f6:	4b05      	ldr	r3, [pc, #20]	@ (800540c <HAL_UART_RxCpltCallback+0x7c>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	801a      	strh	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 80053fc:	2201      	movs	r2, #1
 80053fe:	4904      	ldr	r1, [pc, #16]	@ (8005410 <HAL_UART_RxCpltCallback+0x80>)
 8005400:	4807      	ldr	r0, [pc, #28]	@ (8005420 <HAL_UART_RxCpltCallback+0x90>)
 8005402:	f002 fa80 	bl	8007906 <HAL_UART_Receive_IT>
}
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	200009f4 	.word	0x200009f4
 8005410:	200005f0 	.word	0x200005f0
 8005414:	200009f6 	.word	0x200009f6
 8005418:	0800c014 	.word	0x0800c014
 800541c:	0800c02c 	.word	0x0800c02c
 8005420:	20000558 	.word	0x20000558
 8005424:	200005f4 	.word	0x200005f4

08005428 <processData>:

void processData(const char *jsonData)
{
 8005428:	b590      	push	{r4, r7, lr}
 800542a:	b097      	sub	sp, #92	@ 0x5c
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
    cJSON *root = cJSON_Parse(jsonData);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc fbe1 	bl	8001bf8 <cJSON_Parse>
 8005436:	6478      	str	r0, [r7, #68]	@ 0x44
    if (root == NULL)
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <processData+0x2a>
    {
        lcdPrintf("Error parsing JSON\n");
 800543e:	4897      	ldr	r0, [pc, #604]	@ (800569c <processData+0x274>)
 8005440:	f7fe fa0e 	bl	8003860 <lcdPrintf>
        lcdPrintf("Go back to menu!\n");
 8005444:	4896      	ldr	r0, [pc, #600]	@ (80056a0 <processData+0x278>)
 8005446:	f7fe fa0b 	bl	8003860 <lcdPrintf>
        cJSON_Delete(root);
 800544a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800544c:	f7fb fef2 	bl	8001234 <cJSON_Delete>
        return;
 8005450:	e120      	b.n	8005694 <processData+0x26c>
    }

    if(gardenState == 1)
 8005452:	4b94      	ldr	r3, [pc, #592]	@ (80056a4 <processData+0x27c>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d11e      	bne.n	8005498 <processData+0x70>
    {
    	cJSON *gardenTemp = cJSON_GetObjectItem(root, "gardenTemperature");
 800545a:	4993      	ldr	r1, [pc, #588]	@ (80056a8 <processData+0x280>)
 800545c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800545e:	f7fc ff14 	bl	800228a <cJSON_GetObjectItem>
 8005462:	6138      	str	r0, [r7, #16]
    	cJSON *gardenHumid = cJSON_GetObjectItem(root, "gardenHumidity");
 8005464:	4991      	ldr	r1, [pc, #580]	@ (80056ac <processData+0x284>)
 8005466:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005468:	f7fc ff0f 	bl	800228a <cJSON_GetObjectItem>
 800546c:	60f8      	str	r0, [r7, #12]
    	if (gardenTemp)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <processData+0x54>
    	{
    		gardenTemperature = gardenTemp->valueint;
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	4a8d      	ldr	r2, [pc, #564]	@ (80056b0 <processData+0x288>)
 800547a:	6013      	str	r3, [r2, #0]
    	}
    	if (gardenHumid)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <processData+0x62>
    	{
    		gardenHumidity = gardenHumid->valueint;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	4a8b      	ldr	r2, [pc, #556]	@ (80056b4 <processData+0x28c>)
 8005488:	6013      	str	r3, [r2, #0]
    	}
    	processComplete = 1;
 800548a:	4b8b      	ldr	r3, [pc, #556]	@ (80056b8 <processData+0x290>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
    	cJSON_Delete(root);
 8005490:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005492:	f7fb fecf 	bl	8001234 <cJSON_Delete>
    	return;
 8005496:	e0fd      	b.n	8005694 <processData+0x26c>
    }
    else if (wifiList == 1)
 8005498:	4b88      	ldr	r3, [pc, #544]	@ (80056bc <processData+0x294>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d163      	bne.n	8005568 <processData+0x140>
    {
    	cJSON *networks = cJSON_GetObjectItem(root, "networks");
 80054a0:	4987      	ldr	r1, [pc, #540]	@ (80056c0 <processData+0x298>)
 80054a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80054a4:	f7fc fef1 	bl	800228a <cJSON_GetObjectItem>
 80054a8:	61f8      	str	r0, [r7, #28]
    	int networkIndex = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	657b      	str	r3, [r7, #84]	@ 0x54
    	cJSON *item = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	653b      	str	r3, [r7, #80]	@ 0x50
    	cJSON_ArrayForEach(item, networks)
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <processData+0x96>
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	e000      	b.n	80054c0 <processData+0x98>
 80054be:	2300      	movs	r3, #0
 80054c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80054c2:	e042      	b.n	800554a <processData+0x122>
    	{
    	    if (networkIndex >= MAX_NETWORKS) break;
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	2b0b      	cmp	r3, #11
 80054c8:	dc43      	bgt.n	8005552 <processData+0x12a>

    	    cJSON *ssid = cJSON_GetObjectItem(item, "ssid");
 80054ca:	497e      	ldr	r1, [pc, #504]	@ (80056c4 <processData+0x29c>)
 80054cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80054ce:	f7fc fedc 	bl	800228a <cJSON_GetObjectItem>
 80054d2:	61b8      	str	r0, [r7, #24]
    	    cJSON *secure = cJSON_GetObjectItem(item, "secure");
 80054d4:	497c      	ldr	r1, [pc, #496]	@ (80056c8 <processData+0x2a0>)
 80054d6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80054d8:	f7fc fed7 	bl	800228a <cJSON_GetObjectItem>
 80054dc:	6178      	str	r0, [r7, #20]

    	    if (cJSON_IsString(ssid) && cJSON_IsBool(secure))
 80054de:	69b8      	ldr	r0, [r7, #24]
 80054e0:	f7fc ff11 	bl	8002306 <cJSON_IsString>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02c      	beq.n	8005544 <processData+0x11c>
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f7fc fef3 	bl	80022d6 <cJSON_IsBool>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d026      	beq.n	8005544 <processData+0x11c>
    	    {
    	        strncpy(networkList[networkIndex].ssid, ssid->valuestring, MAX_SSID_LENGTH - 1);
 80054f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054f8:	4613      	mov	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4a72      	ldr	r2, [pc, #456]	@ (80056cc <processData+0x2a4>)
 8005502:	1898      	adds	r0, r3, r2
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	221f      	movs	r2, #31
 800550a:	4619      	mov	r1, r3
 800550c:	f004 facd 	bl	8009aaa <strncpy>
    	        networkList[networkIndex].ssid[MAX_SSID_LENGTH - 1] = '\0';
 8005510:	496e      	ldr	r1, [pc, #440]	@ (80056cc <processData+0x2a4>)
 8005512:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	331f      	adds	r3, #31
 8005520:	2200      	movs	r2, #0
 8005522:	701a      	strb	r2, [r3, #0]
    	        networkList[networkIndex].secure = cJSON_IsTrue(secure);
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f7fc febf 	bl	80022a8 <cJSON_IsTrue>
 800552a:	4601      	mov	r1, r0
 800552c:	4867      	ldr	r0, [pc, #412]	@ (80056cc <processData+0x2a4>)
 800552e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4403      	add	r3, r0
 800553a:	3320      	adds	r3, #32
 800553c:	6019      	str	r1, [r3, #0]
    	        networkIndex++;
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	3301      	adds	r3, #1
 8005542:	657b      	str	r3, [r7, #84]	@ 0x54
    	cJSON_ArrayForEach(item, networks)
 8005544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	653b      	str	r3, [r7, #80]	@ 0x50
 800554a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1b9      	bne.n	80054c4 <processData+0x9c>
 8005550:	e000      	b.n	8005554 <processData+0x12c>
    	    if (networkIndex >= MAX_NETWORKS) break;
 8005552:	bf00      	nop
    	    }
    	}

    	networkCount = networkIndex;
 8005554:	4a5e      	ldr	r2, [pc, #376]	@ (80056d0 <processData+0x2a8>)
 8005556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005558:	6013      	str	r3, [r2, #0]
    	processComplete = 1;
 800555a:	4b57      	ldr	r3, [pc, #348]	@ (80056b8 <processData+0x290>)
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
    	cJSON_Delete(root);
 8005560:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005562:	f7fb fe67 	bl	8001234 <cJSON_Delete>
        return;
 8005566:	e095      	b.n	8005694 <processData+0x26c>
    }

    cJSON *current = cJSON_GetObjectItem(root, "current");
 8005568:	495a      	ldr	r1, [pc, #360]	@ (80056d4 <processData+0x2ac>)
 800556a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800556c:	f7fc fe8d 	bl	800228a <cJSON_GetObjectItem>
 8005570:	6438      	str	r0, [r7, #64]	@ 0x40
    if (current)
 8005572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d024      	beq.n	80055c2 <processData+0x19a>
    {
        cJSON *temperature = cJSON_GetObjectItem(current, "temperature_2m");
 8005578:	4957      	ldr	r1, [pc, #348]	@ (80056d8 <processData+0x2b0>)
 800557a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800557c:	f7fc fe85 	bl	800228a <cJSON_GetObjectItem>
 8005580:	63f8      	str	r0, [r7, #60]	@ 0x3c
        cJSON *humidity = cJSON_GetObjectItem(current, "relative_humidity_2m");
 8005582:	4956      	ldr	r1, [pc, #344]	@ (80056dc <processData+0x2b4>)
 8005584:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005586:	f7fc fe80 	bl	800228a <cJSON_GetObjectItem>
 800558a:	63b8      	str	r0, [r7, #56]	@ 0x38
        cJSON *dayOrNight = cJSON_GetObjectItem(current, "is_day");
 800558c:	4954      	ldr	r1, [pc, #336]	@ (80056e0 <processData+0x2b8>)
 800558e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005590:	f7fc fe7b 	bl	800228a <cJSON_GetObjectItem>
 8005594:	6378      	str	r0, [r7, #52]	@ 0x34
        if (temperature)
 8005596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <processData+0x17c>
        {
        	currentTemperature = temperature->valueint;
 800559c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	4a50      	ldr	r2, [pc, #320]	@ (80056e4 <processData+0x2bc>)
 80055a2:	6013      	str	r3, [r2, #0]
        }
        if (humidity)
 80055a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <processData+0x18a>
        {
        	currentHumidity = humidity->valueint;
 80055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	@ (80056e8 <processData+0x2c0>)
 80055b0:	6013      	str	r3, [r2, #0]
        }
        if (dayOrNight)
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <processData+0x19a>
        {
        	isDay = dayOrNight->valueint;
 80055b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	4b4b      	ldr	r3, [pc, #300]	@ (80056ec <processData+0x2c4>)
 80055c0:	701a      	strb	r2, [r3, #0]
        }
    }

    cJSON *daily = cJSON_GetObjectItem(root, "daily");
 80055c2:	494b      	ldr	r1, [pc, #300]	@ (80056f0 <processData+0x2c8>)
 80055c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80055c6:	f7fc fe60 	bl	800228a <cJSON_GetObjectItem>
 80055ca:	6338      	str	r0, [r7, #48]	@ 0x30
    if (daily)
 80055cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d05a      	beq.n	8005688 <processData+0x260>
    {
    	cJSON *weatherCodes = cJSON_GetObjectItem(daily, "weather_code");
 80055d2:	4948      	ldr	r1, [pc, #288]	@ (80056f4 <processData+0x2cc>)
 80055d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055d6:	f7fc fe58 	bl	800228a <cJSON_GetObjectItem>
 80055da:	62f8      	str	r0, [r7, #44]	@ 0x2c
    	cJSON *dateCodes = cJSON_GetObjectItem(daily, "time");
 80055dc:	4946      	ldr	r1, [pc, #280]	@ (80056f8 <processData+0x2d0>)
 80055de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055e0:	f7fc fe53 	bl	800228a <cJSON_GetObjectItem>
 80055e4:	62b8      	str	r0, [r7, #40]	@ 0x28
    	if (dateCodes && cJSON_IsArray(dateCodes))
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d027      	beq.n	800563c <processData+0x214>
 80055ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055ee:	f7fc fea1 	bl	8002334 <cJSON_IsArray>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d021      	beq.n	800563c <processData+0x214>
    	{
    		for (int i = 0; i < 7; i++)
 80055f8:	2300      	movs	r3, #0
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055fc:	e01b      	b.n	8005636 <processData+0x20e>
    	    {
    	        cJSON *dates = cJSON_GetArrayItem(dateCodes, i);
 80055fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005600:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005602:	f7fc fde6 	bl	80021d2 <cJSON_GetArrayItem>
 8005606:	6278      	str	r0, [r7, #36]	@ 0x24
    	        if (dates)
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <processData+0x208>
    	        {
    	        	date[dateIndex++] = strdup(dates->valuestring);
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	691a      	ldr	r2, [r3, #16]
 8005612:	4b3a      	ldr	r3, [pc, #232]	@ (80056fc <processData+0x2d4>)
 8005614:	881b      	ldrh	r3, [r3, #0]
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	b288      	uxth	r0, r1
 800561a:	4938      	ldr	r1, [pc, #224]	@ (80056fc <processData+0x2d4>)
 800561c:	8008      	strh	r0, [r1, #0]
 800561e:	461c      	mov	r4, r3
 8005620:	4610      	mov	r0, r2
 8005622:	f004 fa15 	bl	8009a50 <strdup>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	4b35      	ldr	r3, [pc, #212]	@ (8005700 <processData+0x2d8>)
 800562c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    		for (int i = 0; i < 7; i++)
 8005630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005632:	3301      	adds	r3, #1
 8005634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005636:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005638:	2b06      	cmp	r3, #6
 800563a:	dde0      	ble.n	80055fe <processData+0x1d6>
    	        }
    	    }
    	}
        if (weatherCodes && cJSON_IsArray(weatherCodes))
 800563c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d022      	beq.n	8005688 <processData+0x260>
 8005642:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005644:	f7fc fe76 	bl	8002334 <cJSON_IsArray>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d01c      	beq.n	8005688 <processData+0x260>
        {
            for (int i = 0; i < 7; i++)
 800564e:	2300      	movs	r3, #0
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005652:	e016      	b.n	8005682 <processData+0x25a>
            {
                cJSON *code = cJSON_GetArrayItem(weatherCodes, i);
 8005654:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005658:	f7fc fdbb 	bl	80021d2 <cJSON_GetArrayItem>
 800565c:	6238      	str	r0, [r7, #32]
                if (code)
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00b      	beq.n	800567c <processData+0x254>
                {
                    weather[weatherIndex++] = code->valueint;
 8005664:	4b27      	ldr	r3, [pc, #156]	@ (8005704 <processData+0x2dc>)
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	b291      	uxth	r1, r2
 800566c:	4a25      	ldr	r2, [pc, #148]	@ (8005704 <processData+0x2dc>)
 800566e:	8011      	strh	r1, [r2, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	4a24      	ldr	r2, [pc, #144]	@ (8005708 <processData+0x2e0>)
 8005678:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            for (int i = 0; i < 7; i++)
 800567c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567e:	3301      	adds	r3, #1
 8005680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005684:	2b06      	cmp	r3, #6
 8005686:	dde5      	ble.n	8005654 <processData+0x22c>
                }
            }
        }
    }
    processComplete = 1;
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <processData+0x290>)
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
    cJSON_Delete(root);
 800568e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8005690:	f7fb fdd0 	bl	8001234 <cJSON_Delete>
}
 8005694:	375c      	adds	r7, #92	@ 0x5c
 8005696:	46bd      	mov	sp, r7
 8005698:	bd90      	pop	{r4, r7, pc}
 800569a:	bf00      	nop
 800569c:	0800c040 	.word	0x0800c040
 80056a0:	0800c02c 	.word	0x0800c02c
 80056a4:	20000a00 	.word	0x20000a00
 80056a8:	0800c054 	.word	0x0800c054
 80056ac:	0800c068 	.word	0x0800c068
 80056b0:	20000cb0 	.word	0x20000cb0
 80056b4:	20000cb4 	.word	0x20000cb4
 80056b8:	20000a30 	.word	0x20000a30
 80056bc:	200009fc 	.word	0x200009fc
 80056c0:	0800c078 	.word	0x0800c078
 80056c4:	0800c084 	.word	0x0800c084
 80056c8:	0800c08c 	.word	0x0800c08c
 80056cc:	20000a50 	.word	0x20000a50
 80056d0:	20000c00 	.word	0x20000c00
 80056d4:	0800c094 	.word	0x0800c094
 80056d8:	0800c09c 	.word	0x0800c09c
 80056dc:	0800c0ac 	.word	0x0800c0ac
 80056e0:	0800c0c4 	.word	0x0800c0c4
 80056e4:	20000a20 	.word	0x20000a20
 80056e8:	20000a24 	.word	0x20000a24
 80056ec:	20000a31 	.word	0x20000a31
 80056f0:	0800c0cc 	.word	0x0800c0cc
 80056f4:	0800c0d4 	.word	0x0800c0d4
 80056f8:	0800c0e4 	.word	0x0800c0e4
 80056fc:	20000a2e 	.word	0x20000a2e
 8005700:	20000a34 	.word	0x20000a34
 8005704:	20000a2c 	.word	0x20000a2c
 8005708:	20000a04 	.word	0x20000a04

0800570c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	4603      	mov	r3, r0
 8005714:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin != T_IRQ_Pin) return;
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d13a      	bne.n	8005792 <HAL_GPIO_EXTI_Callback+0x86>

	if (!XPT2046_TouchPressed() || !allowTouch) return;
 800571c:	f7fb fc42 	bl	8000fa4 <XPT2046_TouchPressed>
 8005720:	4603      	mov	r3, r0
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d134      	bne.n	8005796 <HAL_GPIO_EXTI_Callback+0x8a>
 800572c:	4b1d      	ldr	r3, [pc, #116]	@ (80057a4 <HAL_GPIO_EXTI_Callback+0x98>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	f083 0301 	eor.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d12d      	bne.n	8005796 <HAL_GPIO_EXTI_Callback+0x8a>

	if (!XPT2046_TouchGetCoordinates(&xCoordinates, &yCoordinates)) return;
 800573a:	491b      	ldr	r1, [pc, #108]	@ (80057a8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800573c:	481b      	ldr	r0, [pc, #108]	@ (80057ac <HAL_GPIO_EXTI_Callback+0xa0>)
 800573e:	f7fb fc41 	bl	8000fc4 <XPT2046_TouchGetCoordinates>
 8005742:	4603      	mov	r3, r0
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d125      	bne.n	800579a <HAL_GPIO_EXTI_Callback+0x8e>

	xCoordinates = 240 - xCoordinates;
 800574e:	4b17      	ldr	r3, [pc, #92]	@ (80057ac <HAL_GPIO_EXTI_Callback+0xa0>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8005756:	b29a      	uxth	r2, r3
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <HAL_GPIO_EXTI_Callback+0xa0>)
 800575a:	801a      	strh	r2, [r3, #0]
	yCoordinates = 320 - yCoordinates;
 800575c:	4b12      	ldr	r3, [pc, #72]	@ (80057a8 <HAL_GPIO_EXTI_Callback+0x9c>)
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8005764:	b29a      	uxth	r2, r3
 8005766:	4b10      	ldr	r3, [pc, #64]	@ (80057a8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005768:	801a      	strh	r2, [r3, #0]
	if (wifiList == 1)
 800576a:	4b11      	ldr	r3, [pc, #68]	@ (80057b0 <HAL_GPIO_EXTI_Callback+0xa4>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d102      	bne.n	8005778 <HAL_GPIO_EXTI_Callback+0x6c>
	{
		handleWifiListTouch();
 8005772:	f7fe ff19 	bl	80045a8 <handleWifiListTouch>
 8005776:	e008      	b.n	800578a <HAL_GPIO_EXTI_Callback+0x7e>
	}
	else if (wifiConnect == 1)
 8005778:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d102      	bne.n	8005786 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		handleKeyboardTouch();
 8005780:	f7fe fe36 	bl	80043f0 <handleKeyboardTouch>
 8005784:	e001      	b.n	800578a <HAL_GPIO_EXTI_Callback+0x7e>
	}
	else
	{
		checkCoordinates();
 8005786:	f7ff f9b5 	bl	8004af4 <checkCoordinates>
	}
	allowTouch = false;
 800578a:	4b06      	ldr	r3, [pc, #24]	@ (80057a4 <HAL_GPIO_EXTI_Callback+0x98>)
 800578c:	2200      	movs	r2, #0
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e004      	b.n	800579c <HAL_GPIO_EXTI_Callback+0x90>
	if (GPIO_Pin != T_IRQ_Pin) return;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_GPIO_EXTI_Callback+0x90>
	if (!XPT2046_TouchPressed() || !allowTouch) return;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_GPIO_EXTI_Callback+0x90>
	if (!XPT2046_TouchGetCoordinates(&xCoordinates, &yCoordinates)) return;
 800579a:	bf00      	nop
}
 800579c:	3708      	adds	r7, #8
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000059 	.word	0x20000059
 80057a8:	200009fa 	.word	0x200009fa
 80057ac:	200009f8 	.word	0x200009f8
 80057b0:	200009fc 	.word	0x200009fc
 80057b4:	200009fd 	.word	0x200009fd

080057b8 <resetBuffer>:

void resetBuffer()
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
	for (int i = 0; i <= BUFFER_SIZE; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
 80057c2:	e007      	b.n	80057d4 <resetBuffer+0x1c>
	{
		rxBuffer[i] = 0;
 80057c4:	4a09      	ldr	r2, [pc, #36]	@ (80057ec <resetBuffer+0x34>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4413      	add	r3, r2
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= BUFFER_SIZE; i++)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3301      	adds	r3, #1
 80057d2:	607b      	str	r3, [r7, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057da:	ddf3      	ble.n	80057c4 <resetBuffer+0xc>
	}
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	200005f4 	.word	0x200005f4

080057f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80057f4:	b672      	cpsid	i
}
 80057f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80057f8:	bf00      	nop
 80057fa:	e7fd      	b.n	80057f8 <Error_Handler+0x8>

080057fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]
 8005806:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <HAL_MspInit+0x4c>)
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	4a0f      	ldr	r2, [pc, #60]	@ (8005848 <HAL_MspInit+0x4c>)
 800580c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005810:	6453      	str	r3, [r2, #68]	@ 0x44
 8005812:	4b0d      	ldr	r3, [pc, #52]	@ (8005848 <HAL_MspInit+0x4c>)
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800581a:	607b      	str	r3, [r7, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	603b      	str	r3, [r7, #0]
 8005822:	4b09      	ldr	r3, [pc, #36]	@ (8005848 <HAL_MspInit+0x4c>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <HAL_MspInit+0x4c>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582c:	6413      	str	r3, [r2, #64]	@ 0x40
 800582e:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <HAL_MspInit+0x4c>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40023800 	.word	0x40023800

0800584c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a19      	ldr	r2, [pc, #100]	@ (80058d0 <HAL_SPI_MspInit+0x84>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d12c      	bne.n	80058c8 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	4b18      	ldr	r3, [pc, #96]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	4a17      	ldr	r2, [pc, #92]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 8005878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800587c:	6413      	str	r3, [r2, #64]	@ 0x40
 800587e:	4b15      	ldr	r3, [pc, #84]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	4a10      	ldr	r2, [pc, #64]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	6313      	str	r3, [r2, #48]	@ 0x30
 800589a:	4b0e      	ldr	r3, [pc, #56]	@ (80058d4 <HAL_SPI_MspInit+0x88>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80058a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80058aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ac:	2302      	movs	r3, #2
 80058ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b4:	2303      	movs	r3, #3
 80058b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80058b8:	2305      	movs	r3, #5
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058bc:	f107 0314 	add.w	r3, r7, #20
 80058c0:	4619      	mov	r1, r3
 80058c2:	4805      	ldr	r0, [pc, #20]	@ (80058d8 <HAL_SPI_MspInit+0x8c>)
 80058c4:	f000 fc2c 	bl	8006120 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80058c8:	bf00      	nop
 80058ca:	3728      	adds	r7, #40	@ 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40003800 	.word	0x40003800
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40020400 	.word	0x40020400

080058dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	@ 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e4:	f107 0314 	add.w	r3, r7, #20
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005970 <HAL_UART_MspInit+0x94>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d134      	bne.n	8005968 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	4b1c      	ldr	r3, [pc, #112]	@ (8005974 <HAL_UART_MspInit+0x98>)
 8005904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005906:	4a1b      	ldr	r2, [pc, #108]	@ (8005974 <HAL_UART_MspInit+0x98>)
 8005908:	f043 0310 	orr.w	r3, r3, #16
 800590c:	6453      	str	r3, [r2, #68]	@ 0x44
 800590e:	4b19      	ldr	r3, [pc, #100]	@ (8005974 <HAL_UART_MspInit+0x98>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	4b15      	ldr	r3, [pc, #84]	@ (8005974 <HAL_UART_MspInit+0x98>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	4a14      	ldr	r2, [pc, #80]	@ (8005974 <HAL_UART_MspInit+0x98>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6313      	str	r3, [r2, #48]	@ 0x30
 800592a:	4b12      	ldr	r3, [pc, #72]	@ (8005974 <HAL_UART_MspInit+0x98>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005936:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800593a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	2302      	movs	r3, #2
 800593e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005944:	2303      	movs	r3, #3
 8005946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005948:	2307      	movs	r3, #7
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594c:	f107 0314 	add.w	r3, r7, #20
 8005950:	4619      	mov	r1, r3
 8005952:	4809      	ldr	r0, [pc, #36]	@ (8005978 <HAL_UART_MspInit+0x9c>)
 8005954:	f000 fbe4 	bl	8006120 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	2025      	movs	r0, #37	@ 0x25
 800595e:	f000 fb16 	bl	8005f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005962:	2025      	movs	r0, #37	@ 0x25
 8005964:	f000 fb2f 	bl	8005fc6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005968:	bf00      	nop
 800596a:	3728      	adds	r7, #40	@ 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40011000 	.word	0x40011000
 8005974:	40023800 	.word	0x40023800
 8005978:	40020000 	.word	0x40020000

0800597c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005982:	1d3b      	adds	r3, r7, #4
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	605a      	str	r2, [r3, #4]
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	60da      	str	r2, [r3, #12]
 800598e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005990:	4b1c      	ldr	r3, [pc, #112]	@ (8005a04 <HAL_FSMC_MspInit+0x88>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d131      	bne.n	80059fc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005998:	4b1a      	ldr	r3, [pc, #104]	@ (8005a04 <HAL_FSMC_MspInit+0x88>)
 800599a:	2201      	movs	r2, #1
 800599c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4b19      	ldr	r3, [pc, #100]	@ (8005a08 <HAL_FSMC_MspInit+0x8c>)
 80059a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a6:	4a18      	ldr	r2, [pc, #96]	@ (8005a08 <HAL_FSMC_MspInit+0x8c>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6393      	str	r3, [r2, #56]	@ 0x38
 80059ae:	4b16      	ldr	r3, [pc, #88]	@ (8005a08 <HAL_FSMC_MspInit+0x8c>)
 80059b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80059ba:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80059be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059c0:	2302      	movs	r3, #2
 80059c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059c8:	2303      	movs	r3, #3
 80059ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80059cc:	230c      	movs	r3, #12
 80059ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80059d0:	1d3b      	adds	r3, r7, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	480d      	ldr	r0, [pc, #52]	@ (8005a0c <HAL_FSMC_MspInit+0x90>)
 80059d6:	f000 fba3 	bl	8006120 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80059da:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80059de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e0:	2302      	movs	r3, #2
 80059e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059e8:	2303      	movs	r3, #3
 80059ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80059ec:	230c      	movs	r3, #12
 80059ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	4619      	mov	r1, r3
 80059f4:	4806      	ldr	r0, [pc, #24]	@ (8005a10 <HAL_FSMC_MspInit+0x94>)
 80059f6:	f000 fb93 	bl	8006120 <HAL_GPIO_Init>
 80059fa:	e000      	b.n	80059fe <HAL_FSMC_MspInit+0x82>
    return;
 80059fc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20000cb8 	.word	0x20000cb8
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40020c00 	.word	0x40020c00

08005a14 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005a1c:	f7ff ffae 	bl	800597c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005a20:	bf00      	nop
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a2c:	bf00      	nop
 8005a2e:	e7fd      	b.n	8005a2c <NMI_Handler+0x4>

08005a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <HardFault_Handler+0x4>

08005a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a3c:	bf00      	nop
 8005a3e:	e7fd      	b.n	8005a3c <MemManage_Handler+0x4>

08005a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a44:	bf00      	nop
 8005a46:	e7fd      	b.n	8005a44 <BusFault_Handler+0x4>

08005a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <UsageFault_Handler+0x4>

08005a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a7e:	f000 f967 	bl	8005d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a82:	bf00      	nop
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8005a8a:	2020      	movs	r0, #32
 8005a8c:	f000 fd16 	bl	80064bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005a90:	bf00      	nop
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a98:	4802      	ldr	r0, [pc, #8]	@ (8005aa4 <USART1_IRQHandler+0x10>)
 8005a9a:	f001 ff59 	bl	8007950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000558 	.word	0x20000558

08005aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return 1;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <_kill>:

int _kill(int pid, int sig)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ac2:	f004 f85b 	bl	8009b7c <__errno>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2216      	movs	r2, #22
 8005aca:	601a      	str	r2, [r3, #0]
  return -1;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_exit>:

void _exit (int status)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ffe7 	bl	8005ab8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <_exit+0x12>

08005aee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	e00a      	b.n	8005b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b00:	f3af 8000 	nop.w
 8005b04:	4601      	mov	r1, r0
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	60ba      	str	r2, [r7, #8]
 8005b0c:	b2ca      	uxtb	r2, r1
 8005b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	3301      	adds	r3, #1
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	dbf0      	blt.n	8005b00 <_read+0x12>
  }

  return len;
 8005b1e:	687b      	ldr	r3, [r7, #4]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	e009      	b.n	8005b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	60ba      	str	r2, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	dbf1      	blt.n	8005b3a <_write+0x12>
  }
  return len;
 8005b56:	687b      	ldr	r3, [r7, #4]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_close>:

int _close(int file)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b88:	605a      	str	r2, [r3, #4]
  return 0;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <_isatty>:

int _isatty(int file)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005ba0:	2301      	movs	r3, #1
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bd0:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <_sbrk+0x5c>)
 8005bd2:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <_sbrk+0x60>)
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <_sbrk+0x64>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d102      	bne.n	8005bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005be4:	4b11      	ldr	r3, [pc, #68]	@ (8005c2c <_sbrk+0x64>)
 8005be6:	4a12      	ldr	r2, [pc, #72]	@ (8005c30 <_sbrk+0x68>)
 8005be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bea:	4b10      	ldr	r3, [pc, #64]	@ (8005c2c <_sbrk+0x64>)
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d207      	bcs.n	8005c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bf8:	f003 ffc0 	bl	8009b7c <__errno>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	220c      	movs	r2, #12
 8005c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	e009      	b.n	8005c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c08:	4b08      	ldr	r3, [pc, #32]	@ (8005c2c <_sbrk+0x64>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c0e:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <_sbrk+0x64>)
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <_sbrk+0x64>)
 8005c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	20020000 	.word	0x20020000
 8005c28:	00000400 	.word	0x00000400
 8005c2c:	20000cbc 	.word	0x20000cbc
 8005c30:	20000e10 	.word	0x20000e10

08005c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <SystemInit+0x20>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3e:	4a05      	ldr	r2, [pc, #20]	@ (8005c54 <SystemInit+0x20>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c48:	bf00      	nop
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000ed00 	.word	0xe000ed00

08005c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005c90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005c5c:	f7ff ffea 	bl	8005c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c60:	480c      	ldr	r0, [pc, #48]	@ (8005c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c62:	490d      	ldr	r1, [pc, #52]	@ (8005c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c64:	4a0d      	ldr	r2, [pc, #52]	@ (8005c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c68:	e002      	b.n	8005c70 <LoopCopyDataInit>

08005c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c6e:	3304      	adds	r3, #4

08005c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c74:	d3f9      	bcc.n	8005c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c76:	4a0a      	ldr	r2, [pc, #40]	@ (8005ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005c78:	4c0a      	ldr	r4, [pc, #40]	@ (8005ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c7c:	e001      	b.n	8005c82 <LoopFillZerobss>

08005c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c80:	3204      	adds	r2, #4

08005c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c84:	d3fb      	bcc.n	8005c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005c86:	f003 ff7f 	bl	8009b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c8a:	f7fe f889 	bl	8003da0 <main>
  bx  lr    
 8005c8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005c90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005c98:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8005c9c:	08033c20 	.word	0x08033c20
  ldr r2, =_sbss
 8005ca0:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 8005ca4:	20000e10 	.word	0x20000e10

08005ca8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ca8:	e7fe      	b.n	8005ca8 <ADC_IRQHandler>
	...

08005cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8005cec <HAL_Init+0x40>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <HAL_Init+0x40>)
 8005cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8005cec <HAL_Init+0x40>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cec <HAL_Init+0x40>)
 8005cc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_Init+0x40>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a07      	ldr	r2, [pc, #28]	@ (8005cec <HAL_Init+0x40>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cd4:	2003      	movs	r0, #3
 8005cd6:	f000 f94f 	bl	8005f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cda:	200f      	movs	r0, #15
 8005cdc:	f000 f808 	bl	8005cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ce0:	f7ff fd8c 	bl	80057fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40023c00 	.word	0x40023c00

08005cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005cf8:	4b12      	ldr	r3, [pc, #72]	@ (8005d44 <HAL_InitTick+0x54>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <HAL_InitTick+0x58>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	4619      	mov	r1, r3
 8005d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f967 	bl	8005fe2 <HAL_SYSTICK_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e00e      	b.n	8005d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b0f      	cmp	r3, #15
 8005d22:	d80a      	bhi.n	8005d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d24:	2200      	movs	r2, #0
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295
 8005d2c:	f000 f92f 	bl	8005f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d30:	4a06      	ldr	r2, [pc, #24]	@ (8005d4c <HAL_InitTick+0x5c>)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000100 	.word	0x20000100
 8005d48:	20000108 	.word	0x20000108
 8005d4c:	20000104 	.word	0x20000104

08005d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <HAL_IncTick+0x20>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <HAL_IncTick+0x24>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	4a04      	ldr	r2, [pc, #16]	@ (8005d74 <HAL_IncTick+0x24>)
 8005d62:	6013      	str	r3, [r2, #0]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000108 	.word	0x20000108
 8005d74:	20000cc0 	.word	0x20000cc0

08005d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	@ (8005d8c <HAL_GetTick+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000cc0 	.word	0x20000cc0

08005d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d98:	f7ff ffee 	bl	8005d78 <HAL_GetTick>
 8005d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d005      	beq.n	8005db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005daa:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd4 <HAL_Delay+0x44>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005db6:	bf00      	nop
 8005db8:	f7ff ffde 	bl	8005d78 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d8f7      	bhi.n	8005db8 <HAL_Delay+0x28>
  {
  }
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000108 	.word	0x20000108

08005dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005de8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <__NVIC_SetPriorityGrouping+0x44>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005df4:	4013      	ands	r3, r2
 8005df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e0a:	4a04      	ldr	r2, [pc, #16]	@ (8005e1c <__NVIC_SetPriorityGrouping+0x44>)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	60d3      	str	r3, [r2, #12]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	e000ed00 	.word	0xe000ed00

08005e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <__NVIC_GetPriorityGrouping+0x18>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	0a1b      	lsrs	r3, r3, #8
 8005e2a:	f003 0307 	and.w	r3, r3, #7
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	4603      	mov	r3, r0
 8005e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	db0b      	blt.n	8005e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	f003 021f 	and.w	r2, r3, #31
 8005e54:	4907      	ldr	r1, [pc, #28]	@ (8005e74 <__NVIC_EnableIRQ+0x38>)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	e000e100 	.word	0xe000e100

08005e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	4603      	mov	r3, r0
 8005e80:	6039      	str	r1, [r7, #0]
 8005e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	db0a      	blt.n	8005ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	490c      	ldr	r1, [pc, #48]	@ (8005ec4 <__NVIC_SetPriority+0x4c>)
 8005e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e96:	0112      	lsls	r2, r2, #4
 8005e98:	b2d2      	uxtb	r2, r2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ea0:	e00a      	b.n	8005eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	4908      	ldr	r1, [pc, #32]	@ (8005ec8 <__NVIC_SetPriority+0x50>)
 8005ea8:	79fb      	ldrb	r3, [r7, #7]
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	0112      	lsls	r2, r2, #4
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	761a      	strb	r2, [r3, #24]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	e000e100 	.word	0xe000e100
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b089      	sub	sp, #36	@ 0x24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f1c3 0307 	rsb	r3, r3, #7
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	bf28      	it	cs
 8005eea:	2304      	movcs	r3, #4
 8005eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d902      	bls.n	8005efc <NVIC_EncodePriority+0x30>
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3b03      	subs	r3, #3
 8005efa:	e000      	b.n	8005efe <NVIC_EncodePriority+0x32>
 8005efc:	2300      	movs	r3, #0
 8005efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43da      	mvns	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	401a      	ands	r2, r3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f14:	f04f 31ff 	mov.w	r1, #4294967295
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	43d9      	mvns	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f24:	4313      	orrs	r3, r2
         );
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3724      	adds	r7, #36	@ 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f44:	d301      	bcc.n	8005f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f46:	2301      	movs	r3, #1
 8005f48:	e00f      	b.n	8005f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f74 <SysTick_Config+0x40>)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f52:	210f      	movs	r1, #15
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	f7ff ff8e 	bl	8005e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f5c:	4b05      	ldr	r3, [pc, #20]	@ (8005f74 <SysTick_Config+0x40>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f62:	4b04      	ldr	r3, [pc, #16]	@ (8005f74 <SysTick_Config+0x40>)
 8005f64:	2207      	movs	r2, #7
 8005f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	e000e010 	.word	0xe000e010

08005f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff ff29 	bl	8005dd8 <__NVIC_SetPriorityGrouping>
}
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	4603      	mov	r3, r0
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fa0:	f7ff ff3e 	bl	8005e20 <__NVIC_GetPriorityGrouping>
 8005fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	68b9      	ldr	r1, [r7, #8]
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f7ff ff8e 	bl	8005ecc <NVIC_EncodePriority>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff ff5d 	bl	8005e78 <__NVIC_SetPriority>
}
 8005fbe:	bf00      	nop
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b082      	sub	sp, #8
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff31 	bl	8005e3c <__NVIC_EnableIRQ>
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff ffa2 	bl	8005f34 <SysTick_Config>
 8005ff0:	4603      	mov	r3, r0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006008:	f7ff feb6 	bl	8005d78 <HAL_GetTick>
 800600c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d008      	beq.n	800602c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2280      	movs	r2, #128	@ 0x80
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e052      	b.n	80060d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0216 	bic.w	r2, r2, #22
 800603a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800604a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d103      	bne.n	800605c <HAL_DMA_Abort+0x62>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0208 	bic.w	r2, r2, #8
 800606a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800607c:	e013      	b.n	80060a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800607e:	f7ff fe7b 	bl	8005d78 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b05      	cmp	r3, #5
 800608a:	d90c      	bls.n	80060a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2203      	movs	r2, #3
 8006096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e015      	b.n	80060d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e4      	bne.n	800607e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b8:	223f      	movs	r2, #63	@ 0x3f
 80060ba:	409a      	lsls	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d004      	beq.n	80060f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2280      	movs	r2, #128	@ 0x80
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e00c      	b.n	8006112 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2205      	movs	r2, #5
 80060fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0201 	bic.w	r2, r2, #1
 800610e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	@ 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800612e:	2300      	movs	r3, #0
 8006130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	e16b      	b.n	8006414 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800613c:	2201      	movs	r2, #1
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	4013      	ands	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	429a      	cmp	r2, r3
 8006156:	f040 815a 	bne.w	800640e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f003 0303 	and.w	r3, r3, #3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d005      	beq.n	8006172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800616e:	2b02      	cmp	r3, #2
 8006170:	d130      	bne.n	80061d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	2203      	movs	r2, #3
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4013      	ands	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061a8:	2201      	movs	r2, #1
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 0201 	and.w	r2, r3, #1
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d017      	beq.n	8006210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	2203      	movs	r2, #3
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4013      	ands	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d123      	bne.n	8006264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	08da      	lsrs	r2, r3, #3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3208      	adds	r2, #8
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	220f      	movs	r2, #15
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	4013      	ands	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f003 0307 	and.w	r3, r3, #7
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4313      	orrs	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	08da      	lsrs	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3208      	adds	r2, #8
 800625e:	69b9      	ldr	r1, [r7, #24]
 8006260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	2203      	movs	r2, #3
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	43db      	mvns	r3, r3
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	4013      	ands	r3, r2
 800627a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f003 0203 	and.w	r2, r3, #3
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 80b4 	beq.w	800640e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	4b60      	ldr	r3, [pc, #384]	@ (800642c <HAL_GPIO_Init+0x30c>)
 80062ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ae:	4a5f      	ldr	r2, [pc, #380]	@ (800642c <HAL_GPIO_Init+0x30c>)
 80062b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80062b6:	4b5d      	ldr	r3, [pc, #372]	@ (800642c <HAL_GPIO_Init+0x30c>)
 80062b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062c2:	4a5b      	ldr	r2, [pc, #364]	@ (8006430 <HAL_GPIO_Init+0x310>)
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	3302      	adds	r3, #2
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	220f      	movs	r2, #15
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	43db      	mvns	r3, r3
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	4013      	ands	r3, r2
 80062e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a52      	ldr	r2, [pc, #328]	@ (8006434 <HAL_GPIO_Init+0x314>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d02b      	beq.n	8006346 <HAL_GPIO_Init+0x226>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a51      	ldr	r2, [pc, #324]	@ (8006438 <HAL_GPIO_Init+0x318>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d025      	beq.n	8006342 <HAL_GPIO_Init+0x222>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a50      	ldr	r2, [pc, #320]	@ (800643c <HAL_GPIO_Init+0x31c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01f      	beq.n	800633e <HAL_GPIO_Init+0x21e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a4f      	ldr	r2, [pc, #316]	@ (8006440 <HAL_GPIO_Init+0x320>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d019      	beq.n	800633a <HAL_GPIO_Init+0x21a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a4e      	ldr	r2, [pc, #312]	@ (8006444 <HAL_GPIO_Init+0x324>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_GPIO_Init+0x216>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a4d      	ldr	r2, [pc, #308]	@ (8006448 <HAL_GPIO_Init+0x328>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00d      	beq.n	8006332 <HAL_GPIO_Init+0x212>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a4c      	ldr	r2, [pc, #304]	@ (800644c <HAL_GPIO_Init+0x32c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d007      	beq.n	800632e <HAL_GPIO_Init+0x20e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a4b      	ldr	r2, [pc, #300]	@ (8006450 <HAL_GPIO_Init+0x330>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d101      	bne.n	800632a <HAL_GPIO_Init+0x20a>
 8006326:	2307      	movs	r3, #7
 8006328:	e00e      	b.n	8006348 <HAL_GPIO_Init+0x228>
 800632a:	2308      	movs	r3, #8
 800632c:	e00c      	b.n	8006348 <HAL_GPIO_Init+0x228>
 800632e:	2306      	movs	r3, #6
 8006330:	e00a      	b.n	8006348 <HAL_GPIO_Init+0x228>
 8006332:	2305      	movs	r3, #5
 8006334:	e008      	b.n	8006348 <HAL_GPIO_Init+0x228>
 8006336:	2304      	movs	r3, #4
 8006338:	e006      	b.n	8006348 <HAL_GPIO_Init+0x228>
 800633a:	2303      	movs	r3, #3
 800633c:	e004      	b.n	8006348 <HAL_GPIO_Init+0x228>
 800633e:	2302      	movs	r3, #2
 8006340:	e002      	b.n	8006348 <HAL_GPIO_Init+0x228>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_GPIO_Init+0x228>
 8006346:	2300      	movs	r3, #0
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	f002 0203 	and.w	r2, r2, #3
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	4093      	lsls	r3, r2
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006358:	4935      	ldr	r1, [pc, #212]	@ (8006430 <HAL_GPIO_Init+0x310>)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006366:	4b3b      	ldr	r3, [pc, #236]	@ (8006454 <HAL_GPIO_Init+0x334>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800638a:	4a32      	ldr	r2, [pc, #200]	@ (8006454 <HAL_GPIO_Init+0x334>)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006390:	4b30      	ldr	r3, [pc, #192]	@ (8006454 <HAL_GPIO_Init+0x334>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063b4:	4a27      	ldr	r2, [pc, #156]	@ (8006454 <HAL_GPIO_Init+0x334>)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ba:	4b26      	ldr	r3, [pc, #152]	@ (8006454 <HAL_GPIO_Init+0x334>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063de:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <HAL_GPIO_Init+0x334>)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006454 <HAL_GPIO_Init+0x334>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006408:	4a12      	ldr	r2, [pc, #72]	@ (8006454 <HAL_GPIO_Init+0x334>)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b0f      	cmp	r3, #15
 8006418:	f67f ae90 	bls.w	800613c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	3724      	adds	r7, #36	@ 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	40013800 	.word	0x40013800
 8006434:	40020000 	.word	0x40020000
 8006438:	40020400 	.word	0x40020400
 800643c:	40020800 	.word	0x40020800
 8006440:	40020c00 	.word	0x40020c00
 8006444:	40021000 	.word	0x40021000
 8006448:	40021400 	.word	0x40021400
 800644c:	40021800 	.word	0x40021800
 8006450:	40021c00 	.word	0x40021c00
 8006454:	40013c00 	.word	0x40013c00

08006458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	887b      	ldrh	r3, [r7, #2]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e001      	b.n	800647a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006476:	2300      	movs	r3, #0
 8006478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
 8006494:	4613      	mov	r3, r2
 8006496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006498:	787b      	ldrb	r3, [r7, #1]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800649e:	887a      	ldrh	r2, [r7, #2]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80064a4:	e003      	b.n	80064ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80064a6:	887b      	ldrh	r3, [r7, #2]
 80064a8:	041a      	lsls	r2, r3, #16
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	619a      	str	r2, [r3, #24]
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
	...

080064bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064c6:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064d2:	4a05      	ldr	r2, [pc, #20]	@ (80064e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7ff f916 	bl	800570c <HAL_GPIO_EXTI_Callback>
  }
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40013c00 	.word	0x40013c00

080064ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e267      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d075      	beq.n	80065f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800650a:	4b88      	ldr	r3, [pc, #544]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 030c 	and.w	r3, r3, #12
 8006512:	2b04      	cmp	r3, #4
 8006514:	d00c      	beq.n	8006530 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006516:	4b85      	ldr	r3, [pc, #532]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800651e:	2b08      	cmp	r3, #8
 8006520:	d112      	bne.n	8006548 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006522:	4b82      	ldr	r3, [pc, #520]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800652a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800652e:	d10b      	bne.n	8006548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006530:	4b7e      	ldr	r3, [pc, #504]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05b      	beq.n	80065f4 <HAL_RCC_OscConfig+0x108>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d157      	bne.n	80065f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e242      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006550:	d106      	bne.n	8006560 <HAL_RCC_OscConfig+0x74>
 8006552:	4b76      	ldr	r3, [pc, #472]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a75      	ldr	r2, [pc, #468]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	e01d      	b.n	800659c <HAL_RCC_OscConfig+0xb0>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006568:	d10c      	bne.n	8006584 <HAL_RCC_OscConfig+0x98>
 800656a:	4b70      	ldr	r3, [pc, #448]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a6f      	ldr	r2, [pc, #444]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	4b6d      	ldr	r3, [pc, #436]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a6c      	ldr	r2, [pc, #432]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800657c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006580:	6013      	str	r3, [r2, #0]
 8006582:	e00b      	b.n	800659c <HAL_RCC_OscConfig+0xb0>
 8006584:	4b69      	ldr	r3, [pc, #420]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a68      	ldr	r2, [pc, #416]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800658a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	4b66      	ldr	r3, [pc, #408]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a65      	ldr	r2, [pc, #404]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800659a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d013      	beq.n	80065cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7ff fbe8 	bl	8005d78 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7ff fbe4 	bl	8005d78 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	@ 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e207      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065be:	4b5b      	ldr	r3, [pc, #364]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0xc0>
 80065ca:	e014      	b.n	80065f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065cc:	f7ff fbd4 	bl	8005d78 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d4:	f7ff fbd0 	bl	8005d78 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b64      	cmp	r3, #100	@ 0x64
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e1f3      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065e6:	4b51      	ldr	r3, [pc, #324]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0xe8>
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d063      	beq.n	80066ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006602:	4b4a      	ldr	r3, [pc, #296]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800660e:	4b47      	ldr	r3, [pc, #284]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006616:	2b08      	cmp	r3, #8
 8006618:	d11c      	bne.n	8006654 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800661a:	4b44      	ldr	r3, [pc, #272]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d116      	bne.n	8006654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006626:	4b41      	ldr	r3, [pc, #260]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d005      	beq.n	800663e <HAL_RCC_OscConfig+0x152>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d001      	beq.n	800663e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e1c7      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800663e:	4b3b      	ldr	r3, [pc, #236]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4937      	ldr	r1, [pc, #220]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006652:	e03a      	b.n	80066ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d020      	beq.n	800669e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800665c:	4b34      	ldr	r3, [pc, #208]	@ (8006730 <HAL_RCC_OscConfig+0x244>)
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006662:	f7ff fb89 	bl	8005d78 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006668:	e008      	b.n	800667c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800666a:	f7ff fb85 	bl	8005d78 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e1a8      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800667c:	4b2b      	ldr	r3, [pc, #172]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006688:	4b28      	ldr	r3, [pc, #160]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	4925      	ldr	r1, [pc, #148]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006698:	4313      	orrs	r3, r2
 800669a:	600b      	str	r3, [r1, #0]
 800669c:	e015      	b.n	80066ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800669e:	4b24      	ldr	r3, [pc, #144]	@ (8006730 <HAL_RCC_OscConfig+0x244>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a4:	f7ff fb68 	bl	8005d78 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ac:	f7ff fb64 	bl	8005d78 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e187      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066be:	4b1b      	ldr	r3, [pc, #108]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d036      	beq.n	8006744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d016      	beq.n	800670c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066de:	4b15      	ldr	r3, [pc, #84]	@ (8006734 <HAL_RCC_OscConfig+0x248>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7ff fb48 	bl	8005d78 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ec:	f7ff fb44 	bl	8005d78 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e167      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066fe:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <HAL_RCC_OscConfig+0x240>)
 8006700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0x200>
 800670a:	e01b      	b.n	8006744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <HAL_RCC_OscConfig+0x248>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006712:	f7ff fb31 	bl	8005d78 <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006718:	e00e      	b.n	8006738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800671a:	f7ff fb2d 	bl	8005d78 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d907      	bls.n	8006738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e150      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
 800672c:	40023800 	.word	0x40023800
 8006730:	42470000 	.word	0x42470000
 8006734:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006738:	4b88      	ldr	r3, [pc, #544]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 800673a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1ea      	bne.n	800671a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 8097 	beq.w	8006880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006752:	2300      	movs	r3, #0
 8006754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006756:	4b81      	ldr	r3, [pc, #516]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800675a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10f      	bne.n	8006782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	4b7d      	ldr	r3, [pc, #500]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	4a7c      	ldr	r2, [pc, #496]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006770:	6413      	str	r3, [r2, #64]	@ 0x40
 8006772:	4b7a      	ldr	r3, [pc, #488]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677a:	60bb      	str	r3, [r7, #8]
 800677c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006782:	4b77      	ldr	r3, [pc, #476]	@ (8006960 <HAL_RCC_OscConfig+0x474>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d118      	bne.n	80067c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800678e:	4b74      	ldr	r3, [pc, #464]	@ (8006960 <HAL_RCC_OscConfig+0x474>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a73      	ldr	r2, [pc, #460]	@ (8006960 <HAL_RCC_OscConfig+0x474>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679a:	f7ff faed 	bl	8005d78 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a2:	f7ff fae9 	bl	8005d78 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e10c      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b4:	4b6a      	ldr	r3, [pc, #424]	@ (8006960 <HAL_RCC_OscConfig+0x474>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d106      	bne.n	80067d6 <HAL_RCC_OscConfig+0x2ea>
 80067c8:	4b64      	ldr	r3, [pc, #400]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067cc:	4a63      	ldr	r2, [pc, #396]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80067d4:	e01c      	b.n	8006810 <HAL_RCC_OscConfig+0x324>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d10c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x30c>
 80067de:	4b5f      	ldr	r3, [pc, #380]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e2:	4a5e      	ldr	r2, [pc, #376]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067e4:	f043 0304 	orr.w	r3, r3, #4
 80067e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80067ea:	4b5c      	ldr	r3, [pc, #368]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ee:	4a5b      	ldr	r2, [pc, #364]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f6:	e00b      	b.n	8006810 <HAL_RCC_OscConfig+0x324>
 80067f8:	4b58      	ldr	r3, [pc, #352]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fc:	4a57      	ldr	r2, [pc, #348]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	6713      	str	r3, [r2, #112]	@ 0x70
 8006804:	4b55      	ldr	r3, [pc, #340]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	4a54      	ldr	r2, [pc, #336]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 800680a:	f023 0304 	bic.w	r3, r3, #4
 800680e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006818:	f7ff faae 	bl	8005d78 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681e:	e00a      	b.n	8006836 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006820:	f7ff faaa 	bl	8005d78 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e0cb      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006836:	4b49      	ldr	r3, [pc, #292]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0ee      	beq.n	8006820 <HAL_RCC_OscConfig+0x334>
 8006842:	e014      	b.n	800686e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006844:	f7ff fa98 	bl	8005d78 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800684a:	e00a      	b.n	8006862 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684c:	f7ff fa94 	bl	8005d78 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e0b5      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006862:	4b3e      	ldr	r3, [pc, #248]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ee      	bne.n	800684c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d105      	bne.n	8006880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006874:	4b39      	ldr	r3, [pc, #228]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006878:	4a38      	ldr	r2, [pc, #224]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 800687a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800687e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80a1 	beq.w	80069cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800688a:	4b34      	ldr	r3, [pc, #208]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f003 030c 	and.w	r3, r3, #12
 8006892:	2b08      	cmp	r3, #8
 8006894:	d05c      	beq.n	8006950 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	2b02      	cmp	r3, #2
 800689c:	d141      	bne.n	8006922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689e:	4b31      	ldr	r3, [pc, #196]	@ (8006964 <HAL_RCC_OscConfig+0x478>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a4:	f7ff fa68 	bl	8005d78 <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ac:	f7ff fa64 	bl	8005d78 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e087      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068be:	4b27      	ldr	r3, [pc, #156]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f0      	bne.n	80068ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69da      	ldr	r2, [r3, #28]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	3b01      	subs	r3, #1
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	431a      	orrs	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	491b      	ldr	r1, [pc, #108]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006964 <HAL_RCC_OscConfig+0x478>)
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fa:	f7ff fa3d 	bl	8005d78 <HAL_GetTick>
 80068fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006900:	e008      	b.n	8006914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006902:	f7ff fa39 	bl	8005d78 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d901      	bls.n	8006914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e05c      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006914:	4b11      	ldr	r3, [pc, #68]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f0      	beq.n	8006902 <HAL_RCC_OscConfig+0x416>
 8006920:	e054      	b.n	80069cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006922:	4b10      	ldr	r3, [pc, #64]	@ (8006964 <HAL_RCC_OscConfig+0x478>)
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006928:	f7ff fa26 	bl	8005d78 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006930:	f7ff fa22 	bl	8005d78 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e045      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	4b06      	ldr	r3, [pc, #24]	@ (800695c <HAL_RCC_OscConfig+0x470>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f0      	bne.n	8006930 <HAL_RCC_OscConfig+0x444>
 800694e:	e03d      	b.n	80069cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d107      	bne.n	8006968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e038      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
 800695c:	40023800 	.word	0x40023800
 8006960:	40007000 	.word	0x40007000
 8006964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006968:	4b1b      	ldr	r3, [pc, #108]	@ (80069d8 <HAL_RCC_OscConfig+0x4ec>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d028      	beq.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006980:	429a      	cmp	r2, r3
 8006982:	d121      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	429a      	cmp	r2, r3
 8006990:	d11a      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800699e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d111      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	3b01      	subs	r3, #1
 80069b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	40023800 	.word	0x40023800

080069dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0cc      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069f0:	4b68      	ldr	r3, [pc, #416]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d90c      	bls.n	8006a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fe:	4b65      	ldr	r3, [pc, #404]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a06:	4b63      	ldr	r3, [pc, #396]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d001      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0b8      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0302 	and.w	r3, r3, #2
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d020      	beq.n	8006a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0304 	and.w	r3, r3, #4
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d005      	beq.n	8006a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a30:	4b59      	ldr	r3, [pc, #356]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	4a58      	ldr	r2, [pc, #352]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a48:	4b53      	ldr	r3, [pc, #332]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a52      	ldr	r2, [pc, #328]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a54:	4b50      	ldr	r3, [pc, #320]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	494d      	ldr	r1, [pc, #308]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d044      	beq.n	8006afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d107      	bne.n	8006a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	4b47      	ldr	r3, [pc, #284]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d119      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e07f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d107      	bne.n	8006aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e06f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e067      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006aba:	4b37      	ldr	r3, [pc, #220]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f023 0203 	bic.w	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	4934      	ldr	r1, [pc, #208]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006acc:	f7ff f954 	bl	8005d78 <HAL_GetTick>
 8006ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ad2:	e00a      	b.n	8006aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad4:	f7ff f950 	bl	8005d78 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e04f      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	4b2b      	ldr	r3, [pc, #172]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 020c 	and.w	r2, r3, #12
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d1eb      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006afc:	4b25      	ldr	r3, [pc, #148]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d20c      	bcs.n	8006b24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b22      	ldr	r3, [pc, #136]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b20      	ldr	r3, [pc, #128]	@ (8006b94 <HAL_RCC_ClockConfig+0x1b8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e032      	b.n	8006b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0304 	and.w	r3, r3, #4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d008      	beq.n	8006b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b30:	4b19      	ldr	r3, [pc, #100]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	4916      	ldr	r1, [pc, #88]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0308 	and.w	r3, r3, #8
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d009      	beq.n	8006b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b4e:	4b12      	ldr	r3, [pc, #72]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	490e      	ldr	r1, [pc, #56]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b62:	f000 f821 	bl	8006ba8 <HAL_RCC_GetSysClockFreq>
 8006b66:	4602      	mov	r2, r0
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	490a      	ldr	r1, [pc, #40]	@ (8006b9c <HAL_RCC_ClockConfig+0x1c0>)
 8006b74:	5ccb      	ldrb	r3, [r1, r3]
 8006b76:	fa22 f303 	lsr.w	r3, r2, r3
 8006b7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006b7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff f8b4 	bl	8005cf0 <HAL_InitTick>

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023c00 	.word	0x40023c00
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	0803383c 	.word	0x0803383c
 8006ba0:	20000100 	.word	0x20000100
 8006ba4:	20000104 	.word	0x20000104

08006ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bac:	b094      	sub	sp, #80	@ 0x50
 8006bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bc0:	4b79      	ldr	r3, [pc, #484]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 030c 	and.w	r3, r3, #12
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d00d      	beq.n	8006be8 <HAL_RCC_GetSysClockFreq+0x40>
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	f200 80e1 	bhi.w	8006d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <HAL_RCC_GetSysClockFreq+0x34>
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d003      	beq.n	8006be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006bda:	e0db      	b.n	8006d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b73      	ldr	r3, [pc, #460]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x204>)
 8006bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006be0:	e0db      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006be2:	4b73      	ldr	r3, [pc, #460]	@ (8006db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006be6:	e0d8      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006be8:	4b6f      	ldr	r3, [pc, #444]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d063      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	099b      	lsrs	r3, r3, #6
 8006c04:	2200      	movs	r2, #0
 8006c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c12:	2300      	movs	r3, #0
 8006c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f04f 0000 	mov.w	r0, #0
 8006c22:	f04f 0100 	mov.w	r1, #0
 8006c26:	0159      	lsls	r1, r3, #5
 8006c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c2c:	0150      	lsls	r0, r2, #5
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4621      	mov	r1, r4
 8006c34:	1a51      	subs	r1, r2, r1
 8006c36:	6139      	str	r1, [r7, #16]
 8006c38:	4629      	mov	r1, r5
 8006c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	018b      	lsls	r3, r1, #6
 8006c50:	4651      	mov	r1, sl
 8006c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c56:	4651      	mov	r1, sl
 8006c58:	018a      	lsls	r2, r1, #6
 8006c5a:	4651      	mov	r1, sl
 8006c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8006c60:	4659      	mov	r1, fp
 8006c62:	eb63 0901 	sbc.w	r9, r3, r1
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c7a:	4690      	mov	r8, r2
 8006c7c:	4699      	mov	r9, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	eb18 0303 	adds.w	r3, r8, r3
 8006c84:	60bb      	str	r3, [r7, #8]
 8006c86:	462b      	mov	r3, r5
 8006c88:	eb49 0303 	adc.w	r3, r9, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	024b      	lsls	r3, r1, #9
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	024a      	lsls	r2, r1, #9
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cae:	2200      	movs	r2, #0
 8006cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cb8:	f7f9 ff90 	bl	8000bdc <__aeabi_uldivmod>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc4:	e058      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b38      	ldr	r3, [pc, #224]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cd6:	623b      	str	r3, [r7, #32]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	f04f 0000 	mov.w	r0, #0
 8006ce8:	f04f 0100 	mov.w	r1, #0
 8006cec:	0159      	lsls	r1, r3, #5
 8006cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cf2:	0150      	lsls	r0, r2, #5
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	4641      	mov	r1, r8
 8006cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8006cfe:	4649      	mov	r1, r9
 8006d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d18:	ebb2 040a 	subs.w	r4, r2, sl
 8006d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	00eb      	lsls	r3, r5, #3
 8006d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d2e:	00e2      	lsls	r2, r4, #3
 8006d30:	4614      	mov	r4, r2
 8006d32:	461d      	mov	r5, r3
 8006d34:	4643      	mov	r3, r8
 8006d36:	18e3      	adds	r3, r4, r3
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	eb45 0303 	adc.w	r3, r5, r3
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d4e:	4629      	mov	r1, r5
 8006d50:	028b      	lsls	r3, r1, #10
 8006d52:	4621      	mov	r1, r4
 8006d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d58:	4621      	mov	r1, r4
 8006d5a:	028a      	lsls	r2, r1, #10
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d62:	2200      	movs	r2, #0
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	61fa      	str	r2, [r7, #28]
 8006d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d6c:	f7f9 ff36 	bl	8000bdc <__aeabi_uldivmod>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4613      	mov	r3, r2
 8006d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d78:	4b0b      	ldr	r3, [pc, #44]	@ (8006da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	3301      	adds	r3, #1
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d92:	e002      	b.n	8006d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d94:	4b05      	ldr	r3, [pc, #20]	@ (8006dac <HAL_RCC_GetSysClockFreq+0x204>)
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3750      	adds	r7, #80	@ 0x50
 8006da0:	46bd      	mov	sp, r7
 8006da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da6:	bf00      	nop
 8006da8:	40023800 	.word	0x40023800
 8006dac:	00f42400 	.word	0x00f42400
 8006db0:	007a1200 	.word	0x007a1200

08006db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dba:	681b      	ldr	r3, [r3, #0]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000100 	.word	0x20000100

08006dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006dd0:	f7ff fff0 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	4b05      	ldr	r3, [pc, #20]	@ (8006dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	0a9b      	lsrs	r3, r3, #10
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006de2:	5ccb      	ldrb	r3, [r1, r3]
 8006de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40023800 	.word	0x40023800
 8006df0:	0803384c 	.word	0x0803384c

08006df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006df8:	f7ff ffdc 	bl	8006db4 <HAL_RCC_GetHCLKFreq>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	4b05      	ldr	r3, [pc, #20]	@ (8006e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	0b5b      	lsrs	r3, r3, #13
 8006e04:	f003 0307 	and.w	r3, r3, #7
 8006e08:	4903      	ldr	r1, [pc, #12]	@ (8006e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e0a:	5ccb      	ldrb	r3, [r1, r3]
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40023800 	.word	0x40023800
 8006e18:	0803384c 	.word	0x0803384c

08006e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e07b      	b.n	8006f26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d108      	bne.n	8006e48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e3e:	d009      	beq.n	8006e54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	61da      	str	r2, [r3, #28]
 8006e46:	e005      	b.n	8006e54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fe fcec 	bl	800584c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed8:	ea42 0103 	orr.w	r1, r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	f003 0104 	and.w	r1, r3, #4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	f003 0210 	and.w	r2, r3, #16
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b088      	sub	sp, #32
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3e:	f7fe ff1b 	bl	8005d78 <HAL_GetTick>
 8006f42:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f44:	88fb      	ldrh	r3, [r7, #6]
 8006f46:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d001      	beq.n	8006f58 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e12a      	b.n	80071ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_SPI_Transmit+0x36>
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e122      	b.n	80071ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_SPI_Transmit+0x48>
 8006f72:	2302      	movs	r3, #2
 8006f74:	e11b      	b.n	80071ae <HAL_SPI_Transmit+0x280>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2203      	movs	r2, #3
 8006f82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	88fa      	ldrh	r2, [r7, #6]
 8006f96:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fc4:	d10f      	bne.n	8006fe6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fe4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff0:	2b40      	cmp	r3, #64	@ 0x40
 8006ff2:	d007      	beq.n	8007004 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800700c:	d152      	bne.n	80070b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_SPI_Transmit+0xee>
 8007016:	8b7b      	ldrh	r3, [r7, #26]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d145      	bne.n	80070a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800702c:	1c9a      	adds	r2, r3, #2
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007040:	e032      	b.n	80070a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b02      	cmp	r3, #2
 800704e:	d112      	bne.n	8007076 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	881a      	ldrh	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007060:	1c9a      	adds	r2, r3, #2
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007074:	e018      	b.n	80070a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007076:	f7fe fe7f 	bl	8005d78 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d803      	bhi.n	800708e <HAL_SPI_Transmit+0x160>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708c:	d102      	bne.n	8007094 <HAL_SPI_Transmit+0x166>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d109      	bne.n	80070a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e082      	b.n	80071ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1c7      	bne.n	8007042 <HAL_SPI_Transmit+0x114>
 80070b2:	e053      	b.n	800715c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_SPI_Transmit+0x194>
 80070bc:	8b7b      	ldrh	r3, [r7, #26]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d147      	bne.n	8007152 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070de:	b29b      	uxth	r3, r3
 80070e0:	3b01      	subs	r3, #1
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070e8:	e033      	b.n	8007152 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0302 	and.w	r3, r3, #2
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d113      	bne.n	8007120 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	330c      	adds	r3, #12
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007114:	b29b      	uxth	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b29a      	uxth	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800711e:	e018      	b.n	8007152 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007120:	f7fe fe2a 	bl	8005d78 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_Transmit+0x20a>
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_Transmit+0x210>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e02d      	b.n	80071ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1c6      	bne.n	80070ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715c:	69fa      	ldr	r2, [r7, #28]
 800715e:	6839      	ldr	r1, [r7, #0]
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 fa59 	bl	8007618 <SPI_EndRxTxTransaction>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3720      	adds	r7, #32
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08a      	sub	sp, #40	@ 0x28
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	607a      	str	r2, [r7, #4]
 80071c2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071c4:	2301      	movs	r3, #1
 80071c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c8:	f7fe fdd6 	bl	8005d78 <HAL_GetTick>
 80071cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071dc:	887b      	ldrh	r3, [r7, #2]
 80071de:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e0:	7ffb      	ldrb	r3, [r7, #31]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d00c      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x4a>
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ec:	d106      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x46>
 80071f6:	7ffb      	ldrb	r3, [r7, #31]
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d001      	beq.n	8007200 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
 80071fe:	e17f      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x5c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x5c>
 800720c:	887b      	ldrh	r3, [r7, #2]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e174      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <HAL_SPI_TransmitReceive+0x6e>
 8007220:	2302      	movs	r3, #2
 8007222:	e16d      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b04      	cmp	r3, #4
 8007236:	d003      	beq.n	8007240 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2205      	movs	r2, #5
 800723c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	887a      	ldrh	r2, [r7, #2]
 8007250:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	887a      	ldrh	r2, [r7, #2]
 8007256:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	887a      	ldrh	r2, [r7, #2]
 8007262:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	887a      	ldrh	r2, [r7, #2]
 8007268:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007280:	2b40      	cmp	r3, #64	@ 0x40
 8007282:	d007      	beq.n	8007294 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800729c:	d17e      	bne.n	800739c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <HAL_SPI_TransmitReceive+0xf6>
 80072a6:	8afb      	ldrh	r3, [r7, #22]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d16c      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b0:	881a      	ldrh	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072bc:	1c9a      	adds	r2, r3, #2
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072d0:	e059      	b.n	8007386 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d11b      	bne.n	8007318 <HAL_SPI_TransmitReceive+0x162>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d016      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x162>
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d113      	bne.n	8007318 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f4:	881a      	ldrh	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007300:	1c9a      	adds	r2, r3, #2
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800730a:	b29b      	uxth	r3, r3
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b01      	cmp	r3, #1
 8007324:	d119      	bne.n	800735a <HAL_SPI_TransmitReceive+0x1a4>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d014      	beq.n	800735a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	b292      	uxth	r2, r2
 800733c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007356:	2301      	movs	r3, #1
 8007358:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800735a:	f7fe fd0d 	bl	8005d78 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	6a3b      	ldr	r3, [r7, #32]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007366:	429a      	cmp	r2, r3
 8007368:	d80d      	bhi.n	8007386 <HAL_SPI_TransmitReceive+0x1d0>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007370:	d009      	beq.n	8007386 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e0bc      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800738a:	b29b      	uxth	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1a0      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x11c>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d19b      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x11c>
 800739a:	e082      	b.n	80074a2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x1f4>
 80073a4:	8afb      	ldrh	r3, [r7, #22]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d171      	bne.n	800748e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	7812      	ldrb	r2, [r2, #0]
 80073b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d0:	e05d      	b.n	800748e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d11c      	bne.n	800741a <HAL_SPI_TransmitReceive+0x264>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_SPI_TransmitReceive+0x264>
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d114      	bne.n	800741a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	330c      	adds	r3, #12
 80073fa:	7812      	ldrb	r2, [r2, #0]
 80073fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29a      	uxth	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b01      	cmp	r3, #1
 8007426:	d119      	bne.n	800745c <HAL_SPI_TransmitReceive+0x2a6>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68da      	ldr	r2, [r3, #12]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800744e:	b29b      	uxth	r3, r3
 8007450:	3b01      	subs	r3, #1
 8007452:	b29a      	uxth	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007458:	2301      	movs	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800745c:	f7fe fc8c 	bl	8005d78 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007468:	429a      	cmp	r2, r3
 800746a:	d803      	bhi.n	8007474 <HAL_SPI_TransmitReceive+0x2be>
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007472:	d102      	bne.n	800747a <HAL_SPI_TransmitReceive+0x2c4>
 8007474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e038      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007492:	b29b      	uxth	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d19c      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x21c>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d197      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f8b6 	bl	8007618 <SPI_EndRxTxTransaction>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d008      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2220      	movs	r2, #32
 80074b6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e01d      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074cc:	2300      	movs	r3, #0
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80074fe:	2300      	movs	r3, #0
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3728      	adds	r7, #40	@ 0x28
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	60b9      	str	r1, [r7, #8]
 8007512:	603b      	str	r3, [r7, #0]
 8007514:	4613      	mov	r3, r2
 8007516:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007518:	f7fe fc2e 	bl	8005d78 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4413      	add	r3, r2
 8007526:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007528:	f7fe fc26 	bl	8005d78 <HAL_GetTick>
 800752c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800752e:	4b39      	ldr	r3, [pc, #228]	@ (8007614 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	015b      	lsls	r3, r3, #5
 8007534:	0d1b      	lsrs	r3, r3, #20
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800753e:	e054      	b.n	80075ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007546:	d050      	beq.n	80075ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007548:	f7fe fc16 	bl	8005d78 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	429a      	cmp	r2, r3
 8007556:	d902      	bls.n	800755e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d13d      	bne.n	80075da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800756c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007576:	d111      	bne.n	800759c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007580:	d004      	beq.n	800758c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800758a:	d107      	bne.n	800759c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800759a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075a4:	d10f      	bne.n	80075c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075b4:	601a      	str	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e017      	b.n	800760a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	4013      	ands	r3, r2
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	bf0c      	ite	eq
 80075fa:	2301      	moveq	r3, #1
 80075fc:	2300      	movne	r3, #0
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	429a      	cmp	r2, r3
 8007606:	d19b      	bne.n	8007540 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000100 	.word	0x20000100

08007618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2201      	movs	r2, #1
 800762c:	2102      	movs	r1, #2
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff ff6a 	bl	8007508 <SPI_WaitFlagStateUntilTimeout>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d007      	beq.n	800764a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800763e:	f043 0220 	orr.w	r2, r3, #32
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e032      	b.n	80076b0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800764a:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <SPI_EndRxTxTransaction+0xa0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1b      	ldr	r2, [pc, #108]	@ (80076bc <SPI_EndRxTxTransaction+0xa4>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	0d5b      	lsrs	r3, r3, #21
 8007656:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007668:	d112      	bne.n	8007690 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	2180      	movs	r1, #128	@ 0x80
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff ff47 	bl	8007508 <SPI_WaitFlagStateUntilTimeout>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d016      	beq.n	80076ae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e00f      	b.n	80076b0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3b01      	subs	r3, #1
 800769a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b80      	cmp	r3, #128	@ 0x80
 80076a8:	d0f2      	beq.n	8007690 <SPI_EndRxTxTransaction+0x78>
 80076aa:	e000      	b.n	80076ae <SPI_EndRxTxTransaction+0x96>
        break;
 80076ac:	bf00      	nop
  }

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	20000100 	.word	0x20000100
 80076bc:	165e9f81 	.word	0x165e9f81

080076c0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e038      	b.n	8007748 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7fe f992 	bl	8005a14 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	3308      	adds	r3, #8
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f001 f87e 	bl	80087fc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6818      	ldr	r0, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	461a      	mov	r2, r3
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	f001 f8e0 	bl	80088d0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6858      	ldr	r0, [r3, #4]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	6879      	ldr	r1, [r7, #4]
 800771e:	f001 f90d 	bl	800893c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	6892      	ldr	r2, [r2, #8]
 800772a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	6892      	ldr	r2, [r2, #8]
 8007736:	f041 0101 	orr.w	r1, r1, #1
 800773a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e042      	b.n	80077e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fe f8b0 	bl	80058dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2224      	movs	r2, #36	@ 0x24
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fdbd 	bl	8008314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691a      	ldr	r2, [r3, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695a      	ldr	r2, [r3, #20]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2220      	movs	r2, #32
 80077d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08a      	sub	sp, #40	@ 0x28
 80077f4:	af02      	add	r7, sp, #8
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b20      	cmp	r3, #32
 800780e:	d175      	bne.n	80078fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <HAL_UART_Transmit+0x2c>
 8007816:	88fb      	ldrh	r3, [r7, #6]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e06e      	b.n	80078fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2221      	movs	r2, #33	@ 0x21
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800782e:	f7fe faa3 	bl	8005d78 <HAL_GetTick>
 8007832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007848:	d108      	bne.n	800785c <HAL_UART_Transmit+0x6c>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d104      	bne.n	800785c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	e003      	b.n	8007864 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007860:	2300      	movs	r3, #0
 8007862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007864:	e02e      	b.n	80078c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2200      	movs	r2, #0
 800786e:	2180      	movs	r1, #128	@ 0x80
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fb1f 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e03a      	b.n	80078fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	3302      	adds	r3, #2
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	e007      	b.n	80078b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	781a      	ldrb	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	3301      	adds	r3, #1
 80078b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1cb      	bne.n	8007866 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2200      	movs	r2, #0
 80078d6:	2140      	movs	r1, #64	@ 0x40
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 faeb 	bl	8007eb4 <UART_WaitOnFlagUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2220      	movs	r2, #32
 80078e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80078fc:	2302      	movs	r3, #2
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	60f8      	str	r0, [r7, #12]
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	4613      	mov	r3, r2
 8007912:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b20      	cmp	r3, #32
 800791e:	d112      	bne.n	8007946 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <HAL_UART_Receive_IT+0x26>
 8007926:	88fb      	ldrh	r3, [r7, #6]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e00b      	b.n	8007948 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	461a      	mov	r2, r3
 800793a:	68b9      	ldr	r1, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fb12 	bl	8007f66 <UART_Start_Receive_IT>
 8007942:	4603      	mov	r3, r0
 8007944:	e000      	b.n	8007948 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007946:	2302      	movs	r3, #2
  }
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b0ba      	sub	sp, #232	@ 0xe8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007976:	2300      	movs	r3, #0
 8007978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800798e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10f      	bne.n	80079b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d009      	beq.n	80079b6 <HAL_UART_IRQHandler+0x66>
 80079a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fbf2 	bl	8008198 <UART_Receive_IT>
      return;
 80079b4:	e25b      	b.n	8007e6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80de 	beq.w	8007b7c <HAL_UART_IRQHandler+0x22c>
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d106      	bne.n	80079da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80d1 	beq.w	8007b7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_UART_IRQHandler+0xae>
 80079e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079f6:	f043 0201 	orr.w	r2, r3, #1
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_UART_IRQHandler+0xd2>
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d005      	beq.n	8007a22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1a:	f043 0202 	orr.w	r2, r3, #2
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <HAL_UART_IRQHandler+0xf6>
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a3e:	f043 0204 	orr.w	r2, r3, #4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d011      	beq.n	8007a76 <HAL_UART_IRQHandler+0x126>
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d105      	bne.n	8007a6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6e:	f043 0208 	orr.w	r2, r3, #8
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 81f2 	beq.w	8007e64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14e>
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a90:	f003 0320 	and.w	r3, r3, #32
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb7d 	bl	8008198 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aa8:	2b40      	cmp	r3, #64	@ 0x40
 8007aaa:	bf0c      	ite	eq
 8007aac:	2301      	moveq	r3, #1
 8007aae:	2300      	movne	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <HAL_UART_IRQHandler+0x17a>
 8007ac2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d04f      	beq.n	8007b6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa85 	bl	8007fda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b40      	cmp	r3, #64	@ 0x40
 8007adc:	d141      	bne.n	8007b62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3314      	adds	r3, #20
 8007ae4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007af8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007afc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3314      	adds	r3, #20
 8007b06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1d9      	bne.n	8007ade <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d013      	beq.n	8007b5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b36:	4a7e      	ldr	r2, [pc, #504]	@ (8007d30 <HAL_UART_IRQHandler+0x3e0>)
 8007b38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f7fe facb 	bl	80060da <HAL_DMA_Abort_IT>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b58:	e00e      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f994 	bl	8007e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	e00a      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f990 	bl	8007e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b68:	e006      	b.n	8007b78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f98c 	bl	8007e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007b76:	e175      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	bf00      	nop
    return;
 8007b7a:	e173      	b.n	8007e64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f040 814f 	bne.w	8007e24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8148 	beq.w	8007e24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8141 	beq.w	8007e24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60bb      	str	r3, [r7, #8]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bc2:	2b40      	cmp	r3, #64	@ 0x40
 8007bc4:	f040 80b6 	bne.w	8007d34 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8145 	beq.w	8007e68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007be6:	429a      	cmp	r2, r3
 8007be8:	f080 813e 	bcs.w	8007e68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007bf2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bfe:	f000 8088 	beq.w	8007d12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	330c      	adds	r3, #12
 8007c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	330c      	adds	r3, #12
 8007c2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007c2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1d9      	bne.n	8007c02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	3314      	adds	r3, #20
 8007c54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e1      	bne.n	8007c4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007cae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e3      	bne.n	8007c8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	330c      	adds	r3, #12
 8007cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cda:	e853 3f00 	ldrex	r3, [r3]
 8007cde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ce2:	f023 0310 	bic.w	r3, r3, #16
 8007ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007cf4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007cf6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cfc:	e841 2300 	strex	r3, r2, [r1]
 8007d00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e3      	bne.n	8007cd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fe f974 	bl	8005ffa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2202      	movs	r2, #2
 8007d16:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	4619      	mov	r1, r3
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f8b7 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d2e:	e09b      	b.n	8007e68 <HAL_UART_IRQHandler+0x518>
 8007d30:	080080a1 	.word	0x080080a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 808e 	beq.w	8007e6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007d50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8089 	beq.w	8007e6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	330c      	adds	r3, #12
 8007d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	330c      	adds	r3, #12
 8007d7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007d7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d86:	e841 2300 	strex	r3, r2, [r1]
 8007d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1e3      	bne.n	8007d5a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	3314      	adds	r3, #20
 8007d98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	623b      	str	r3, [r7, #32]
   return(result);
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	f023 0301 	bic.w	r3, r3, #1
 8007da8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3314      	adds	r3, #20
 8007db2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007db6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e3      	bne.n	8007d92 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0310 	bic.w	r3, r3, #16
 8007dee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	330c      	adds	r3, #12
 8007df8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007dfc:	61fa      	str	r2, [r7, #28]
 8007dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	69b9      	ldr	r1, [r7, #24]
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	617b      	str	r3, [r7, #20]
   return(result);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e3      	bne.n	8007dd8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f83d 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e22:	e023      	b.n	8007e6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <HAL_UART_IRQHandler+0x4f4>
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f943 	bl	80080c8 <UART_Transmit_IT>
    return;
 8007e42:	e014      	b.n	8007e6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00e      	beq.n	8007e6e <HAL_UART_IRQHandler+0x51e>
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f983 	bl	8008168 <UART_EndTransmit_IT>
    return;
 8007e62:	e004      	b.n	8007e6e <HAL_UART_IRQHandler+0x51e>
    return;
 8007e64:	bf00      	nop
 8007e66:	e002      	b.n	8007e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8007e68:	bf00      	nop
 8007e6a:	e000      	b.n	8007e6e <HAL_UART_IRQHandler+0x51e>
      return;
 8007e6c:	bf00      	nop
  }
}
 8007e6e:	37e8      	adds	r7, #232	@ 0xe8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec4:	e03b      	b.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d037      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ece:	f7fd ff53 	bl	8005d78 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	6a3a      	ldr	r2, [r7, #32]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e03a      	b.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d023      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b80      	cmp	r3, #128	@ 0x80
 8007efa:	d020      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2b40      	cmp	r3, #64	@ 0x40
 8007f00:	d01d      	beq.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0308 	and.w	r3, r3, #8
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d116      	bne.n	8007f3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007f10:	2300      	movs	r3, #0
 8007f12:	617b      	str	r3, [r7, #20]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f000 f857 	bl	8007fda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2208      	movs	r2, #8
 8007f30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e00f      	b.n	8007f5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	4013      	ands	r3, r2
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	bf0c      	ite	eq
 8007f4e:	2301      	moveq	r3, #1
 8007f50:	2300      	movne	r3, #0
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	79fb      	ldrb	r3, [r7, #7]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d0b4      	beq.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	88fa      	ldrh	r2, [r7, #6]
 8007f84:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2222      	movs	r2, #34	@ 0x22
 8007f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d007      	beq.n	8007fac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007faa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	695a      	ldr	r2, [r3, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f042 0201 	orr.w	r2, r2, #1
 8007fba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0220 	orr.w	r2, r2, #32
 8007fca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b095      	sub	sp, #84	@ 0x54
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008002:	643a      	str	r2, [r7, #64]	@ 0x40
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e5      	bne.n	8007fe2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3314      	adds	r3, #20
 800801c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	e853 3f00 	ldrex	r3, [r3]
 8008024:	61fb      	str	r3, [r7, #28]
   return(result);
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f023 0301 	bic.w	r3, r3, #1
 800802c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3314      	adds	r3, #20
 8008034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008038:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800803c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800803e:	e841 2300 	strex	r3, r2, [r1]
 8008042:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1e5      	bne.n	8008016 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800804e:	2b01      	cmp	r3, #1
 8008050:	d119      	bne.n	8008086 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	60bb      	str	r3, [r7, #8]
   return(result);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f023 0310 	bic.w	r3, r3, #16
 8008068:	647b      	str	r3, [r7, #68]	@ 0x44
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008072:	61ba      	str	r2, [r7, #24]
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6979      	ldr	r1, [r7, #20]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	613b      	str	r3, [r7, #16]
   return(result);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e5      	bne.n	8008052 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008094:	bf00      	nop
 8008096:	3754      	adds	r7, #84	@ 0x54
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fee4 	bl	8007e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b21      	cmp	r3, #33	@ 0x21
 80080da:	d13e      	bne.n	800815a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e4:	d114      	bne.n	8008110 <UART_Transmit_IT+0x48>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	691b      	ldr	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d110      	bne.n	8008110 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	461a      	mov	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008102:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	621a      	str	r2, [r3, #32]
 800810e:	e008      	b.n	8008122 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	1c59      	adds	r1, r3, #1
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6211      	str	r1, [r2, #32]
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29b      	uxth	r3, r3
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	4619      	mov	r1, r3
 8008130:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10f      	bne.n	8008156 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008144:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008154:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	e000      	b.n	800815c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800815a:	2302      	movs	r3, #2
  }
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800817e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2220      	movs	r2, #32
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7ff fe73 	bl	8007e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08c      	sub	sp, #48	@ 0x30
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b22      	cmp	r3, #34	@ 0x22
 80081aa:	f040 80ae 	bne.w	800830a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b6:	d117      	bne.n	80081e8 <UART_Receive_IT+0x50>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d113      	bne.n	80081e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	1c9a      	adds	r2, r3, #2
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80081e6:	e026      	b.n	8008236 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081fa:	d007      	beq.n	800820c <UART_Receive_IT+0x74>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <UART_Receive_IT+0x82>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d106      	bne.n	800821a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	b2da      	uxtb	r2, r3
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	701a      	strb	r2, [r3, #0]
 8008218:	e008      	b.n	800822c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008226:	b2da      	uxtb	r2, r3
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008230:	1c5a      	adds	r2, r3, #1
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29b      	uxth	r3, r3
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	4619      	mov	r1, r3
 8008244:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008246:	2b00      	cmp	r3, #0
 8008248:	d15d      	bne.n	8008306 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0220 	bic.w	r2, r2, #32
 8008258:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008268:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	2b01      	cmp	r3, #1
 800828e:	d135      	bne.n	80082fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	330c      	adds	r3, #12
 800829c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	e853 3f00 	ldrex	r3, [r3]
 80082a4:	613b      	str	r3, [r7, #16]
   return(result);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f023 0310 	bic.w	r3, r3, #16
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082b6:	623a      	str	r2, [r7, #32]
 80082b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ba:	69f9      	ldr	r1, [r7, #28]
 80082bc:	6a3a      	ldr	r2, [r7, #32]
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e5      	bne.n	8008296 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0310 	and.w	r3, r3, #16
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d10a      	bne.n	80082ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fdd1 	bl	8007e9c <HAL_UARTEx_RxEventCallback>
 80082fa:	e002      	b.n	8008302 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f7fd f847 	bl	8005390 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e002      	b.n	800830c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e000      	b.n	800830c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800830a:	2302      	movs	r3, #2
  }
}
 800830c:	4618      	mov	r0, r3
 800830e:	3730      	adds	r7, #48	@ 0x30
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008318:	b0c0      	sub	sp, #256	@ 0x100
 800831a:	af00      	add	r7, sp, #0
 800831c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008330:	68d9      	ldr	r1, [r3, #12]
 8008332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	ea40 0301 	orr.w	r3, r0, r1
 800833c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800833e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	431a      	orrs	r2, r3
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	431a      	orrs	r2, r3
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	4313      	orrs	r3, r2
 800835c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800836c:	f021 010c 	bic.w	r1, r1, #12
 8008370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800837a:	430b      	orrs	r3, r1
 800837c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800837e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800838a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800838e:	6999      	ldr	r1, [r3, #24]
 8008390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	ea40 0301 	orr.w	r3, r0, r1
 800839a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b8f      	ldr	r3, [pc, #572]	@ (80085e0 <UART_SetConfig+0x2cc>)
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d005      	beq.n	80083b4 <UART_SetConfig+0xa0>
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b8d      	ldr	r3, [pc, #564]	@ (80085e4 <UART_SetConfig+0x2d0>)
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d104      	bne.n	80083be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083b4:	f7fe fd1e 	bl	8006df4 <HAL_RCC_GetPCLK2Freq>
 80083b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80083bc:	e003      	b.n	80083c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083be:	f7fe fd05 	bl	8006dcc <HAL_RCC_GetPCLK1Freq>
 80083c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d0:	f040 810c 	bne.w	80085ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083d8:	2200      	movs	r2, #0
 80083da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80083de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80083e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	1891      	adds	r1, r2, r2
 80083ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80083ee:	415b      	adcs	r3, r3
 80083f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80083f6:	4621      	mov	r1, r4
 80083f8:	eb12 0801 	adds.w	r8, r2, r1
 80083fc:	4629      	mov	r1, r5
 80083fe:	eb43 0901 	adc.w	r9, r3, r1
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	f04f 0300 	mov.w	r3, #0
 800840a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800840e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008416:	4690      	mov	r8, r2
 8008418:	4699      	mov	r9, r3
 800841a:	4623      	mov	r3, r4
 800841c:	eb18 0303 	adds.w	r3, r8, r3
 8008420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008424:	462b      	mov	r3, r5
 8008426:	eb49 0303 	adc.w	r3, r9, r3
 800842a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800843a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800843e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008442:	460b      	mov	r3, r1
 8008444:	18db      	adds	r3, r3, r3
 8008446:	653b      	str	r3, [r7, #80]	@ 0x50
 8008448:	4613      	mov	r3, r2
 800844a:	eb42 0303 	adc.w	r3, r2, r3
 800844e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008458:	f7f8 fbc0 	bl	8000bdc <__aeabi_uldivmod>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4b61      	ldr	r3, [pc, #388]	@ (80085e8 <UART_SetConfig+0x2d4>)
 8008462:	fba3 2302 	umull	r2, r3, r3, r2
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	011c      	lsls	r4, r3, #4
 800846a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800846e:	2200      	movs	r2, #0
 8008470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	1891      	adds	r1, r2, r2
 8008482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008484:	415b      	adcs	r3, r3
 8008486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800848c:	4641      	mov	r1, r8
 800848e:	eb12 0a01 	adds.w	sl, r2, r1
 8008492:	4649      	mov	r1, r9
 8008494:	eb43 0b01 	adc.w	fp, r3, r1
 8008498:	f04f 0200 	mov.w	r2, #0
 800849c:	f04f 0300 	mov.w	r3, #0
 80084a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084ac:	4692      	mov	sl, r2
 80084ae:	469b      	mov	fp, r3
 80084b0:	4643      	mov	r3, r8
 80084b2:	eb1a 0303 	adds.w	r3, sl, r3
 80084b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80084ba:	464b      	mov	r3, r9
 80084bc:	eb4b 0303 	adc.w	r3, fp, r3
 80084c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80084d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80084d8:	460b      	mov	r3, r1
 80084da:	18db      	adds	r3, r3, r3
 80084dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80084de:	4613      	mov	r3, r2
 80084e0:	eb42 0303 	adc.w	r3, r2, r3
 80084e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80084ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80084ee:	f7f8 fb75 	bl	8000bdc <__aeabi_uldivmod>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4611      	mov	r1, r2
 80084f8:	4b3b      	ldr	r3, [pc, #236]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80084fa:	fba3 2301 	umull	r2, r3, r3, r1
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	2264      	movs	r2, #100	@ 0x64
 8008502:	fb02 f303 	mul.w	r3, r2, r3
 8008506:	1acb      	subs	r3, r1, r3
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800850e:	4b36      	ldr	r3, [pc, #216]	@ (80085e8 <UART_SetConfig+0x2d4>)
 8008510:	fba3 2302 	umull	r2, r3, r3, r2
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800851c:	441c      	add	r4, r3
 800851e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008522:	2200      	movs	r2, #0
 8008524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800852c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008530:	4642      	mov	r2, r8
 8008532:	464b      	mov	r3, r9
 8008534:	1891      	adds	r1, r2, r2
 8008536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008538:	415b      	adcs	r3, r3
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800853c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008540:	4641      	mov	r1, r8
 8008542:	1851      	adds	r1, r2, r1
 8008544:	6339      	str	r1, [r7, #48]	@ 0x30
 8008546:	4649      	mov	r1, r9
 8008548:	414b      	adcs	r3, r1
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008558:	4659      	mov	r1, fp
 800855a:	00cb      	lsls	r3, r1, #3
 800855c:	4651      	mov	r1, sl
 800855e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008562:	4651      	mov	r1, sl
 8008564:	00ca      	lsls	r2, r1, #3
 8008566:	4610      	mov	r0, r2
 8008568:	4619      	mov	r1, r3
 800856a:	4603      	mov	r3, r0
 800856c:	4642      	mov	r2, r8
 800856e:	189b      	adds	r3, r3, r2
 8008570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008574:	464b      	mov	r3, r9
 8008576:	460a      	mov	r2, r1
 8008578:	eb42 0303 	adc.w	r3, r2, r3
 800857c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800858c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008594:	460b      	mov	r3, r1
 8008596:	18db      	adds	r3, r3, r3
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800859a:	4613      	mov	r3, r2
 800859c:	eb42 0303 	adc.w	r3, r2, r3
 80085a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80085a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80085aa:	f7f8 fb17 	bl	8000bdc <__aeabi_uldivmod>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4b0d      	ldr	r3, [pc, #52]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80085b4:	fba3 1302 	umull	r1, r3, r3, r2
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	2164      	movs	r1, #100	@ 0x64
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	3332      	adds	r3, #50	@ 0x32
 80085c6:	4a08      	ldr	r2, [pc, #32]	@ (80085e8 <UART_SetConfig+0x2d4>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f003 0207 	and.w	r2, r3, #7
 80085d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4422      	add	r2, r4
 80085da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085dc:	e106      	b.n	80087ec <UART_SetConfig+0x4d8>
 80085de:	bf00      	nop
 80085e0:	40011000 	.word	0x40011000
 80085e4:	40011400 	.word	0x40011400
 80085e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80085f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80085fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80085fe:	4642      	mov	r2, r8
 8008600:	464b      	mov	r3, r9
 8008602:	1891      	adds	r1, r2, r2
 8008604:	6239      	str	r1, [r7, #32]
 8008606:	415b      	adcs	r3, r3
 8008608:	627b      	str	r3, [r7, #36]	@ 0x24
 800860a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800860e:	4641      	mov	r1, r8
 8008610:	1854      	adds	r4, r2, r1
 8008612:	4649      	mov	r1, r9
 8008614:	eb43 0501 	adc.w	r5, r3, r1
 8008618:	f04f 0200 	mov.w	r2, #0
 800861c:	f04f 0300 	mov.w	r3, #0
 8008620:	00eb      	lsls	r3, r5, #3
 8008622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008626:	00e2      	lsls	r2, r4, #3
 8008628:	4614      	mov	r4, r2
 800862a:	461d      	mov	r5, r3
 800862c:	4643      	mov	r3, r8
 800862e:	18e3      	adds	r3, r4, r3
 8008630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008634:	464b      	mov	r3, r9
 8008636:	eb45 0303 	adc.w	r3, r5, r3
 800863a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800864a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800865a:	4629      	mov	r1, r5
 800865c:	008b      	lsls	r3, r1, #2
 800865e:	4621      	mov	r1, r4
 8008660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008664:	4621      	mov	r1, r4
 8008666:	008a      	lsls	r2, r1, #2
 8008668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800866c:	f7f8 fab6 	bl	8000bdc <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4b60      	ldr	r3, [pc, #384]	@ (80087f8 <UART_SetConfig+0x4e4>)
 8008676:	fba3 2302 	umull	r2, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	011c      	lsls	r4, r3, #4
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800868c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	1891      	adds	r1, r2, r2
 8008696:	61b9      	str	r1, [r7, #24]
 8008698:	415b      	adcs	r3, r3
 800869a:	61fb      	str	r3, [r7, #28]
 800869c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086a0:	4641      	mov	r1, r8
 80086a2:	1851      	adds	r1, r2, r1
 80086a4:	6139      	str	r1, [r7, #16]
 80086a6:	4649      	mov	r1, r9
 80086a8:	414b      	adcs	r3, r1
 80086aa:	617b      	str	r3, [r7, #20]
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b8:	4659      	mov	r1, fp
 80086ba:	00cb      	lsls	r3, r1, #3
 80086bc:	4651      	mov	r1, sl
 80086be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c2:	4651      	mov	r1, sl
 80086c4:	00ca      	lsls	r2, r1, #3
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	4603      	mov	r3, r0
 80086cc:	4642      	mov	r2, r8
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086d4:	464b      	mov	r3, r9
 80086d6:	460a      	mov	r2, r1
 80086d8:	eb42 0303 	adc.w	r3, r2, r3
 80086dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	f04f 0300 	mov.w	r3, #0
 80086f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80086f8:	4649      	mov	r1, r9
 80086fa:	008b      	lsls	r3, r1, #2
 80086fc:	4641      	mov	r1, r8
 80086fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008702:	4641      	mov	r1, r8
 8008704:	008a      	lsls	r2, r1, #2
 8008706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800870a:	f7f8 fa67 	bl	8000bdc <__aeabi_uldivmod>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4611      	mov	r1, r2
 8008714:	4b38      	ldr	r3, [pc, #224]	@ (80087f8 <UART_SetConfig+0x4e4>)
 8008716:	fba3 2301 	umull	r2, r3, r3, r1
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2264      	movs	r2, #100	@ 0x64
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	1acb      	subs	r3, r1, r3
 8008724:	011b      	lsls	r3, r3, #4
 8008726:	3332      	adds	r3, #50	@ 0x32
 8008728:	4a33      	ldr	r2, [pc, #204]	@ (80087f8 <UART_SetConfig+0x4e4>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	095b      	lsrs	r3, r3, #5
 8008730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008734:	441c      	add	r4, r3
 8008736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800873a:	2200      	movs	r2, #0
 800873c:	673b      	str	r3, [r7, #112]	@ 0x70
 800873e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	415b      	adcs	r3, r3
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008754:	4641      	mov	r1, r8
 8008756:	1851      	adds	r1, r2, r1
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	4649      	mov	r1, r9
 800875c:	414b      	adcs	r3, r1
 800875e:	607b      	str	r3, [r7, #4]
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800876c:	4659      	mov	r1, fp
 800876e:	00cb      	lsls	r3, r1, #3
 8008770:	4651      	mov	r1, sl
 8008772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008776:	4651      	mov	r1, sl
 8008778:	00ca      	lsls	r2, r1, #3
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	4603      	mov	r3, r0
 8008780:	4642      	mov	r2, r8
 8008782:	189b      	adds	r3, r3, r2
 8008784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008786:	464b      	mov	r3, r9
 8008788:	460a      	mov	r2, r1
 800878a:	eb42 0303 	adc.w	r3, r2, r3
 800878e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	663b      	str	r3, [r7, #96]	@ 0x60
 800879a:	667a      	str	r2, [r7, #100]	@ 0x64
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80087a8:	4649      	mov	r1, r9
 80087aa:	008b      	lsls	r3, r1, #2
 80087ac:	4641      	mov	r1, r8
 80087ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087b2:	4641      	mov	r1, r8
 80087b4:	008a      	lsls	r2, r1, #2
 80087b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80087ba:	f7f8 fa0f 	bl	8000bdc <__aeabi_uldivmod>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	4b0d      	ldr	r3, [pc, #52]	@ (80087f8 <UART_SetConfig+0x4e4>)
 80087c4:	fba3 1302 	umull	r1, r3, r3, r2
 80087c8:	095b      	lsrs	r3, r3, #5
 80087ca:	2164      	movs	r1, #100	@ 0x64
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	011b      	lsls	r3, r3, #4
 80087d4:	3332      	adds	r3, #50	@ 0x32
 80087d6:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <UART_SetConfig+0x4e4>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	095b      	lsrs	r3, r3, #5
 80087de:	f003 020f 	and.w	r2, r3, #15
 80087e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4422      	add	r2, r4
 80087ea:	609a      	str	r2, [r3, #8]
}
 80087ec:	bf00      	nop
 80087ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80087f2:	46bd      	mov	sp, r7
 80087f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f8:	51eb851f 	.word	0x51eb851f

080087fc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	6812      	ldr	r2, [r2, #0]
 8008814:	f023 0101 	bic.w	r1, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	2b08      	cmp	r3, #8
 8008824:	d102      	bne.n	800882c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008826:	2340      	movs	r3, #64	@ 0x40
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e001      	b.n	8008830 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800882c:	2300      	movs	r3, #0
 800882e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800883c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008842:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008848:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800884e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008854:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800885a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8008860:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8008866:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800886c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	693a      	ldr	r2, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800888a:	4b10      	ldr	r3, [pc, #64]	@ (80088cc <FSMC_NORSRAM_Init+0xd0>)
 800888c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008894:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800889c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	43db      	mvns	r3, r3
 80088ac:	ea02 0103 	and.w	r1, r2, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	4319      	orrs	r1, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	371c      	adds	r7, #28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	0008fb7f 	.word	0x0008fb7f

080088d0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e6:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	431a      	orrs	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	431a      	orrs	r2, r3
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	3b01      	subs	r3, #1
 800890c:	051b      	lsls	r3, r3, #20
 800890e:	431a      	orrs	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	3b02      	subs	r3, #2
 8008916:	061b      	lsls	r3, r3, #24
 8008918:	431a      	orrs	r2, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	4313      	orrs	r3, r2
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	3201      	adds	r2, #1
 8008924:	4319      	orrs	r1, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3714      	adds	r7, #20
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
	...

0800893c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008950:	d11d      	bne.n	800898e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800895a:	4b13      	ldr	r3, [pc, #76]	@ (80089a8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800895c:	4013      	ands	r3, r2
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	6811      	ldr	r1, [r2, #0]
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	6852      	ldr	r2, [r2, #4]
 8008966:	0112      	lsls	r2, r2, #4
 8008968:	4311      	orrs	r1, r2
 800896a:	68ba      	ldr	r2, [r7, #8]
 800896c:	6892      	ldr	r2, [r2, #8]
 800896e:	0212      	lsls	r2, r2, #8
 8008970:	4311      	orrs	r1, r2
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	6992      	ldr	r2, [r2, #24]
 8008976:	4311      	orrs	r1, r2
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	68d2      	ldr	r2, [r2, #12]
 800897c:	0412      	lsls	r2, r2, #16
 800897e:	430a      	orrs	r2, r1
 8008980:	ea43 0102 	orr.w	r1, r3, r2
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800898c:	e005      	b.n	800899a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8008996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	cff00000 	.word	0xcff00000

080089ac <malloc>:
 80089ac:	4b02      	ldr	r3, [pc, #8]	@ (80089b8 <malloc+0xc>)
 80089ae:	4601      	mov	r1, r0
 80089b0:	6818      	ldr	r0, [r3, #0]
 80089b2:	f000 b82d 	b.w	8008a10 <_malloc_r>
 80089b6:	bf00      	nop
 80089b8:	20000284 	.word	0x20000284

080089bc <free>:
 80089bc:	4b02      	ldr	r3, [pc, #8]	@ (80089c8 <free+0xc>)
 80089be:	4601      	mov	r1, r0
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	f001 b929 	b.w	8009c18 <_free_r>
 80089c6:	bf00      	nop
 80089c8:	20000284 	.word	0x20000284

080089cc <sbrk_aligned>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4e0f      	ldr	r6, [pc, #60]	@ (8008a0c <sbrk_aligned+0x40>)
 80089d0:	460c      	mov	r4, r1
 80089d2:	6831      	ldr	r1, [r6, #0]
 80089d4:	4605      	mov	r5, r0
 80089d6:	b911      	cbnz	r1, 80089de <sbrk_aligned+0x12>
 80089d8:	f001 f8ae 	bl	8009b38 <_sbrk_r>
 80089dc:	6030      	str	r0, [r6, #0]
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f001 f8a9 	bl	8009b38 <_sbrk_r>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	d103      	bne.n	80089f2 <sbrk_aligned+0x26>
 80089ea:	f04f 34ff 	mov.w	r4, #4294967295
 80089ee:	4620      	mov	r0, r4
 80089f0:	bd70      	pop	{r4, r5, r6, pc}
 80089f2:	1cc4      	adds	r4, r0, #3
 80089f4:	f024 0403 	bic.w	r4, r4, #3
 80089f8:	42a0      	cmp	r0, r4
 80089fa:	d0f8      	beq.n	80089ee <sbrk_aligned+0x22>
 80089fc:	1a21      	subs	r1, r4, r0
 80089fe:	4628      	mov	r0, r5
 8008a00:	f001 f89a 	bl	8009b38 <_sbrk_r>
 8008a04:	3001      	adds	r0, #1
 8008a06:	d1f2      	bne.n	80089ee <sbrk_aligned+0x22>
 8008a08:	e7ef      	b.n	80089ea <sbrk_aligned+0x1e>
 8008a0a:	bf00      	nop
 8008a0c:	20000cc4 	.word	0x20000cc4

08008a10 <_malloc_r>:
 8008a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a14:	1ccd      	adds	r5, r1, #3
 8008a16:	f025 0503 	bic.w	r5, r5, #3
 8008a1a:	3508      	adds	r5, #8
 8008a1c:	2d0c      	cmp	r5, #12
 8008a1e:	bf38      	it	cc
 8008a20:	250c      	movcc	r5, #12
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	4606      	mov	r6, r0
 8008a26:	db01      	blt.n	8008a2c <_malloc_r+0x1c>
 8008a28:	42a9      	cmp	r1, r5
 8008a2a:	d904      	bls.n	8008a36 <_malloc_r+0x26>
 8008a2c:	230c      	movs	r3, #12
 8008a2e:	6033      	str	r3, [r6, #0]
 8008a30:	2000      	movs	r0, #0
 8008a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b0c <_malloc_r+0xfc>
 8008a3a:	f000 f869 	bl	8008b10 <__malloc_lock>
 8008a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a42:	461c      	mov	r4, r3
 8008a44:	bb44      	cbnz	r4, 8008a98 <_malloc_r+0x88>
 8008a46:	4629      	mov	r1, r5
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f7ff ffbf 	bl	80089cc <sbrk_aligned>
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	4604      	mov	r4, r0
 8008a52:	d158      	bne.n	8008b06 <_malloc_r+0xf6>
 8008a54:	f8d8 4000 	ldr.w	r4, [r8]
 8008a58:	4627      	mov	r7, r4
 8008a5a:	2f00      	cmp	r7, #0
 8008a5c:	d143      	bne.n	8008ae6 <_malloc_r+0xd6>
 8008a5e:	2c00      	cmp	r4, #0
 8008a60:	d04b      	beq.n	8008afa <_malloc_r+0xea>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	4639      	mov	r1, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	eb04 0903 	add.w	r9, r4, r3
 8008a6c:	f001 f864 	bl	8009b38 <_sbrk_r>
 8008a70:	4581      	cmp	r9, r0
 8008a72:	d142      	bne.n	8008afa <_malloc_r+0xea>
 8008a74:	6821      	ldr	r1, [r4, #0]
 8008a76:	1a6d      	subs	r5, r5, r1
 8008a78:	4629      	mov	r1, r5
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ffa6 	bl	80089cc <sbrk_aligned>
 8008a80:	3001      	adds	r0, #1
 8008a82:	d03a      	beq.n	8008afa <_malloc_r+0xea>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	442b      	add	r3, r5
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	bb62      	cbnz	r2, 8008aec <_malloc_r+0xdc>
 8008a92:	f8c8 7000 	str.w	r7, [r8]
 8008a96:	e00f      	b.n	8008ab8 <_malloc_r+0xa8>
 8008a98:	6822      	ldr	r2, [r4, #0]
 8008a9a:	1b52      	subs	r2, r2, r5
 8008a9c:	d420      	bmi.n	8008ae0 <_malloc_r+0xd0>
 8008a9e:	2a0b      	cmp	r2, #11
 8008aa0:	d917      	bls.n	8008ad2 <_malloc_r+0xc2>
 8008aa2:	1961      	adds	r1, r4, r5
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	6025      	str	r5, [r4, #0]
 8008aa8:	bf18      	it	ne
 8008aaa:	6059      	strne	r1, [r3, #4]
 8008aac:	6863      	ldr	r3, [r4, #4]
 8008aae:	bf08      	it	eq
 8008ab0:	f8c8 1000 	streq.w	r1, [r8]
 8008ab4:	5162      	str	r2, [r4, r5]
 8008ab6:	604b      	str	r3, [r1, #4]
 8008ab8:	4630      	mov	r0, r6
 8008aba:	f000 f82f 	bl	8008b1c <__malloc_unlock>
 8008abe:	f104 000b 	add.w	r0, r4, #11
 8008ac2:	1d23      	adds	r3, r4, #4
 8008ac4:	f020 0007 	bic.w	r0, r0, #7
 8008ac8:	1ac2      	subs	r2, r0, r3
 8008aca:	bf1c      	itt	ne
 8008acc:	1a1b      	subne	r3, r3, r0
 8008ace:	50a3      	strne	r3, [r4, r2]
 8008ad0:	e7af      	b.n	8008a32 <_malloc_r+0x22>
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	bf0c      	ite	eq
 8008ad8:	f8c8 2000 	streq.w	r2, [r8]
 8008adc:	605a      	strne	r2, [r3, #4]
 8008ade:	e7eb      	b.n	8008ab8 <_malloc_r+0xa8>
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	6864      	ldr	r4, [r4, #4]
 8008ae4:	e7ae      	b.n	8008a44 <_malloc_r+0x34>
 8008ae6:	463c      	mov	r4, r7
 8008ae8:	687f      	ldr	r7, [r7, #4]
 8008aea:	e7b6      	b.n	8008a5a <_malloc_r+0x4a>
 8008aec:	461a      	mov	r2, r3
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	d1fb      	bne.n	8008aec <_malloc_r+0xdc>
 8008af4:	2300      	movs	r3, #0
 8008af6:	6053      	str	r3, [r2, #4]
 8008af8:	e7de      	b.n	8008ab8 <_malloc_r+0xa8>
 8008afa:	230c      	movs	r3, #12
 8008afc:	6033      	str	r3, [r6, #0]
 8008afe:	4630      	mov	r0, r6
 8008b00:	f000 f80c 	bl	8008b1c <__malloc_unlock>
 8008b04:	e794      	b.n	8008a30 <_malloc_r+0x20>
 8008b06:	6005      	str	r5, [r0, #0]
 8008b08:	e7d6      	b.n	8008ab8 <_malloc_r+0xa8>
 8008b0a:	bf00      	nop
 8008b0c:	20000cc8 	.word	0x20000cc8

08008b10 <__malloc_lock>:
 8008b10:	4801      	ldr	r0, [pc, #4]	@ (8008b18 <__malloc_lock+0x8>)
 8008b12:	f001 b85e 	b.w	8009bd2 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	20000e0c 	.word	0x20000e0c

08008b1c <__malloc_unlock>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	@ (8008b24 <__malloc_unlock+0x8>)
 8008b1e:	f001 b859 	b.w	8009bd4 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	20000e0c 	.word	0x20000e0c

08008b28 <realloc>:
 8008b28:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <realloc+0xc>)
 8008b2a:	460a      	mov	r2, r1
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	f000 b802 	b.w	8008b38 <_realloc_r>
 8008b34:	20000284 	.word	0x20000284

08008b38 <_realloc_r>:
 8008b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3c:	4607      	mov	r7, r0
 8008b3e:	4614      	mov	r4, r2
 8008b40:	460d      	mov	r5, r1
 8008b42:	b921      	cbnz	r1, 8008b4e <_realloc_r+0x16>
 8008b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	4611      	mov	r1, r2
 8008b4a:	f7ff bf61 	b.w	8008a10 <_malloc_r>
 8008b4e:	b92a      	cbnz	r2, 8008b5c <_realloc_r+0x24>
 8008b50:	f001 f862 	bl	8009c18 <_free_r>
 8008b54:	4625      	mov	r5, r4
 8008b56:	4628      	mov	r0, r5
 8008b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b5c:	f002 f89c 	bl	800ac98 <_malloc_usable_size_r>
 8008b60:	4284      	cmp	r4, r0
 8008b62:	4606      	mov	r6, r0
 8008b64:	d802      	bhi.n	8008b6c <_realloc_r+0x34>
 8008b66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b6a:	d8f4      	bhi.n	8008b56 <_realloc_r+0x1e>
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4638      	mov	r0, r7
 8008b70:	f7ff ff4e 	bl	8008a10 <_malloc_r>
 8008b74:	4680      	mov	r8, r0
 8008b76:	b908      	cbnz	r0, 8008b7c <_realloc_r+0x44>
 8008b78:	4645      	mov	r5, r8
 8008b7a:	e7ec      	b.n	8008b56 <_realloc_r+0x1e>
 8008b7c:	42b4      	cmp	r4, r6
 8008b7e:	4622      	mov	r2, r4
 8008b80:	4629      	mov	r1, r5
 8008b82:	bf28      	it	cs
 8008b84:	4632      	movcs	r2, r6
 8008b86:	f001 f82e 	bl	8009be6 <memcpy>
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f001 f843 	bl	8009c18 <_free_r>
 8008b92:	e7f1      	b.n	8008b78 <_realloc_r+0x40>

08008b94 <sulp>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	4604      	mov	r4, r0
 8008b98:	460d      	mov	r5, r1
 8008b9a:	ec45 4b10 	vmov	d0, r4, r5
 8008b9e:	4616      	mov	r6, r2
 8008ba0:	f001 ff3c 	bl	800aa1c <__ulp>
 8008ba4:	ec51 0b10 	vmov	r0, r1, d0
 8008ba8:	b17e      	cbz	r6, 8008bca <sulp+0x36>
 8008baa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dd09      	ble.n	8008bca <sulp+0x36>
 8008bb6:	051b      	lsls	r3, r3, #20
 8008bb8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bbc:	2400      	movs	r4, #0
 8008bbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	ec41 0b10 	vmov	d0, r0, r1
 8008bce:	bd70      	pop	{r4, r5, r6, pc}

08008bd0 <_strtod_l>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	b09f      	sub	sp, #124	@ 0x7c
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bda:	2200      	movs	r2, #0
 8008bdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bde:	9005      	str	r0, [sp, #20]
 8008be0:	f04f 0a00 	mov.w	sl, #0
 8008be4:	f04f 0b00 	mov.w	fp, #0
 8008be8:	460a      	mov	r2, r1
 8008bea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bec:	7811      	ldrb	r1, [r2, #0]
 8008bee:	292b      	cmp	r1, #43	@ 0x2b
 8008bf0:	d04a      	beq.n	8008c88 <_strtod_l+0xb8>
 8008bf2:	d838      	bhi.n	8008c66 <_strtod_l+0x96>
 8008bf4:	290d      	cmp	r1, #13
 8008bf6:	d832      	bhi.n	8008c5e <_strtod_l+0x8e>
 8008bf8:	2908      	cmp	r1, #8
 8008bfa:	d832      	bhi.n	8008c62 <_strtod_l+0x92>
 8008bfc:	2900      	cmp	r1, #0
 8008bfe:	d03b      	beq.n	8008c78 <_strtod_l+0xa8>
 8008c00:	2200      	movs	r2, #0
 8008c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c06:	782a      	ldrb	r2, [r5, #0]
 8008c08:	2a30      	cmp	r2, #48	@ 0x30
 8008c0a:	f040 80b2 	bne.w	8008d72 <_strtod_l+0x1a2>
 8008c0e:	786a      	ldrb	r2, [r5, #1]
 8008c10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c14:	2a58      	cmp	r2, #88	@ 0x58
 8008c16:	d16e      	bne.n	8008cf6 <_strtod_l+0x126>
 8008c18:	9302      	str	r3, [sp, #8]
 8008c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c1c:	9301      	str	r3, [sp, #4]
 8008c1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4a8f      	ldr	r2, [pc, #572]	@ (8008e60 <_strtod_l+0x290>)
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c28:	a919      	add	r1, sp, #100	@ 0x64
 8008c2a:	f001 f8a7 	bl	8009d7c <__gethex>
 8008c2e:	f010 060f 	ands.w	r6, r0, #15
 8008c32:	4604      	mov	r4, r0
 8008c34:	d005      	beq.n	8008c42 <_strtod_l+0x72>
 8008c36:	2e06      	cmp	r6, #6
 8008c38:	d128      	bne.n	8008c8c <_strtod_l+0xbc>
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c40:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 858e 	bne.w	8009766 <_strtod_l+0xb96>
 8008c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c4c:	b1cb      	cbz	r3, 8008c82 <_strtod_l+0xb2>
 8008c4e:	4652      	mov	r2, sl
 8008c50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c54:	ec43 2b10 	vmov	d0, r2, r3
 8008c58:	b01f      	add	sp, #124	@ 0x7c
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c5e:	2920      	cmp	r1, #32
 8008c60:	d1ce      	bne.n	8008c00 <_strtod_l+0x30>
 8008c62:	3201      	adds	r2, #1
 8008c64:	e7c1      	b.n	8008bea <_strtod_l+0x1a>
 8008c66:	292d      	cmp	r1, #45	@ 0x2d
 8008c68:	d1ca      	bne.n	8008c00 <_strtod_l+0x30>
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008c6e:	1c51      	adds	r1, r2, #1
 8008c70:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c72:	7852      	ldrb	r2, [r2, #1]
 8008c74:	2a00      	cmp	r2, #0
 8008c76:	d1c5      	bne.n	8008c04 <_strtod_l+0x34>
 8008c78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f040 8570 	bne.w	8009762 <_strtod_l+0xb92>
 8008c82:	4652      	mov	r2, sl
 8008c84:	465b      	mov	r3, fp
 8008c86:	e7e5      	b.n	8008c54 <_strtod_l+0x84>
 8008c88:	2100      	movs	r1, #0
 8008c8a:	e7ef      	b.n	8008c6c <_strtod_l+0x9c>
 8008c8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c8e:	b13a      	cbz	r2, 8008ca0 <_strtod_l+0xd0>
 8008c90:	2135      	movs	r1, #53	@ 0x35
 8008c92:	a81c      	add	r0, sp, #112	@ 0x70
 8008c94:	f001 ffbc 	bl	800ac10 <__copybits>
 8008c98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c9a:	9805      	ldr	r0, [sp, #20]
 8008c9c:	f001 fb92 	bl	800a3c4 <_Bfree>
 8008ca0:	3e01      	subs	r6, #1
 8008ca2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ca4:	2e04      	cmp	r6, #4
 8008ca6:	d806      	bhi.n	8008cb6 <_strtod_l+0xe6>
 8008ca8:	e8df f006 	tbb	[pc, r6]
 8008cac:	201d0314 	.word	0x201d0314
 8008cb0:	14          	.byte	0x14
 8008cb1:	00          	.byte	0x00
 8008cb2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cb6:	05e1      	lsls	r1, r4, #23
 8008cb8:	bf48      	it	mi
 8008cba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008cc2:	0d1b      	lsrs	r3, r3, #20
 8008cc4:	051b      	lsls	r3, r3, #20
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1bb      	bne.n	8008c42 <_strtod_l+0x72>
 8008cca:	f000 ff57 	bl	8009b7c <__errno>
 8008cce:	2322      	movs	r3, #34	@ 0x22
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	e7b6      	b.n	8008c42 <_strtod_l+0x72>
 8008cd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cdc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008ce0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ce4:	e7e7      	b.n	8008cb6 <_strtod_l+0xe6>
 8008ce6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008e68 <_strtod_l+0x298>
 8008cea:	e7e4      	b.n	8008cb6 <_strtod_l+0xe6>
 8008cec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008cf0:	f04f 3aff 	mov.w	sl, #4294967295
 8008cf4:	e7df      	b.n	8008cb6 <_strtod_l+0xe6>
 8008cf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b30      	cmp	r3, #48	@ 0x30
 8008d00:	d0f9      	beq.n	8008cf6 <_strtod_l+0x126>
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d09d      	beq.n	8008c42 <_strtod_l+0x72>
 8008d06:	2301      	movs	r3, #1
 8008d08:	2700      	movs	r7, #0
 8008d0a:	9308      	str	r3, [sp, #32]
 8008d0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008d12:	46b9      	mov	r9, r7
 8008d14:	220a      	movs	r2, #10
 8008d16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d18:	7805      	ldrb	r5, [r0, #0]
 8008d1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d1e:	b2d9      	uxtb	r1, r3
 8008d20:	2909      	cmp	r1, #9
 8008d22:	d928      	bls.n	8008d76 <_strtod_l+0x1a6>
 8008d24:	494f      	ldr	r1, [pc, #316]	@ (8008e64 <_strtod_l+0x294>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	f000 fead 	bl	8009a86 <strncmp>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d032      	beq.n	8008d96 <_strtod_l+0x1c6>
 8008d30:	2000      	movs	r0, #0
 8008d32:	462a      	mov	r2, r5
 8008d34:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d36:	464d      	mov	r5, r9
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2a65      	cmp	r2, #101	@ 0x65
 8008d3c:	d001      	beq.n	8008d42 <_strtod_l+0x172>
 8008d3e:	2a45      	cmp	r2, #69	@ 0x45
 8008d40:	d114      	bne.n	8008d6c <_strtod_l+0x19c>
 8008d42:	b91d      	cbnz	r5, 8008d4c <_strtod_l+0x17c>
 8008d44:	9a08      	ldr	r2, [sp, #32]
 8008d46:	4302      	orrs	r2, r0
 8008d48:	d096      	beq.n	8008c78 <_strtod_l+0xa8>
 8008d4a:	2500      	movs	r5, #0
 8008d4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d4e:	1c62      	adds	r2, r4, #1
 8008d50:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d52:	7862      	ldrb	r2, [r4, #1]
 8008d54:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d56:	d07a      	beq.n	8008e4e <_strtod_l+0x27e>
 8008d58:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d5a:	d07e      	beq.n	8008e5a <_strtod_l+0x28a>
 8008d5c:	f04f 0c00 	mov.w	ip, #0
 8008d60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d64:	2909      	cmp	r1, #9
 8008d66:	f240 8085 	bls.w	8008e74 <_strtod_l+0x2a4>
 8008d6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d6c:	f04f 0800 	mov.w	r8, #0
 8008d70:	e0a5      	b.n	8008ebe <_strtod_l+0x2ee>
 8008d72:	2300      	movs	r3, #0
 8008d74:	e7c8      	b.n	8008d08 <_strtod_l+0x138>
 8008d76:	f1b9 0f08 	cmp.w	r9, #8
 8008d7a:	bfd8      	it	le
 8008d7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008d7e:	f100 0001 	add.w	r0, r0, #1
 8008d82:	bfda      	itte	le
 8008d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008d8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008d8e:	f109 0901 	add.w	r9, r9, #1
 8008d92:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d94:	e7bf      	b.n	8008d16 <_strtod_l+0x146>
 8008d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d9c:	785a      	ldrb	r2, [r3, #1]
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	d03b      	beq.n	8008e1c <_strtod_l+0x24c>
 8008da4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008da6:	464d      	mov	r5, r9
 8008da8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d912      	bls.n	8008dd6 <_strtod_l+0x206>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e7c2      	b.n	8008d3a <_strtod_l+0x16a>
 8008db4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dba:	785a      	ldrb	r2, [r3, #1]
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	2a30      	cmp	r2, #48	@ 0x30
 8008dc0:	d0f8      	beq.n	8008db4 <_strtod_l+0x1e4>
 8008dc2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	f200 84d2 	bhi.w	8009770 <_strtod_l+0xba0>
 8008dcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dce:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	3a30      	subs	r2, #48	@ 0x30
 8008dd8:	f100 0301 	add.w	r3, r0, #1
 8008ddc:	d018      	beq.n	8008e10 <_strtod_l+0x240>
 8008dde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008de0:	4419      	add	r1, r3
 8008de2:	910a      	str	r1, [sp, #40]	@ 0x28
 8008de4:	462e      	mov	r6, r5
 8008de6:	f04f 0e0a 	mov.w	lr, #10
 8008dea:	1c71      	adds	r1, r6, #1
 8008dec:	eba1 0c05 	sub.w	ip, r1, r5
 8008df0:	4563      	cmp	r3, ip
 8008df2:	dc15      	bgt.n	8008e20 <_strtod_l+0x250>
 8008df4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008df8:	182b      	adds	r3, r5, r0
 8008dfa:	2b08      	cmp	r3, #8
 8008dfc:	f105 0501 	add.w	r5, r5, #1
 8008e00:	4405      	add	r5, r0
 8008e02:	dc1a      	bgt.n	8008e3a <_strtod_l+0x26a>
 8008e04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e06:	230a      	movs	r3, #10
 8008e08:	fb03 2301 	mla	r3, r3, r1, r2
 8008e0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e12:	1c51      	adds	r1, r2, #1
 8008e14:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e16:	7852      	ldrb	r2, [r2, #1]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	e7c5      	b.n	8008da8 <_strtod_l+0x1d8>
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	e7ce      	b.n	8008dbe <_strtod_l+0x1ee>
 8008e20:	2e08      	cmp	r6, #8
 8008e22:	dc05      	bgt.n	8008e30 <_strtod_l+0x260>
 8008e24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e26:	fb0e f606 	mul.w	r6, lr, r6
 8008e2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008e2c:	460e      	mov	r6, r1
 8008e2e:	e7dc      	b.n	8008dea <_strtod_l+0x21a>
 8008e30:	2910      	cmp	r1, #16
 8008e32:	bfd8      	it	le
 8008e34:	fb0e f707 	mulle.w	r7, lr, r7
 8008e38:	e7f8      	b.n	8008e2c <_strtod_l+0x25c>
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	bfdc      	itt	le
 8008e3e:	230a      	movle	r3, #10
 8008e40:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e44:	e7e3      	b.n	8008e0e <_strtod_l+0x23e>
 8008e46:	2300      	movs	r3, #0
 8008e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e77a      	b.n	8008d44 <_strtod_l+0x174>
 8008e4e:	f04f 0c00 	mov.w	ip, #0
 8008e52:	1ca2      	adds	r2, r4, #2
 8008e54:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e56:	78a2      	ldrb	r2, [r4, #2]
 8008e58:	e782      	b.n	8008d60 <_strtod_l+0x190>
 8008e5a:	f04f 0c01 	mov.w	ip, #1
 8008e5e:	e7f8      	b.n	8008e52 <_strtod_l+0x282>
 8008e60:	080339d0 	.word	0x080339d0
 8008e64:	08033854 	.word	0x08033854
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e6e:	1c51      	adds	r1, r2, #1
 8008e70:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e72:	7852      	ldrb	r2, [r2, #1]
 8008e74:	2a30      	cmp	r2, #48	@ 0x30
 8008e76:	d0f9      	beq.n	8008e6c <_strtod_l+0x29c>
 8008e78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e7c:	2908      	cmp	r1, #8
 8008e7e:	f63f af75 	bhi.w	8008d6c <_strtod_l+0x19c>
 8008e82:	3a30      	subs	r2, #48	@ 0x30
 8008e84:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008e8a:	f04f 080a 	mov.w	r8, #10
 8008e8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e90:	1c56      	adds	r6, r2, #1
 8008e92:	9619      	str	r6, [sp, #100]	@ 0x64
 8008e94:	7852      	ldrb	r2, [r2, #1]
 8008e96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008e9a:	f1be 0f09 	cmp.w	lr, #9
 8008e9e:	d939      	bls.n	8008f14 <_strtod_l+0x344>
 8008ea0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ea2:	1a76      	subs	r6, r6, r1
 8008ea4:	2e08      	cmp	r6, #8
 8008ea6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008eaa:	dc03      	bgt.n	8008eb4 <_strtod_l+0x2e4>
 8008eac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008eae:	4588      	cmp	r8, r1
 8008eb0:	bfa8      	it	ge
 8008eb2:	4688      	movge	r8, r1
 8008eb4:	f1bc 0f00 	cmp.w	ip, #0
 8008eb8:	d001      	beq.n	8008ebe <_strtod_l+0x2ee>
 8008eba:	f1c8 0800 	rsb	r8, r8, #0
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	d14e      	bne.n	8008f60 <_strtod_l+0x390>
 8008ec2:	9908      	ldr	r1, [sp, #32]
 8008ec4:	4308      	orrs	r0, r1
 8008ec6:	f47f aebc 	bne.w	8008c42 <_strtod_l+0x72>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f47f aed4 	bne.w	8008c78 <_strtod_l+0xa8>
 8008ed0:	2a69      	cmp	r2, #105	@ 0x69
 8008ed2:	d028      	beq.n	8008f26 <_strtod_l+0x356>
 8008ed4:	dc25      	bgt.n	8008f22 <_strtod_l+0x352>
 8008ed6:	2a49      	cmp	r2, #73	@ 0x49
 8008ed8:	d025      	beq.n	8008f26 <_strtod_l+0x356>
 8008eda:	2a4e      	cmp	r2, #78	@ 0x4e
 8008edc:	f47f aecc 	bne.w	8008c78 <_strtod_l+0xa8>
 8008ee0:	499a      	ldr	r1, [pc, #616]	@ (800914c <_strtod_l+0x57c>)
 8008ee2:	a819      	add	r0, sp, #100	@ 0x64
 8008ee4:	f001 f96c 	bl	800a1c0 <__match>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f43f aec5 	beq.w	8008c78 <_strtod_l+0xa8>
 8008eee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	2b28      	cmp	r3, #40	@ 0x28
 8008ef4:	d12e      	bne.n	8008f54 <_strtod_l+0x384>
 8008ef6:	4996      	ldr	r1, [pc, #600]	@ (8009150 <_strtod_l+0x580>)
 8008ef8:	aa1c      	add	r2, sp, #112	@ 0x70
 8008efa:	a819      	add	r0, sp, #100	@ 0x64
 8008efc:	f001 f974 	bl	800a1e8 <__hexnan>
 8008f00:	2805      	cmp	r0, #5
 8008f02:	d127      	bne.n	8008f54 <_strtod_l+0x384>
 8008f04:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f06:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f0a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f0e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f12:	e696      	b.n	8008c42 <_strtod_l+0x72>
 8008f14:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f16:	fb08 2101 	mla	r1, r8, r1, r2
 8008f1a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f20:	e7b5      	b.n	8008e8e <_strtod_l+0x2be>
 8008f22:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f24:	e7da      	b.n	8008edc <_strtod_l+0x30c>
 8008f26:	498b      	ldr	r1, [pc, #556]	@ (8009154 <_strtod_l+0x584>)
 8008f28:	a819      	add	r0, sp, #100	@ 0x64
 8008f2a:	f001 f949 	bl	800a1c0 <__match>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aea2 	beq.w	8008c78 <_strtod_l+0xa8>
 8008f34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f36:	4988      	ldr	r1, [pc, #544]	@ (8009158 <_strtod_l+0x588>)
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	a819      	add	r0, sp, #100	@ 0x64
 8008f3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f3e:	f001 f93f 	bl	800a1c0 <__match>
 8008f42:	b910      	cbnz	r0, 8008f4a <_strtod_l+0x37a>
 8008f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f46:	3301      	adds	r3, #1
 8008f48:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f4a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009168 <_strtod_l+0x598>
 8008f4e:	f04f 0a00 	mov.w	sl, #0
 8008f52:	e676      	b.n	8008c42 <_strtod_l+0x72>
 8008f54:	4881      	ldr	r0, [pc, #516]	@ (800915c <_strtod_l+0x58c>)
 8008f56:	f000 fe57 	bl	8009c08 <nan>
 8008f5a:	ec5b ab10 	vmov	sl, fp, d0
 8008f5e:	e670      	b.n	8008c42 <_strtod_l+0x72>
 8008f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f62:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008f64:	eba8 0303 	sub.w	r3, r8, r3
 8008f68:	f1b9 0f00 	cmp.w	r9, #0
 8008f6c:	bf08      	it	eq
 8008f6e:	46a9      	moveq	r9, r5
 8008f70:	2d10      	cmp	r5, #16
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	462c      	mov	r4, r5
 8008f76:	bfa8      	it	ge
 8008f78:	2410      	movge	r4, #16
 8008f7a:	f7f7 fad3 	bl	8000524 <__aeabi_ui2d>
 8008f7e:	2d09      	cmp	r5, #9
 8008f80:	4682      	mov	sl, r0
 8008f82:	468b      	mov	fp, r1
 8008f84:	dc13      	bgt.n	8008fae <_strtod_l+0x3de>
 8008f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f43f ae5a 	beq.w	8008c42 <_strtod_l+0x72>
 8008f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f90:	dd78      	ble.n	8009084 <_strtod_l+0x4b4>
 8008f92:	2b16      	cmp	r3, #22
 8008f94:	dc5f      	bgt.n	8009056 <_strtod_l+0x486>
 8008f96:	4972      	ldr	r1, [pc, #456]	@ (8009160 <_strtod_l+0x590>)
 8008f98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	465b      	mov	r3, fp
 8008fa4:	f7f7 fb38 	bl	8000618 <__aeabi_dmul>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	468b      	mov	fp, r1
 8008fac:	e649      	b.n	8008c42 <_strtod_l+0x72>
 8008fae:	4b6c      	ldr	r3, [pc, #432]	@ (8009160 <_strtod_l+0x590>)
 8008fb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fb8:	f7f7 fb2e 	bl	8000618 <__aeabi_dmul>
 8008fbc:	4682      	mov	sl, r0
 8008fbe:	4638      	mov	r0, r7
 8008fc0:	468b      	mov	fp, r1
 8008fc2:	f7f7 faaf 	bl	8000524 <__aeabi_ui2d>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4650      	mov	r0, sl
 8008fcc:	4659      	mov	r1, fp
 8008fce:	f7f7 f96d 	bl	80002ac <__adddf3>
 8008fd2:	2d0f      	cmp	r5, #15
 8008fd4:	4682      	mov	sl, r0
 8008fd6:	468b      	mov	fp, r1
 8008fd8:	ddd5      	ble.n	8008f86 <_strtod_l+0x3b6>
 8008fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fdc:	1b2c      	subs	r4, r5, r4
 8008fde:	441c      	add	r4, r3
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	f340 8093 	ble.w	800910c <_strtod_l+0x53c>
 8008fe6:	f014 030f 	ands.w	r3, r4, #15
 8008fea:	d00a      	beq.n	8009002 <_strtod_l+0x432>
 8008fec:	495c      	ldr	r1, [pc, #368]	@ (8009160 <_strtod_l+0x590>)
 8008fee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ffa:	f7f7 fb0d 	bl	8000618 <__aeabi_dmul>
 8008ffe:	4682      	mov	sl, r0
 8009000:	468b      	mov	fp, r1
 8009002:	f034 040f 	bics.w	r4, r4, #15
 8009006:	d073      	beq.n	80090f0 <_strtod_l+0x520>
 8009008:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800900c:	dd49      	ble.n	80090a2 <_strtod_l+0x4d2>
 800900e:	2400      	movs	r4, #0
 8009010:	46a0      	mov	r8, r4
 8009012:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009014:	46a1      	mov	r9, r4
 8009016:	9a05      	ldr	r2, [sp, #20]
 8009018:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009168 <_strtod_l+0x598>
 800901c:	2322      	movs	r3, #34	@ 0x22
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	f04f 0a00 	mov.w	sl, #0
 8009024:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009026:	2b00      	cmp	r3, #0
 8009028:	f43f ae0b 	beq.w	8008c42 <_strtod_l+0x72>
 800902c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800902e:	9805      	ldr	r0, [sp, #20]
 8009030:	f001 f9c8 	bl	800a3c4 <_Bfree>
 8009034:	9805      	ldr	r0, [sp, #20]
 8009036:	4649      	mov	r1, r9
 8009038:	f001 f9c4 	bl	800a3c4 <_Bfree>
 800903c:	9805      	ldr	r0, [sp, #20]
 800903e:	4641      	mov	r1, r8
 8009040:	f001 f9c0 	bl	800a3c4 <_Bfree>
 8009044:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009046:	9805      	ldr	r0, [sp, #20]
 8009048:	f001 f9bc 	bl	800a3c4 <_Bfree>
 800904c:	9805      	ldr	r0, [sp, #20]
 800904e:	4621      	mov	r1, r4
 8009050:	f001 f9b8 	bl	800a3c4 <_Bfree>
 8009054:	e5f5      	b.n	8008c42 <_strtod_l+0x72>
 8009056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009058:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800905c:	4293      	cmp	r3, r2
 800905e:	dbbc      	blt.n	8008fda <_strtod_l+0x40a>
 8009060:	4c3f      	ldr	r4, [pc, #252]	@ (8009160 <_strtod_l+0x590>)
 8009062:	f1c5 050f 	rsb	r5, r5, #15
 8009066:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800906a:	4652      	mov	r2, sl
 800906c:	465b      	mov	r3, fp
 800906e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009072:	f7f7 fad1 	bl	8000618 <__aeabi_dmul>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	1b5d      	subs	r5, r3, r5
 800907a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800907e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009082:	e78f      	b.n	8008fa4 <_strtod_l+0x3d4>
 8009084:	3316      	adds	r3, #22
 8009086:	dba8      	blt.n	8008fda <_strtod_l+0x40a>
 8009088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800908a:	eba3 0808 	sub.w	r8, r3, r8
 800908e:	4b34      	ldr	r3, [pc, #208]	@ (8009160 <_strtod_l+0x590>)
 8009090:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009094:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009098:	4650      	mov	r0, sl
 800909a:	4659      	mov	r1, fp
 800909c:	f7f7 fbe6 	bl	800086c <__aeabi_ddiv>
 80090a0:	e782      	b.n	8008fa8 <_strtod_l+0x3d8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	4f2f      	ldr	r7, [pc, #188]	@ (8009164 <_strtod_l+0x594>)
 80090a6:	1124      	asrs	r4, r4, #4
 80090a8:	4650      	mov	r0, sl
 80090aa:	4659      	mov	r1, fp
 80090ac:	461e      	mov	r6, r3
 80090ae:	2c01      	cmp	r4, #1
 80090b0:	dc21      	bgt.n	80090f6 <_strtod_l+0x526>
 80090b2:	b10b      	cbz	r3, 80090b8 <_strtod_l+0x4e8>
 80090b4:	4682      	mov	sl, r0
 80090b6:	468b      	mov	fp, r1
 80090b8:	492a      	ldr	r1, [pc, #168]	@ (8009164 <_strtod_l+0x594>)
 80090ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090c2:	4652      	mov	r2, sl
 80090c4:	465b      	mov	r3, fp
 80090c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ca:	f7f7 faa5 	bl	8000618 <__aeabi_dmul>
 80090ce:	4b26      	ldr	r3, [pc, #152]	@ (8009168 <_strtod_l+0x598>)
 80090d0:	460a      	mov	r2, r1
 80090d2:	400b      	ands	r3, r1
 80090d4:	4925      	ldr	r1, [pc, #148]	@ (800916c <_strtod_l+0x59c>)
 80090d6:	428b      	cmp	r3, r1
 80090d8:	4682      	mov	sl, r0
 80090da:	d898      	bhi.n	800900e <_strtod_l+0x43e>
 80090dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf86      	itte	hi
 80090e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009170 <_strtod_l+0x5a0>
 80090e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80090ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80090f0:	2300      	movs	r3, #0
 80090f2:	9308      	str	r3, [sp, #32]
 80090f4:	e076      	b.n	80091e4 <_strtod_l+0x614>
 80090f6:	07e2      	lsls	r2, r4, #31
 80090f8:	d504      	bpl.n	8009104 <_strtod_l+0x534>
 80090fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090fe:	f7f7 fa8b 	bl	8000618 <__aeabi_dmul>
 8009102:	2301      	movs	r3, #1
 8009104:	3601      	adds	r6, #1
 8009106:	1064      	asrs	r4, r4, #1
 8009108:	3708      	adds	r7, #8
 800910a:	e7d0      	b.n	80090ae <_strtod_l+0x4de>
 800910c:	d0f0      	beq.n	80090f0 <_strtod_l+0x520>
 800910e:	4264      	negs	r4, r4
 8009110:	f014 020f 	ands.w	r2, r4, #15
 8009114:	d00a      	beq.n	800912c <_strtod_l+0x55c>
 8009116:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <_strtod_l+0x590>)
 8009118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f7f7 fba2 	bl	800086c <__aeabi_ddiv>
 8009128:	4682      	mov	sl, r0
 800912a:	468b      	mov	fp, r1
 800912c:	1124      	asrs	r4, r4, #4
 800912e:	d0df      	beq.n	80090f0 <_strtod_l+0x520>
 8009130:	2c1f      	cmp	r4, #31
 8009132:	dd1f      	ble.n	8009174 <_strtod_l+0x5a4>
 8009134:	2400      	movs	r4, #0
 8009136:	46a0      	mov	r8, r4
 8009138:	940b      	str	r4, [sp, #44]	@ 0x2c
 800913a:	46a1      	mov	r9, r4
 800913c:	9a05      	ldr	r2, [sp, #20]
 800913e:	2322      	movs	r3, #34	@ 0x22
 8009140:	f04f 0a00 	mov.w	sl, #0
 8009144:	f04f 0b00 	mov.w	fp, #0
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	e76b      	b.n	8009024 <_strtod_l+0x454>
 800914c:	0803385f 	.word	0x0803385f
 8009150:	080339bc 	.word	0x080339bc
 8009154:	08033856 	.word	0x08033856
 8009158:	08033859 	.word	0x08033859
 800915c:	080339b9 	.word	0x080339b9
 8009160:	08033b48 	.word	0x08033b48
 8009164:	08033b20 	.word	0x08033b20
 8009168:	7ff00000 	.word	0x7ff00000
 800916c:	7ca00000 	.word	0x7ca00000
 8009170:	7fefffff 	.word	0x7fefffff
 8009174:	f014 0310 	ands.w	r3, r4, #16
 8009178:	bf18      	it	ne
 800917a:	236a      	movne	r3, #106	@ 0x6a
 800917c:	4ea9      	ldr	r6, [pc, #676]	@ (8009424 <_strtod_l+0x854>)
 800917e:	9308      	str	r3, [sp, #32]
 8009180:	4650      	mov	r0, sl
 8009182:	4659      	mov	r1, fp
 8009184:	2300      	movs	r3, #0
 8009186:	07e7      	lsls	r7, r4, #31
 8009188:	d504      	bpl.n	8009194 <_strtod_l+0x5c4>
 800918a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800918e:	f7f7 fa43 	bl	8000618 <__aeabi_dmul>
 8009192:	2301      	movs	r3, #1
 8009194:	1064      	asrs	r4, r4, #1
 8009196:	f106 0608 	add.w	r6, r6, #8
 800919a:	d1f4      	bne.n	8009186 <_strtod_l+0x5b6>
 800919c:	b10b      	cbz	r3, 80091a2 <_strtod_l+0x5d2>
 800919e:	4682      	mov	sl, r0
 80091a0:	468b      	mov	fp, r1
 80091a2:	9b08      	ldr	r3, [sp, #32]
 80091a4:	b1b3      	cbz	r3, 80091d4 <_strtod_l+0x604>
 80091a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	4659      	mov	r1, fp
 80091b2:	dd0f      	ble.n	80091d4 <_strtod_l+0x604>
 80091b4:	2b1f      	cmp	r3, #31
 80091b6:	dd56      	ble.n	8009266 <_strtod_l+0x696>
 80091b8:	2b34      	cmp	r3, #52	@ 0x34
 80091ba:	bfde      	ittt	le
 80091bc:	f04f 33ff 	movle.w	r3, #4294967295
 80091c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091c4:	4093      	lslle	r3, r2
 80091c6:	f04f 0a00 	mov.w	sl, #0
 80091ca:	bfcc      	ite	gt
 80091cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091d0:	ea03 0b01 	andle.w	fp, r3, r1
 80091d4:	2200      	movs	r2, #0
 80091d6:	2300      	movs	r3, #0
 80091d8:	4650      	mov	r0, sl
 80091da:	4659      	mov	r1, fp
 80091dc:	f7f7 fc84 	bl	8000ae8 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1a7      	bne.n	8009134 <_strtod_l+0x564>
 80091e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80091ea:	9805      	ldr	r0, [sp, #20]
 80091ec:	462b      	mov	r3, r5
 80091ee:	464a      	mov	r2, r9
 80091f0:	f001 f950 	bl	800a494 <__s2b>
 80091f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091f6:	2800      	cmp	r0, #0
 80091f8:	f43f af09 	beq.w	800900e <_strtod_l+0x43e>
 80091fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009200:	2a00      	cmp	r2, #0
 8009202:	eba3 0308 	sub.w	r3, r3, r8
 8009206:	bfa8      	it	ge
 8009208:	2300      	movge	r3, #0
 800920a:	9312      	str	r3, [sp, #72]	@ 0x48
 800920c:	2400      	movs	r4, #0
 800920e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009212:	9316      	str	r3, [sp, #88]	@ 0x58
 8009214:	46a0      	mov	r8, r4
 8009216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009218:	9805      	ldr	r0, [sp, #20]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	f001 f892 	bl	800a344 <_Balloc>
 8009220:	4681      	mov	r9, r0
 8009222:	2800      	cmp	r0, #0
 8009224:	f43f aef7 	beq.w	8009016 <_strtod_l+0x446>
 8009228:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	3202      	adds	r2, #2
 800922e:	f103 010c 	add.w	r1, r3, #12
 8009232:	0092      	lsls	r2, r2, #2
 8009234:	300c      	adds	r0, #12
 8009236:	f000 fcd6 	bl	8009be6 <memcpy>
 800923a:	ec4b ab10 	vmov	d0, sl, fp
 800923e:	9805      	ldr	r0, [sp, #20]
 8009240:	aa1c      	add	r2, sp, #112	@ 0x70
 8009242:	a91b      	add	r1, sp, #108	@ 0x6c
 8009244:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009248:	f001 fc58 	bl	800aafc <__d2b>
 800924c:	901a      	str	r0, [sp, #104]	@ 0x68
 800924e:	2800      	cmp	r0, #0
 8009250:	f43f aee1 	beq.w	8009016 <_strtod_l+0x446>
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	2101      	movs	r1, #1
 8009258:	f001 f9b2 	bl	800a5c0 <__i2b>
 800925c:	4680      	mov	r8, r0
 800925e:	b948      	cbnz	r0, 8009274 <_strtod_l+0x6a4>
 8009260:	f04f 0800 	mov.w	r8, #0
 8009264:	e6d7      	b.n	8009016 <_strtod_l+0x446>
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	fa02 f303 	lsl.w	r3, r2, r3
 800926e:	ea03 0a0a 	and.w	sl, r3, sl
 8009272:	e7af      	b.n	80091d4 <_strtod_l+0x604>
 8009274:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009276:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009278:	2d00      	cmp	r5, #0
 800927a:	bfab      	itete	ge
 800927c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800927e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009280:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009282:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009284:	bfac      	ite	ge
 8009286:	18ef      	addge	r7, r5, r3
 8009288:	1b5e      	sublt	r6, r3, r5
 800928a:	9b08      	ldr	r3, [sp, #32]
 800928c:	1aed      	subs	r5, r5, r3
 800928e:	4415      	add	r5, r2
 8009290:	4b65      	ldr	r3, [pc, #404]	@ (8009428 <_strtod_l+0x858>)
 8009292:	3d01      	subs	r5, #1
 8009294:	429d      	cmp	r5, r3
 8009296:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800929a:	da50      	bge.n	800933e <_strtod_l+0x76e>
 800929c:	1b5b      	subs	r3, r3, r5
 800929e:	2b1f      	cmp	r3, #31
 80092a0:	eba2 0203 	sub.w	r2, r2, r3
 80092a4:	f04f 0101 	mov.w	r1, #1
 80092a8:	dc3d      	bgt.n	8009326 <_strtod_l+0x756>
 80092aa:	fa01 f303 	lsl.w	r3, r1, r3
 80092ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092b0:	2300      	movs	r3, #0
 80092b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80092b4:	18bd      	adds	r5, r7, r2
 80092b6:	9b08      	ldr	r3, [sp, #32]
 80092b8:	42af      	cmp	r7, r5
 80092ba:	4416      	add	r6, r2
 80092bc:	441e      	add	r6, r3
 80092be:	463b      	mov	r3, r7
 80092c0:	bfa8      	it	ge
 80092c2:	462b      	movge	r3, r5
 80092c4:	42b3      	cmp	r3, r6
 80092c6:	bfa8      	it	ge
 80092c8:	4633      	movge	r3, r6
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfc2      	ittt	gt
 80092ce:	1aed      	subgt	r5, r5, r3
 80092d0:	1af6      	subgt	r6, r6, r3
 80092d2:	1aff      	subgt	r7, r7, r3
 80092d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	dd16      	ble.n	8009308 <_strtod_l+0x738>
 80092da:	4641      	mov	r1, r8
 80092dc:	9805      	ldr	r0, [sp, #20]
 80092de:	461a      	mov	r2, r3
 80092e0:	f001 fa26 	bl	800a730 <__pow5mult>
 80092e4:	4680      	mov	r8, r0
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d0ba      	beq.n	8009260 <_strtod_l+0x690>
 80092ea:	4601      	mov	r1, r0
 80092ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092ee:	9805      	ldr	r0, [sp, #20]
 80092f0:	f001 f97c 	bl	800a5ec <__multiply>
 80092f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f ae8d 	beq.w	8009016 <_strtod_l+0x446>
 80092fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	f001 f860 	bl	800a3c4 <_Bfree>
 8009304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009306:	931a      	str	r3, [sp, #104]	@ 0x68
 8009308:	2d00      	cmp	r5, #0
 800930a:	dc1d      	bgt.n	8009348 <_strtod_l+0x778>
 800930c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	dd23      	ble.n	800935a <_strtod_l+0x78a>
 8009312:	4649      	mov	r1, r9
 8009314:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	f001 fa0a 	bl	800a730 <__pow5mult>
 800931c:	4681      	mov	r9, r0
 800931e:	b9e0      	cbnz	r0, 800935a <_strtod_l+0x78a>
 8009320:	f04f 0900 	mov.w	r9, #0
 8009324:	e677      	b.n	8009016 <_strtod_l+0x446>
 8009326:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800932a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800932e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009332:	35e2      	adds	r5, #226	@ 0xe2
 8009334:	fa01 f305 	lsl.w	r3, r1, r5
 8009338:	9310      	str	r3, [sp, #64]	@ 0x40
 800933a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800933c:	e7ba      	b.n	80092b4 <_strtod_l+0x6e4>
 800933e:	2300      	movs	r3, #0
 8009340:	9310      	str	r3, [sp, #64]	@ 0x40
 8009342:	2301      	movs	r3, #1
 8009344:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009346:	e7b5      	b.n	80092b4 <_strtod_l+0x6e4>
 8009348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800934a:	9805      	ldr	r0, [sp, #20]
 800934c:	462a      	mov	r2, r5
 800934e:	f001 fa49 	bl	800a7e4 <__lshift>
 8009352:	901a      	str	r0, [sp, #104]	@ 0x68
 8009354:	2800      	cmp	r0, #0
 8009356:	d1d9      	bne.n	800930c <_strtod_l+0x73c>
 8009358:	e65d      	b.n	8009016 <_strtod_l+0x446>
 800935a:	2e00      	cmp	r6, #0
 800935c:	dd07      	ble.n	800936e <_strtod_l+0x79e>
 800935e:	4649      	mov	r1, r9
 8009360:	9805      	ldr	r0, [sp, #20]
 8009362:	4632      	mov	r2, r6
 8009364:	f001 fa3e 	bl	800a7e4 <__lshift>
 8009368:	4681      	mov	r9, r0
 800936a:	2800      	cmp	r0, #0
 800936c:	d0d8      	beq.n	8009320 <_strtod_l+0x750>
 800936e:	2f00      	cmp	r7, #0
 8009370:	dd08      	ble.n	8009384 <_strtod_l+0x7b4>
 8009372:	4641      	mov	r1, r8
 8009374:	9805      	ldr	r0, [sp, #20]
 8009376:	463a      	mov	r2, r7
 8009378:	f001 fa34 	bl	800a7e4 <__lshift>
 800937c:	4680      	mov	r8, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f ae49 	beq.w	8009016 <_strtod_l+0x446>
 8009384:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009386:	9805      	ldr	r0, [sp, #20]
 8009388:	464a      	mov	r2, r9
 800938a:	f001 fab3 	bl	800a8f4 <__mdiff>
 800938e:	4604      	mov	r4, r0
 8009390:	2800      	cmp	r0, #0
 8009392:	f43f ae40 	beq.w	8009016 <_strtod_l+0x446>
 8009396:	68c3      	ldr	r3, [r0, #12]
 8009398:	930f      	str	r3, [sp, #60]	@ 0x3c
 800939a:	2300      	movs	r3, #0
 800939c:	60c3      	str	r3, [r0, #12]
 800939e:	4641      	mov	r1, r8
 80093a0:	f001 fa8c 	bl	800a8bc <__mcmp>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	da45      	bge.n	8009434 <_strtod_l+0x864>
 80093a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093aa:	ea53 030a 	orrs.w	r3, r3, sl
 80093ae:	d16b      	bne.n	8009488 <_strtod_l+0x8b8>
 80093b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d167      	bne.n	8009488 <_strtod_l+0x8b8>
 80093b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093bc:	0d1b      	lsrs	r3, r3, #20
 80093be:	051b      	lsls	r3, r3, #20
 80093c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093c4:	d960      	bls.n	8009488 <_strtod_l+0x8b8>
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	b913      	cbnz	r3, 80093d0 <_strtod_l+0x800>
 80093ca:	6923      	ldr	r3, [r4, #16]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	dd5b      	ble.n	8009488 <_strtod_l+0x8b8>
 80093d0:	4621      	mov	r1, r4
 80093d2:	2201      	movs	r2, #1
 80093d4:	9805      	ldr	r0, [sp, #20]
 80093d6:	f001 fa05 	bl	800a7e4 <__lshift>
 80093da:	4641      	mov	r1, r8
 80093dc:	4604      	mov	r4, r0
 80093de:	f001 fa6d 	bl	800a8bc <__mcmp>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	dd50      	ble.n	8009488 <_strtod_l+0x8b8>
 80093e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093ea:	9a08      	ldr	r2, [sp, #32]
 80093ec:	0d1b      	lsrs	r3, r3, #20
 80093ee:	051b      	lsls	r3, r3, #20
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	d06a      	beq.n	80094ca <_strtod_l+0x8fa>
 80093f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093f8:	d867      	bhi.n	80094ca <_strtod_l+0x8fa>
 80093fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80093fe:	f67f ae9d 	bls.w	800913c <_strtod_l+0x56c>
 8009402:	4b0a      	ldr	r3, [pc, #40]	@ (800942c <_strtod_l+0x85c>)
 8009404:	4650      	mov	r0, sl
 8009406:	4659      	mov	r1, fp
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f905 	bl	8000618 <__aeabi_dmul>
 800940e:	4b08      	ldr	r3, [pc, #32]	@ (8009430 <_strtod_l+0x860>)
 8009410:	400b      	ands	r3, r1
 8009412:	4682      	mov	sl, r0
 8009414:	468b      	mov	fp, r1
 8009416:	2b00      	cmp	r3, #0
 8009418:	f47f ae08 	bne.w	800902c <_strtod_l+0x45c>
 800941c:	9a05      	ldr	r2, [sp, #20]
 800941e:	2322      	movs	r3, #34	@ 0x22
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e603      	b.n	800902c <_strtod_l+0x45c>
 8009424:	080339e8 	.word	0x080339e8
 8009428:	fffffc02 	.word	0xfffffc02
 800942c:	39500000 	.word	0x39500000
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009438:	d165      	bne.n	8009506 <_strtod_l+0x936>
 800943a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800943c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009440:	b35a      	cbz	r2, 800949a <_strtod_l+0x8ca>
 8009442:	4a9f      	ldr	r2, [pc, #636]	@ (80096c0 <_strtod_l+0xaf0>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d12b      	bne.n	80094a0 <_strtod_l+0x8d0>
 8009448:	9b08      	ldr	r3, [sp, #32]
 800944a:	4651      	mov	r1, sl
 800944c:	b303      	cbz	r3, 8009490 <_strtod_l+0x8c0>
 800944e:	4b9d      	ldr	r3, [pc, #628]	@ (80096c4 <_strtod_l+0xaf4>)
 8009450:	465a      	mov	r2, fp
 8009452:	4013      	ands	r3, r2
 8009454:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009458:	f04f 32ff 	mov.w	r2, #4294967295
 800945c:	d81b      	bhi.n	8009496 <_strtod_l+0x8c6>
 800945e:	0d1b      	lsrs	r3, r3, #20
 8009460:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009464:	fa02 f303 	lsl.w	r3, r2, r3
 8009468:	4299      	cmp	r1, r3
 800946a:	d119      	bne.n	80094a0 <_strtod_l+0x8d0>
 800946c:	4b96      	ldr	r3, [pc, #600]	@ (80096c8 <_strtod_l+0xaf8>)
 800946e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009470:	429a      	cmp	r2, r3
 8009472:	d102      	bne.n	800947a <_strtod_l+0x8aa>
 8009474:	3101      	adds	r1, #1
 8009476:	f43f adce 	beq.w	8009016 <_strtod_l+0x446>
 800947a:	4b92      	ldr	r3, [pc, #584]	@ (80096c4 <_strtod_l+0xaf4>)
 800947c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800947e:	401a      	ands	r2, r3
 8009480:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	9b08      	ldr	r3, [sp, #32]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1b9      	bne.n	8009402 <_strtod_l+0x832>
 800948e:	e5cd      	b.n	800902c <_strtod_l+0x45c>
 8009490:	f04f 33ff 	mov.w	r3, #4294967295
 8009494:	e7e8      	b.n	8009468 <_strtod_l+0x898>
 8009496:	4613      	mov	r3, r2
 8009498:	e7e6      	b.n	8009468 <_strtod_l+0x898>
 800949a:	ea53 030a 	orrs.w	r3, r3, sl
 800949e:	d0a2      	beq.n	80093e6 <_strtod_l+0x816>
 80094a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094a2:	b1db      	cbz	r3, 80094dc <_strtod_l+0x90c>
 80094a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094a6:	4213      	tst	r3, r2
 80094a8:	d0ee      	beq.n	8009488 <_strtod_l+0x8b8>
 80094aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ac:	9a08      	ldr	r2, [sp, #32]
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	b1bb      	cbz	r3, 80094e4 <_strtod_l+0x914>
 80094b4:	f7ff fb6e 	bl	8008b94 <sulp>
 80094b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094bc:	ec53 2b10 	vmov	r2, r3, d0
 80094c0:	f7f6 fef4 	bl	80002ac <__adddf3>
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	e7de      	b.n	8009488 <_strtod_l+0x8b8>
 80094ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094d6:	f04f 3aff 	mov.w	sl, #4294967295
 80094da:	e7d5      	b.n	8009488 <_strtod_l+0x8b8>
 80094dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094de:	ea13 0f0a 	tst.w	r3, sl
 80094e2:	e7e1      	b.n	80094a8 <_strtod_l+0x8d8>
 80094e4:	f7ff fb56 	bl	8008b94 <sulp>
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ec:	ec53 2b10 	vmov	r2, r3, d0
 80094f0:	f7f6 feda 	bl	80002a8 <__aeabi_dsub>
 80094f4:	2200      	movs	r2, #0
 80094f6:	2300      	movs	r3, #0
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	f7f7 faf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8009500:	2800      	cmp	r0, #0
 8009502:	d0c1      	beq.n	8009488 <_strtod_l+0x8b8>
 8009504:	e61a      	b.n	800913c <_strtod_l+0x56c>
 8009506:	4641      	mov	r1, r8
 8009508:	4620      	mov	r0, r4
 800950a:	f001 fb4f 	bl	800abac <__ratio>
 800950e:	ec57 6b10 	vmov	r6, r7, d0
 8009512:	2200      	movs	r2, #0
 8009514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f7 faf8 	bl	8000b10 <__aeabi_dcmple>
 8009520:	2800      	cmp	r0, #0
 8009522:	d06f      	beq.n	8009604 <_strtod_l+0xa34>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d17a      	bne.n	8009620 <_strtod_l+0xa50>
 800952a:	f1ba 0f00 	cmp.w	sl, #0
 800952e:	d158      	bne.n	80095e2 <_strtod_l+0xa12>
 8009530:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009536:	2b00      	cmp	r3, #0
 8009538:	d15a      	bne.n	80095f0 <_strtod_l+0xa20>
 800953a:	4b64      	ldr	r3, [pc, #400]	@ (80096cc <_strtod_l+0xafc>)
 800953c:	2200      	movs	r2, #0
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f7 fadb 	bl	8000afc <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	d159      	bne.n	80095fe <_strtod_l+0xa2e>
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	4b60      	ldr	r3, [pc, #384]	@ (80096d0 <_strtod_l+0xb00>)
 8009550:	2200      	movs	r2, #0
 8009552:	f7f7 f861 	bl	8000618 <__aeabi_dmul>
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800955e:	9606      	str	r6, [sp, #24]
 8009560:	9307      	str	r3, [sp, #28]
 8009562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009566:	4d57      	ldr	r5, [pc, #348]	@ (80096c4 <_strtod_l+0xaf4>)
 8009568:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800956c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956e:	401d      	ands	r5, r3
 8009570:	4b58      	ldr	r3, [pc, #352]	@ (80096d4 <_strtod_l+0xb04>)
 8009572:	429d      	cmp	r5, r3
 8009574:	f040 80b2 	bne.w	80096dc <_strtod_l+0xb0c>
 8009578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800957a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800957e:	ec4b ab10 	vmov	d0, sl, fp
 8009582:	f001 fa4b 	bl	800aa1c <__ulp>
 8009586:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800958a:	ec51 0b10 	vmov	r0, r1, d0
 800958e:	f7f7 f843 	bl	8000618 <__aeabi_dmul>
 8009592:	4652      	mov	r2, sl
 8009594:	465b      	mov	r3, fp
 8009596:	f7f6 fe89 	bl	80002ac <__adddf3>
 800959a:	460b      	mov	r3, r1
 800959c:	4949      	ldr	r1, [pc, #292]	@ (80096c4 <_strtod_l+0xaf4>)
 800959e:	4a4e      	ldr	r2, [pc, #312]	@ (80096d8 <_strtod_l+0xb08>)
 80095a0:	4019      	ands	r1, r3
 80095a2:	4291      	cmp	r1, r2
 80095a4:	4682      	mov	sl, r0
 80095a6:	d942      	bls.n	800962e <_strtod_l+0xa5e>
 80095a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095aa:	4b47      	ldr	r3, [pc, #284]	@ (80096c8 <_strtod_l+0xaf8>)
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d103      	bne.n	80095b8 <_strtod_l+0x9e8>
 80095b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095b2:	3301      	adds	r3, #1
 80095b4:	f43f ad2f 	beq.w	8009016 <_strtod_l+0x446>
 80095b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096c8 <_strtod_l+0xaf8>
 80095bc:	f04f 3aff 	mov.w	sl, #4294967295
 80095c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095c2:	9805      	ldr	r0, [sp, #20]
 80095c4:	f000 fefe 	bl	800a3c4 <_Bfree>
 80095c8:	9805      	ldr	r0, [sp, #20]
 80095ca:	4649      	mov	r1, r9
 80095cc:	f000 fefa 	bl	800a3c4 <_Bfree>
 80095d0:	9805      	ldr	r0, [sp, #20]
 80095d2:	4641      	mov	r1, r8
 80095d4:	f000 fef6 	bl	800a3c4 <_Bfree>
 80095d8:	9805      	ldr	r0, [sp, #20]
 80095da:	4621      	mov	r1, r4
 80095dc:	f000 fef2 	bl	800a3c4 <_Bfree>
 80095e0:	e619      	b.n	8009216 <_strtod_l+0x646>
 80095e2:	f1ba 0f01 	cmp.w	sl, #1
 80095e6:	d103      	bne.n	80095f0 <_strtod_l+0xa20>
 80095e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f43f ada6 	beq.w	800913c <_strtod_l+0x56c>
 80095f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096a0 <_strtod_l+0xad0>
 80095f4:	4f35      	ldr	r7, [pc, #212]	@ (80096cc <_strtod_l+0xafc>)
 80095f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80095fa:	2600      	movs	r6, #0
 80095fc:	e7b1      	b.n	8009562 <_strtod_l+0x992>
 80095fe:	4f34      	ldr	r7, [pc, #208]	@ (80096d0 <_strtod_l+0xb00>)
 8009600:	2600      	movs	r6, #0
 8009602:	e7aa      	b.n	800955a <_strtod_l+0x98a>
 8009604:	4b32      	ldr	r3, [pc, #200]	@ (80096d0 <_strtod_l+0xb00>)
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	2200      	movs	r2, #0
 800960c:	f7f7 f804 	bl	8000618 <__aeabi_dmul>
 8009610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d09f      	beq.n	800955a <_strtod_l+0x98a>
 800961a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800961e:	e7a0      	b.n	8009562 <_strtod_l+0x992>
 8009620:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096a8 <_strtod_l+0xad8>
 8009624:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009628:	ec57 6b17 	vmov	r6, r7, d7
 800962c:	e799      	b.n	8009562 <_strtod_l+0x992>
 800962e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1c1      	bne.n	80095c0 <_strtod_l+0x9f0>
 800963c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009640:	0d1b      	lsrs	r3, r3, #20
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	429d      	cmp	r5, r3
 8009646:	d1bb      	bne.n	80095c0 <_strtod_l+0x9f0>
 8009648:	4630      	mov	r0, r6
 800964a:	4639      	mov	r1, r7
 800964c:	f7f7 fade 	bl	8000c0c <__aeabi_d2lz>
 8009650:	f7f6 ffb4 	bl	80005bc <__aeabi_l2d>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f6 fe24 	bl	80002a8 <__aeabi_dsub>
 8009660:	460b      	mov	r3, r1
 8009662:	4602      	mov	r2, r0
 8009664:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009668:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	ea46 060a 	orr.w	r6, r6, sl
 8009672:	431e      	orrs	r6, r3
 8009674:	d06f      	beq.n	8009756 <_strtod_l+0xb86>
 8009676:	a30e      	add	r3, pc, #56	@ (adr r3, 80096b0 <_strtod_l+0xae0>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	f7f7 fa3e 	bl	8000afc <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	f47f acd3 	bne.w	800902c <_strtod_l+0x45c>
 8009686:	a30c      	add	r3, pc, #48	@ (adr r3, 80096b8 <_strtod_l+0xae8>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009690:	f7f7 fa52 	bl	8000b38 <__aeabi_dcmpgt>
 8009694:	2800      	cmp	r0, #0
 8009696:	d093      	beq.n	80095c0 <_strtod_l+0x9f0>
 8009698:	e4c8      	b.n	800902c <_strtod_l+0x45c>
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	00000000 	.word	0x00000000
 80096a4:	bff00000 	.word	0xbff00000
 80096a8:	00000000 	.word	0x00000000
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	94a03595 	.word	0x94a03595
 80096b4:	3fdfffff 	.word	0x3fdfffff
 80096b8:	35afe535 	.word	0x35afe535
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	000fffff 	.word	0x000fffff
 80096c4:	7ff00000 	.word	0x7ff00000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	3fe00000 	.word	0x3fe00000
 80096d4:	7fe00000 	.word	0x7fe00000
 80096d8:	7c9fffff 	.word	0x7c9fffff
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	b323      	cbz	r3, 800972a <_strtod_l+0xb5a>
 80096e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80096e4:	d821      	bhi.n	800972a <_strtod_l+0xb5a>
 80096e6:	a328      	add	r3, pc, #160	@ (adr r3, 8009788 <_strtod_l+0xbb8>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	f7f7 fa0e 	bl	8000b10 <__aeabi_dcmple>
 80096f4:	b1a0      	cbz	r0, 8009720 <_strtod_l+0xb50>
 80096f6:	4639      	mov	r1, r7
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7f7 fa4f 	bl	8000b9c <__aeabi_d2uiz>
 80096fe:	2801      	cmp	r0, #1
 8009700:	bf38      	it	cc
 8009702:	2001      	movcc	r0, #1
 8009704:	f7f6 ff0e 	bl	8000524 <__aeabi_ui2d>
 8009708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800970a:	4606      	mov	r6, r0
 800970c:	460f      	mov	r7, r1
 800970e:	b9fb      	cbnz	r3, 8009750 <_strtod_l+0xb80>
 8009710:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009714:	9014      	str	r0, [sp, #80]	@ 0x50
 8009716:	9315      	str	r3, [sp, #84]	@ 0x54
 8009718:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800971c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009720:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009722:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009726:	1b5b      	subs	r3, r3, r5
 8009728:	9311      	str	r3, [sp, #68]	@ 0x44
 800972a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800972e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009732:	f001 f973 	bl	800aa1c <__ulp>
 8009736:	4650      	mov	r0, sl
 8009738:	ec53 2b10 	vmov	r2, r3, d0
 800973c:	4659      	mov	r1, fp
 800973e:	f7f6 ff6b 	bl	8000618 <__aeabi_dmul>
 8009742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009746:	f7f6 fdb1 	bl	80002ac <__adddf3>
 800974a:	4682      	mov	sl, r0
 800974c:	468b      	mov	fp, r1
 800974e:	e770      	b.n	8009632 <_strtod_l+0xa62>
 8009750:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009754:	e7e0      	b.n	8009718 <_strtod_l+0xb48>
 8009756:	a30e      	add	r3, pc, #56	@ (adr r3, 8009790 <_strtod_l+0xbc0>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	f7f7 f9ce 	bl	8000afc <__aeabi_dcmplt>
 8009760:	e798      	b.n	8009694 <_strtod_l+0xac4>
 8009762:	2300      	movs	r3, #0
 8009764:	930e      	str	r3, [sp, #56]	@ 0x38
 8009766:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	f7ff ba6d 	b.w	8008c4a <_strtod_l+0x7a>
 8009770:	2a65      	cmp	r2, #101	@ 0x65
 8009772:	f43f ab68 	beq.w	8008e46 <_strtod_l+0x276>
 8009776:	2a45      	cmp	r2, #69	@ 0x45
 8009778:	f43f ab65 	beq.w	8008e46 <_strtod_l+0x276>
 800977c:	2301      	movs	r3, #1
 800977e:	f7ff bba0 	b.w	8008ec2 <_strtod_l+0x2f2>
 8009782:	bf00      	nop
 8009784:	f3af 8000 	nop.w
 8009788:	ffc00000 	.word	0xffc00000
 800978c:	41dfffff 	.word	0x41dfffff
 8009790:	94a03595 	.word	0x94a03595
 8009794:	3fcfffff 	.word	0x3fcfffff

08009798 <strtod>:
 8009798:	460a      	mov	r2, r1
 800979a:	4601      	mov	r1, r0
 800979c:	4802      	ldr	r0, [pc, #8]	@ (80097a8 <strtod+0x10>)
 800979e:	4b03      	ldr	r3, [pc, #12]	@ (80097ac <strtod+0x14>)
 80097a0:	6800      	ldr	r0, [r0, #0]
 80097a2:	f7ff ba15 	b.w	8008bd0 <_strtod_l>
 80097a6:	bf00      	nop
 80097a8:	20000284 	.word	0x20000284
 80097ac:	20000118 	.word	0x20000118

080097b0 <std>:
 80097b0:	2300      	movs	r3, #0
 80097b2:	b510      	push	{r4, lr}
 80097b4:	4604      	mov	r4, r0
 80097b6:	e9c0 3300 	strd	r3, r3, [r0]
 80097ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097be:	6083      	str	r3, [r0, #8]
 80097c0:	8181      	strh	r1, [r0, #12]
 80097c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80097c4:	81c2      	strh	r2, [r0, #14]
 80097c6:	6183      	str	r3, [r0, #24]
 80097c8:	4619      	mov	r1, r3
 80097ca:	2208      	movs	r2, #8
 80097cc:	305c      	adds	r0, #92	@ 0x5c
 80097ce:	f000 f937 	bl	8009a40 <memset>
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x58>)
 80097d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80097d6:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <std+0x5c>)
 80097d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097da:	4b0d      	ldr	r3, [pc, #52]	@ (8009810 <std+0x60>)
 80097dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097de:	4b0d      	ldr	r3, [pc, #52]	@ (8009814 <std+0x64>)
 80097e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80097e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <std+0x68>)
 80097e4:	6224      	str	r4, [r4, #32]
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d006      	beq.n	80097f8 <std+0x48>
 80097ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097ee:	4294      	cmp	r4, r2
 80097f0:	d002      	beq.n	80097f8 <std+0x48>
 80097f2:	33d0      	adds	r3, #208	@ 0xd0
 80097f4:	429c      	cmp	r4, r3
 80097f6:	d105      	bne.n	8009804 <std+0x54>
 80097f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009800:	f000 b9e6 	b.w	8009bd0 <__retarget_lock_init_recursive>
 8009804:	bd10      	pop	{r4, pc}
 8009806:	bf00      	nop
 8009808:	08009979 	.word	0x08009979
 800980c:	0800999b 	.word	0x0800999b
 8009810:	080099d3 	.word	0x080099d3
 8009814:	080099f7 	.word	0x080099f7
 8009818:	20000ccc 	.word	0x20000ccc

0800981c <stdio_exit_handler>:
 800981c:	4a02      	ldr	r2, [pc, #8]	@ (8009828 <stdio_exit_handler+0xc>)
 800981e:	4903      	ldr	r1, [pc, #12]	@ (800982c <stdio_exit_handler+0x10>)
 8009820:	4803      	ldr	r0, [pc, #12]	@ (8009830 <stdio_exit_handler+0x14>)
 8009822:	f000 b869 	b.w	80098f8 <_fwalk_sglue>
 8009826:	bf00      	nop
 8009828:	2000010c 	.word	0x2000010c
 800982c:	0800b391 	.word	0x0800b391
 8009830:	20000288 	.word	0x20000288

08009834 <cleanup_stdio>:
 8009834:	6841      	ldr	r1, [r0, #4]
 8009836:	4b0c      	ldr	r3, [pc, #48]	@ (8009868 <cleanup_stdio+0x34>)
 8009838:	4299      	cmp	r1, r3
 800983a:	b510      	push	{r4, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	d001      	beq.n	8009844 <cleanup_stdio+0x10>
 8009840:	f001 fda6 	bl	800b390 <_fflush_r>
 8009844:	68a1      	ldr	r1, [r4, #8]
 8009846:	4b09      	ldr	r3, [pc, #36]	@ (800986c <cleanup_stdio+0x38>)
 8009848:	4299      	cmp	r1, r3
 800984a:	d002      	beq.n	8009852 <cleanup_stdio+0x1e>
 800984c:	4620      	mov	r0, r4
 800984e:	f001 fd9f 	bl	800b390 <_fflush_r>
 8009852:	68e1      	ldr	r1, [r4, #12]
 8009854:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <cleanup_stdio+0x3c>)
 8009856:	4299      	cmp	r1, r3
 8009858:	d004      	beq.n	8009864 <cleanup_stdio+0x30>
 800985a:	4620      	mov	r0, r4
 800985c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009860:	f001 bd96 	b.w	800b390 <_fflush_r>
 8009864:	bd10      	pop	{r4, pc}
 8009866:	bf00      	nop
 8009868:	20000ccc 	.word	0x20000ccc
 800986c:	20000d34 	.word	0x20000d34
 8009870:	20000d9c 	.word	0x20000d9c

08009874 <global_stdio_init.part.0>:
 8009874:	b510      	push	{r4, lr}
 8009876:	4b0b      	ldr	r3, [pc, #44]	@ (80098a4 <global_stdio_init.part.0+0x30>)
 8009878:	4c0b      	ldr	r4, [pc, #44]	@ (80098a8 <global_stdio_init.part.0+0x34>)
 800987a:	4a0c      	ldr	r2, [pc, #48]	@ (80098ac <global_stdio_init.part.0+0x38>)
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	4620      	mov	r0, r4
 8009880:	2200      	movs	r2, #0
 8009882:	2104      	movs	r1, #4
 8009884:	f7ff ff94 	bl	80097b0 <std>
 8009888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800988c:	2201      	movs	r2, #1
 800988e:	2109      	movs	r1, #9
 8009890:	f7ff ff8e 	bl	80097b0 <std>
 8009894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009898:	2202      	movs	r2, #2
 800989a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800989e:	2112      	movs	r1, #18
 80098a0:	f7ff bf86 	b.w	80097b0 <std>
 80098a4:	20000e04 	.word	0x20000e04
 80098a8:	20000ccc 	.word	0x20000ccc
 80098ac:	0800981d 	.word	0x0800981d

080098b0 <__sfp_lock_acquire>:
 80098b0:	4801      	ldr	r0, [pc, #4]	@ (80098b8 <__sfp_lock_acquire+0x8>)
 80098b2:	f000 b98e 	b.w	8009bd2 <__retarget_lock_acquire_recursive>
 80098b6:	bf00      	nop
 80098b8:	20000e0d 	.word	0x20000e0d

080098bc <__sfp_lock_release>:
 80098bc:	4801      	ldr	r0, [pc, #4]	@ (80098c4 <__sfp_lock_release+0x8>)
 80098be:	f000 b989 	b.w	8009bd4 <__retarget_lock_release_recursive>
 80098c2:	bf00      	nop
 80098c4:	20000e0d 	.word	0x20000e0d

080098c8 <__sinit>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	4604      	mov	r4, r0
 80098cc:	f7ff fff0 	bl	80098b0 <__sfp_lock_acquire>
 80098d0:	6a23      	ldr	r3, [r4, #32]
 80098d2:	b11b      	cbz	r3, 80098dc <__sinit+0x14>
 80098d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d8:	f7ff bff0 	b.w	80098bc <__sfp_lock_release>
 80098dc:	4b04      	ldr	r3, [pc, #16]	@ (80098f0 <__sinit+0x28>)
 80098de:	6223      	str	r3, [r4, #32]
 80098e0:	4b04      	ldr	r3, [pc, #16]	@ (80098f4 <__sinit+0x2c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f5      	bne.n	80098d4 <__sinit+0xc>
 80098e8:	f7ff ffc4 	bl	8009874 <global_stdio_init.part.0>
 80098ec:	e7f2      	b.n	80098d4 <__sinit+0xc>
 80098ee:	bf00      	nop
 80098f0:	08009835 	.word	0x08009835
 80098f4:	20000e04 	.word	0x20000e04

080098f8 <_fwalk_sglue>:
 80098f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098fc:	4607      	mov	r7, r0
 80098fe:	4688      	mov	r8, r1
 8009900:	4614      	mov	r4, r2
 8009902:	2600      	movs	r6, #0
 8009904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009908:	f1b9 0901 	subs.w	r9, r9, #1
 800990c:	d505      	bpl.n	800991a <_fwalk_sglue+0x22>
 800990e:	6824      	ldr	r4, [r4, #0]
 8009910:	2c00      	cmp	r4, #0
 8009912:	d1f7      	bne.n	8009904 <_fwalk_sglue+0xc>
 8009914:	4630      	mov	r0, r6
 8009916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	2b01      	cmp	r3, #1
 800991e:	d907      	bls.n	8009930 <_fwalk_sglue+0x38>
 8009920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009924:	3301      	adds	r3, #1
 8009926:	d003      	beq.n	8009930 <_fwalk_sglue+0x38>
 8009928:	4629      	mov	r1, r5
 800992a:	4638      	mov	r0, r7
 800992c:	47c0      	blx	r8
 800992e:	4306      	orrs	r6, r0
 8009930:	3568      	adds	r5, #104	@ 0x68
 8009932:	e7e9      	b.n	8009908 <_fwalk_sglue+0x10>

08009934 <siprintf>:
 8009934:	b40e      	push	{r1, r2, r3}
 8009936:	b510      	push	{r4, lr}
 8009938:	b09d      	sub	sp, #116	@ 0x74
 800993a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800993c:	9002      	str	r0, [sp, #8]
 800993e:	9006      	str	r0, [sp, #24]
 8009940:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009944:	480a      	ldr	r0, [pc, #40]	@ (8009970 <siprintf+0x3c>)
 8009946:	9107      	str	r1, [sp, #28]
 8009948:	9104      	str	r1, [sp, #16]
 800994a:	490a      	ldr	r1, [pc, #40]	@ (8009974 <siprintf+0x40>)
 800994c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009950:	9105      	str	r1, [sp, #20]
 8009952:	2400      	movs	r4, #0
 8009954:	a902      	add	r1, sp, #8
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800995c:	f001 fa0c 	bl	800ad78 <_svfiprintf_r>
 8009960:	9b02      	ldr	r3, [sp, #8]
 8009962:	701c      	strb	r4, [r3, #0]
 8009964:	b01d      	add	sp, #116	@ 0x74
 8009966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996a:	b003      	add	sp, #12
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000284 	.word	0x20000284
 8009974:	ffff0208 	.word	0xffff0208

08009978 <__sread>:
 8009978:	b510      	push	{r4, lr}
 800997a:	460c      	mov	r4, r1
 800997c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009980:	f000 f8c8 	bl	8009b14 <_read_r>
 8009984:	2800      	cmp	r0, #0
 8009986:	bfab      	itete	ge
 8009988:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800998a:	89a3      	ldrhlt	r3, [r4, #12]
 800998c:	181b      	addge	r3, r3, r0
 800998e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009992:	bfac      	ite	ge
 8009994:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009996:	81a3      	strhlt	r3, [r4, #12]
 8009998:	bd10      	pop	{r4, pc}

0800999a <__swrite>:
 800999a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999e:	461f      	mov	r7, r3
 80099a0:	898b      	ldrh	r3, [r1, #12]
 80099a2:	05db      	lsls	r3, r3, #23
 80099a4:	4605      	mov	r5, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	4616      	mov	r6, r2
 80099aa:	d505      	bpl.n	80099b8 <__swrite+0x1e>
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	2302      	movs	r3, #2
 80099b2:	2200      	movs	r2, #0
 80099b4:	f000 f89c 	bl	8009af0 <_lseek_r>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	4628      	mov	r0, r5
 80099ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ce:	f000 b8c3 	b.w	8009b58 <_write_r>

080099d2 <__sseek>:
 80099d2:	b510      	push	{r4, lr}
 80099d4:	460c      	mov	r4, r1
 80099d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099da:	f000 f889 	bl	8009af0 <_lseek_r>
 80099de:	1c43      	adds	r3, r0, #1
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	bf15      	itete	ne
 80099e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099ee:	81a3      	strheq	r3, [r4, #12]
 80099f0:	bf18      	it	ne
 80099f2:	81a3      	strhne	r3, [r4, #12]
 80099f4:	bd10      	pop	{r4, pc}

080099f6 <__sclose>:
 80099f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099fa:	f000 b869 	b.w	8009ad0 <_close_r>
	...

08009a00 <_vsiprintf_r>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	b09a      	sub	sp, #104	@ 0x68
 8009a04:	2400      	movs	r4, #0
 8009a06:	9100      	str	r1, [sp, #0]
 8009a08:	9104      	str	r1, [sp, #16]
 8009a0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a0e:	9105      	str	r1, [sp, #20]
 8009a10:	9102      	str	r1, [sp, #8]
 8009a12:	4905      	ldr	r1, [pc, #20]	@ (8009a28 <_vsiprintf_r+0x28>)
 8009a14:	9103      	str	r1, [sp, #12]
 8009a16:	4669      	mov	r1, sp
 8009a18:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a1a:	f001 f9ad 	bl	800ad78 <_svfiprintf_r>
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	701c      	strb	r4, [r3, #0]
 8009a22:	b01a      	add	sp, #104	@ 0x68
 8009a24:	bd10      	pop	{r4, pc}
 8009a26:	bf00      	nop
 8009a28:	ffff0208 	.word	0xffff0208

08009a2c <vsiprintf>:
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	460a      	mov	r2, r1
 8009a30:	4601      	mov	r1, r0
 8009a32:	4802      	ldr	r0, [pc, #8]	@ (8009a3c <vsiprintf+0x10>)
 8009a34:	6800      	ldr	r0, [r0, #0]
 8009a36:	f7ff bfe3 	b.w	8009a00 <_vsiprintf_r>
 8009a3a:	bf00      	nop
 8009a3c:	20000284 	.word	0x20000284

08009a40 <memset>:
 8009a40:	4402      	add	r2, r0
 8009a42:	4603      	mov	r3, r0
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d100      	bne.n	8009a4a <memset+0xa>
 8009a48:	4770      	bx	lr
 8009a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a4e:	e7f9      	b.n	8009a44 <memset+0x4>

08009a50 <strdup>:
 8009a50:	4b02      	ldr	r3, [pc, #8]	@ (8009a5c <strdup+0xc>)
 8009a52:	4601      	mov	r1, r0
 8009a54:	6818      	ldr	r0, [r3, #0]
 8009a56:	f000 b803 	b.w	8009a60 <_strdup_r>
 8009a5a:	bf00      	nop
 8009a5c:	20000284 	.word	0x20000284

08009a60 <_strdup_r>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	4604      	mov	r4, r0
 8009a64:	4608      	mov	r0, r1
 8009a66:	460d      	mov	r5, r1
 8009a68:	f7f6 fbbc 	bl	80001e4 <strlen>
 8009a6c:	1c46      	adds	r6, r0, #1
 8009a6e:	4631      	mov	r1, r6
 8009a70:	4620      	mov	r0, r4
 8009a72:	f7fe ffcd 	bl	8008a10 <_malloc_r>
 8009a76:	4604      	mov	r4, r0
 8009a78:	b118      	cbz	r0, 8009a82 <_strdup_r+0x22>
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	f000 f8b2 	bl	8009be6 <memcpy>
 8009a82:	4620      	mov	r0, r4
 8009a84:	bd70      	pop	{r4, r5, r6, pc}

08009a86 <strncmp>:
 8009a86:	b510      	push	{r4, lr}
 8009a88:	b16a      	cbz	r2, 8009aa6 <strncmp+0x20>
 8009a8a:	3901      	subs	r1, #1
 8009a8c:	1884      	adds	r4, r0, r2
 8009a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a92:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d103      	bne.n	8009aa2 <strncmp+0x1c>
 8009a9a:	42a0      	cmp	r0, r4
 8009a9c:	d001      	beq.n	8009aa2 <strncmp+0x1c>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d1f5      	bne.n	8009a8e <strncmp+0x8>
 8009aa2:	1ad0      	subs	r0, r2, r3
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	e7fc      	b.n	8009aa4 <strncmp+0x1e>

08009aaa <strncpy>:
 8009aaa:	b510      	push	{r4, lr}
 8009aac:	3901      	subs	r1, #1
 8009aae:	4603      	mov	r3, r0
 8009ab0:	b132      	cbz	r2, 8009ac0 <strncpy+0x16>
 8009ab2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ab6:	f803 4b01 	strb.w	r4, [r3], #1
 8009aba:	3a01      	subs	r2, #1
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d1f7      	bne.n	8009ab0 <strncpy+0x6>
 8009ac0:	441a      	add	r2, r3
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d100      	bne.n	8009aca <strncpy+0x20>
 8009ac8:	bd10      	pop	{r4, pc}
 8009aca:	f803 1b01 	strb.w	r1, [r3], #1
 8009ace:	e7f9      	b.n	8009ac4 <strncpy+0x1a>

08009ad0 <_close_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d06      	ldr	r5, [pc, #24]	@ (8009aec <_close_r+0x1c>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	602b      	str	r3, [r5, #0]
 8009adc:	f7fc f840 	bl	8005b60 <_close>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d102      	bne.n	8009aea <_close_r+0x1a>
 8009ae4:	682b      	ldr	r3, [r5, #0]
 8009ae6:	b103      	cbz	r3, 8009aea <_close_r+0x1a>
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	bd38      	pop	{r3, r4, r5, pc}
 8009aec:	20000e08 	.word	0x20000e08

08009af0 <_lseek_r>:
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4d07      	ldr	r5, [pc, #28]	@ (8009b10 <_lseek_r+0x20>)
 8009af4:	4604      	mov	r4, r0
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	602a      	str	r2, [r5, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	f7fc f855 	bl	8005bae <_lseek>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_lseek_r+0x1e>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_lseek_r+0x1e>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000e08 	.word	0x20000e08

08009b14 <_read_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4d07      	ldr	r5, [pc, #28]	@ (8009b34 <_read_r+0x20>)
 8009b18:	4604      	mov	r4, r0
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	602a      	str	r2, [r5, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f7fb ffe3 	bl	8005aee <_read>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_read_r+0x1e>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_read_r+0x1e>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20000e08 	.word	0x20000e08

08009b38 <_sbrk_r>:
 8009b38:	b538      	push	{r3, r4, r5, lr}
 8009b3a:	4d06      	ldr	r5, [pc, #24]	@ (8009b54 <_sbrk_r+0x1c>)
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	4608      	mov	r0, r1
 8009b42:	602b      	str	r3, [r5, #0]
 8009b44:	f7fc f840 	bl	8005bc8 <_sbrk>
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	d102      	bne.n	8009b52 <_sbrk_r+0x1a>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	b103      	cbz	r3, 8009b52 <_sbrk_r+0x1a>
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	bd38      	pop	{r3, r4, r5, pc}
 8009b54:	20000e08 	.word	0x20000e08

08009b58 <_write_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d07      	ldr	r5, [pc, #28]	@ (8009b78 <_write_r+0x20>)
 8009b5c:	4604      	mov	r4, r0
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	2200      	movs	r2, #0
 8009b64:	602a      	str	r2, [r5, #0]
 8009b66:	461a      	mov	r2, r3
 8009b68:	f7fb ffde 	bl	8005b28 <_write>
 8009b6c:	1c43      	adds	r3, r0, #1
 8009b6e:	d102      	bne.n	8009b76 <_write_r+0x1e>
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	b103      	cbz	r3, 8009b76 <_write_r+0x1e>
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	bd38      	pop	{r3, r4, r5, pc}
 8009b78:	20000e08 	.word	0x20000e08

08009b7c <__errno>:
 8009b7c:	4b01      	ldr	r3, [pc, #4]	@ (8009b84 <__errno+0x8>)
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	20000284 	.word	0x20000284

08009b88 <__libc_init_array>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	4d0d      	ldr	r5, [pc, #52]	@ (8009bc0 <__libc_init_array+0x38>)
 8009b8c:	4c0d      	ldr	r4, [pc, #52]	@ (8009bc4 <__libc_init_array+0x3c>)
 8009b8e:	1b64      	subs	r4, r4, r5
 8009b90:	10a4      	asrs	r4, r4, #2
 8009b92:	2600      	movs	r6, #0
 8009b94:	42a6      	cmp	r6, r4
 8009b96:	d109      	bne.n	8009bac <__libc_init_array+0x24>
 8009b98:	4d0b      	ldr	r5, [pc, #44]	@ (8009bc8 <__libc_init_array+0x40>)
 8009b9a:	4c0c      	ldr	r4, [pc, #48]	@ (8009bcc <__libc_init_array+0x44>)
 8009b9c:	f001 ff22 	bl	800b9e4 <_init>
 8009ba0:	1b64      	subs	r4, r4, r5
 8009ba2:	10a4      	asrs	r4, r4, #2
 8009ba4:	2600      	movs	r6, #0
 8009ba6:	42a6      	cmp	r6, r4
 8009ba8:	d105      	bne.n	8009bb6 <__libc_init_array+0x2e>
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bb0:	4798      	blx	r3
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	e7ee      	b.n	8009b94 <__libc_init_array+0xc>
 8009bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bba:	4798      	blx	r3
 8009bbc:	3601      	adds	r6, #1
 8009bbe:	e7f2      	b.n	8009ba6 <__libc_init_array+0x1e>
 8009bc0:	08033c18 	.word	0x08033c18
 8009bc4:	08033c18 	.word	0x08033c18
 8009bc8:	08033c18 	.word	0x08033c18
 8009bcc:	08033c1c 	.word	0x08033c1c

08009bd0 <__retarget_lock_init_recursive>:
 8009bd0:	4770      	bx	lr

08009bd2 <__retarget_lock_acquire_recursive>:
 8009bd2:	4770      	bx	lr

08009bd4 <__retarget_lock_release_recursive>:
 8009bd4:	4770      	bx	lr

08009bd6 <strcpy>:
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bdc:	f803 2b01 	strb.w	r2, [r3], #1
 8009be0:	2a00      	cmp	r2, #0
 8009be2:	d1f9      	bne.n	8009bd8 <strcpy+0x2>
 8009be4:	4770      	bx	lr

08009be6 <memcpy>:
 8009be6:	440a      	add	r2, r1
 8009be8:	4291      	cmp	r1, r2
 8009bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bee:	d100      	bne.n	8009bf2 <memcpy+0xc>
 8009bf0:	4770      	bx	lr
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bfc:	4291      	cmp	r1, r2
 8009bfe:	d1f9      	bne.n	8009bf4 <memcpy+0xe>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	0000      	movs	r0, r0
 8009c04:	0000      	movs	r0, r0
	...

08009c08 <nan>:
 8009c08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c10 <nan+0x8>
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	00000000 	.word	0x00000000
 8009c14:	7ff80000 	.word	0x7ff80000

08009c18 <_free_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	4605      	mov	r5, r0
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	d041      	beq.n	8009ca4 <_free_r+0x8c>
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f0c      	subs	r4, r1, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfb8      	it	lt
 8009c2a:	18e4      	addlt	r4, r4, r3
 8009c2c:	f7fe ff70 	bl	8008b10 <__malloc_lock>
 8009c30:	4a1d      	ldr	r2, [pc, #116]	@ (8009ca8 <_free_r+0x90>)
 8009c32:	6813      	ldr	r3, [r2, #0]
 8009c34:	b933      	cbnz	r3, 8009c44 <_free_r+0x2c>
 8009c36:	6063      	str	r3, [r4, #4]
 8009c38:	6014      	str	r4, [r2, #0]
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c40:	f7fe bf6c 	b.w	8008b1c <__malloc_unlock>
 8009c44:	42a3      	cmp	r3, r4
 8009c46:	d908      	bls.n	8009c5a <_free_r+0x42>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	1821      	adds	r1, r4, r0
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	bf01      	itttt	eq
 8009c50:	6819      	ldreq	r1, [r3, #0]
 8009c52:	685b      	ldreq	r3, [r3, #4]
 8009c54:	1809      	addeq	r1, r1, r0
 8009c56:	6021      	streq	r1, [r4, #0]
 8009c58:	e7ed      	b.n	8009c36 <_free_r+0x1e>
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	b10b      	cbz	r3, 8009c64 <_free_r+0x4c>
 8009c60:	42a3      	cmp	r3, r4
 8009c62:	d9fa      	bls.n	8009c5a <_free_r+0x42>
 8009c64:	6811      	ldr	r1, [r2, #0]
 8009c66:	1850      	adds	r0, r2, r1
 8009c68:	42a0      	cmp	r0, r4
 8009c6a:	d10b      	bne.n	8009c84 <_free_r+0x6c>
 8009c6c:	6820      	ldr	r0, [r4, #0]
 8009c6e:	4401      	add	r1, r0
 8009c70:	1850      	adds	r0, r2, r1
 8009c72:	4283      	cmp	r3, r0
 8009c74:	6011      	str	r1, [r2, #0]
 8009c76:	d1e0      	bne.n	8009c3a <_free_r+0x22>
 8009c78:	6818      	ldr	r0, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	6053      	str	r3, [r2, #4]
 8009c7e:	4408      	add	r0, r1
 8009c80:	6010      	str	r0, [r2, #0]
 8009c82:	e7da      	b.n	8009c3a <_free_r+0x22>
 8009c84:	d902      	bls.n	8009c8c <_free_r+0x74>
 8009c86:	230c      	movs	r3, #12
 8009c88:	602b      	str	r3, [r5, #0]
 8009c8a:	e7d6      	b.n	8009c3a <_free_r+0x22>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	1821      	adds	r1, r4, r0
 8009c90:	428b      	cmp	r3, r1
 8009c92:	bf04      	itt	eq
 8009c94:	6819      	ldreq	r1, [r3, #0]
 8009c96:	685b      	ldreq	r3, [r3, #4]
 8009c98:	6063      	str	r3, [r4, #4]
 8009c9a:	bf04      	itt	eq
 8009c9c:	1809      	addeq	r1, r1, r0
 8009c9e:	6021      	streq	r1, [r4, #0]
 8009ca0:	6054      	str	r4, [r2, #4]
 8009ca2:	e7ca      	b.n	8009c3a <_free_r+0x22>
 8009ca4:	bd38      	pop	{r3, r4, r5, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20000cc8 	.word	0x20000cc8

08009cac <rshift>:
 8009cac:	6903      	ldr	r3, [r0, #16]
 8009cae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cba:	f100 0414 	add.w	r4, r0, #20
 8009cbe:	dd45      	ble.n	8009d4c <rshift+0xa0>
 8009cc0:	f011 011f 	ands.w	r1, r1, #31
 8009cc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ccc:	d10c      	bne.n	8009ce8 <rshift+0x3c>
 8009cce:	f100 0710 	add.w	r7, r0, #16
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	42b1      	cmp	r1, r6
 8009cd6:	d334      	bcc.n	8009d42 <rshift+0x96>
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	1eea      	subs	r2, r5, #3
 8009cde:	4296      	cmp	r6, r2
 8009ce0:	bf38      	it	cc
 8009ce2:	2300      	movcc	r3, #0
 8009ce4:	4423      	add	r3, r4
 8009ce6:	e015      	b.n	8009d14 <rshift+0x68>
 8009ce8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cec:	f1c1 0820 	rsb	r8, r1, #32
 8009cf0:	40cf      	lsrs	r7, r1
 8009cf2:	f105 0e04 	add.w	lr, r5, #4
 8009cf6:	46a1      	mov	r9, r4
 8009cf8:	4576      	cmp	r6, lr
 8009cfa:	46f4      	mov	ip, lr
 8009cfc:	d815      	bhi.n	8009d2a <rshift+0x7e>
 8009cfe:	1a9a      	subs	r2, r3, r2
 8009d00:	0092      	lsls	r2, r2, #2
 8009d02:	3a04      	subs	r2, #4
 8009d04:	3501      	adds	r5, #1
 8009d06:	42ae      	cmp	r6, r5
 8009d08:	bf38      	it	cc
 8009d0a:	2200      	movcc	r2, #0
 8009d0c:	18a3      	adds	r3, r4, r2
 8009d0e:	50a7      	str	r7, [r4, r2]
 8009d10:	b107      	cbz	r7, 8009d14 <rshift+0x68>
 8009d12:	3304      	adds	r3, #4
 8009d14:	1b1a      	subs	r2, r3, r4
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d1c:	bf08      	it	eq
 8009d1e:	2300      	moveq	r3, #0
 8009d20:	6102      	str	r2, [r0, #16]
 8009d22:	bf08      	it	eq
 8009d24:	6143      	streq	r3, [r0, #20]
 8009d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	f8dc c000 	ldr.w	ip, [ip]
 8009d2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d32:	ea4c 0707 	orr.w	r7, ip, r7
 8009d36:	f849 7b04 	str.w	r7, [r9], #4
 8009d3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d3e:	40cf      	lsrs	r7, r1
 8009d40:	e7da      	b.n	8009cf8 <rshift+0x4c>
 8009d42:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d46:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d4a:	e7c3      	b.n	8009cd4 <rshift+0x28>
 8009d4c:	4623      	mov	r3, r4
 8009d4e:	e7e1      	b.n	8009d14 <rshift+0x68>

08009d50 <__hexdig_fun>:
 8009d50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	d802      	bhi.n	8009d5e <__hexdig_fun+0xe>
 8009d58:	3820      	subs	r0, #32
 8009d5a:	b2c0      	uxtb	r0, r0
 8009d5c:	4770      	bx	lr
 8009d5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d62:	2b05      	cmp	r3, #5
 8009d64:	d801      	bhi.n	8009d6a <__hexdig_fun+0x1a>
 8009d66:	3847      	subs	r0, #71	@ 0x47
 8009d68:	e7f7      	b.n	8009d5a <__hexdig_fun+0xa>
 8009d6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d801      	bhi.n	8009d76 <__hexdig_fun+0x26>
 8009d72:	3827      	subs	r0, #39	@ 0x27
 8009d74:	e7f1      	b.n	8009d5a <__hexdig_fun+0xa>
 8009d76:	2000      	movs	r0, #0
 8009d78:	4770      	bx	lr
	...

08009d7c <__gethex>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	b085      	sub	sp, #20
 8009d82:	468a      	mov	sl, r1
 8009d84:	9302      	str	r3, [sp, #8]
 8009d86:	680b      	ldr	r3, [r1, #0]
 8009d88:	9001      	str	r0, [sp, #4]
 8009d8a:	4690      	mov	r8, r2
 8009d8c:	1c9c      	adds	r4, r3, #2
 8009d8e:	46a1      	mov	r9, r4
 8009d90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d94:	2830      	cmp	r0, #48	@ 0x30
 8009d96:	d0fa      	beq.n	8009d8e <__gethex+0x12>
 8009d98:	eba9 0303 	sub.w	r3, r9, r3
 8009d9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009da0:	f7ff ffd6 	bl	8009d50 <__hexdig_fun>
 8009da4:	4605      	mov	r5, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d168      	bne.n	8009e7c <__gethex+0x100>
 8009daa:	49a0      	ldr	r1, [pc, #640]	@ (800a02c <__gethex+0x2b0>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	4648      	mov	r0, r9
 8009db0:	f7ff fe69 	bl	8009a86 <strncmp>
 8009db4:	4607      	mov	r7, r0
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d167      	bne.n	8009e8a <__gethex+0x10e>
 8009dba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009dbe:	4626      	mov	r6, r4
 8009dc0:	f7ff ffc6 	bl	8009d50 <__hexdig_fun>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d062      	beq.n	8009e8e <__gethex+0x112>
 8009dc8:	4623      	mov	r3, r4
 8009dca:	7818      	ldrb	r0, [r3, #0]
 8009dcc:	2830      	cmp	r0, #48	@ 0x30
 8009dce:	4699      	mov	r9, r3
 8009dd0:	f103 0301 	add.w	r3, r3, #1
 8009dd4:	d0f9      	beq.n	8009dca <__gethex+0x4e>
 8009dd6:	f7ff ffbb 	bl	8009d50 <__hexdig_fun>
 8009dda:	fab0 f580 	clz	r5, r0
 8009dde:	096d      	lsrs	r5, r5, #5
 8009de0:	f04f 0b01 	mov.w	fp, #1
 8009de4:	464a      	mov	r2, r9
 8009de6:	4616      	mov	r6, r2
 8009de8:	3201      	adds	r2, #1
 8009dea:	7830      	ldrb	r0, [r6, #0]
 8009dec:	f7ff ffb0 	bl	8009d50 <__hexdig_fun>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d1f8      	bne.n	8009de6 <__gethex+0x6a>
 8009df4:	498d      	ldr	r1, [pc, #564]	@ (800a02c <__gethex+0x2b0>)
 8009df6:	2201      	movs	r2, #1
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff fe44 	bl	8009a86 <strncmp>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d13f      	bne.n	8009e82 <__gethex+0x106>
 8009e02:	b944      	cbnz	r4, 8009e16 <__gethex+0x9a>
 8009e04:	1c74      	adds	r4, r6, #1
 8009e06:	4622      	mov	r2, r4
 8009e08:	4616      	mov	r6, r2
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	7830      	ldrb	r0, [r6, #0]
 8009e0e:	f7ff ff9f 	bl	8009d50 <__hexdig_fun>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	d1f8      	bne.n	8009e08 <__gethex+0x8c>
 8009e16:	1ba4      	subs	r4, r4, r6
 8009e18:	00a7      	lsls	r7, r4, #2
 8009e1a:	7833      	ldrb	r3, [r6, #0]
 8009e1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e20:	2b50      	cmp	r3, #80	@ 0x50
 8009e22:	d13e      	bne.n	8009ea2 <__gethex+0x126>
 8009e24:	7873      	ldrb	r3, [r6, #1]
 8009e26:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e28:	d033      	beq.n	8009e92 <__gethex+0x116>
 8009e2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e2c:	d034      	beq.n	8009e98 <__gethex+0x11c>
 8009e2e:	1c71      	adds	r1, r6, #1
 8009e30:	2400      	movs	r4, #0
 8009e32:	7808      	ldrb	r0, [r1, #0]
 8009e34:	f7ff ff8c 	bl	8009d50 <__hexdig_fun>
 8009e38:	1e43      	subs	r3, r0, #1
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b18      	cmp	r3, #24
 8009e3e:	d830      	bhi.n	8009ea2 <__gethex+0x126>
 8009e40:	f1a0 0210 	sub.w	r2, r0, #16
 8009e44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e48:	f7ff ff82 	bl	8009d50 <__hexdig_fun>
 8009e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e50:	fa5f fc8c 	uxtb.w	ip, ip
 8009e54:	f1bc 0f18 	cmp.w	ip, #24
 8009e58:	f04f 030a 	mov.w	r3, #10
 8009e5c:	d91e      	bls.n	8009e9c <__gethex+0x120>
 8009e5e:	b104      	cbz	r4, 8009e62 <__gethex+0xe6>
 8009e60:	4252      	negs	r2, r2
 8009e62:	4417      	add	r7, r2
 8009e64:	f8ca 1000 	str.w	r1, [sl]
 8009e68:	b1ed      	cbz	r5, 8009ea6 <__gethex+0x12a>
 8009e6a:	f1bb 0f00 	cmp.w	fp, #0
 8009e6e:	bf0c      	ite	eq
 8009e70:	2506      	moveq	r5, #6
 8009e72:	2500      	movne	r5, #0
 8009e74:	4628      	mov	r0, r5
 8009e76:	b005      	add	sp, #20
 8009e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	462c      	mov	r4, r5
 8009e80:	e7b0      	b.n	8009de4 <__gethex+0x68>
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	d1c7      	bne.n	8009e16 <__gethex+0x9a>
 8009e86:	4627      	mov	r7, r4
 8009e88:	e7c7      	b.n	8009e1a <__gethex+0x9e>
 8009e8a:	464e      	mov	r6, r9
 8009e8c:	462f      	mov	r7, r5
 8009e8e:	2501      	movs	r5, #1
 8009e90:	e7c3      	b.n	8009e1a <__gethex+0x9e>
 8009e92:	2400      	movs	r4, #0
 8009e94:	1cb1      	adds	r1, r6, #2
 8009e96:	e7cc      	b.n	8009e32 <__gethex+0xb6>
 8009e98:	2401      	movs	r4, #1
 8009e9a:	e7fb      	b.n	8009e94 <__gethex+0x118>
 8009e9c:	fb03 0002 	mla	r0, r3, r2, r0
 8009ea0:	e7ce      	b.n	8009e40 <__gethex+0xc4>
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	e7de      	b.n	8009e64 <__gethex+0xe8>
 8009ea6:	eba6 0309 	sub.w	r3, r6, r9
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	4629      	mov	r1, r5
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	dc0a      	bgt.n	8009ec8 <__gethex+0x14c>
 8009eb2:	9801      	ldr	r0, [sp, #4]
 8009eb4:	f000 fa46 	bl	800a344 <_Balloc>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	b940      	cbnz	r0, 8009ece <__gethex+0x152>
 8009ebc:	4b5c      	ldr	r3, [pc, #368]	@ (800a030 <__gethex+0x2b4>)
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	21e4      	movs	r1, #228	@ 0xe4
 8009ec2:	485c      	ldr	r0, [pc, #368]	@ (800a034 <__gethex+0x2b8>)
 8009ec4:	f001 faa6 	bl	800b414 <__assert_func>
 8009ec8:	3101      	adds	r1, #1
 8009eca:	105b      	asrs	r3, r3, #1
 8009ecc:	e7ef      	b.n	8009eae <__gethex+0x132>
 8009ece:	f100 0a14 	add.w	sl, r0, #20
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4655      	mov	r5, sl
 8009ed6:	469b      	mov	fp, r3
 8009ed8:	45b1      	cmp	r9, r6
 8009eda:	d337      	bcc.n	8009f4c <__gethex+0x1d0>
 8009edc:	f845 bb04 	str.w	fp, [r5], #4
 8009ee0:	eba5 050a 	sub.w	r5, r5, sl
 8009ee4:	10ad      	asrs	r5, r5, #2
 8009ee6:	6125      	str	r5, [r4, #16]
 8009ee8:	4658      	mov	r0, fp
 8009eea:	f000 fb1d 	bl	800a528 <__hi0bits>
 8009eee:	016d      	lsls	r5, r5, #5
 8009ef0:	f8d8 6000 	ldr.w	r6, [r8]
 8009ef4:	1a2d      	subs	r5, r5, r0
 8009ef6:	42b5      	cmp	r5, r6
 8009ef8:	dd54      	ble.n	8009fa4 <__gethex+0x228>
 8009efa:	1bad      	subs	r5, r5, r6
 8009efc:	4629      	mov	r1, r5
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fea9 	bl	800ac56 <__any_on>
 8009f04:	4681      	mov	r9, r0
 8009f06:	b178      	cbz	r0, 8009f28 <__gethex+0x1ac>
 8009f08:	1e6b      	subs	r3, r5, #1
 8009f0a:	1159      	asrs	r1, r3, #5
 8009f0c:	f003 021f 	and.w	r2, r3, #31
 8009f10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f14:	f04f 0901 	mov.w	r9, #1
 8009f18:	fa09 f202 	lsl.w	r2, r9, r2
 8009f1c:	420a      	tst	r2, r1
 8009f1e:	d003      	beq.n	8009f28 <__gethex+0x1ac>
 8009f20:	454b      	cmp	r3, r9
 8009f22:	dc36      	bgt.n	8009f92 <__gethex+0x216>
 8009f24:	f04f 0902 	mov.w	r9, #2
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f7ff febe 	bl	8009cac <rshift>
 8009f30:	442f      	add	r7, r5
 8009f32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f36:	42bb      	cmp	r3, r7
 8009f38:	da42      	bge.n	8009fc0 <__gethex+0x244>
 8009f3a:	9801      	ldr	r0, [sp, #4]
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	f000 fa41 	bl	800a3c4 <_Bfree>
 8009f42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f44:	2300      	movs	r3, #0
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	25a3      	movs	r5, #163	@ 0xa3
 8009f4a:	e793      	b.n	8009e74 <__gethex+0xf8>
 8009f4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f50:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f52:	d012      	beq.n	8009f7a <__gethex+0x1fe>
 8009f54:	2b20      	cmp	r3, #32
 8009f56:	d104      	bne.n	8009f62 <__gethex+0x1e6>
 8009f58:	f845 bb04 	str.w	fp, [r5], #4
 8009f5c:	f04f 0b00 	mov.w	fp, #0
 8009f60:	465b      	mov	r3, fp
 8009f62:	7830      	ldrb	r0, [r6, #0]
 8009f64:	9303      	str	r3, [sp, #12]
 8009f66:	f7ff fef3 	bl	8009d50 <__hexdig_fun>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	f000 000f 	and.w	r0, r0, #15
 8009f70:	4098      	lsls	r0, r3
 8009f72:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f76:	3304      	adds	r3, #4
 8009f78:	e7ae      	b.n	8009ed8 <__gethex+0x15c>
 8009f7a:	45b1      	cmp	r9, r6
 8009f7c:	d8ea      	bhi.n	8009f54 <__gethex+0x1d8>
 8009f7e:	492b      	ldr	r1, [pc, #172]	@ (800a02c <__gethex+0x2b0>)
 8009f80:	9303      	str	r3, [sp, #12]
 8009f82:	2201      	movs	r2, #1
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff fd7e 	bl	8009a86 <strncmp>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1e1      	bne.n	8009f54 <__gethex+0x1d8>
 8009f90:	e7a2      	b.n	8009ed8 <__gethex+0x15c>
 8009f92:	1ea9      	subs	r1, r5, #2
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fe5e 	bl	800ac56 <__any_on>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d0c2      	beq.n	8009f24 <__gethex+0x1a8>
 8009f9e:	f04f 0903 	mov.w	r9, #3
 8009fa2:	e7c1      	b.n	8009f28 <__gethex+0x1ac>
 8009fa4:	da09      	bge.n	8009fba <__gethex+0x23e>
 8009fa6:	1b75      	subs	r5, r6, r5
 8009fa8:	4621      	mov	r1, r4
 8009faa:	9801      	ldr	r0, [sp, #4]
 8009fac:	462a      	mov	r2, r5
 8009fae:	f000 fc19 	bl	800a7e4 <__lshift>
 8009fb2:	1b7f      	subs	r7, r7, r5
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	f100 0a14 	add.w	sl, r0, #20
 8009fba:	f04f 0900 	mov.w	r9, #0
 8009fbe:	e7b8      	b.n	8009f32 <__gethex+0x1b6>
 8009fc0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fc4:	42bd      	cmp	r5, r7
 8009fc6:	dd6f      	ble.n	800a0a8 <__gethex+0x32c>
 8009fc8:	1bed      	subs	r5, r5, r7
 8009fca:	42ae      	cmp	r6, r5
 8009fcc:	dc34      	bgt.n	800a038 <__gethex+0x2bc>
 8009fce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d022      	beq.n	800a01c <__gethex+0x2a0>
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d024      	beq.n	800a024 <__gethex+0x2a8>
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d115      	bne.n	800a00a <__gethex+0x28e>
 8009fde:	42ae      	cmp	r6, r5
 8009fe0:	d113      	bne.n	800a00a <__gethex+0x28e>
 8009fe2:	2e01      	cmp	r6, #1
 8009fe4:	d10b      	bne.n	8009ffe <__gethex+0x282>
 8009fe6:	9a02      	ldr	r2, [sp, #8]
 8009fe8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	2301      	movs	r3, #1
 8009ff0:	6123      	str	r3, [r4, #16]
 8009ff2:	f8ca 3000 	str.w	r3, [sl]
 8009ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ff8:	2562      	movs	r5, #98	@ 0x62
 8009ffa:	601c      	str	r4, [r3, #0]
 8009ffc:	e73a      	b.n	8009e74 <__gethex+0xf8>
 8009ffe:	1e71      	subs	r1, r6, #1
 800a000:	4620      	mov	r0, r4
 800a002:	f000 fe28 	bl	800ac56 <__any_on>
 800a006:	2800      	cmp	r0, #0
 800a008:	d1ed      	bne.n	8009fe6 <__gethex+0x26a>
 800a00a:	9801      	ldr	r0, [sp, #4]
 800a00c:	4621      	mov	r1, r4
 800a00e:	f000 f9d9 	bl	800a3c4 <_Bfree>
 800a012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a014:	2300      	movs	r3, #0
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	2550      	movs	r5, #80	@ 0x50
 800a01a:	e72b      	b.n	8009e74 <__gethex+0xf8>
 800a01c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f3      	bne.n	800a00a <__gethex+0x28e>
 800a022:	e7e0      	b.n	8009fe6 <__gethex+0x26a>
 800a024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1dd      	bne.n	8009fe6 <__gethex+0x26a>
 800a02a:	e7ee      	b.n	800a00a <__gethex+0x28e>
 800a02c:	08033854 	.word	0x08033854
 800a030:	0803386a 	.word	0x0803386a
 800a034:	0803387b 	.word	0x0803387b
 800a038:	1e6f      	subs	r7, r5, #1
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	d130      	bne.n	800a0a2 <__gethex+0x326>
 800a040:	b127      	cbz	r7, 800a04c <__gethex+0x2d0>
 800a042:	4639      	mov	r1, r7
 800a044:	4620      	mov	r0, r4
 800a046:	f000 fe06 	bl	800ac56 <__any_on>
 800a04a:	4681      	mov	r9, r0
 800a04c:	117a      	asrs	r2, r7, #5
 800a04e:	2301      	movs	r3, #1
 800a050:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a054:	f007 071f 	and.w	r7, r7, #31
 800a058:	40bb      	lsls	r3, r7
 800a05a:	4213      	tst	r3, r2
 800a05c:	4629      	mov	r1, r5
 800a05e:	4620      	mov	r0, r4
 800a060:	bf18      	it	ne
 800a062:	f049 0902 	orrne.w	r9, r9, #2
 800a066:	f7ff fe21 	bl	8009cac <rshift>
 800a06a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a06e:	1b76      	subs	r6, r6, r5
 800a070:	2502      	movs	r5, #2
 800a072:	f1b9 0f00 	cmp.w	r9, #0
 800a076:	d047      	beq.n	800a108 <__gethex+0x38c>
 800a078:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d015      	beq.n	800a0ac <__gethex+0x330>
 800a080:	2b03      	cmp	r3, #3
 800a082:	d017      	beq.n	800a0b4 <__gethex+0x338>
 800a084:	2b01      	cmp	r3, #1
 800a086:	d109      	bne.n	800a09c <__gethex+0x320>
 800a088:	f019 0f02 	tst.w	r9, #2
 800a08c:	d006      	beq.n	800a09c <__gethex+0x320>
 800a08e:	f8da 3000 	ldr.w	r3, [sl]
 800a092:	ea49 0903 	orr.w	r9, r9, r3
 800a096:	f019 0f01 	tst.w	r9, #1
 800a09a:	d10e      	bne.n	800a0ba <__gethex+0x33e>
 800a09c:	f045 0510 	orr.w	r5, r5, #16
 800a0a0:	e032      	b.n	800a108 <__gethex+0x38c>
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	e7d1      	b.n	800a04c <__gethex+0x2d0>
 800a0a8:	2501      	movs	r5, #1
 800a0aa:	e7e2      	b.n	800a072 <__gethex+0x2f6>
 800a0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ae:	f1c3 0301 	rsb	r3, r3, #1
 800a0b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0f0      	beq.n	800a09c <__gethex+0x320>
 800a0ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0be:	f104 0314 	add.w	r3, r4, #20
 800a0c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0ca:	f04f 0c00 	mov.w	ip, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0d8:	d01b      	beq.n	800a112 <__gethex+0x396>
 800a0da:	3201      	adds	r2, #1
 800a0dc:	6002      	str	r2, [r0, #0]
 800a0de:	2d02      	cmp	r5, #2
 800a0e0:	f104 0314 	add.w	r3, r4, #20
 800a0e4:	d13c      	bne.n	800a160 <__gethex+0x3e4>
 800a0e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a0ea:	3a01      	subs	r2, #1
 800a0ec:	42b2      	cmp	r2, r6
 800a0ee:	d109      	bne.n	800a104 <__gethex+0x388>
 800a0f0:	1171      	asrs	r1, r6, #5
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0f8:	f006 061f 	and.w	r6, r6, #31
 800a0fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a100:	421e      	tst	r6, r3
 800a102:	d13a      	bne.n	800a17a <__gethex+0x3fe>
 800a104:	f045 0520 	orr.w	r5, r5, #32
 800a108:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a10a:	601c      	str	r4, [r3, #0]
 800a10c:	9b02      	ldr	r3, [sp, #8]
 800a10e:	601f      	str	r7, [r3, #0]
 800a110:	e6b0      	b.n	8009e74 <__gethex+0xf8>
 800a112:	4299      	cmp	r1, r3
 800a114:	f843 cc04 	str.w	ip, [r3, #-4]
 800a118:	d8d9      	bhi.n	800a0ce <__gethex+0x352>
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	459b      	cmp	fp, r3
 800a11e:	db17      	blt.n	800a150 <__gethex+0x3d4>
 800a120:	6861      	ldr	r1, [r4, #4]
 800a122:	9801      	ldr	r0, [sp, #4]
 800a124:	3101      	adds	r1, #1
 800a126:	f000 f90d 	bl	800a344 <_Balloc>
 800a12a:	4681      	mov	r9, r0
 800a12c:	b918      	cbnz	r0, 800a136 <__gethex+0x3ba>
 800a12e:	4b1a      	ldr	r3, [pc, #104]	@ (800a198 <__gethex+0x41c>)
 800a130:	4602      	mov	r2, r0
 800a132:	2184      	movs	r1, #132	@ 0x84
 800a134:	e6c5      	b.n	8009ec2 <__gethex+0x146>
 800a136:	6922      	ldr	r2, [r4, #16]
 800a138:	3202      	adds	r2, #2
 800a13a:	f104 010c 	add.w	r1, r4, #12
 800a13e:	0092      	lsls	r2, r2, #2
 800a140:	300c      	adds	r0, #12
 800a142:	f7ff fd50 	bl	8009be6 <memcpy>
 800a146:	4621      	mov	r1, r4
 800a148:	9801      	ldr	r0, [sp, #4]
 800a14a:	f000 f93b 	bl	800a3c4 <_Bfree>
 800a14e:	464c      	mov	r4, r9
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	1c5a      	adds	r2, r3, #1
 800a154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a158:	6122      	str	r2, [r4, #16]
 800a15a:	2201      	movs	r2, #1
 800a15c:	615a      	str	r2, [r3, #20]
 800a15e:	e7be      	b.n	800a0de <__gethex+0x362>
 800a160:	6922      	ldr	r2, [r4, #16]
 800a162:	455a      	cmp	r2, fp
 800a164:	dd0b      	ble.n	800a17e <__gethex+0x402>
 800a166:	2101      	movs	r1, #1
 800a168:	4620      	mov	r0, r4
 800a16a:	f7ff fd9f 	bl	8009cac <rshift>
 800a16e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a172:	3701      	adds	r7, #1
 800a174:	42bb      	cmp	r3, r7
 800a176:	f6ff aee0 	blt.w	8009f3a <__gethex+0x1be>
 800a17a:	2501      	movs	r5, #1
 800a17c:	e7c2      	b.n	800a104 <__gethex+0x388>
 800a17e:	f016 061f 	ands.w	r6, r6, #31
 800a182:	d0fa      	beq.n	800a17a <__gethex+0x3fe>
 800a184:	4453      	add	r3, sl
 800a186:	f1c6 0620 	rsb	r6, r6, #32
 800a18a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a18e:	f000 f9cb 	bl	800a528 <__hi0bits>
 800a192:	42b0      	cmp	r0, r6
 800a194:	dbe7      	blt.n	800a166 <__gethex+0x3ea>
 800a196:	e7f0      	b.n	800a17a <__gethex+0x3fe>
 800a198:	0803386a 	.word	0x0803386a

0800a19c <L_shift>:
 800a19c:	f1c2 0208 	rsb	r2, r2, #8
 800a1a0:	0092      	lsls	r2, r2, #2
 800a1a2:	b570      	push	{r4, r5, r6, lr}
 800a1a4:	f1c2 0620 	rsb	r6, r2, #32
 800a1a8:	6843      	ldr	r3, [r0, #4]
 800a1aa:	6804      	ldr	r4, [r0, #0]
 800a1ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a1b0:	432c      	orrs	r4, r5
 800a1b2:	40d3      	lsrs	r3, r2
 800a1b4:	6004      	str	r4, [r0, #0]
 800a1b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1ba:	4288      	cmp	r0, r1
 800a1bc:	d3f4      	bcc.n	800a1a8 <L_shift+0xc>
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <__match>:
 800a1c0:	b530      	push	{r4, r5, lr}
 800a1c2:	6803      	ldr	r3, [r0, #0]
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ca:	b914      	cbnz	r4, 800a1d2 <__match+0x12>
 800a1cc:	6003      	str	r3, [r0, #0]
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	bd30      	pop	{r4, r5, pc}
 800a1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1da:	2d19      	cmp	r5, #25
 800a1dc:	bf98      	it	ls
 800a1de:	3220      	addls	r2, #32
 800a1e0:	42a2      	cmp	r2, r4
 800a1e2:	d0f0      	beq.n	800a1c6 <__match+0x6>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e7f3      	b.n	800a1d0 <__match+0x10>

0800a1e8 <__hexnan>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	680b      	ldr	r3, [r1, #0]
 800a1ee:	6801      	ldr	r1, [r0, #0]
 800a1f0:	115e      	asrs	r6, r3, #5
 800a1f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1f6:	f013 031f 	ands.w	r3, r3, #31
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	bf18      	it	ne
 800a1fe:	3604      	addne	r6, #4
 800a200:	2500      	movs	r5, #0
 800a202:	1f37      	subs	r7, r6, #4
 800a204:	4682      	mov	sl, r0
 800a206:	4690      	mov	r8, r2
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a20e:	46b9      	mov	r9, r7
 800a210:	463c      	mov	r4, r7
 800a212:	9502      	str	r5, [sp, #8]
 800a214:	46ab      	mov	fp, r5
 800a216:	784a      	ldrb	r2, [r1, #1]
 800a218:	1c4b      	adds	r3, r1, #1
 800a21a:	9303      	str	r3, [sp, #12]
 800a21c:	b342      	cbz	r2, 800a270 <__hexnan+0x88>
 800a21e:	4610      	mov	r0, r2
 800a220:	9105      	str	r1, [sp, #20]
 800a222:	9204      	str	r2, [sp, #16]
 800a224:	f7ff fd94 	bl	8009d50 <__hexdig_fun>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d151      	bne.n	800a2d0 <__hexnan+0xe8>
 800a22c:	9a04      	ldr	r2, [sp, #16]
 800a22e:	9905      	ldr	r1, [sp, #20]
 800a230:	2a20      	cmp	r2, #32
 800a232:	d818      	bhi.n	800a266 <__hexnan+0x7e>
 800a234:	9b02      	ldr	r3, [sp, #8]
 800a236:	459b      	cmp	fp, r3
 800a238:	dd13      	ble.n	800a262 <__hexnan+0x7a>
 800a23a:	454c      	cmp	r4, r9
 800a23c:	d206      	bcs.n	800a24c <__hexnan+0x64>
 800a23e:	2d07      	cmp	r5, #7
 800a240:	dc04      	bgt.n	800a24c <__hexnan+0x64>
 800a242:	462a      	mov	r2, r5
 800a244:	4649      	mov	r1, r9
 800a246:	4620      	mov	r0, r4
 800a248:	f7ff ffa8 	bl	800a19c <L_shift>
 800a24c:	4544      	cmp	r4, r8
 800a24e:	d952      	bls.n	800a2f6 <__hexnan+0x10e>
 800a250:	2300      	movs	r3, #0
 800a252:	f1a4 0904 	sub.w	r9, r4, #4
 800a256:	f844 3c04 	str.w	r3, [r4, #-4]
 800a25a:	f8cd b008 	str.w	fp, [sp, #8]
 800a25e:	464c      	mov	r4, r9
 800a260:	461d      	mov	r5, r3
 800a262:	9903      	ldr	r1, [sp, #12]
 800a264:	e7d7      	b.n	800a216 <__hexnan+0x2e>
 800a266:	2a29      	cmp	r2, #41	@ 0x29
 800a268:	d157      	bne.n	800a31a <__hexnan+0x132>
 800a26a:	3102      	adds	r1, #2
 800a26c:	f8ca 1000 	str.w	r1, [sl]
 800a270:	f1bb 0f00 	cmp.w	fp, #0
 800a274:	d051      	beq.n	800a31a <__hexnan+0x132>
 800a276:	454c      	cmp	r4, r9
 800a278:	d206      	bcs.n	800a288 <__hexnan+0xa0>
 800a27a:	2d07      	cmp	r5, #7
 800a27c:	dc04      	bgt.n	800a288 <__hexnan+0xa0>
 800a27e:	462a      	mov	r2, r5
 800a280:	4649      	mov	r1, r9
 800a282:	4620      	mov	r0, r4
 800a284:	f7ff ff8a 	bl	800a19c <L_shift>
 800a288:	4544      	cmp	r4, r8
 800a28a:	d936      	bls.n	800a2fa <__hexnan+0x112>
 800a28c:	f1a8 0204 	sub.w	r2, r8, #4
 800a290:	4623      	mov	r3, r4
 800a292:	f853 1b04 	ldr.w	r1, [r3], #4
 800a296:	f842 1f04 	str.w	r1, [r2, #4]!
 800a29a:	429f      	cmp	r7, r3
 800a29c:	d2f9      	bcs.n	800a292 <__hexnan+0xaa>
 800a29e:	1b3b      	subs	r3, r7, r4
 800a2a0:	f023 0303 	bic.w	r3, r3, #3
 800a2a4:	3304      	adds	r3, #4
 800a2a6:	3401      	adds	r4, #1
 800a2a8:	3e03      	subs	r6, #3
 800a2aa:	42b4      	cmp	r4, r6
 800a2ac:	bf88      	it	hi
 800a2ae:	2304      	movhi	r3, #4
 800a2b0:	4443      	add	r3, r8
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f843 2b04 	str.w	r2, [r3], #4
 800a2b8:	429f      	cmp	r7, r3
 800a2ba:	d2fb      	bcs.n	800a2b4 <__hexnan+0xcc>
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	b91b      	cbnz	r3, 800a2c8 <__hexnan+0xe0>
 800a2c0:	4547      	cmp	r7, r8
 800a2c2:	d128      	bne.n	800a316 <__hexnan+0x12e>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	2005      	movs	r0, #5
 800a2ca:	b007      	add	sp, #28
 800a2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	2d08      	cmp	r5, #8
 800a2d4:	f10b 0b01 	add.w	fp, fp, #1
 800a2d8:	dd06      	ble.n	800a2e8 <__hexnan+0x100>
 800a2da:	4544      	cmp	r4, r8
 800a2dc:	d9c1      	bls.n	800a262 <__hexnan+0x7a>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2e4:	2501      	movs	r5, #1
 800a2e6:	3c04      	subs	r4, #4
 800a2e8:	6822      	ldr	r2, [r4, #0]
 800a2ea:	f000 000f 	and.w	r0, r0, #15
 800a2ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2f2:	6020      	str	r0, [r4, #0]
 800a2f4:	e7b5      	b.n	800a262 <__hexnan+0x7a>
 800a2f6:	2508      	movs	r5, #8
 800a2f8:	e7b3      	b.n	800a262 <__hexnan+0x7a>
 800a2fa:	9b01      	ldr	r3, [sp, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0dd      	beq.n	800a2bc <__hexnan+0xd4>
 800a300:	f1c3 0320 	rsb	r3, r3, #32
 800a304:	f04f 32ff 	mov.w	r2, #4294967295
 800a308:	40da      	lsrs	r2, r3
 800a30a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a30e:	4013      	ands	r3, r2
 800a310:	f846 3c04 	str.w	r3, [r6, #-4]
 800a314:	e7d2      	b.n	800a2bc <__hexnan+0xd4>
 800a316:	3f04      	subs	r7, #4
 800a318:	e7d0      	b.n	800a2bc <__hexnan+0xd4>
 800a31a:	2004      	movs	r0, #4
 800a31c:	e7d5      	b.n	800a2ca <__hexnan+0xe2>

0800a31e <__ascii_mbtowc>:
 800a31e:	b082      	sub	sp, #8
 800a320:	b901      	cbnz	r1, 800a324 <__ascii_mbtowc+0x6>
 800a322:	a901      	add	r1, sp, #4
 800a324:	b142      	cbz	r2, 800a338 <__ascii_mbtowc+0x1a>
 800a326:	b14b      	cbz	r3, 800a33c <__ascii_mbtowc+0x1e>
 800a328:	7813      	ldrb	r3, [r2, #0]
 800a32a:	600b      	str	r3, [r1, #0]
 800a32c:	7812      	ldrb	r2, [r2, #0]
 800a32e:	1e10      	subs	r0, r2, #0
 800a330:	bf18      	it	ne
 800a332:	2001      	movne	r0, #1
 800a334:	b002      	add	sp, #8
 800a336:	4770      	bx	lr
 800a338:	4610      	mov	r0, r2
 800a33a:	e7fb      	b.n	800a334 <__ascii_mbtowc+0x16>
 800a33c:	f06f 0001 	mvn.w	r0, #1
 800a340:	e7f8      	b.n	800a334 <__ascii_mbtowc+0x16>
	...

0800a344 <_Balloc>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	69c6      	ldr	r6, [r0, #28]
 800a348:	4604      	mov	r4, r0
 800a34a:	460d      	mov	r5, r1
 800a34c:	b976      	cbnz	r6, 800a36c <_Balloc+0x28>
 800a34e:	2010      	movs	r0, #16
 800a350:	f7fe fb2c 	bl	80089ac <malloc>
 800a354:	4602      	mov	r2, r0
 800a356:	61e0      	str	r0, [r4, #28]
 800a358:	b920      	cbnz	r0, 800a364 <_Balloc+0x20>
 800a35a:	4b18      	ldr	r3, [pc, #96]	@ (800a3bc <_Balloc+0x78>)
 800a35c:	4818      	ldr	r0, [pc, #96]	@ (800a3c0 <_Balloc+0x7c>)
 800a35e:	216b      	movs	r1, #107	@ 0x6b
 800a360:	f001 f858 	bl	800b414 <__assert_func>
 800a364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a368:	6006      	str	r6, [r0, #0]
 800a36a:	60c6      	str	r6, [r0, #12]
 800a36c:	69e6      	ldr	r6, [r4, #28]
 800a36e:	68f3      	ldr	r3, [r6, #12]
 800a370:	b183      	cbz	r3, 800a394 <_Balloc+0x50>
 800a372:	69e3      	ldr	r3, [r4, #28]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a37a:	b9b8      	cbnz	r0, 800a3ac <_Balloc+0x68>
 800a37c:	2101      	movs	r1, #1
 800a37e:	fa01 f605 	lsl.w	r6, r1, r5
 800a382:	1d72      	adds	r2, r6, #5
 800a384:	0092      	lsls	r2, r2, #2
 800a386:	4620      	mov	r0, r4
 800a388:	f001 f862 	bl	800b450 <_calloc_r>
 800a38c:	b160      	cbz	r0, 800a3a8 <_Balloc+0x64>
 800a38e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a392:	e00e      	b.n	800a3b2 <_Balloc+0x6e>
 800a394:	2221      	movs	r2, #33	@ 0x21
 800a396:	2104      	movs	r1, #4
 800a398:	4620      	mov	r0, r4
 800a39a:	f001 f859 	bl	800b450 <_calloc_r>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	60f0      	str	r0, [r6, #12]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1e4      	bne.n	800a372 <_Balloc+0x2e>
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	bd70      	pop	{r4, r5, r6, pc}
 800a3ac:	6802      	ldr	r2, [r0, #0]
 800a3ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3b8:	e7f7      	b.n	800a3aa <_Balloc+0x66>
 800a3ba:	bf00      	nop
 800a3bc:	080338db 	.word	0x080338db
 800a3c0:	080338f2 	.word	0x080338f2

0800a3c4 <_Bfree>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	69c6      	ldr	r6, [r0, #28]
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	b976      	cbnz	r6, 800a3ec <_Bfree+0x28>
 800a3ce:	2010      	movs	r0, #16
 800a3d0:	f7fe faec 	bl	80089ac <malloc>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	61e8      	str	r0, [r5, #28]
 800a3d8:	b920      	cbnz	r0, 800a3e4 <_Bfree+0x20>
 800a3da:	4b09      	ldr	r3, [pc, #36]	@ (800a400 <_Bfree+0x3c>)
 800a3dc:	4809      	ldr	r0, [pc, #36]	@ (800a404 <_Bfree+0x40>)
 800a3de:	218f      	movs	r1, #143	@ 0x8f
 800a3e0:	f001 f818 	bl	800b414 <__assert_func>
 800a3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3e8:	6006      	str	r6, [r0, #0]
 800a3ea:	60c6      	str	r6, [r0, #12]
 800a3ec:	b13c      	cbz	r4, 800a3fe <_Bfree+0x3a>
 800a3ee:	69eb      	ldr	r3, [r5, #28]
 800a3f0:	6862      	ldr	r2, [r4, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a3f8:	6021      	str	r1, [r4, #0]
 800a3fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	080338db 	.word	0x080338db
 800a404:	080338f2 	.word	0x080338f2

0800a408 <__multadd>:
 800a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40c:	690d      	ldr	r5, [r1, #16]
 800a40e:	4607      	mov	r7, r0
 800a410:	460c      	mov	r4, r1
 800a412:	461e      	mov	r6, r3
 800a414:	f101 0c14 	add.w	ip, r1, #20
 800a418:	2000      	movs	r0, #0
 800a41a:	f8dc 3000 	ldr.w	r3, [ip]
 800a41e:	b299      	uxth	r1, r3
 800a420:	fb02 6101 	mla	r1, r2, r1, r6
 800a424:	0c1e      	lsrs	r6, r3, #16
 800a426:	0c0b      	lsrs	r3, r1, #16
 800a428:	fb02 3306 	mla	r3, r2, r6, r3
 800a42c:	b289      	uxth	r1, r1
 800a42e:	3001      	adds	r0, #1
 800a430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a434:	4285      	cmp	r5, r0
 800a436:	f84c 1b04 	str.w	r1, [ip], #4
 800a43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a43e:	dcec      	bgt.n	800a41a <__multadd+0x12>
 800a440:	b30e      	cbz	r6, 800a486 <__multadd+0x7e>
 800a442:	68a3      	ldr	r3, [r4, #8]
 800a444:	42ab      	cmp	r3, r5
 800a446:	dc19      	bgt.n	800a47c <__multadd+0x74>
 800a448:	6861      	ldr	r1, [r4, #4]
 800a44a:	4638      	mov	r0, r7
 800a44c:	3101      	adds	r1, #1
 800a44e:	f7ff ff79 	bl	800a344 <_Balloc>
 800a452:	4680      	mov	r8, r0
 800a454:	b928      	cbnz	r0, 800a462 <__multadd+0x5a>
 800a456:	4602      	mov	r2, r0
 800a458:	4b0c      	ldr	r3, [pc, #48]	@ (800a48c <__multadd+0x84>)
 800a45a:	480d      	ldr	r0, [pc, #52]	@ (800a490 <__multadd+0x88>)
 800a45c:	21ba      	movs	r1, #186	@ 0xba
 800a45e:	f000 ffd9 	bl	800b414 <__assert_func>
 800a462:	6922      	ldr	r2, [r4, #16]
 800a464:	3202      	adds	r2, #2
 800a466:	f104 010c 	add.w	r1, r4, #12
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	300c      	adds	r0, #12
 800a46e:	f7ff fbba 	bl	8009be6 <memcpy>
 800a472:	4621      	mov	r1, r4
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ffa5 	bl	800a3c4 <_Bfree>
 800a47a:	4644      	mov	r4, r8
 800a47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a480:	3501      	adds	r5, #1
 800a482:	615e      	str	r6, [r3, #20]
 800a484:	6125      	str	r5, [r4, #16]
 800a486:	4620      	mov	r0, r4
 800a488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48c:	0803386a 	.word	0x0803386a
 800a490:	080338f2 	.word	0x080338f2

0800a494 <__s2b>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	460c      	mov	r4, r1
 800a49a:	4615      	mov	r5, r2
 800a49c:	461f      	mov	r7, r3
 800a49e:	2209      	movs	r2, #9
 800a4a0:	3308      	adds	r3, #8
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	db09      	blt.n	800a4c4 <__s2b+0x30>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7ff ff47 	bl	800a344 <_Balloc>
 800a4b6:	b940      	cbnz	r0, 800a4ca <__s2b+0x36>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	4b19      	ldr	r3, [pc, #100]	@ (800a520 <__s2b+0x8c>)
 800a4bc:	4819      	ldr	r0, [pc, #100]	@ (800a524 <__s2b+0x90>)
 800a4be:	21d3      	movs	r1, #211	@ 0xd3
 800a4c0:	f000 ffa8 	bl	800b414 <__assert_func>
 800a4c4:	0052      	lsls	r2, r2, #1
 800a4c6:	3101      	adds	r1, #1
 800a4c8:	e7f0      	b.n	800a4ac <__s2b+0x18>
 800a4ca:	9b08      	ldr	r3, [sp, #32]
 800a4cc:	6143      	str	r3, [r0, #20]
 800a4ce:	2d09      	cmp	r5, #9
 800a4d0:	f04f 0301 	mov.w	r3, #1
 800a4d4:	6103      	str	r3, [r0, #16]
 800a4d6:	dd16      	ble.n	800a506 <__s2b+0x72>
 800a4d8:	f104 0909 	add.w	r9, r4, #9
 800a4dc:	46c8      	mov	r8, r9
 800a4de:	442c      	add	r4, r5
 800a4e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4e4:	4601      	mov	r1, r0
 800a4e6:	3b30      	subs	r3, #48	@ 0x30
 800a4e8:	220a      	movs	r2, #10
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f7ff ff8c 	bl	800a408 <__multadd>
 800a4f0:	45a0      	cmp	r8, r4
 800a4f2:	d1f5      	bne.n	800a4e0 <__s2b+0x4c>
 800a4f4:	f1a5 0408 	sub.w	r4, r5, #8
 800a4f8:	444c      	add	r4, r9
 800a4fa:	1b2d      	subs	r5, r5, r4
 800a4fc:	1963      	adds	r3, r4, r5
 800a4fe:	42bb      	cmp	r3, r7
 800a500:	db04      	blt.n	800a50c <__s2b+0x78>
 800a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a506:	340a      	adds	r4, #10
 800a508:	2509      	movs	r5, #9
 800a50a:	e7f6      	b.n	800a4fa <__s2b+0x66>
 800a50c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a510:	4601      	mov	r1, r0
 800a512:	3b30      	subs	r3, #48	@ 0x30
 800a514:	220a      	movs	r2, #10
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ff76 	bl	800a408 <__multadd>
 800a51c:	e7ee      	b.n	800a4fc <__s2b+0x68>
 800a51e:	bf00      	nop
 800a520:	0803386a 	.word	0x0803386a
 800a524:	080338f2 	.word	0x080338f2

0800a528 <__hi0bits>:
 800a528:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a52c:	4603      	mov	r3, r0
 800a52e:	bf36      	itet	cc
 800a530:	0403      	lslcc	r3, r0, #16
 800a532:	2000      	movcs	r0, #0
 800a534:	2010      	movcc	r0, #16
 800a536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a53a:	bf3c      	itt	cc
 800a53c:	021b      	lslcc	r3, r3, #8
 800a53e:	3008      	addcc	r0, #8
 800a540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a544:	bf3c      	itt	cc
 800a546:	011b      	lslcc	r3, r3, #4
 800a548:	3004      	addcc	r0, #4
 800a54a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a54e:	bf3c      	itt	cc
 800a550:	009b      	lslcc	r3, r3, #2
 800a552:	3002      	addcc	r0, #2
 800a554:	2b00      	cmp	r3, #0
 800a556:	db05      	blt.n	800a564 <__hi0bits+0x3c>
 800a558:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a55c:	f100 0001 	add.w	r0, r0, #1
 800a560:	bf08      	it	eq
 800a562:	2020      	moveq	r0, #32
 800a564:	4770      	bx	lr

0800a566 <__lo0bits>:
 800a566:	6803      	ldr	r3, [r0, #0]
 800a568:	4602      	mov	r2, r0
 800a56a:	f013 0007 	ands.w	r0, r3, #7
 800a56e:	d00b      	beq.n	800a588 <__lo0bits+0x22>
 800a570:	07d9      	lsls	r1, r3, #31
 800a572:	d421      	bmi.n	800a5b8 <__lo0bits+0x52>
 800a574:	0798      	lsls	r0, r3, #30
 800a576:	bf49      	itett	mi
 800a578:	085b      	lsrmi	r3, r3, #1
 800a57a:	089b      	lsrpl	r3, r3, #2
 800a57c:	2001      	movmi	r0, #1
 800a57e:	6013      	strmi	r3, [r2, #0]
 800a580:	bf5c      	itt	pl
 800a582:	6013      	strpl	r3, [r2, #0]
 800a584:	2002      	movpl	r0, #2
 800a586:	4770      	bx	lr
 800a588:	b299      	uxth	r1, r3
 800a58a:	b909      	cbnz	r1, 800a590 <__lo0bits+0x2a>
 800a58c:	0c1b      	lsrs	r3, r3, #16
 800a58e:	2010      	movs	r0, #16
 800a590:	b2d9      	uxtb	r1, r3
 800a592:	b909      	cbnz	r1, 800a598 <__lo0bits+0x32>
 800a594:	3008      	adds	r0, #8
 800a596:	0a1b      	lsrs	r3, r3, #8
 800a598:	0719      	lsls	r1, r3, #28
 800a59a:	bf04      	itt	eq
 800a59c:	091b      	lsreq	r3, r3, #4
 800a59e:	3004      	addeq	r0, #4
 800a5a0:	0799      	lsls	r1, r3, #30
 800a5a2:	bf04      	itt	eq
 800a5a4:	089b      	lsreq	r3, r3, #2
 800a5a6:	3002      	addeq	r0, #2
 800a5a8:	07d9      	lsls	r1, r3, #31
 800a5aa:	d403      	bmi.n	800a5b4 <__lo0bits+0x4e>
 800a5ac:	085b      	lsrs	r3, r3, #1
 800a5ae:	f100 0001 	add.w	r0, r0, #1
 800a5b2:	d003      	beq.n	800a5bc <__lo0bits+0x56>
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	4770      	bx	lr
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	4770      	bx	lr
 800a5bc:	2020      	movs	r0, #32
 800a5be:	4770      	bx	lr

0800a5c0 <__i2b>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	f7ff febd 	bl	800a344 <_Balloc>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	b928      	cbnz	r0, 800a5da <__i2b+0x1a>
 800a5ce:	4b05      	ldr	r3, [pc, #20]	@ (800a5e4 <__i2b+0x24>)
 800a5d0:	4805      	ldr	r0, [pc, #20]	@ (800a5e8 <__i2b+0x28>)
 800a5d2:	f240 1145 	movw	r1, #325	@ 0x145
 800a5d6:	f000 ff1d 	bl	800b414 <__assert_func>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	6144      	str	r4, [r0, #20]
 800a5de:	6103      	str	r3, [r0, #16]
 800a5e0:	bd10      	pop	{r4, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0803386a 	.word	0x0803386a
 800a5e8:	080338f2 	.word	0x080338f2

0800a5ec <__multiply>:
 800a5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f0:	4617      	mov	r7, r2
 800a5f2:	690a      	ldr	r2, [r1, #16]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	bfa8      	it	ge
 800a5fa:	463b      	movge	r3, r7
 800a5fc:	4689      	mov	r9, r1
 800a5fe:	bfa4      	itt	ge
 800a600:	460f      	movge	r7, r1
 800a602:	4699      	movge	r9, r3
 800a604:	693d      	ldr	r5, [r7, #16]
 800a606:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	eb05 060a 	add.w	r6, r5, sl
 800a612:	42b3      	cmp	r3, r6
 800a614:	b085      	sub	sp, #20
 800a616:	bfb8      	it	lt
 800a618:	3101      	addlt	r1, #1
 800a61a:	f7ff fe93 	bl	800a344 <_Balloc>
 800a61e:	b930      	cbnz	r0, 800a62e <__multiply+0x42>
 800a620:	4602      	mov	r2, r0
 800a622:	4b41      	ldr	r3, [pc, #260]	@ (800a728 <__multiply+0x13c>)
 800a624:	4841      	ldr	r0, [pc, #260]	@ (800a72c <__multiply+0x140>)
 800a626:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a62a:	f000 fef3 	bl	800b414 <__assert_func>
 800a62e:	f100 0414 	add.w	r4, r0, #20
 800a632:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a636:	4623      	mov	r3, r4
 800a638:	2200      	movs	r2, #0
 800a63a:	4573      	cmp	r3, lr
 800a63c:	d320      	bcc.n	800a680 <__multiply+0x94>
 800a63e:	f107 0814 	add.w	r8, r7, #20
 800a642:	f109 0114 	add.w	r1, r9, #20
 800a646:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a64a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	1beb      	subs	r3, r5, r7
 800a652:	3b15      	subs	r3, #21
 800a654:	f023 0303 	bic.w	r3, r3, #3
 800a658:	3304      	adds	r3, #4
 800a65a:	3715      	adds	r7, #21
 800a65c:	42bd      	cmp	r5, r7
 800a65e:	bf38      	it	cc
 800a660:	2304      	movcc	r3, #4
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	9103      	str	r1, [sp, #12]
 800a668:	428b      	cmp	r3, r1
 800a66a:	d80c      	bhi.n	800a686 <__multiply+0x9a>
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	dd03      	ble.n	800a678 <__multiply+0x8c>
 800a670:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a674:	2b00      	cmp	r3, #0
 800a676:	d055      	beq.n	800a724 <__multiply+0x138>
 800a678:	6106      	str	r6, [r0, #16]
 800a67a:	b005      	add	sp, #20
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	f843 2b04 	str.w	r2, [r3], #4
 800a684:	e7d9      	b.n	800a63a <__multiply+0x4e>
 800a686:	f8b1 a000 	ldrh.w	sl, [r1]
 800a68a:	f1ba 0f00 	cmp.w	sl, #0
 800a68e:	d01f      	beq.n	800a6d0 <__multiply+0xe4>
 800a690:	46c4      	mov	ip, r8
 800a692:	46a1      	mov	r9, r4
 800a694:	2700      	movs	r7, #0
 800a696:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a69a:	f8d9 3000 	ldr.w	r3, [r9]
 800a69e:	fa1f fb82 	uxth.w	fp, r2
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6a8:	443b      	add	r3, r7
 800a6aa:	f8d9 7000 	ldr.w	r7, [r9]
 800a6ae:	0c12      	lsrs	r2, r2, #16
 800a6b0:	0c3f      	lsrs	r7, r7, #16
 800a6b2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a6b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c0:	4565      	cmp	r5, ip
 800a6c2:	f849 3b04 	str.w	r3, [r9], #4
 800a6c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6ca:	d8e4      	bhi.n	800a696 <__multiply+0xaa>
 800a6cc:	9b01      	ldr	r3, [sp, #4]
 800a6ce:	50e7      	str	r7, [r4, r3]
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6d6:	3104      	adds	r1, #4
 800a6d8:	f1b9 0f00 	cmp.w	r9, #0
 800a6dc:	d020      	beq.n	800a720 <__multiply+0x134>
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	4647      	mov	r7, r8
 800a6e2:	46a4      	mov	ip, r4
 800a6e4:	f04f 0a00 	mov.w	sl, #0
 800a6e8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6f4:	4452      	add	r2, sl
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6fc:	f84c 3b04 	str.w	r3, [ip], #4
 800a700:	f857 3b04 	ldr.w	r3, [r7], #4
 800a704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a708:	f8bc 3000 	ldrh.w	r3, [ip]
 800a70c:	fb09 330a 	mla	r3, r9, sl, r3
 800a710:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a714:	42bd      	cmp	r5, r7
 800a716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a71a:	d8e5      	bhi.n	800a6e8 <__multiply+0xfc>
 800a71c:	9a01      	ldr	r2, [sp, #4]
 800a71e:	50a3      	str	r3, [r4, r2]
 800a720:	3404      	adds	r4, #4
 800a722:	e79f      	b.n	800a664 <__multiply+0x78>
 800a724:	3e01      	subs	r6, #1
 800a726:	e7a1      	b.n	800a66c <__multiply+0x80>
 800a728:	0803386a 	.word	0x0803386a
 800a72c:	080338f2 	.word	0x080338f2

0800a730 <__pow5mult>:
 800a730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a734:	4615      	mov	r5, r2
 800a736:	f012 0203 	ands.w	r2, r2, #3
 800a73a:	4607      	mov	r7, r0
 800a73c:	460e      	mov	r6, r1
 800a73e:	d007      	beq.n	800a750 <__pow5mult+0x20>
 800a740:	4c25      	ldr	r4, [pc, #148]	@ (800a7d8 <__pow5mult+0xa8>)
 800a742:	3a01      	subs	r2, #1
 800a744:	2300      	movs	r3, #0
 800a746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a74a:	f7ff fe5d 	bl	800a408 <__multadd>
 800a74e:	4606      	mov	r6, r0
 800a750:	10ad      	asrs	r5, r5, #2
 800a752:	d03d      	beq.n	800a7d0 <__pow5mult+0xa0>
 800a754:	69fc      	ldr	r4, [r7, #28]
 800a756:	b97c      	cbnz	r4, 800a778 <__pow5mult+0x48>
 800a758:	2010      	movs	r0, #16
 800a75a:	f7fe f927 	bl	80089ac <malloc>
 800a75e:	4602      	mov	r2, r0
 800a760:	61f8      	str	r0, [r7, #28]
 800a762:	b928      	cbnz	r0, 800a770 <__pow5mult+0x40>
 800a764:	4b1d      	ldr	r3, [pc, #116]	@ (800a7dc <__pow5mult+0xac>)
 800a766:	481e      	ldr	r0, [pc, #120]	@ (800a7e0 <__pow5mult+0xb0>)
 800a768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a76c:	f000 fe52 	bl	800b414 <__assert_func>
 800a770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a774:	6004      	str	r4, [r0, #0]
 800a776:	60c4      	str	r4, [r0, #12]
 800a778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a77c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a780:	b94c      	cbnz	r4, 800a796 <__pow5mult+0x66>
 800a782:	f240 2171 	movw	r1, #625	@ 0x271
 800a786:	4638      	mov	r0, r7
 800a788:	f7ff ff1a 	bl	800a5c0 <__i2b>
 800a78c:	2300      	movs	r3, #0
 800a78e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a792:	4604      	mov	r4, r0
 800a794:	6003      	str	r3, [r0, #0]
 800a796:	f04f 0900 	mov.w	r9, #0
 800a79a:	07eb      	lsls	r3, r5, #31
 800a79c:	d50a      	bpl.n	800a7b4 <__pow5mult+0x84>
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	f7ff ff22 	bl	800a5ec <__multiply>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f7ff fe09 	bl	800a3c4 <_Bfree>
 800a7b2:	4646      	mov	r6, r8
 800a7b4:	106d      	asrs	r5, r5, #1
 800a7b6:	d00b      	beq.n	800a7d0 <__pow5mult+0xa0>
 800a7b8:	6820      	ldr	r0, [r4, #0]
 800a7ba:	b938      	cbnz	r0, 800a7cc <__pow5mult+0x9c>
 800a7bc:	4622      	mov	r2, r4
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff ff13 	bl	800a5ec <__multiply>
 800a7c6:	6020      	str	r0, [r4, #0]
 800a7c8:	f8c0 9000 	str.w	r9, [r0]
 800a7cc:	4604      	mov	r4, r0
 800a7ce:	e7e4      	b.n	800a79a <__pow5mult+0x6a>
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d6:	bf00      	nop
 800a7d8:	08033b14 	.word	0x08033b14
 800a7dc:	080338db 	.word	0x080338db
 800a7e0:	080338f2 	.word	0x080338f2

0800a7e4 <__lshift>:
 800a7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	6849      	ldr	r1, [r1, #4]
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	4691      	mov	r9, r2
 800a7f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7fc:	f108 0601 	add.w	r6, r8, #1
 800a800:	42b3      	cmp	r3, r6
 800a802:	db0b      	blt.n	800a81c <__lshift+0x38>
 800a804:	4638      	mov	r0, r7
 800a806:	f7ff fd9d 	bl	800a344 <_Balloc>
 800a80a:	4605      	mov	r5, r0
 800a80c:	b948      	cbnz	r0, 800a822 <__lshift+0x3e>
 800a80e:	4602      	mov	r2, r0
 800a810:	4b28      	ldr	r3, [pc, #160]	@ (800a8b4 <__lshift+0xd0>)
 800a812:	4829      	ldr	r0, [pc, #164]	@ (800a8b8 <__lshift+0xd4>)
 800a814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a818:	f000 fdfc 	bl	800b414 <__assert_func>
 800a81c:	3101      	adds	r1, #1
 800a81e:	005b      	lsls	r3, r3, #1
 800a820:	e7ee      	b.n	800a800 <__lshift+0x1c>
 800a822:	2300      	movs	r3, #0
 800a824:	f100 0114 	add.w	r1, r0, #20
 800a828:	f100 0210 	add.w	r2, r0, #16
 800a82c:	4618      	mov	r0, r3
 800a82e:	4553      	cmp	r3, sl
 800a830:	db33      	blt.n	800a89a <__lshift+0xb6>
 800a832:	6920      	ldr	r0, [r4, #16]
 800a834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a838:	f104 0314 	add.w	r3, r4, #20
 800a83c:	f019 091f 	ands.w	r9, r9, #31
 800a840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a848:	d02b      	beq.n	800a8a2 <__lshift+0xbe>
 800a84a:	f1c9 0e20 	rsb	lr, r9, #32
 800a84e:	468a      	mov	sl, r1
 800a850:	2200      	movs	r2, #0
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	fa00 f009 	lsl.w	r0, r0, r9
 800a858:	4310      	orrs	r0, r2
 800a85a:	f84a 0b04 	str.w	r0, [sl], #4
 800a85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a862:	459c      	cmp	ip, r3
 800a864:	fa22 f20e 	lsr.w	r2, r2, lr
 800a868:	d8f3      	bhi.n	800a852 <__lshift+0x6e>
 800a86a:	ebac 0304 	sub.w	r3, ip, r4
 800a86e:	3b15      	subs	r3, #21
 800a870:	f023 0303 	bic.w	r3, r3, #3
 800a874:	3304      	adds	r3, #4
 800a876:	f104 0015 	add.w	r0, r4, #21
 800a87a:	4560      	cmp	r0, ip
 800a87c:	bf88      	it	hi
 800a87e:	2304      	movhi	r3, #4
 800a880:	50ca      	str	r2, [r1, r3]
 800a882:	b10a      	cbz	r2, 800a888 <__lshift+0xa4>
 800a884:	f108 0602 	add.w	r6, r8, #2
 800a888:	3e01      	subs	r6, #1
 800a88a:	4638      	mov	r0, r7
 800a88c:	612e      	str	r6, [r5, #16]
 800a88e:	4621      	mov	r1, r4
 800a890:	f7ff fd98 	bl	800a3c4 <_Bfree>
 800a894:	4628      	mov	r0, r5
 800a896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a89e:	3301      	adds	r3, #1
 800a8a0:	e7c5      	b.n	800a82e <__lshift+0x4a>
 800a8a2:	3904      	subs	r1, #4
 800a8a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8ac:	459c      	cmp	ip, r3
 800a8ae:	d8f9      	bhi.n	800a8a4 <__lshift+0xc0>
 800a8b0:	e7ea      	b.n	800a888 <__lshift+0xa4>
 800a8b2:	bf00      	nop
 800a8b4:	0803386a 	.word	0x0803386a
 800a8b8:	080338f2 	.word	0x080338f2

0800a8bc <__mcmp>:
 800a8bc:	690a      	ldr	r2, [r1, #16]
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6900      	ldr	r0, [r0, #16]
 800a8c2:	1a80      	subs	r0, r0, r2
 800a8c4:	b530      	push	{r4, r5, lr}
 800a8c6:	d10e      	bne.n	800a8e6 <__mcmp+0x2a>
 800a8c8:	3314      	adds	r3, #20
 800a8ca:	3114      	adds	r1, #20
 800a8cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8dc:	4295      	cmp	r5, r2
 800a8de:	d003      	beq.n	800a8e8 <__mcmp+0x2c>
 800a8e0:	d205      	bcs.n	800a8ee <__mcmp+0x32>
 800a8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e6:	bd30      	pop	{r4, r5, pc}
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	d3f3      	bcc.n	800a8d4 <__mcmp+0x18>
 800a8ec:	e7fb      	b.n	800a8e6 <__mcmp+0x2a>
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7f9      	b.n	800a8e6 <__mcmp+0x2a>
	...

0800a8f4 <__mdiff>:
 800a8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	4689      	mov	r9, r1
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4648      	mov	r0, r9
 800a900:	4614      	mov	r4, r2
 800a902:	f7ff ffdb 	bl	800a8bc <__mcmp>
 800a906:	1e05      	subs	r5, r0, #0
 800a908:	d112      	bne.n	800a930 <__mdiff+0x3c>
 800a90a:	4629      	mov	r1, r5
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff fd19 	bl	800a344 <_Balloc>
 800a912:	4602      	mov	r2, r0
 800a914:	b928      	cbnz	r0, 800a922 <__mdiff+0x2e>
 800a916:	4b3f      	ldr	r3, [pc, #252]	@ (800aa14 <__mdiff+0x120>)
 800a918:	f240 2137 	movw	r1, #567	@ 0x237
 800a91c:	483e      	ldr	r0, [pc, #248]	@ (800aa18 <__mdiff+0x124>)
 800a91e:	f000 fd79 	bl	800b414 <__assert_func>
 800a922:	2301      	movs	r3, #1
 800a924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a928:	4610      	mov	r0, r2
 800a92a:	b003      	add	sp, #12
 800a92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a930:	bfbc      	itt	lt
 800a932:	464b      	movlt	r3, r9
 800a934:	46a1      	movlt	r9, r4
 800a936:	4630      	mov	r0, r6
 800a938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a93c:	bfba      	itte	lt
 800a93e:	461c      	movlt	r4, r3
 800a940:	2501      	movlt	r5, #1
 800a942:	2500      	movge	r5, #0
 800a944:	f7ff fcfe 	bl	800a344 <_Balloc>
 800a948:	4602      	mov	r2, r0
 800a94a:	b918      	cbnz	r0, 800a954 <__mdiff+0x60>
 800a94c:	4b31      	ldr	r3, [pc, #196]	@ (800aa14 <__mdiff+0x120>)
 800a94e:	f240 2145 	movw	r1, #581	@ 0x245
 800a952:	e7e3      	b.n	800a91c <__mdiff+0x28>
 800a954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a958:	6926      	ldr	r6, [r4, #16]
 800a95a:	60c5      	str	r5, [r0, #12]
 800a95c:	f109 0310 	add.w	r3, r9, #16
 800a960:	f109 0514 	add.w	r5, r9, #20
 800a964:	f104 0e14 	add.w	lr, r4, #20
 800a968:	f100 0b14 	add.w	fp, r0, #20
 800a96c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	46d9      	mov	r9, fp
 800a978:	f04f 0c00 	mov.w	ip, #0
 800a97c:	9b01      	ldr	r3, [sp, #4]
 800a97e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a982:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	fa1f f38a 	uxth.w	r3, sl
 800a98c:	4619      	mov	r1, r3
 800a98e:	b283      	uxth	r3, r0
 800a990:	1acb      	subs	r3, r1, r3
 800a992:	0c00      	lsrs	r0, r0, #16
 800a994:	4463      	add	r3, ip
 800a996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a99a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9a4:	4576      	cmp	r6, lr
 800a9a6:	f849 3b04 	str.w	r3, [r9], #4
 800a9aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9ae:	d8e5      	bhi.n	800a97c <__mdiff+0x88>
 800a9b0:	1b33      	subs	r3, r6, r4
 800a9b2:	3b15      	subs	r3, #21
 800a9b4:	f023 0303 	bic.w	r3, r3, #3
 800a9b8:	3415      	adds	r4, #21
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	42a6      	cmp	r6, r4
 800a9be:	bf38      	it	cc
 800a9c0:	2304      	movcc	r3, #4
 800a9c2:	441d      	add	r5, r3
 800a9c4:	445b      	add	r3, fp
 800a9c6:	461e      	mov	r6, r3
 800a9c8:	462c      	mov	r4, r5
 800a9ca:	4544      	cmp	r4, r8
 800a9cc:	d30e      	bcc.n	800a9ec <__mdiff+0xf8>
 800a9ce:	f108 0103 	add.w	r1, r8, #3
 800a9d2:	1b49      	subs	r1, r1, r5
 800a9d4:	f021 0103 	bic.w	r1, r1, #3
 800a9d8:	3d03      	subs	r5, #3
 800a9da:	45a8      	cmp	r8, r5
 800a9dc:	bf38      	it	cc
 800a9de:	2100      	movcc	r1, #0
 800a9e0:	440b      	add	r3, r1
 800a9e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9e6:	b191      	cbz	r1, 800aa0e <__mdiff+0x11a>
 800a9e8:	6117      	str	r7, [r2, #16]
 800a9ea:	e79d      	b.n	800a928 <__mdiff+0x34>
 800a9ec:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9f0:	46e6      	mov	lr, ip
 800a9f2:	0c08      	lsrs	r0, r1, #16
 800a9f4:	fa1c fc81 	uxtah	ip, ip, r1
 800a9f8:	4471      	add	r1, lr
 800a9fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9fe:	b289      	uxth	r1, r1
 800aa00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa04:	f846 1b04 	str.w	r1, [r6], #4
 800aa08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa0c:	e7dd      	b.n	800a9ca <__mdiff+0xd6>
 800aa0e:	3f01      	subs	r7, #1
 800aa10:	e7e7      	b.n	800a9e2 <__mdiff+0xee>
 800aa12:	bf00      	nop
 800aa14:	0803386a 	.word	0x0803386a
 800aa18:	080338f2 	.word	0x080338f2

0800aa1c <__ulp>:
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	ed8d 0b00 	vstr	d0, [sp]
 800aa22:	9a01      	ldr	r2, [sp, #4]
 800aa24:	4b0f      	ldr	r3, [pc, #60]	@ (800aa64 <__ulp+0x48>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc08      	bgt.n	800aa42 <__ulp+0x26>
 800aa30:	425b      	negs	r3, r3
 800aa32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aa36:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa3a:	da04      	bge.n	800aa46 <__ulp+0x2a>
 800aa3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa40:	4113      	asrs	r3, r2
 800aa42:	2200      	movs	r2, #0
 800aa44:	e008      	b.n	800aa58 <__ulp+0x3c>
 800aa46:	f1a2 0314 	sub.w	r3, r2, #20
 800aa4a:	2b1e      	cmp	r3, #30
 800aa4c:	bfda      	itte	le
 800aa4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa52:	40da      	lsrle	r2, r3
 800aa54:	2201      	movgt	r2, #1
 800aa56:	2300      	movs	r3, #0
 800aa58:	4619      	mov	r1, r3
 800aa5a:	4610      	mov	r0, r2
 800aa5c:	ec41 0b10 	vmov	d0, r0, r1
 800aa60:	b002      	add	sp, #8
 800aa62:	4770      	bx	lr
 800aa64:	7ff00000 	.word	0x7ff00000

0800aa68 <__b2d>:
 800aa68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6c:	6906      	ldr	r6, [r0, #16]
 800aa6e:	f100 0814 	add.w	r8, r0, #20
 800aa72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa76:	1f37      	subs	r7, r6, #4
 800aa78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7ff fd53 	bl	800a528 <__hi0bits>
 800aa82:	f1c0 0320 	rsb	r3, r0, #32
 800aa86:	280a      	cmp	r0, #10
 800aa88:	600b      	str	r3, [r1, #0]
 800aa8a:	491b      	ldr	r1, [pc, #108]	@ (800aaf8 <__b2d+0x90>)
 800aa8c:	dc15      	bgt.n	800aaba <__b2d+0x52>
 800aa8e:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa92:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa96:	45b8      	cmp	r8, r7
 800aa98:	ea43 0501 	orr.w	r5, r3, r1
 800aa9c:	bf34      	ite	cc
 800aa9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aaa2:	2300      	movcs	r3, #0
 800aaa4:	3015      	adds	r0, #21
 800aaa6:	fa02 f000 	lsl.w	r0, r2, r0
 800aaaa:	fa23 f30c 	lsr.w	r3, r3, ip
 800aaae:	4303      	orrs	r3, r0
 800aab0:	461c      	mov	r4, r3
 800aab2:	ec45 4b10 	vmov	d0, r4, r5
 800aab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaba:	45b8      	cmp	r8, r7
 800aabc:	bf3a      	itte	cc
 800aabe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aac2:	f1a6 0708 	subcc.w	r7, r6, #8
 800aac6:	2300      	movcs	r3, #0
 800aac8:	380b      	subs	r0, #11
 800aaca:	d012      	beq.n	800aaf2 <__b2d+0x8a>
 800aacc:	f1c0 0120 	rsb	r1, r0, #32
 800aad0:	fa23 f401 	lsr.w	r4, r3, r1
 800aad4:	4082      	lsls	r2, r0
 800aad6:	4322      	orrs	r2, r4
 800aad8:	4547      	cmp	r7, r8
 800aada:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aade:	bf8c      	ite	hi
 800aae0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aae4:	2200      	movls	r2, #0
 800aae6:	4083      	lsls	r3, r0
 800aae8:	40ca      	lsrs	r2, r1
 800aaea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	e7de      	b.n	800aab0 <__b2d+0x48>
 800aaf2:	ea42 0501 	orr.w	r5, r2, r1
 800aaf6:	e7db      	b.n	800aab0 <__b2d+0x48>
 800aaf8:	3ff00000 	.word	0x3ff00000

0800aafc <__d2b>:
 800aafc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab00:	460f      	mov	r7, r1
 800ab02:	2101      	movs	r1, #1
 800ab04:	ec59 8b10 	vmov	r8, r9, d0
 800ab08:	4616      	mov	r6, r2
 800ab0a:	f7ff fc1b 	bl	800a344 <_Balloc>
 800ab0e:	4604      	mov	r4, r0
 800ab10:	b930      	cbnz	r0, 800ab20 <__d2b+0x24>
 800ab12:	4602      	mov	r2, r0
 800ab14:	4b23      	ldr	r3, [pc, #140]	@ (800aba4 <__d2b+0xa8>)
 800ab16:	4824      	ldr	r0, [pc, #144]	@ (800aba8 <__d2b+0xac>)
 800ab18:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab1c:	f000 fc7a 	bl	800b414 <__assert_func>
 800ab20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab28:	b10d      	cbz	r5, 800ab2e <__d2b+0x32>
 800ab2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab2e:	9301      	str	r3, [sp, #4]
 800ab30:	f1b8 0300 	subs.w	r3, r8, #0
 800ab34:	d023      	beq.n	800ab7e <__d2b+0x82>
 800ab36:	4668      	mov	r0, sp
 800ab38:	9300      	str	r3, [sp, #0]
 800ab3a:	f7ff fd14 	bl	800a566 <__lo0bits>
 800ab3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab42:	b1d0      	cbz	r0, 800ab7a <__d2b+0x7e>
 800ab44:	f1c0 0320 	rsb	r3, r0, #32
 800ab48:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4c:	430b      	orrs	r3, r1
 800ab4e:	40c2      	lsrs	r2, r0
 800ab50:	6163      	str	r3, [r4, #20]
 800ab52:	9201      	str	r2, [sp, #4]
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	61a3      	str	r3, [r4, #24]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	bf0c      	ite	eq
 800ab5c:	2201      	moveq	r2, #1
 800ab5e:	2202      	movne	r2, #2
 800ab60:	6122      	str	r2, [r4, #16]
 800ab62:	b1a5      	cbz	r5, 800ab8e <__d2b+0x92>
 800ab64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab68:	4405      	add	r5, r0
 800ab6a:	603d      	str	r5, [r7, #0]
 800ab6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab70:	6030      	str	r0, [r6, #0]
 800ab72:	4620      	mov	r0, r4
 800ab74:	b003      	add	sp, #12
 800ab76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab7a:	6161      	str	r1, [r4, #20]
 800ab7c:	e7ea      	b.n	800ab54 <__d2b+0x58>
 800ab7e:	a801      	add	r0, sp, #4
 800ab80:	f7ff fcf1 	bl	800a566 <__lo0bits>
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	6163      	str	r3, [r4, #20]
 800ab88:	3020      	adds	r0, #32
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	e7e8      	b.n	800ab60 <__d2b+0x64>
 800ab8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab96:	6038      	str	r0, [r7, #0]
 800ab98:	6918      	ldr	r0, [r3, #16]
 800ab9a:	f7ff fcc5 	bl	800a528 <__hi0bits>
 800ab9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aba2:	e7e5      	b.n	800ab70 <__d2b+0x74>
 800aba4:	0803386a 	.word	0x0803386a
 800aba8:	080338f2 	.word	0x080338f2

0800abac <__ratio>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	b085      	sub	sp, #20
 800abb2:	e9cd 1000 	strd	r1, r0, [sp]
 800abb6:	a902      	add	r1, sp, #8
 800abb8:	f7ff ff56 	bl	800aa68 <__b2d>
 800abbc:	9800      	ldr	r0, [sp, #0]
 800abbe:	a903      	add	r1, sp, #12
 800abc0:	ec55 4b10 	vmov	r4, r5, d0
 800abc4:	f7ff ff50 	bl	800aa68 <__b2d>
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	6919      	ldr	r1, [r3, #16]
 800abcc:	9b00      	ldr	r3, [sp, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
 800abd0:	1ac9      	subs	r1, r1, r3
 800abd2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800abd6:	1a9b      	subs	r3, r3, r2
 800abd8:	ec5b ab10 	vmov	sl, fp, d0
 800abdc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	bfce      	itee	gt
 800abe4:	462a      	movgt	r2, r5
 800abe6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800abea:	465a      	movle	r2, fp
 800abec:	462f      	mov	r7, r5
 800abee:	46d9      	mov	r9, fp
 800abf0:	bfcc      	ite	gt
 800abf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800abf6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800abfa:	464b      	mov	r3, r9
 800abfc:	4652      	mov	r2, sl
 800abfe:	4620      	mov	r0, r4
 800ac00:	4639      	mov	r1, r7
 800ac02:	f7f5 fe33 	bl	800086c <__aeabi_ddiv>
 800ac06:	ec41 0b10 	vmov	d0, r0, r1
 800ac0a:	b005      	add	sp, #20
 800ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac10 <__copybits>:
 800ac10:	3901      	subs	r1, #1
 800ac12:	b570      	push	{r4, r5, r6, lr}
 800ac14:	1149      	asrs	r1, r1, #5
 800ac16:	6914      	ldr	r4, [r2, #16]
 800ac18:	3101      	adds	r1, #1
 800ac1a:	f102 0314 	add.w	r3, r2, #20
 800ac1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac26:	1f05      	subs	r5, r0, #4
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d30c      	bcc.n	800ac46 <__copybits+0x36>
 800ac2c:	1aa3      	subs	r3, r4, r2
 800ac2e:	3b11      	subs	r3, #17
 800ac30:	f023 0303 	bic.w	r3, r3, #3
 800ac34:	3211      	adds	r2, #17
 800ac36:	42a2      	cmp	r2, r4
 800ac38:	bf88      	it	hi
 800ac3a:	2300      	movhi	r3, #0
 800ac3c:	4418      	add	r0, r3
 800ac3e:	2300      	movs	r3, #0
 800ac40:	4288      	cmp	r0, r1
 800ac42:	d305      	bcc.n	800ac50 <__copybits+0x40>
 800ac44:	bd70      	pop	{r4, r5, r6, pc}
 800ac46:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac4a:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac4e:	e7eb      	b.n	800ac28 <__copybits+0x18>
 800ac50:	f840 3b04 	str.w	r3, [r0], #4
 800ac54:	e7f4      	b.n	800ac40 <__copybits+0x30>

0800ac56 <__any_on>:
 800ac56:	f100 0214 	add.w	r2, r0, #20
 800ac5a:	6900      	ldr	r0, [r0, #16]
 800ac5c:	114b      	asrs	r3, r1, #5
 800ac5e:	4298      	cmp	r0, r3
 800ac60:	b510      	push	{r4, lr}
 800ac62:	db11      	blt.n	800ac88 <__any_on+0x32>
 800ac64:	dd0a      	ble.n	800ac7c <__any_on+0x26>
 800ac66:	f011 011f 	ands.w	r1, r1, #31
 800ac6a:	d007      	beq.n	800ac7c <__any_on+0x26>
 800ac6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac70:	fa24 f001 	lsr.w	r0, r4, r1
 800ac74:	fa00 f101 	lsl.w	r1, r0, r1
 800ac78:	428c      	cmp	r4, r1
 800ac7a:	d10b      	bne.n	800ac94 <__any_on+0x3e>
 800ac7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d803      	bhi.n	800ac8c <__any_on+0x36>
 800ac84:	2000      	movs	r0, #0
 800ac86:	bd10      	pop	{r4, pc}
 800ac88:	4603      	mov	r3, r0
 800ac8a:	e7f7      	b.n	800ac7c <__any_on+0x26>
 800ac8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac90:	2900      	cmp	r1, #0
 800ac92:	d0f5      	beq.n	800ac80 <__any_on+0x2a>
 800ac94:	2001      	movs	r0, #1
 800ac96:	e7f6      	b.n	800ac86 <__any_on+0x30>

0800ac98 <_malloc_usable_size_r>:
 800ac98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac9c:	1f18      	subs	r0, r3, #4
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	bfbc      	itt	lt
 800aca2:	580b      	ldrlt	r3, [r1, r0]
 800aca4:	18c0      	addlt	r0, r0, r3
 800aca6:	4770      	bx	lr

0800aca8 <__ascii_wctomb>:
 800aca8:	4603      	mov	r3, r0
 800acaa:	4608      	mov	r0, r1
 800acac:	b141      	cbz	r1, 800acc0 <__ascii_wctomb+0x18>
 800acae:	2aff      	cmp	r2, #255	@ 0xff
 800acb0:	d904      	bls.n	800acbc <__ascii_wctomb+0x14>
 800acb2:	228a      	movs	r2, #138	@ 0x8a
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	f04f 30ff 	mov.w	r0, #4294967295
 800acba:	4770      	bx	lr
 800acbc:	700a      	strb	r2, [r1, #0]
 800acbe:	2001      	movs	r0, #1
 800acc0:	4770      	bx	lr

0800acc2 <__ssputs_r>:
 800acc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc6:	688e      	ldr	r6, [r1, #8]
 800acc8:	461f      	mov	r7, r3
 800acca:	42be      	cmp	r6, r7
 800accc:	680b      	ldr	r3, [r1, #0]
 800acce:	4682      	mov	sl, r0
 800acd0:	460c      	mov	r4, r1
 800acd2:	4690      	mov	r8, r2
 800acd4:	d82d      	bhi.n	800ad32 <__ssputs_r+0x70>
 800acd6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acda:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800acde:	d026      	beq.n	800ad2e <__ssputs_r+0x6c>
 800ace0:	6965      	ldr	r5, [r4, #20]
 800ace2:	6909      	ldr	r1, [r1, #16]
 800ace4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace8:	eba3 0901 	sub.w	r9, r3, r1
 800acec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acf0:	1c7b      	adds	r3, r7, #1
 800acf2:	444b      	add	r3, r9
 800acf4:	106d      	asrs	r5, r5, #1
 800acf6:	429d      	cmp	r5, r3
 800acf8:	bf38      	it	cc
 800acfa:	461d      	movcc	r5, r3
 800acfc:	0553      	lsls	r3, r2, #21
 800acfe:	d527      	bpl.n	800ad50 <__ssputs_r+0x8e>
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7fd fe85 	bl	8008a10 <_malloc_r>
 800ad06:	4606      	mov	r6, r0
 800ad08:	b360      	cbz	r0, 800ad64 <__ssputs_r+0xa2>
 800ad0a:	6921      	ldr	r1, [r4, #16]
 800ad0c:	464a      	mov	r2, r9
 800ad0e:	f7fe ff6a 	bl	8009be6 <memcpy>
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	6126      	str	r6, [r4, #16]
 800ad20:	6165      	str	r5, [r4, #20]
 800ad22:	444e      	add	r6, r9
 800ad24:	eba5 0509 	sub.w	r5, r5, r9
 800ad28:	6026      	str	r6, [r4, #0]
 800ad2a:	60a5      	str	r5, [r4, #8]
 800ad2c:	463e      	mov	r6, r7
 800ad2e:	42be      	cmp	r6, r7
 800ad30:	d900      	bls.n	800ad34 <__ssputs_r+0x72>
 800ad32:	463e      	mov	r6, r7
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	4632      	mov	r2, r6
 800ad38:	4641      	mov	r1, r8
 800ad3a:	f000 fb51 	bl	800b3e0 <memmove>
 800ad3e:	68a3      	ldr	r3, [r4, #8]
 800ad40:	1b9b      	subs	r3, r3, r6
 800ad42:	60a3      	str	r3, [r4, #8]
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	4433      	add	r3, r6
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad50:	462a      	mov	r2, r5
 800ad52:	f7fd fef1 	bl	8008b38 <_realloc_r>
 800ad56:	4606      	mov	r6, r0
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	d1e0      	bne.n	800ad1e <__ssputs_r+0x5c>
 800ad5c:	6921      	ldr	r1, [r4, #16]
 800ad5e:	4650      	mov	r0, sl
 800ad60:	f7fe ff5a 	bl	8009c18 <_free_r>
 800ad64:	230c      	movs	r3, #12
 800ad66:	f8ca 3000 	str.w	r3, [sl]
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad70:	81a3      	strh	r3, [r4, #12]
 800ad72:	f04f 30ff 	mov.w	r0, #4294967295
 800ad76:	e7e9      	b.n	800ad4c <__ssputs_r+0x8a>

0800ad78 <_svfiprintf_r>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	4698      	mov	r8, r3
 800ad7e:	898b      	ldrh	r3, [r1, #12]
 800ad80:	061b      	lsls	r3, r3, #24
 800ad82:	b09d      	sub	sp, #116	@ 0x74
 800ad84:	4607      	mov	r7, r0
 800ad86:	460d      	mov	r5, r1
 800ad88:	4614      	mov	r4, r2
 800ad8a:	d510      	bpl.n	800adae <_svfiprintf_r+0x36>
 800ad8c:	690b      	ldr	r3, [r1, #16]
 800ad8e:	b973      	cbnz	r3, 800adae <_svfiprintf_r+0x36>
 800ad90:	2140      	movs	r1, #64	@ 0x40
 800ad92:	f7fd fe3d 	bl	8008a10 <_malloc_r>
 800ad96:	6028      	str	r0, [r5, #0]
 800ad98:	6128      	str	r0, [r5, #16]
 800ad9a:	b930      	cbnz	r0, 800adaa <_svfiprintf_r+0x32>
 800ad9c:	230c      	movs	r3, #12
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	b01d      	add	sp, #116	@ 0x74
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	2340      	movs	r3, #64	@ 0x40
 800adac:	616b      	str	r3, [r5, #20]
 800adae:	2300      	movs	r3, #0
 800adb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800adb2:	2320      	movs	r3, #32
 800adb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adb8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adbc:	2330      	movs	r3, #48	@ 0x30
 800adbe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af5c <_svfiprintf_r+0x1e4>
 800adc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adc6:	f04f 0901 	mov.w	r9, #1
 800adca:	4623      	mov	r3, r4
 800adcc:	469a      	mov	sl, r3
 800adce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800add2:	b10a      	cbz	r2, 800add8 <_svfiprintf_r+0x60>
 800add4:	2a25      	cmp	r2, #37	@ 0x25
 800add6:	d1f9      	bne.n	800adcc <_svfiprintf_r+0x54>
 800add8:	ebba 0b04 	subs.w	fp, sl, r4
 800addc:	d00b      	beq.n	800adf6 <_svfiprintf_r+0x7e>
 800adde:	465b      	mov	r3, fp
 800ade0:	4622      	mov	r2, r4
 800ade2:	4629      	mov	r1, r5
 800ade4:	4638      	mov	r0, r7
 800ade6:	f7ff ff6c 	bl	800acc2 <__ssputs_r>
 800adea:	3001      	adds	r0, #1
 800adec:	f000 80a7 	beq.w	800af3e <_svfiprintf_r+0x1c6>
 800adf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adf2:	445a      	add	r2, fp
 800adf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800adf6:	f89a 3000 	ldrb.w	r3, [sl]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 809f 	beq.w	800af3e <_svfiprintf_r+0x1c6>
 800ae00:	2300      	movs	r3, #0
 800ae02:	f04f 32ff 	mov.w	r2, #4294967295
 800ae06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae0a:	f10a 0a01 	add.w	sl, sl, #1
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae16:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae18:	4654      	mov	r4, sl
 800ae1a:	2205      	movs	r2, #5
 800ae1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae20:	484e      	ldr	r0, [pc, #312]	@ (800af5c <_svfiprintf_r+0x1e4>)
 800ae22:	f7f5 f9ed 	bl	8000200 <memchr>
 800ae26:	9a04      	ldr	r2, [sp, #16]
 800ae28:	b9d8      	cbnz	r0, 800ae62 <_svfiprintf_r+0xea>
 800ae2a:	06d0      	lsls	r0, r2, #27
 800ae2c:	bf44      	itt	mi
 800ae2e:	2320      	movmi	r3, #32
 800ae30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae34:	0711      	lsls	r1, r2, #28
 800ae36:	bf44      	itt	mi
 800ae38:	232b      	movmi	r3, #43	@ 0x2b
 800ae3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae44:	d015      	beq.n	800ae72 <_svfiprintf_r+0xfa>
 800ae46:	9a07      	ldr	r2, [sp, #28]
 800ae48:	4654      	mov	r4, sl
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f04f 0c0a 	mov.w	ip, #10
 800ae50:	4621      	mov	r1, r4
 800ae52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae56:	3b30      	subs	r3, #48	@ 0x30
 800ae58:	2b09      	cmp	r3, #9
 800ae5a:	d94b      	bls.n	800aef4 <_svfiprintf_r+0x17c>
 800ae5c:	b1b0      	cbz	r0, 800ae8c <_svfiprintf_r+0x114>
 800ae5e:	9207      	str	r2, [sp, #28]
 800ae60:	e014      	b.n	800ae8c <_svfiprintf_r+0x114>
 800ae62:	eba0 0308 	sub.w	r3, r0, r8
 800ae66:	fa09 f303 	lsl.w	r3, r9, r3
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	9304      	str	r3, [sp, #16]
 800ae6e:	46a2      	mov	sl, r4
 800ae70:	e7d2      	b.n	800ae18 <_svfiprintf_r+0xa0>
 800ae72:	9b03      	ldr	r3, [sp, #12]
 800ae74:	1d19      	adds	r1, r3, #4
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	9103      	str	r1, [sp, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfbb      	ittet	lt
 800ae7e:	425b      	neglt	r3, r3
 800ae80:	f042 0202 	orrlt.w	r2, r2, #2
 800ae84:	9307      	strge	r3, [sp, #28]
 800ae86:	9307      	strlt	r3, [sp, #28]
 800ae88:	bfb8      	it	lt
 800ae8a:	9204      	strlt	r2, [sp, #16]
 800ae8c:	7823      	ldrb	r3, [r4, #0]
 800ae8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae90:	d10a      	bne.n	800aea8 <_svfiprintf_r+0x130>
 800ae92:	7863      	ldrb	r3, [r4, #1]
 800ae94:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae96:	d132      	bne.n	800aefe <_svfiprintf_r+0x186>
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	1d1a      	adds	r2, r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	9203      	str	r2, [sp, #12]
 800aea0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aea4:	3402      	adds	r4, #2
 800aea6:	9305      	str	r3, [sp, #20]
 800aea8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af6c <_svfiprintf_r+0x1f4>
 800aeac:	7821      	ldrb	r1, [r4, #0]
 800aeae:	2203      	movs	r2, #3
 800aeb0:	4650      	mov	r0, sl
 800aeb2:	f7f5 f9a5 	bl	8000200 <memchr>
 800aeb6:	b138      	cbz	r0, 800aec8 <_svfiprintf_r+0x150>
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	eba0 000a 	sub.w	r0, r0, sl
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	4082      	lsls	r2, r0
 800aec2:	4313      	orrs	r3, r2
 800aec4:	3401      	adds	r4, #1
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aecc:	4824      	ldr	r0, [pc, #144]	@ (800af60 <_svfiprintf_r+0x1e8>)
 800aece:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aed2:	2206      	movs	r2, #6
 800aed4:	f7f5 f994 	bl	8000200 <memchr>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d036      	beq.n	800af4a <_svfiprintf_r+0x1d2>
 800aedc:	4b21      	ldr	r3, [pc, #132]	@ (800af64 <_svfiprintf_r+0x1ec>)
 800aede:	bb1b      	cbnz	r3, 800af28 <_svfiprintf_r+0x1b0>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	3307      	adds	r3, #7
 800aee4:	f023 0307 	bic.w	r3, r3, #7
 800aee8:	3308      	adds	r3, #8
 800aeea:	9303      	str	r3, [sp, #12]
 800aeec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeee:	4433      	add	r3, r6
 800aef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef2:	e76a      	b.n	800adca <_svfiprintf_r+0x52>
 800aef4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef8:	460c      	mov	r4, r1
 800aefa:	2001      	movs	r0, #1
 800aefc:	e7a8      	b.n	800ae50 <_svfiprintf_r+0xd8>
 800aefe:	2300      	movs	r3, #0
 800af00:	3401      	adds	r4, #1
 800af02:	9305      	str	r3, [sp, #20]
 800af04:	4619      	mov	r1, r3
 800af06:	f04f 0c0a 	mov.w	ip, #10
 800af0a:	4620      	mov	r0, r4
 800af0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af10:	3a30      	subs	r2, #48	@ 0x30
 800af12:	2a09      	cmp	r2, #9
 800af14:	d903      	bls.n	800af1e <_svfiprintf_r+0x1a6>
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0c6      	beq.n	800aea8 <_svfiprintf_r+0x130>
 800af1a:	9105      	str	r1, [sp, #20]
 800af1c:	e7c4      	b.n	800aea8 <_svfiprintf_r+0x130>
 800af1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af22:	4604      	mov	r4, r0
 800af24:	2301      	movs	r3, #1
 800af26:	e7f0      	b.n	800af0a <_svfiprintf_r+0x192>
 800af28:	ab03      	add	r3, sp, #12
 800af2a:	9300      	str	r3, [sp, #0]
 800af2c:	462a      	mov	r2, r5
 800af2e:	4b0e      	ldr	r3, [pc, #56]	@ (800af68 <_svfiprintf_r+0x1f0>)
 800af30:	a904      	add	r1, sp, #16
 800af32:	4638      	mov	r0, r7
 800af34:	f3af 8000 	nop.w
 800af38:	1c42      	adds	r2, r0, #1
 800af3a:	4606      	mov	r6, r0
 800af3c:	d1d6      	bne.n	800aeec <_svfiprintf_r+0x174>
 800af3e:	89ab      	ldrh	r3, [r5, #12]
 800af40:	065b      	lsls	r3, r3, #25
 800af42:	f53f af2d 	bmi.w	800ada0 <_svfiprintf_r+0x28>
 800af46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af48:	e72c      	b.n	800ada4 <_svfiprintf_r+0x2c>
 800af4a:	ab03      	add	r3, sp, #12
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	462a      	mov	r2, r5
 800af50:	4b05      	ldr	r3, [pc, #20]	@ (800af68 <_svfiprintf_r+0x1f0>)
 800af52:	a904      	add	r1, sp, #16
 800af54:	4638      	mov	r0, r7
 800af56:	f000 f879 	bl	800b04c <_printf_i>
 800af5a:	e7ed      	b.n	800af38 <_svfiprintf_r+0x1c0>
 800af5c:	0803394b 	.word	0x0803394b
 800af60:	08033955 	.word	0x08033955
 800af64:	00000000 	.word	0x00000000
 800af68:	0800acc3 	.word	0x0800acc3
 800af6c:	08033951 	.word	0x08033951

0800af70 <_printf_common>:
 800af70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af74:	4616      	mov	r6, r2
 800af76:	4698      	mov	r8, r3
 800af78:	688a      	ldr	r2, [r1, #8]
 800af7a:	690b      	ldr	r3, [r1, #16]
 800af7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af80:	4293      	cmp	r3, r2
 800af82:	bfb8      	it	lt
 800af84:	4613      	movlt	r3, r2
 800af86:	6033      	str	r3, [r6, #0]
 800af88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af8c:	4607      	mov	r7, r0
 800af8e:	460c      	mov	r4, r1
 800af90:	b10a      	cbz	r2, 800af96 <_printf_common+0x26>
 800af92:	3301      	adds	r3, #1
 800af94:	6033      	str	r3, [r6, #0]
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	0699      	lsls	r1, r3, #26
 800af9a:	bf42      	ittt	mi
 800af9c:	6833      	ldrmi	r3, [r6, #0]
 800af9e:	3302      	addmi	r3, #2
 800afa0:	6033      	strmi	r3, [r6, #0]
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	f015 0506 	ands.w	r5, r5, #6
 800afa8:	d106      	bne.n	800afb8 <_printf_common+0x48>
 800afaa:	f104 0a19 	add.w	sl, r4, #25
 800afae:	68e3      	ldr	r3, [r4, #12]
 800afb0:	6832      	ldr	r2, [r6, #0]
 800afb2:	1a9b      	subs	r3, r3, r2
 800afb4:	42ab      	cmp	r3, r5
 800afb6:	dc26      	bgt.n	800b006 <_printf_common+0x96>
 800afb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	3b00      	subs	r3, #0
 800afc0:	bf18      	it	ne
 800afc2:	2301      	movne	r3, #1
 800afc4:	0692      	lsls	r2, r2, #26
 800afc6:	d42b      	bmi.n	800b020 <_printf_common+0xb0>
 800afc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afcc:	4641      	mov	r1, r8
 800afce:	4638      	mov	r0, r7
 800afd0:	47c8      	blx	r9
 800afd2:	3001      	adds	r0, #1
 800afd4:	d01e      	beq.n	800b014 <_printf_common+0xa4>
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	f003 0306 	and.w	r3, r3, #6
 800afde:	2b04      	cmp	r3, #4
 800afe0:	bf02      	ittt	eq
 800afe2:	68e5      	ldreq	r5, [r4, #12]
 800afe4:	6833      	ldreq	r3, [r6, #0]
 800afe6:	1aed      	subeq	r5, r5, r3
 800afe8:	68a3      	ldr	r3, [r4, #8]
 800afea:	bf0c      	ite	eq
 800afec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aff0:	2500      	movne	r5, #0
 800aff2:	4293      	cmp	r3, r2
 800aff4:	bfc4      	itt	gt
 800aff6:	1a9b      	subgt	r3, r3, r2
 800aff8:	18ed      	addgt	r5, r5, r3
 800affa:	2600      	movs	r6, #0
 800affc:	341a      	adds	r4, #26
 800affe:	42b5      	cmp	r5, r6
 800b000:	d11a      	bne.n	800b038 <_printf_common+0xc8>
 800b002:	2000      	movs	r0, #0
 800b004:	e008      	b.n	800b018 <_printf_common+0xa8>
 800b006:	2301      	movs	r3, #1
 800b008:	4652      	mov	r2, sl
 800b00a:	4641      	mov	r1, r8
 800b00c:	4638      	mov	r0, r7
 800b00e:	47c8      	blx	r9
 800b010:	3001      	adds	r0, #1
 800b012:	d103      	bne.n	800b01c <_printf_common+0xac>
 800b014:	f04f 30ff 	mov.w	r0, #4294967295
 800b018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01c:	3501      	adds	r5, #1
 800b01e:	e7c6      	b.n	800afae <_printf_common+0x3e>
 800b020:	18e1      	adds	r1, r4, r3
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	2030      	movs	r0, #48	@ 0x30
 800b026:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b02a:	4422      	add	r2, r4
 800b02c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b034:	3302      	adds	r3, #2
 800b036:	e7c7      	b.n	800afc8 <_printf_common+0x58>
 800b038:	2301      	movs	r3, #1
 800b03a:	4622      	mov	r2, r4
 800b03c:	4641      	mov	r1, r8
 800b03e:	4638      	mov	r0, r7
 800b040:	47c8      	blx	r9
 800b042:	3001      	adds	r0, #1
 800b044:	d0e6      	beq.n	800b014 <_printf_common+0xa4>
 800b046:	3601      	adds	r6, #1
 800b048:	e7d9      	b.n	800affe <_printf_common+0x8e>
	...

0800b04c <_printf_i>:
 800b04c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b050:	7e0f      	ldrb	r7, [r1, #24]
 800b052:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b054:	2f78      	cmp	r7, #120	@ 0x78
 800b056:	4691      	mov	r9, r2
 800b058:	4680      	mov	r8, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	469a      	mov	sl, r3
 800b05e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b062:	d807      	bhi.n	800b074 <_printf_i+0x28>
 800b064:	2f62      	cmp	r7, #98	@ 0x62
 800b066:	d80a      	bhi.n	800b07e <_printf_i+0x32>
 800b068:	2f00      	cmp	r7, #0
 800b06a:	f000 80d1 	beq.w	800b210 <_printf_i+0x1c4>
 800b06e:	2f58      	cmp	r7, #88	@ 0x58
 800b070:	f000 80b8 	beq.w	800b1e4 <_printf_i+0x198>
 800b074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b078:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b07c:	e03a      	b.n	800b0f4 <_printf_i+0xa8>
 800b07e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b082:	2b15      	cmp	r3, #21
 800b084:	d8f6      	bhi.n	800b074 <_printf_i+0x28>
 800b086:	a101      	add	r1, pc, #4	@ (adr r1, 800b08c <_printf_i+0x40>)
 800b088:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b08c:	0800b0e5 	.word	0x0800b0e5
 800b090:	0800b0f9 	.word	0x0800b0f9
 800b094:	0800b075 	.word	0x0800b075
 800b098:	0800b075 	.word	0x0800b075
 800b09c:	0800b075 	.word	0x0800b075
 800b0a0:	0800b075 	.word	0x0800b075
 800b0a4:	0800b0f9 	.word	0x0800b0f9
 800b0a8:	0800b075 	.word	0x0800b075
 800b0ac:	0800b075 	.word	0x0800b075
 800b0b0:	0800b075 	.word	0x0800b075
 800b0b4:	0800b075 	.word	0x0800b075
 800b0b8:	0800b1f7 	.word	0x0800b1f7
 800b0bc:	0800b123 	.word	0x0800b123
 800b0c0:	0800b1b1 	.word	0x0800b1b1
 800b0c4:	0800b075 	.word	0x0800b075
 800b0c8:	0800b075 	.word	0x0800b075
 800b0cc:	0800b219 	.word	0x0800b219
 800b0d0:	0800b075 	.word	0x0800b075
 800b0d4:	0800b123 	.word	0x0800b123
 800b0d8:	0800b075 	.word	0x0800b075
 800b0dc:	0800b075 	.word	0x0800b075
 800b0e0:	0800b1b9 	.word	0x0800b1b9
 800b0e4:	6833      	ldr	r3, [r6, #0]
 800b0e6:	1d1a      	adds	r2, r3, #4
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	6032      	str	r2, [r6, #0]
 800b0ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e09c      	b.n	800b232 <_printf_i+0x1e6>
 800b0f8:	6833      	ldr	r3, [r6, #0]
 800b0fa:	6820      	ldr	r0, [r4, #0]
 800b0fc:	1d19      	adds	r1, r3, #4
 800b0fe:	6031      	str	r1, [r6, #0]
 800b100:	0606      	lsls	r6, r0, #24
 800b102:	d501      	bpl.n	800b108 <_printf_i+0xbc>
 800b104:	681d      	ldr	r5, [r3, #0]
 800b106:	e003      	b.n	800b110 <_printf_i+0xc4>
 800b108:	0645      	lsls	r5, r0, #25
 800b10a:	d5fb      	bpl.n	800b104 <_printf_i+0xb8>
 800b10c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b110:	2d00      	cmp	r5, #0
 800b112:	da03      	bge.n	800b11c <_printf_i+0xd0>
 800b114:	232d      	movs	r3, #45	@ 0x2d
 800b116:	426d      	negs	r5, r5
 800b118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b11c:	4858      	ldr	r0, [pc, #352]	@ (800b280 <_printf_i+0x234>)
 800b11e:	230a      	movs	r3, #10
 800b120:	e011      	b.n	800b146 <_printf_i+0xfa>
 800b122:	6821      	ldr	r1, [r4, #0]
 800b124:	6833      	ldr	r3, [r6, #0]
 800b126:	0608      	lsls	r0, r1, #24
 800b128:	f853 5b04 	ldr.w	r5, [r3], #4
 800b12c:	d402      	bmi.n	800b134 <_printf_i+0xe8>
 800b12e:	0649      	lsls	r1, r1, #25
 800b130:	bf48      	it	mi
 800b132:	b2ad      	uxthmi	r5, r5
 800b134:	2f6f      	cmp	r7, #111	@ 0x6f
 800b136:	4852      	ldr	r0, [pc, #328]	@ (800b280 <_printf_i+0x234>)
 800b138:	6033      	str	r3, [r6, #0]
 800b13a:	bf14      	ite	ne
 800b13c:	230a      	movne	r3, #10
 800b13e:	2308      	moveq	r3, #8
 800b140:	2100      	movs	r1, #0
 800b142:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b146:	6866      	ldr	r6, [r4, #4]
 800b148:	60a6      	str	r6, [r4, #8]
 800b14a:	2e00      	cmp	r6, #0
 800b14c:	db05      	blt.n	800b15a <_printf_i+0x10e>
 800b14e:	6821      	ldr	r1, [r4, #0]
 800b150:	432e      	orrs	r6, r5
 800b152:	f021 0104 	bic.w	r1, r1, #4
 800b156:	6021      	str	r1, [r4, #0]
 800b158:	d04b      	beq.n	800b1f2 <_printf_i+0x1a6>
 800b15a:	4616      	mov	r6, r2
 800b15c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b160:	fb03 5711 	mls	r7, r3, r1, r5
 800b164:	5dc7      	ldrb	r7, [r0, r7]
 800b166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b16a:	462f      	mov	r7, r5
 800b16c:	42bb      	cmp	r3, r7
 800b16e:	460d      	mov	r5, r1
 800b170:	d9f4      	bls.n	800b15c <_printf_i+0x110>
 800b172:	2b08      	cmp	r3, #8
 800b174:	d10b      	bne.n	800b18e <_printf_i+0x142>
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	07df      	lsls	r7, r3, #31
 800b17a:	d508      	bpl.n	800b18e <_printf_i+0x142>
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	6861      	ldr	r1, [r4, #4]
 800b180:	4299      	cmp	r1, r3
 800b182:	bfde      	ittt	le
 800b184:	2330      	movle	r3, #48	@ 0x30
 800b186:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b18a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b18e:	1b92      	subs	r2, r2, r6
 800b190:	6122      	str	r2, [r4, #16]
 800b192:	f8cd a000 	str.w	sl, [sp]
 800b196:	464b      	mov	r3, r9
 800b198:	aa03      	add	r2, sp, #12
 800b19a:	4621      	mov	r1, r4
 800b19c:	4640      	mov	r0, r8
 800b19e:	f7ff fee7 	bl	800af70 <_printf_common>
 800b1a2:	3001      	adds	r0, #1
 800b1a4:	d14a      	bne.n	800b23c <_printf_i+0x1f0>
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1aa:	b004      	add	sp, #16
 800b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	f043 0320 	orr.w	r3, r3, #32
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	4832      	ldr	r0, [pc, #200]	@ (800b284 <_printf_i+0x238>)
 800b1ba:	2778      	movs	r7, #120	@ 0x78
 800b1bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1c0:	6823      	ldr	r3, [r4, #0]
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	061f      	lsls	r7, r3, #24
 800b1c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1ca:	d402      	bmi.n	800b1d2 <_printf_i+0x186>
 800b1cc:	065f      	lsls	r7, r3, #25
 800b1ce:	bf48      	it	mi
 800b1d0:	b2ad      	uxthmi	r5, r5
 800b1d2:	6031      	str	r1, [r6, #0]
 800b1d4:	07d9      	lsls	r1, r3, #31
 800b1d6:	bf44      	itt	mi
 800b1d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1dc:	6023      	strmi	r3, [r4, #0]
 800b1de:	b11d      	cbz	r5, 800b1e8 <_printf_i+0x19c>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	e7ad      	b.n	800b140 <_printf_i+0xf4>
 800b1e4:	4826      	ldr	r0, [pc, #152]	@ (800b280 <_printf_i+0x234>)
 800b1e6:	e7e9      	b.n	800b1bc <_printf_i+0x170>
 800b1e8:	6823      	ldr	r3, [r4, #0]
 800b1ea:	f023 0320 	bic.w	r3, r3, #32
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	e7f6      	b.n	800b1e0 <_printf_i+0x194>
 800b1f2:	4616      	mov	r6, r2
 800b1f4:	e7bd      	b.n	800b172 <_printf_i+0x126>
 800b1f6:	6833      	ldr	r3, [r6, #0]
 800b1f8:	6825      	ldr	r5, [r4, #0]
 800b1fa:	6961      	ldr	r1, [r4, #20]
 800b1fc:	1d18      	adds	r0, r3, #4
 800b1fe:	6030      	str	r0, [r6, #0]
 800b200:	062e      	lsls	r6, r5, #24
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	d501      	bpl.n	800b20a <_printf_i+0x1be>
 800b206:	6019      	str	r1, [r3, #0]
 800b208:	e002      	b.n	800b210 <_printf_i+0x1c4>
 800b20a:	0668      	lsls	r0, r5, #25
 800b20c:	d5fb      	bpl.n	800b206 <_printf_i+0x1ba>
 800b20e:	8019      	strh	r1, [r3, #0]
 800b210:	2300      	movs	r3, #0
 800b212:	6123      	str	r3, [r4, #16]
 800b214:	4616      	mov	r6, r2
 800b216:	e7bc      	b.n	800b192 <_printf_i+0x146>
 800b218:	6833      	ldr	r3, [r6, #0]
 800b21a:	1d1a      	adds	r2, r3, #4
 800b21c:	6032      	str	r2, [r6, #0]
 800b21e:	681e      	ldr	r6, [r3, #0]
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	2100      	movs	r1, #0
 800b224:	4630      	mov	r0, r6
 800b226:	f7f4 ffeb 	bl	8000200 <memchr>
 800b22a:	b108      	cbz	r0, 800b230 <_printf_i+0x1e4>
 800b22c:	1b80      	subs	r0, r0, r6
 800b22e:	6060      	str	r0, [r4, #4]
 800b230:	6863      	ldr	r3, [r4, #4]
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	2300      	movs	r3, #0
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b23a:	e7aa      	b.n	800b192 <_printf_i+0x146>
 800b23c:	6923      	ldr	r3, [r4, #16]
 800b23e:	4632      	mov	r2, r6
 800b240:	4649      	mov	r1, r9
 800b242:	4640      	mov	r0, r8
 800b244:	47d0      	blx	sl
 800b246:	3001      	adds	r0, #1
 800b248:	d0ad      	beq.n	800b1a6 <_printf_i+0x15a>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	079b      	lsls	r3, r3, #30
 800b24e:	d413      	bmi.n	800b278 <_printf_i+0x22c>
 800b250:	68e0      	ldr	r0, [r4, #12]
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	4298      	cmp	r0, r3
 800b256:	bfb8      	it	lt
 800b258:	4618      	movlt	r0, r3
 800b25a:	e7a6      	b.n	800b1aa <_printf_i+0x15e>
 800b25c:	2301      	movs	r3, #1
 800b25e:	4632      	mov	r2, r6
 800b260:	4649      	mov	r1, r9
 800b262:	4640      	mov	r0, r8
 800b264:	47d0      	blx	sl
 800b266:	3001      	adds	r0, #1
 800b268:	d09d      	beq.n	800b1a6 <_printf_i+0x15a>
 800b26a:	3501      	adds	r5, #1
 800b26c:	68e3      	ldr	r3, [r4, #12]
 800b26e:	9903      	ldr	r1, [sp, #12]
 800b270:	1a5b      	subs	r3, r3, r1
 800b272:	42ab      	cmp	r3, r5
 800b274:	dcf2      	bgt.n	800b25c <_printf_i+0x210>
 800b276:	e7eb      	b.n	800b250 <_printf_i+0x204>
 800b278:	2500      	movs	r5, #0
 800b27a:	f104 0619 	add.w	r6, r4, #25
 800b27e:	e7f5      	b.n	800b26c <_printf_i+0x220>
 800b280:	0803395c 	.word	0x0803395c
 800b284:	0803396d 	.word	0x0803396d

0800b288 <__sflush_r>:
 800b288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b290:	0716      	lsls	r6, r2, #28
 800b292:	4605      	mov	r5, r0
 800b294:	460c      	mov	r4, r1
 800b296:	d454      	bmi.n	800b342 <__sflush_r+0xba>
 800b298:	684b      	ldr	r3, [r1, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dc02      	bgt.n	800b2a4 <__sflush_r+0x1c>
 800b29e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dd48      	ble.n	800b336 <__sflush_r+0xae>
 800b2a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2a6:	2e00      	cmp	r6, #0
 800b2a8:	d045      	beq.n	800b336 <__sflush_r+0xae>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2b0:	682f      	ldr	r7, [r5, #0]
 800b2b2:	6a21      	ldr	r1, [r4, #32]
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	d030      	beq.n	800b31a <__sflush_r+0x92>
 800b2b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	0759      	lsls	r1, r3, #29
 800b2be:	d505      	bpl.n	800b2cc <__sflush_r+0x44>
 800b2c0:	6863      	ldr	r3, [r4, #4]
 800b2c2:	1ad2      	subs	r2, r2, r3
 800b2c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2c6:	b10b      	cbz	r3, 800b2cc <__sflush_r+0x44>
 800b2c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2ca:	1ad2      	subs	r2, r2, r3
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2d0:	6a21      	ldr	r1, [r4, #32]
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b0      	blx	r6
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	d106      	bne.n	800b2ea <__sflush_r+0x62>
 800b2dc:	6829      	ldr	r1, [r5, #0]
 800b2de:	291d      	cmp	r1, #29
 800b2e0:	d82b      	bhi.n	800b33a <__sflush_r+0xb2>
 800b2e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b38c <__sflush_r+0x104>)
 800b2e4:	40ca      	lsrs	r2, r1
 800b2e6:	07d6      	lsls	r6, r2, #31
 800b2e8:	d527      	bpl.n	800b33a <__sflush_r+0xb2>
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	6062      	str	r2, [r4, #4]
 800b2ee:	04d9      	lsls	r1, r3, #19
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	6022      	str	r2, [r4, #0]
 800b2f4:	d504      	bpl.n	800b300 <__sflush_r+0x78>
 800b2f6:	1c42      	adds	r2, r0, #1
 800b2f8:	d101      	bne.n	800b2fe <__sflush_r+0x76>
 800b2fa:	682b      	ldr	r3, [r5, #0]
 800b2fc:	b903      	cbnz	r3, 800b300 <__sflush_r+0x78>
 800b2fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b300:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b302:	602f      	str	r7, [r5, #0]
 800b304:	b1b9      	cbz	r1, 800b336 <__sflush_r+0xae>
 800b306:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b30a:	4299      	cmp	r1, r3
 800b30c:	d002      	beq.n	800b314 <__sflush_r+0x8c>
 800b30e:	4628      	mov	r0, r5
 800b310:	f7fe fc82 	bl	8009c18 <_free_r>
 800b314:	2300      	movs	r3, #0
 800b316:	6363      	str	r3, [r4, #52]	@ 0x34
 800b318:	e00d      	b.n	800b336 <__sflush_r+0xae>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b0      	blx	r6
 800b320:	4602      	mov	r2, r0
 800b322:	1c50      	adds	r0, r2, #1
 800b324:	d1c9      	bne.n	800b2ba <__sflush_r+0x32>
 800b326:	682b      	ldr	r3, [r5, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d0c6      	beq.n	800b2ba <__sflush_r+0x32>
 800b32c:	2b1d      	cmp	r3, #29
 800b32e:	d001      	beq.n	800b334 <__sflush_r+0xac>
 800b330:	2b16      	cmp	r3, #22
 800b332:	d11e      	bne.n	800b372 <__sflush_r+0xea>
 800b334:	602f      	str	r7, [r5, #0]
 800b336:	2000      	movs	r0, #0
 800b338:	e022      	b.n	800b380 <__sflush_r+0xf8>
 800b33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b33e:	b21b      	sxth	r3, r3
 800b340:	e01b      	b.n	800b37a <__sflush_r+0xf2>
 800b342:	690f      	ldr	r7, [r1, #16]
 800b344:	2f00      	cmp	r7, #0
 800b346:	d0f6      	beq.n	800b336 <__sflush_r+0xae>
 800b348:	0793      	lsls	r3, r2, #30
 800b34a:	680e      	ldr	r6, [r1, #0]
 800b34c:	bf08      	it	eq
 800b34e:	694b      	ldreq	r3, [r1, #20]
 800b350:	600f      	str	r7, [r1, #0]
 800b352:	bf18      	it	ne
 800b354:	2300      	movne	r3, #0
 800b356:	eba6 0807 	sub.w	r8, r6, r7
 800b35a:	608b      	str	r3, [r1, #8]
 800b35c:	f1b8 0f00 	cmp.w	r8, #0
 800b360:	dde9      	ble.n	800b336 <__sflush_r+0xae>
 800b362:	6a21      	ldr	r1, [r4, #32]
 800b364:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b366:	4643      	mov	r3, r8
 800b368:	463a      	mov	r2, r7
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b0      	blx	r6
 800b36e:	2800      	cmp	r0, #0
 800b370:	dc08      	bgt.n	800b384 <__sflush_r+0xfc>
 800b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b384:	4407      	add	r7, r0
 800b386:	eba8 0800 	sub.w	r8, r8, r0
 800b38a:	e7e7      	b.n	800b35c <__sflush_r+0xd4>
 800b38c:	20400001 	.word	0x20400001

0800b390 <_fflush_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	690b      	ldr	r3, [r1, #16]
 800b394:	4605      	mov	r5, r0
 800b396:	460c      	mov	r4, r1
 800b398:	b913      	cbnz	r3, 800b3a0 <_fflush_r+0x10>
 800b39a:	2500      	movs	r5, #0
 800b39c:	4628      	mov	r0, r5
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	b118      	cbz	r0, 800b3aa <_fflush_r+0x1a>
 800b3a2:	6a03      	ldr	r3, [r0, #32]
 800b3a4:	b90b      	cbnz	r3, 800b3aa <_fflush_r+0x1a>
 800b3a6:	f7fe fa8f 	bl	80098c8 <__sinit>
 800b3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f3      	beq.n	800b39a <_fflush_r+0xa>
 800b3b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3b4:	07d0      	lsls	r0, r2, #31
 800b3b6:	d404      	bmi.n	800b3c2 <_fflush_r+0x32>
 800b3b8:	0599      	lsls	r1, r3, #22
 800b3ba:	d402      	bmi.n	800b3c2 <_fflush_r+0x32>
 800b3bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3be:	f7fe fc08 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	f7ff ff5f 	bl	800b288 <__sflush_r>
 800b3ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3cc:	07da      	lsls	r2, r3, #31
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	d4e4      	bmi.n	800b39c <_fflush_r+0xc>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	059b      	lsls	r3, r3, #22
 800b3d6:	d4e1      	bmi.n	800b39c <_fflush_r+0xc>
 800b3d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3da:	f7fe fbfb 	bl	8009bd4 <__retarget_lock_release_recursive>
 800b3de:	e7dd      	b.n	800b39c <_fflush_r+0xc>

0800b3e0 <memmove>:
 800b3e0:	4288      	cmp	r0, r1
 800b3e2:	b510      	push	{r4, lr}
 800b3e4:	eb01 0402 	add.w	r4, r1, r2
 800b3e8:	d902      	bls.n	800b3f0 <memmove+0x10>
 800b3ea:	4284      	cmp	r4, r0
 800b3ec:	4623      	mov	r3, r4
 800b3ee:	d807      	bhi.n	800b400 <memmove+0x20>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	42a1      	cmp	r1, r4
 800b3f4:	d008      	beq.n	800b408 <memmove+0x28>
 800b3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3fe:	e7f8      	b.n	800b3f2 <memmove+0x12>
 800b400:	4402      	add	r2, r0
 800b402:	4601      	mov	r1, r0
 800b404:	428a      	cmp	r2, r1
 800b406:	d100      	bne.n	800b40a <memmove+0x2a>
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b412:	e7f7      	b.n	800b404 <memmove+0x24>

0800b414 <__assert_func>:
 800b414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b416:	4614      	mov	r4, r2
 800b418:	461a      	mov	r2, r3
 800b41a:	4b09      	ldr	r3, [pc, #36]	@ (800b440 <__assert_func+0x2c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4605      	mov	r5, r0
 800b420:	68d8      	ldr	r0, [r3, #12]
 800b422:	b14c      	cbz	r4, 800b438 <__assert_func+0x24>
 800b424:	4b07      	ldr	r3, [pc, #28]	@ (800b444 <__assert_func+0x30>)
 800b426:	9100      	str	r1, [sp, #0]
 800b428:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b42c:	4906      	ldr	r1, [pc, #24]	@ (800b448 <__assert_func+0x34>)
 800b42e:	462b      	mov	r3, r5
 800b430:	f000 f822 	bl	800b478 <fiprintf>
 800b434:	f000 f832 	bl	800b49c <abort>
 800b438:	4b04      	ldr	r3, [pc, #16]	@ (800b44c <__assert_func+0x38>)
 800b43a:	461c      	mov	r4, r3
 800b43c:	e7f3      	b.n	800b426 <__assert_func+0x12>
 800b43e:	bf00      	nop
 800b440:	20000284 	.word	0x20000284
 800b444:	0803397e 	.word	0x0803397e
 800b448:	0803398b 	.word	0x0803398b
 800b44c:	080339b9 	.word	0x080339b9

0800b450 <_calloc_r>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	fba1 5402 	umull	r5, r4, r1, r2
 800b456:	b934      	cbnz	r4, 800b466 <_calloc_r+0x16>
 800b458:	4629      	mov	r1, r5
 800b45a:	f7fd fad9 	bl	8008a10 <_malloc_r>
 800b45e:	4606      	mov	r6, r0
 800b460:	b928      	cbnz	r0, 800b46e <_calloc_r+0x1e>
 800b462:	4630      	mov	r0, r6
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	220c      	movs	r2, #12
 800b468:	6002      	str	r2, [r0, #0]
 800b46a:	2600      	movs	r6, #0
 800b46c:	e7f9      	b.n	800b462 <_calloc_r+0x12>
 800b46e:	462a      	mov	r2, r5
 800b470:	4621      	mov	r1, r4
 800b472:	f7fe fae5 	bl	8009a40 <memset>
 800b476:	e7f4      	b.n	800b462 <_calloc_r+0x12>

0800b478 <fiprintf>:
 800b478:	b40e      	push	{r1, r2, r3}
 800b47a:	b503      	push	{r0, r1, lr}
 800b47c:	4601      	mov	r1, r0
 800b47e:	ab03      	add	r3, sp, #12
 800b480:	4805      	ldr	r0, [pc, #20]	@ (800b498 <fiprintf+0x20>)
 800b482:	f853 2b04 	ldr.w	r2, [r3], #4
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	f000 f837 	bl	800b4fc <_vfiprintf_r>
 800b48e:	b002      	add	sp, #8
 800b490:	f85d eb04 	ldr.w	lr, [sp], #4
 800b494:	b003      	add	sp, #12
 800b496:	4770      	bx	lr
 800b498:	20000284 	.word	0x20000284

0800b49c <abort>:
 800b49c:	b508      	push	{r3, lr}
 800b49e:	2006      	movs	r0, #6
 800b4a0:	f000 fa00 	bl	800b8a4 <raise>
 800b4a4:	2001      	movs	r0, #1
 800b4a6:	f7fa fb17 	bl	8005ad8 <_exit>

0800b4aa <__sfputc_r>:
 800b4aa:	6893      	ldr	r3, [r2, #8]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	b410      	push	{r4}
 800b4b2:	6093      	str	r3, [r2, #8]
 800b4b4:	da08      	bge.n	800b4c8 <__sfputc_r+0x1e>
 800b4b6:	6994      	ldr	r4, [r2, #24]
 800b4b8:	42a3      	cmp	r3, r4
 800b4ba:	db01      	blt.n	800b4c0 <__sfputc_r+0x16>
 800b4bc:	290a      	cmp	r1, #10
 800b4be:	d103      	bne.n	800b4c8 <__sfputc_r+0x1e>
 800b4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c4:	f000 b932 	b.w	800b72c <__swbuf_r>
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	1c58      	adds	r0, r3, #1
 800b4cc:	6010      	str	r0, [r2, #0]
 800b4ce:	7019      	strb	r1, [r3, #0]
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <__sfputs_r>:
 800b4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4da:	4606      	mov	r6, r0
 800b4dc:	460f      	mov	r7, r1
 800b4de:	4614      	mov	r4, r2
 800b4e0:	18d5      	adds	r5, r2, r3
 800b4e2:	42ac      	cmp	r4, r5
 800b4e4:	d101      	bne.n	800b4ea <__sfputs_r+0x12>
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e007      	b.n	800b4fa <__sfputs_r+0x22>
 800b4ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7ff ffda 	bl	800b4aa <__sfputc_r>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d1f3      	bne.n	800b4e2 <__sfputs_r+0xa>
 800b4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4fc <_vfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	460d      	mov	r5, r1
 800b502:	b09d      	sub	sp, #116	@ 0x74
 800b504:	4614      	mov	r4, r2
 800b506:	4698      	mov	r8, r3
 800b508:	4606      	mov	r6, r0
 800b50a:	b118      	cbz	r0, 800b514 <_vfiprintf_r+0x18>
 800b50c:	6a03      	ldr	r3, [r0, #32]
 800b50e:	b90b      	cbnz	r3, 800b514 <_vfiprintf_r+0x18>
 800b510:	f7fe f9da 	bl	80098c8 <__sinit>
 800b514:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b516:	07d9      	lsls	r1, r3, #31
 800b518:	d405      	bmi.n	800b526 <_vfiprintf_r+0x2a>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	059a      	lsls	r2, r3, #22
 800b51e:	d402      	bmi.n	800b526 <_vfiprintf_r+0x2a>
 800b520:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b522:	f7fe fb56 	bl	8009bd2 <__retarget_lock_acquire_recursive>
 800b526:	89ab      	ldrh	r3, [r5, #12]
 800b528:	071b      	lsls	r3, r3, #28
 800b52a:	d501      	bpl.n	800b530 <_vfiprintf_r+0x34>
 800b52c:	692b      	ldr	r3, [r5, #16]
 800b52e:	b99b      	cbnz	r3, 800b558 <_vfiprintf_r+0x5c>
 800b530:	4629      	mov	r1, r5
 800b532:	4630      	mov	r0, r6
 800b534:	f000 f938 	bl	800b7a8 <__swsetup_r>
 800b538:	b170      	cbz	r0, 800b558 <_vfiprintf_r+0x5c>
 800b53a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b53c:	07dc      	lsls	r4, r3, #31
 800b53e:	d504      	bpl.n	800b54a <_vfiprintf_r+0x4e>
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	b01d      	add	sp, #116	@ 0x74
 800b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	0598      	lsls	r0, r3, #22
 800b54e:	d4f7      	bmi.n	800b540 <_vfiprintf_r+0x44>
 800b550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b552:	f7fe fb3f 	bl	8009bd4 <__retarget_lock_release_recursive>
 800b556:	e7f3      	b.n	800b540 <_vfiprintf_r+0x44>
 800b558:	2300      	movs	r3, #0
 800b55a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b55c:	2320      	movs	r3, #32
 800b55e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b562:	f8cd 800c 	str.w	r8, [sp, #12]
 800b566:	2330      	movs	r3, #48	@ 0x30
 800b568:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b718 <_vfiprintf_r+0x21c>
 800b56c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b570:	f04f 0901 	mov.w	r9, #1
 800b574:	4623      	mov	r3, r4
 800b576:	469a      	mov	sl, r3
 800b578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57c:	b10a      	cbz	r2, 800b582 <_vfiprintf_r+0x86>
 800b57e:	2a25      	cmp	r2, #37	@ 0x25
 800b580:	d1f9      	bne.n	800b576 <_vfiprintf_r+0x7a>
 800b582:	ebba 0b04 	subs.w	fp, sl, r4
 800b586:	d00b      	beq.n	800b5a0 <_vfiprintf_r+0xa4>
 800b588:	465b      	mov	r3, fp
 800b58a:	4622      	mov	r2, r4
 800b58c:	4629      	mov	r1, r5
 800b58e:	4630      	mov	r0, r6
 800b590:	f7ff ffa2 	bl	800b4d8 <__sfputs_r>
 800b594:	3001      	adds	r0, #1
 800b596:	f000 80a7 	beq.w	800b6e8 <_vfiprintf_r+0x1ec>
 800b59a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b59c:	445a      	add	r2, fp
 800b59e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 809f 	beq.w	800b6e8 <_vfiprintf_r+0x1ec>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b4:	f10a 0a01 	add.w	sl, sl, #1
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	9307      	str	r3, [sp, #28]
 800b5bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5c0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5c2:	4654      	mov	r4, sl
 800b5c4:	2205      	movs	r2, #5
 800b5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ca:	4853      	ldr	r0, [pc, #332]	@ (800b718 <_vfiprintf_r+0x21c>)
 800b5cc:	f7f4 fe18 	bl	8000200 <memchr>
 800b5d0:	9a04      	ldr	r2, [sp, #16]
 800b5d2:	b9d8      	cbnz	r0, 800b60c <_vfiprintf_r+0x110>
 800b5d4:	06d1      	lsls	r1, r2, #27
 800b5d6:	bf44      	itt	mi
 800b5d8:	2320      	movmi	r3, #32
 800b5da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5de:	0713      	lsls	r3, r2, #28
 800b5e0:	bf44      	itt	mi
 800b5e2:	232b      	movmi	r3, #43	@ 0x2b
 800b5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ee:	d015      	beq.n	800b61c <_vfiprintf_r+0x120>
 800b5f0:	9a07      	ldr	r2, [sp, #28]
 800b5f2:	4654      	mov	r4, sl
 800b5f4:	2000      	movs	r0, #0
 800b5f6:	f04f 0c0a 	mov.w	ip, #10
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b600:	3b30      	subs	r3, #48	@ 0x30
 800b602:	2b09      	cmp	r3, #9
 800b604:	d94b      	bls.n	800b69e <_vfiprintf_r+0x1a2>
 800b606:	b1b0      	cbz	r0, 800b636 <_vfiprintf_r+0x13a>
 800b608:	9207      	str	r2, [sp, #28]
 800b60a:	e014      	b.n	800b636 <_vfiprintf_r+0x13a>
 800b60c:	eba0 0308 	sub.w	r3, r0, r8
 800b610:	fa09 f303 	lsl.w	r3, r9, r3
 800b614:	4313      	orrs	r3, r2
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	46a2      	mov	sl, r4
 800b61a:	e7d2      	b.n	800b5c2 <_vfiprintf_r+0xc6>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	1d19      	adds	r1, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9103      	str	r1, [sp, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	bfbb      	ittet	lt
 800b628:	425b      	neglt	r3, r3
 800b62a:	f042 0202 	orrlt.w	r2, r2, #2
 800b62e:	9307      	strge	r3, [sp, #28]
 800b630:	9307      	strlt	r3, [sp, #28]
 800b632:	bfb8      	it	lt
 800b634:	9204      	strlt	r2, [sp, #16]
 800b636:	7823      	ldrb	r3, [r4, #0]
 800b638:	2b2e      	cmp	r3, #46	@ 0x2e
 800b63a:	d10a      	bne.n	800b652 <_vfiprintf_r+0x156>
 800b63c:	7863      	ldrb	r3, [r4, #1]
 800b63e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b640:	d132      	bne.n	800b6a8 <_vfiprintf_r+0x1ac>
 800b642:	9b03      	ldr	r3, [sp, #12]
 800b644:	1d1a      	adds	r2, r3, #4
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	9203      	str	r2, [sp, #12]
 800b64a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b64e:	3402      	adds	r4, #2
 800b650:	9305      	str	r3, [sp, #20]
 800b652:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b728 <_vfiprintf_r+0x22c>
 800b656:	7821      	ldrb	r1, [r4, #0]
 800b658:	2203      	movs	r2, #3
 800b65a:	4650      	mov	r0, sl
 800b65c:	f7f4 fdd0 	bl	8000200 <memchr>
 800b660:	b138      	cbz	r0, 800b672 <_vfiprintf_r+0x176>
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	eba0 000a 	sub.w	r0, r0, sl
 800b668:	2240      	movs	r2, #64	@ 0x40
 800b66a:	4082      	lsls	r2, r0
 800b66c:	4313      	orrs	r3, r2
 800b66e:	3401      	adds	r4, #1
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b676:	4829      	ldr	r0, [pc, #164]	@ (800b71c <_vfiprintf_r+0x220>)
 800b678:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b67c:	2206      	movs	r2, #6
 800b67e:	f7f4 fdbf 	bl	8000200 <memchr>
 800b682:	2800      	cmp	r0, #0
 800b684:	d03f      	beq.n	800b706 <_vfiprintf_r+0x20a>
 800b686:	4b26      	ldr	r3, [pc, #152]	@ (800b720 <_vfiprintf_r+0x224>)
 800b688:	bb1b      	cbnz	r3, 800b6d2 <_vfiprintf_r+0x1d6>
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	3307      	adds	r3, #7
 800b68e:	f023 0307 	bic.w	r3, r3, #7
 800b692:	3308      	adds	r3, #8
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b698:	443b      	add	r3, r7
 800b69a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69c:	e76a      	b.n	800b574 <_vfiprintf_r+0x78>
 800b69e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	2001      	movs	r0, #1
 800b6a6:	e7a8      	b.n	800b5fa <_vfiprintf_r+0xfe>
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	3401      	adds	r4, #1
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f04f 0c0a 	mov.w	ip, #10
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ba:	3a30      	subs	r2, #48	@ 0x30
 800b6bc:	2a09      	cmp	r2, #9
 800b6be:	d903      	bls.n	800b6c8 <_vfiprintf_r+0x1cc>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d0c6      	beq.n	800b652 <_vfiprintf_r+0x156>
 800b6c4:	9105      	str	r1, [sp, #20]
 800b6c6:	e7c4      	b.n	800b652 <_vfiprintf_r+0x156>
 800b6c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6cc:	4604      	mov	r4, r0
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e7f0      	b.n	800b6b4 <_vfiprintf_r+0x1b8>
 800b6d2:	ab03      	add	r3, sp, #12
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	462a      	mov	r2, r5
 800b6d8:	4b12      	ldr	r3, [pc, #72]	@ (800b724 <_vfiprintf_r+0x228>)
 800b6da:	a904      	add	r1, sp, #16
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f3af 8000 	nop.w
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	1c78      	adds	r0, r7, #1
 800b6e6:	d1d6      	bne.n	800b696 <_vfiprintf_r+0x19a>
 800b6e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6ea:	07d9      	lsls	r1, r3, #31
 800b6ec:	d405      	bmi.n	800b6fa <_vfiprintf_r+0x1fe>
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	059a      	lsls	r2, r3, #22
 800b6f2:	d402      	bmi.n	800b6fa <_vfiprintf_r+0x1fe>
 800b6f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6f6:	f7fe fa6d 	bl	8009bd4 <__retarget_lock_release_recursive>
 800b6fa:	89ab      	ldrh	r3, [r5, #12]
 800b6fc:	065b      	lsls	r3, r3, #25
 800b6fe:	f53f af1f 	bmi.w	800b540 <_vfiprintf_r+0x44>
 800b702:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b704:	e71e      	b.n	800b544 <_vfiprintf_r+0x48>
 800b706:	ab03      	add	r3, sp, #12
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	462a      	mov	r2, r5
 800b70c:	4b05      	ldr	r3, [pc, #20]	@ (800b724 <_vfiprintf_r+0x228>)
 800b70e:	a904      	add	r1, sp, #16
 800b710:	4630      	mov	r0, r6
 800b712:	f7ff fc9b 	bl	800b04c <_printf_i>
 800b716:	e7e4      	b.n	800b6e2 <_vfiprintf_r+0x1e6>
 800b718:	0803394b 	.word	0x0803394b
 800b71c:	08033955 	.word	0x08033955
 800b720:	00000000 	.word	0x00000000
 800b724:	0800b4d9 	.word	0x0800b4d9
 800b728:	08033951 	.word	0x08033951

0800b72c <__swbuf_r>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	460e      	mov	r6, r1
 800b730:	4614      	mov	r4, r2
 800b732:	4605      	mov	r5, r0
 800b734:	b118      	cbz	r0, 800b73e <__swbuf_r+0x12>
 800b736:	6a03      	ldr	r3, [r0, #32]
 800b738:	b90b      	cbnz	r3, 800b73e <__swbuf_r+0x12>
 800b73a:	f7fe f8c5 	bl	80098c8 <__sinit>
 800b73e:	69a3      	ldr	r3, [r4, #24]
 800b740:	60a3      	str	r3, [r4, #8]
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	071a      	lsls	r2, r3, #28
 800b746:	d501      	bpl.n	800b74c <__swbuf_r+0x20>
 800b748:	6923      	ldr	r3, [r4, #16]
 800b74a:	b943      	cbnz	r3, 800b75e <__swbuf_r+0x32>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f82a 	bl	800b7a8 <__swsetup_r>
 800b754:	b118      	cbz	r0, 800b75e <__swbuf_r+0x32>
 800b756:	f04f 37ff 	mov.w	r7, #4294967295
 800b75a:	4638      	mov	r0, r7
 800b75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b75e:	6823      	ldr	r3, [r4, #0]
 800b760:	6922      	ldr	r2, [r4, #16]
 800b762:	1a98      	subs	r0, r3, r2
 800b764:	6963      	ldr	r3, [r4, #20]
 800b766:	b2f6      	uxtb	r6, r6
 800b768:	4283      	cmp	r3, r0
 800b76a:	4637      	mov	r7, r6
 800b76c:	dc05      	bgt.n	800b77a <__swbuf_r+0x4e>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f7ff fe0d 	bl	800b390 <_fflush_r>
 800b776:	2800      	cmp	r0, #0
 800b778:	d1ed      	bne.n	800b756 <__swbuf_r+0x2a>
 800b77a:	68a3      	ldr	r3, [r4, #8]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	60a3      	str	r3, [r4, #8]
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	701e      	strb	r6, [r3, #0]
 800b788:	6962      	ldr	r2, [r4, #20]
 800b78a:	1c43      	adds	r3, r0, #1
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d004      	beq.n	800b79a <__swbuf_r+0x6e>
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	07db      	lsls	r3, r3, #31
 800b794:	d5e1      	bpl.n	800b75a <__swbuf_r+0x2e>
 800b796:	2e0a      	cmp	r6, #10
 800b798:	d1df      	bne.n	800b75a <__swbuf_r+0x2e>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4628      	mov	r0, r5
 800b79e:	f7ff fdf7 	bl	800b390 <_fflush_r>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0d9      	beq.n	800b75a <__swbuf_r+0x2e>
 800b7a6:	e7d6      	b.n	800b756 <__swbuf_r+0x2a>

0800b7a8 <__swsetup_r>:
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4b29      	ldr	r3, [pc, #164]	@ (800b850 <__swsetup_r+0xa8>)
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	6818      	ldr	r0, [r3, #0]
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	b118      	cbz	r0, 800b7bc <__swsetup_r+0x14>
 800b7b4:	6a03      	ldr	r3, [r0, #32]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <__swsetup_r+0x14>
 800b7b8:	f7fe f886 	bl	80098c8 <__sinit>
 800b7bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c0:	0719      	lsls	r1, r3, #28
 800b7c2:	d422      	bmi.n	800b80a <__swsetup_r+0x62>
 800b7c4:	06da      	lsls	r2, r3, #27
 800b7c6:	d407      	bmi.n	800b7d8 <__swsetup_r+0x30>
 800b7c8:	2209      	movs	r2, #9
 800b7ca:	602a      	str	r2, [r5, #0]
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	e033      	b.n	800b840 <__swsetup_r+0x98>
 800b7d8:	0758      	lsls	r0, r3, #29
 800b7da:	d512      	bpl.n	800b802 <__swsetup_r+0x5a>
 800b7dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7de:	b141      	cbz	r1, 800b7f2 <__swsetup_r+0x4a>
 800b7e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d002      	beq.n	800b7ee <__swsetup_r+0x46>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7fe fa15 	bl	8009c18 <_free_r>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7f2:	89a3      	ldrh	r3, [r4, #12]
 800b7f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6063      	str	r3, [r4, #4]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	6023      	str	r3, [r4, #0]
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0308 	orr.w	r3, r3, #8
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	b94b      	cbnz	r3, 800b822 <__swsetup_r+0x7a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b818:	d003      	beq.n	800b822 <__swsetup_r+0x7a>
 800b81a:	4621      	mov	r1, r4
 800b81c:	4628      	mov	r0, r5
 800b81e:	f000 f883 	bl	800b928 <__smakebuf_r>
 800b822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b826:	f013 0201 	ands.w	r2, r3, #1
 800b82a:	d00a      	beq.n	800b842 <__swsetup_r+0x9a>
 800b82c:	2200      	movs	r2, #0
 800b82e:	60a2      	str	r2, [r4, #8]
 800b830:	6962      	ldr	r2, [r4, #20]
 800b832:	4252      	negs	r2, r2
 800b834:	61a2      	str	r2, [r4, #24]
 800b836:	6922      	ldr	r2, [r4, #16]
 800b838:	b942      	cbnz	r2, 800b84c <__swsetup_r+0xa4>
 800b83a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b83e:	d1c5      	bne.n	800b7cc <__swsetup_r+0x24>
 800b840:	bd38      	pop	{r3, r4, r5, pc}
 800b842:	0799      	lsls	r1, r3, #30
 800b844:	bf58      	it	pl
 800b846:	6962      	ldrpl	r2, [r4, #20]
 800b848:	60a2      	str	r2, [r4, #8]
 800b84a:	e7f4      	b.n	800b836 <__swsetup_r+0x8e>
 800b84c:	2000      	movs	r0, #0
 800b84e:	e7f7      	b.n	800b840 <__swsetup_r+0x98>
 800b850:	20000284 	.word	0x20000284

0800b854 <_raise_r>:
 800b854:	291f      	cmp	r1, #31
 800b856:	b538      	push	{r3, r4, r5, lr}
 800b858:	4605      	mov	r5, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	d904      	bls.n	800b868 <_raise_r+0x14>
 800b85e:	2316      	movs	r3, #22
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	f04f 30ff 	mov.w	r0, #4294967295
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b86a:	b112      	cbz	r2, 800b872 <_raise_r+0x1e>
 800b86c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b870:	b94b      	cbnz	r3, 800b886 <_raise_r+0x32>
 800b872:	4628      	mov	r0, r5
 800b874:	f000 f830 	bl	800b8d8 <_getpid_r>
 800b878:	4622      	mov	r2, r4
 800b87a:	4601      	mov	r1, r0
 800b87c:	4628      	mov	r0, r5
 800b87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b882:	f000 b817 	b.w	800b8b4 <_kill_r>
 800b886:	2b01      	cmp	r3, #1
 800b888:	d00a      	beq.n	800b8a0 <_raise_r+0x4c>
 800b88a:	1c59      	adds	r1, r3, #1
 800b88c:	d103      	bne.n	800b896 <_raise_r+0x42>
 800b88e:	2316      	movs	r3, #22
 800b890:	6003      	str	r3, [r0, #0]
 800b892:	2001      	movs	r0, #1
 800b894:	e7e7      	b.n	800b866 <_raise_r+0x12>
 800b896:	2100      	movs	r1, #0
 800b898:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b89c:	4620      	mov	r0, r4
 800b89e:	4798      	blx	r3
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7e0      	b.n	800b866 <_raise_r+0x12>

0800b8a4 <raise>:
 800b8a4:	4b02      	ldr	r3, [pc, #8]	@ (800b8b0 <raise+0xc>)
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	6818      	ldr	r0, [r3, #0]
 800b8aa:	f7ff bfd3 	b.w	800b854 <_raise_r>
 800b8ae:	bf00      	nop
 800b8b0:	20000284 	.word	0x20000284

0800b8b4 <_kill_r>:
 800b8b4:	b538      	push	{r3, r4, r5, lr}
 800b8b6:	4d07      	ldr	r5, [pc, #28]	@ (800b8d4 <_kill_r+0x20>)
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	4608      	mov	r0, r1
 800b8be:	4611      	mov	r1, r2
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	f7fa f8f9 	bl	8005ab8 <_kill>
 800b8c6:	1c43      	adds	r3, r0, #1
 800b8c8:	d102      	bne.n	800b8d0 <_kill_r+0x1c>
 800b8ca:	682b      	ldr	r3, [r5, #0]
 800b8cc:	b103      	cbz	r3, 800b8d0 <_kill_r+0x1c>
 800b8ce:	6023      	str	r3, [r4, #0]
 800b8d0:	bd38      	pop	{r3, r4, r5, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20000e08 	.word	0x20000e08

0800b8d8 <_getpid_r>:
 800b8d8:	f7fa b8e6 	b.w	8005aa8 <_getpid>

0800b8dc <__swhatbuf_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	460c      	mov	r4, r1
 800b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	b096      	sub	sp, #88	@ 0x58
 800b8e8:	4615      	mov	r5, r2
 800b8ea:	461e      	mov	r6, r3
 800b8ec:	da0d      	bge.n	800b90a <__swhatbuf_r+0x2e>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8f4:	f04f 0100 	mov.w	r1, #0
 800b8f8:	bf14      	ite	ne
 800b8fa:	2340      	movne	r3, #64	@ 0x40
 800b8fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b900:	2000      	movs	r0, #0
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	602b      	str	r3, [r5, #0]
 800b906:	b016      	add	sp, #88	@ 0x58
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	466a      	mov	r2, sp
 800b90c:	f000 f848 	bl	800b9a0 <_fstat_r>
 800b910:	2800      	cmp	r0, #0
 800b912:	dbec      	blt.n	800b8ee <__swhatbuf_r+0x12>
 800b914:	9901      	ldr	r1, [sp, #4]
 800b916:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b91a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b91e:	4259      	negs	r1, r3
 800b920:	4159      	adcs	r1, r3
 800b922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b926:	e7eb      	b.n	800b900 <__swhatbuf_r+0x24>

0800b928 <__smakebuf_r>:
 800b928:	898b      	ldrh	r3, [r1, #12]
 800b92a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b92c:	079d      	lsls	r5, r3, #30
 800b92e:	4606      	mov	r6, r0
 800b930:	460c      	mov	r4, r1
 800b932:	d507      	bpl.n	800b944 <__smakebuf_r+0x1c>
 800b934:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	2301      	movs	r3, #1
 800b93e:	6163      	str	r3, [r4, #20]
 800b940:	b003      	add	sp, #12
 800b942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b944:	ab01      	add	r3, sp, #4
 800b946:	466a      	mov	r2, sp
 800b948:	f7ff ffc8 	bl	800b8dc <__swhatbuf_r>
 800b94c:	9f00      	ldr	r7, [sp, #0]
 800b94e:	4605      	mov	r5, r0
 800b950:	4639      	mov	r1, r7
 800b952:	4630      	mov	r0, r6
 800b954:	f7fd f85c 	bl	8008a10 <_malloc_r>
 800b958:	b948      	cbnz	r0, 800b96e <__smakebuf_r+0x46>
 800b95a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b95e:	059a      	lsls	r2, r3, #22
 800b960:	d4ee      	bmi.n	800b940 <__smakebuf_r+0x18>
 800b962:	f023 0303 	bic.w	r3, r3, #3
 800b966:	f043 0302 	orr.w	r3, r3, #2
 800b96a:	81a3      	strh	r3, [r4, #12]
 800b96c:	e7e2      	b.n	800b934 <__smakebuf_r+0xc>
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	6020      	str	r0, [r4, #0]
 800b972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	9b01      	ldr	r3, [sp, #4]
 800b97a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b97e:	b15b      	cbz	r3, 800b998 <__smakebuf_r+0x70>
 800b980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b984:	4630      	mov	r0, r6
 800b986:	f000 f81d 	bl	800b9c4 <_isatty_r>
 800b98a:	b128      	cbz	r0, 800b998 <__smakebuf_r+0x70>
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	f023 0303 	bic.w	r3, r3, #3
 800b992:	f043 0301 	orr.w	r3, r3, #1
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	431d      	orrs	r5, r3
 800b99c:	81a5      	strh	r5, [r4, #12]
 800b99e:	e7cf      	b.n	800b940 <__smakebuf_r+0x18>

0800b9a0 <_fstat_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	@ (800b9c0 <_fstat_r+0x20>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	602b      	str	r3, [r5, #0]
 800b9ae:	f7fa f8e3 	bl	8005b78 <_fstat>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d102      	bne.n	800b9bc <_fstat_r+0x1c>
 800b9b6:	682b      	ldr	r3, [r5, #0]
 800b9b8:	b103      	cbz	r3, 800b9bc <_fstat_r+0x1c>
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	bd38      	pop	{r3, r4, r5, pc}
 800b9be:	bf00      	nop
 800b9c0:	20000e08 	.word	0x20000e08

0800b9c4 <_isatty_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d06      	ldr	r5, [pc, #24]	@ (800b9e0 <_isatty_r+0x1c>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7fa f8e2 	bl	8005b98 <_isatty>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_isatty_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_isatty_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20000e08 	.word	0x20000e08

0800b9e4 <_init>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr

0800b9f0 <_fini>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr
