
Do_An_NKD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000280d8  0800b150  0800b150  0000c150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033228  08033228  00035230  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08033228  08033228  00034228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033230  08033230  00035230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033230  08033230  00034230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08033234  08033234  00034234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  08033238  00035000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00035230  2**0
                  CONTENTS
 10 .bss          000008d8  20000230  20000230  00035230  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b08  20000b08  00035230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00035230  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b43  00000000  00000000  00035260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cad  00000000  00000000  00046da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00049a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a15  00000000  00000000  0004ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139c5  00000000  00000000  0006e62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cee6f  00000000  00000000  00081ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150e61  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000db5  00000000  00000000  00150ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005c50  00000000  00000000  00151c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001578ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b134 	.word	0x0800b134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800b134 	.word	0x0800b134

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b9be 	b.w	8000f70 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f83c 	bl	8000c78 <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2lz>:
 8000c0c:	b538      	push	{r3, r4, r5, lr}
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2300      	movs	r3, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	460d      	mov	r5, r1
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_dcmplt>
 8000c1a:	b928      	cbnz	r0, 8000c28 <__aeabi_d2lz+0x1c>
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	4629      	mov	r1, r5
 8000c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c24:	f000 b80a 	b.w	8000c3c <__aeabi_d2ulz>
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c2e:	f000 f805 	bl	8000c3c <__aeabi_d2ulz>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2ulz>:
 8000c3c:	b5d0      	push	{r4, r6, r7, lr}
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <__aeabi_d2ulz+0x34>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	4606      	mov	r6, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	f7ff fce7 	bl	8000618 <__aeabi_dmul>
 8000c4a:	f7ff ffa7 	bl	8000b9c <__aeabi_d2uiz>
 8000c4e:	4604      	mov	r4, r0
 8000c50:	f7ff fc68 	bl	8000524 <__aeabi_ui2d>
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <__aeabi_d2ulz+0x38>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	f7ff fcde 	bl	8000618 <__aeabi_dmul>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	460b      	mov	r3, r1
 8000c60:	4630      	mov	r0, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	f7ff fb20 	bl	80002a8 <__aeabi_dsub>
 8000c68:	f7ff ff98 	bl	8000b9c <__aeabi_d2uiz>
 8000c6c:	4621      	mov	r1, r4
 8000c6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c70:	3df00000 	.word	0x3df00000
 8000c74:	41f00000 	.word	0x41f00000

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <XPT2046_TouchSelect>:
}

#endif /* SOFTWARE_SPI */

static void XPT2046_TouchSelect()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f7e:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <XPT2046_TouchSelect+0x14>)
 8000f80:	f004 fe4e 	bl	8005c20 <HAL_GPIO_WritePin>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020400 	.word	0x40020400

08000f8c <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f96:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <XPT2046_TouchUnselect+0x14>)
 8000f98:	f004 fe42 	bl	8005c20 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40020400 	.word	0x40020400

08000fa4 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 8000fa8:	2120      	movs	r1, #32
 8000faa:	4805      	ldr	r0, [pc, #20]	@ (8000fc0 <XPT2046_TouchPressed+0x1c>)
 8000fac:	f004 fe20 	bl	8005bf0 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf0c      	ite	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	2300      	movne	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40020800 	.word	0x40020800

08000fc4 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	@ 0x30
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

#endif /* SOFTWARE_SPI */

    XPT2046_TouchSelect();
 8000fce:	f7ff ffd1 	bl	8000f74 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	77bb      	strb	r3, [r7, #30]
 8000fe2:	e03f      	b.n	8001064 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 8000fe4:	f7ff ffde 	bl	8000fa4 <XPT2046_TouchPressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d13b      	bne.n	800106c <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8000ff4:	7ffb      	ldrb	r3, [r7, #31]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	77fb      	strb	r3, [r7, #31]
	   x_raw[0] = spi_read_byte();
	   x_raw[1] = spi_read_byte();

#else

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4945      	ldr	r1, [pc, #276]	@ (8001118 <XPT2046_TouchGetCoordinates+0x154>)
 8001002:	4846      	ldr	r0, [pc, #280]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001004:	f005 fb5f 	bl	80066c6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8001008:	f107 0210 	add.w	r2, r7, #16
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2302      	movs	r3, #2
 8001014:	4942      	ldr	r1, [pc, #264]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001016:	4841      	ldr	r0, [pc, #260]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001018:	f005 fc99 	bl	800694e <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2201      	movs	r2, #1
 8001022:	4940      	ldr	r1, [pc, #256]	@ (8001124 <XPT2046_TouchGetCoordinates+0x160>)
 8001024:	483d      	ldr	r0, [pc, #244]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 8001026:	f005 fb4e 	bl	80066c6 <HAL_SPI_Transmit>
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2302      	movs	r3, #2
 8001036:	493a      	ldr	r1, [pc, #232]	@ (8001120 <XPT2046_TouchGetCoordinates+0x15c>)
 8001038:	4838      	ldr	r0, [pc, #224]	@ (800111c <XPT2046_TouchGetCoordinates+0x158>)
 800103a:	f005 fc88 	bl	800694e <HAL_SPI_TransmitReceive>

#endif /* SOFTWARE_SPI */

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800103e:	7b3b      	ldrb	r3, [r7, #12]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	7b7a      	ldrb	r2, [r7, #13]
 8001044:	4313      	orrs	r3, r2
 8001046:	461a      	mov	r2, r3
 8001048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104a:	4413      	add	r3, r2
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800104e:	7c3b      	ldrb	r3, [r7, #16]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	7c7a      	ldrb	r2, [r7, #17]
 8001054:	4313      	orrs	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800105e:	7fbb      	ldrb	r3, [r7, #30]
 8001060:	3301      	adds	r3, #1
 8001062:	77bb      	strb	r3, [r7, #30]
 8001064:	7fbb      	ldrb	r3, [r7, #30]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	d9bc      	bls.n	8000fe4 <XPT2046_TouchGetCoordinates+0x20>
 800106a:	e000      	b.n	800106e <XPT2046_TouchGetCoordinates+0xaa>
            break;
 800106c:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800106e:	f7ff ff8d 	bl	8000f8c <XPT2046_TouchUnselect>

    if(nsamples < 16)
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	2b0f      	cmp	r3, #15
 8001076:	d801      	bhi.n	800107c <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 8001078:	2300      	movs	r3, #0
 800107a:	e049      	b.n	8001110 <XPT2046_TouchGetCoordinates+0x14c>

    uint32_t raw_x = (avg_x / 16);
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	f640 5247 	movw	r2, #3399	@ 0xd47
 8001088:	4293      	cmp	r3, r2
 800108a:	d802      	bhi.n	8001092 <XPT2046_TouchGetCoordinates+0xce>
 800108c:	f640 5348 	movw	r3, #3400	@ 0xd48
 8001090:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f247 1248 	movw	r2, #29000	@ 0x7148
 8001098:	4293      	cmp	r3, r2
 800109a:	d902      	bls.n	80010a2 <XPT2046_TouchGetCoordinates+0xde>
 800109c:	f247 1348 	movw	r3, #29000	@ 0x7148
 80010a0:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f640 42e3 	movw	r2, #3299	@ 0xce3
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <XPT2046_TouchGetCoordinates+0xf4>
 80010b2:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80010b6:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010be:	4293      	cmp	r3, r2
 80010c0:	d902      	bls.n	80010c8 <XPT2046_TouchGetCoordinates+0x104>
 80010c2:	f247 5330 	movw	r3, #30000	@ 0x7530
 80010c6:	617b      	str	r3, [r7, #20]
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 1)
	*x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
	*y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#elif (ORIENTATION == 2)
    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4613      	mov	r3, r2
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	f5a3 2347 	sub.w	r3, r3, #815104	@ 0xc7000
 80010d6:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 80010da:	4a13      	ldr	r2, [pc, #76]	@ (8001128 <XPT2046_TouchGetCoordinates+0x164>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0b5b      	lsrs	r3, r3, #13
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	801a      	strh	r2, [r3, #0]
    *y = XPT2046_SCALE_Y - (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80010f6:	f5a3 53e8 	sub.w	r3, r3, #7424	@ 0x1d00
 80010fa:	4a0c      	ldr	r2, [pc, #48]	@ (800112c <XPT2046_TouchGetCoordinates+0x168>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	0b5b      	lsrs	r3, r3, #13
 8001102:	b29b      	uxth	r3, r3
 8001104:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001108:	b29a      	uxth	r2, r3
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	801a      	strh	r2, [r3, #0]
#elif (ORIENTATION == 3)
    *x = XPT2046_SCALE_X - (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
#endif

    return true;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3728      	adds	r7, #40	@ 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	08030f20 	.word	0x08030f20
 800111c:	2000045c 	.word	0x2000045c
 8001120:	08030f24 	.word	0x08030f24
 8001124:	08030f28 	.word	0x08030f28
 8001128:	51eb851f 	.word	0x51eb851f
 800112c:	4e8b8659 	.word	0x4e8b8659

08001130 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <case_insensitive_strcmp+0x16>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8001146:	2301      	movs	r3, #1
 8001148:	e056      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d10d      	bne.n	800116e <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e050      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <case_insensitive_strcmp+0x32>
        {
            return 0;
 800115e:	2300      	movs	r3, #0
 8001160:	e04a      	b.n	80011f8 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3301      	adds	r3, #1
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	73fb      	strb	r3, [r7, #15]
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	3301      	adds	r3, #1
 8001178:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800117a:	4413      	add	r3, r2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d103      	bne.n	800118e <case_insensitive_strcmp+0x5e>
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	f103 0220 	add.w	r2, r3, #32
 800118c:	e000      	b.n	8001190 <case_insensitive_strcmp+0x60>
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73bb      	strb	r3, [r7, #14]
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	3301      	adds	r3, #1
 800119a:	491a      	ldr	r1, [pc, #104]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 800119c:	440b      	add	r3, r1
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d102      	bne.n	80011ae <case_insensitive_strcmp+0x7e>
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	3320      	adds	r3, #32
 80011ac:	e000      	b.n	80011b0 <case_insensitive_strcmp+0x80>
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d0d0      	beq.n	8001156 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	737b      	strb	r3, [r7, #13]
 80011ba:	7b7b      	ldrb	r3, [r7, #13]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d103      	bne.n	80011d4 <case_insensitive_strcmp+0xa4>
 80011cc:	7b7b      	ldrb	r3, [r7, #13]
 80011ce:	f103 0220 	add.w	r2, r3, #32
 80011d2:	e000      	b.n	80011d6 <case_insensitive_strcmp+0xa6>
 80011d4:	7b7a      	ldrb	r2, [r7, #13]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	733b      	strb	r3, [r7, #12]
 80011dc:	7b3b      	ldrb	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	@ (8001204 <case_insensitive_strcmp+0xd4>)
 80011e2:	440b      	add	r3, r1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d102      	bne.n	80011f4 <case_insensitive_strcmp+0xc4>
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	3320      	adds	r3, #32
 80011f2:	e000      	b.n	80011f6 <case_insensitive_strcmp+0xc6>
 80011f4:	7b3b      	ldrb	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	08033028 	.word	0x08033028

08001208 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	4798      	blx	r3
 8001218:	60f8      	str	r0, [r7, #12]
    if (node)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8001220:	2228      	movs	r2, #40	@ 0x28
 8001222:	2100      	movs	r1, #0
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f007 ffb5 	bl	8009194 <memset>
    }

    return node;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8001240:	e03d      	b.n	80012be <cJSON_Delete+0x8a>
    {
        next = item->next;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d108      	bne.n	8001266 <cJSON_Delete+0x32>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ffe7 	bl	8001234 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <cJSON_Delete+0x58>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <cJSON_Delete+0x9c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6912      	ldr	r2, [r2, #16]
 8001282:	4610      	mov	r0, r2
 8001284:	4798      	blx	r3
            item->valuestring = NULL;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <cJSON_Delete+0x7e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80012a0:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6a12      	ldr	r2, [r2, #32]
 80012a8:	4610      	mov	r0, r2
 80012aa:	4798      	blx	r3
            item->string = NULL;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <cJSON_Delete+0x9c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
        item = next;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1be      	bne.n	8001242 <cJSON_Delete+0xe>
    }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000

080012d4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80012d8:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	0000      	movs	r0, r0
	...

080012e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b098      	sub	sp, #96	@ 0x60
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001302:	f7ff ffe7 	bl	80012d4 <get_decimal_point>
 8001306:	4603      	mov	r3, r0
 8001308:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <parse_number+0x36>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <parse_number+0x3a>
    {
        return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e0a0      	b.n	8001464 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8001322:	2300      	movs	r3, #0
 8001324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001326:	e03d      	b.n	80013a4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6899      	ldr	r1, [r3, #8]
 8001330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001332:	440b      	add	r3, r1
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b45      	cmp	r3, #69	@ 0x45
 800133a:	dc17      	bgt.n	800136c <parse_number+0x84>
 800133c:	2b2b      	cmp	r3, #43	@ 0x2b
 800133e:	db40      	blt.n	80013c2 <parse_number+0xda>
 8001340:	3b2b      	subs	r3, #43	@ 0x2b
 8001342:	2201      	movs	r2, #1
 8001344:	409a      	lsls	r2, r3
 8001346:	4b4c      	ldr	r3, [pc, #304]	@ (8001478 <parse_number+0x190>)
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10b      	bne.n	8001370 <parse_number+0x88>
 8001358:	f002 0308 	and.w	r3, r2, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800136a:	e02a      	b.n	80013c2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800136c:	2b65      	cmp	r3, #101	@ 0x65
 800136e:	d128      	bne.n	80013c2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6899      	ldr	r1, [r3, #8]
 8001378:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800137a:	440b      	add	r3, r1
 800137c:	4413      	add	r3, r2
 800137e:	7819      	ldrb	r1, [r3, #0]
 8001380:	f107 0208 	add.w	r2, r7, #8
 8001384:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
                break;
 800138c:	e007      	b.n	800139e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800138e:	f107 0208 	add.w	r2, r7, #8
 8001392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001394:	4413      	add	r3, r2
 8001396:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800139a:	701a      	strb	r2, [r3, #0]
                break;
 800139c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800139e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a0:	3301      	adds	r3, #1
 80013a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80013a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80013a8:	d80d      	bhi.n	80013c6 <parse_number+0xde>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00a      	beq.n	80013c6 <parse_number+0xde>
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013b6:	441a      	add	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d3b3      	bcc.n	8001328 <parse_number+0x40>
        }
    }
loop_end:
 80013c0:	e001      	b.n	80013c6 <parse_number+0xde>
                goto loop_end;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <parse_number+0xe0>
loop_end:
 80013c6:	bf00      	nop
    number_c_string[i] = '\0';
 80013c8:	f107 0208 	add.w	r2, r7, #8
 80013cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ce:	4413      	add	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80013d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f007 fda6 	bl	8008f30 <strtod>
 80013e4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80013e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d101      	bne.n	80013f6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80013f2:	2300      	movs	r3, #0
 80013f4:	e036      	b.n	8001464 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001400:	a31b      	add	r3, pc, #108	@ (adr r3, 8001470 <parse_number+0x188>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800140a:	f7ff fb8b 	bl	8000b24 <__aeabi_dcmpge>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d004      	beq.n	800141e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	e015      	b.n	800144a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <parse_number+0x194>)
 8001424:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001428:	f7ff fb72 	bl	8000b10 <__aeabi_dcmple>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	e006      	b.n	800144a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800143c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001440:	f7ff fb84 	bl	8000b4c <__aeabi_d2iz>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2208      	movs	r2, #8
 800144e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001456:	f107 0208 	add.w	r2, r7, #8
 800145a:	1a8a      	subs	r2, r1, r2
 800145c:	441a      	add	r2, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	609a      	str	r2, [r3, #8]
    return true;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3760      	adds	r7, #96	@ 0x60
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f3af 8000 	nop.w
 8001470:	ffc00000 	.word	0xffc00000
 8001474:	41dfffff 	.word	0x41dfffff
 8001478:	04007fe5 	.word	0x04007fe5
 800147c:	c1e00000 	.word	0xc1e00000

08001480 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	e04c      	b.n	8001530 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b2f      	cmp	r3, #47	@ 0x2f
 80014a0:	d90f      	bls.n	80014c2 <parse_hex4+0x42>
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b39      	cmp	r3, #57	@ 0x39
 80014ac:	d809      	bhi.n	80014c2 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	3b30      	subs	r3, #48	@ 0x30
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e02d      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4413      	add	r3, r2
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b40      	cmp	r3, #64	@ 0x40
 80014cc:	d90f      	bls.n	80014ee <parse_hex4+0x6e>
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b46      	cmp	r3, #70	@ 0x46
 80014d8:	d809      	bhi.n	80014ee <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4413      	add	r3, r2
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	3b37      	subs	r3, #55	@ 0x37
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e017      	b.n	800151e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b60      	cmp	r3, #96	@ 0x60
 80014f8:	d90f      	bls.n	800151a <parse_hex4+0x9a>
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b66      	cmp	r3, #102	@ 0x66
 8001504:	d809      	bhi.n	800151a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4413      	add	r3, r2
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	3b57      	subs	r3, #87	@ 0x57
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	e001      	b.n	800151e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800151a:	2300      	movs	r3, #0
 800151c:	e00c      	b.n	8001538 <parse_hex4+0xb8>
        }

        if (i < 3)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d802      	bhi.n	800152a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	3301      	adds	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d9af      	bls.n	8001496 <parse_hex4+0x16>
        }
    }

    return h;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b05      	cmp	r3, #5
 800157c:	f340 80b7 	ble.w	80016ee <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	3302      	adds	r3, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff7b 	bl	8001480 <parse_hex4>
 800158a:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001592:	d304      	bcc.n	800159e <utf16_literal_to_utf8+0x5a>
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800159a:	f0c0 80aa 	bcc.w	80016f2 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 80015a4:	d337      	bcc.n	8001616 <utf16_literal_to_utf8+0xd2>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015ac:	d233      	bcs.n	8001616 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3306      	adds	r3, #6
 80015b2:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80015b8:	230c      	movs	r3, #12
 80015ba:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	f340 8096 	ble.w	80016f6 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b5c      	cmp	r3, #92	@ 0x5c
 80015d0:	f040 8093 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b75      	cmp	r3, #117	@ 0x75
 80015dc:	f040 808d 	bne.w	80016fa <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3302      	adds	r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff4b 	bl	8001480 <parse_hex4>
 80015ea:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 80015f2:	f0c0 8084 	bcc.w	80016fe <utf16_literal_to_utf8+0x1ba>
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 80015fc:	d27f      	bcs.n	80016fe <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	029a      	lsls	r2, r3, #10
 8001602:	4b43      	ldr	r3, [pc, #268]	@ (8001710 <utf16_literal_to_utf8+0x1cc>)
 8001604:	4013      	ands	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800160c:	4313      	orrs	r3, r2
 800160e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001614:	e004      	b.n	8001620 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001616:	2306      	movs	r3, #6
 8001618:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001622:	2b7f      	cmp	r3, #127	@ 0x7f
 8001624:	d803      	bhi.n	800162e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800162c:	e01f      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001634:	d206      	bcs.n	8001644 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8001636:	2302      	movs	r3, #2
 8001638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 800163c:	23c0      	movs	r3, #192	@ 0xc0
 800163e:	f887 3020 	strb.w	r3, [r7, #32]
 8001642:	e014      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164a:	d206      	bcs.n	800165a <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800164c:	2303      	movs	r3, #3
 800164e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001652:	23e0      	movs	r3, #224	@ 0xe0
 8001654:	f887 3020 	strb.w	r3, [r7, #32]
 8001658:	e009      	b.n	800166e <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8001660:	d24f      	bcs.n	8001702 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001662:	2304      	movs	r3, #4
 8001664:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8001668:	23f0      	movs	r3, #240	@ 0xf0
 800166a:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800166e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001672:	3b01      	subs	r3, #1
 8001674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001678:	e015      	b.n	80016a6 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800168c:	440b      	add	r3, r1
 800168e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800169c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016a0:	3b01      	subs	r3, #1
 80016a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80016a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1e5      	bne.n	800167a <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80016ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d909      	bls.n	80016ca <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e007      	b.n	80016da <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80016e2:	441a      	add	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80016e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80016ec:	e00b      	b.n	8001706 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80016ee:	bf00      	nop
 80016f0:	e008      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80016f2:	bf00      	nop
 80016f4:	e006      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016f6:	bf00      	nop
 80016f8:	e004      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fa:	bf00      	nop
 80016fc:	e002      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001702:	bf00      	nop

fail:
    return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	@ 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000ffc00 	.word	0x000ffc00

08001714 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	@ 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b22      	cmp	r3, #34	@ 0x22
 8001750:	f040 8103 	bne.w	800195a <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800175c:	e017      	b.n	800178e <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b5c      	cmp	r3, #92	@ 0x5c
 8001764:	d110      	bne.n	8001788 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	461a      	mov	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	429a      	cmp	r2, r3
 8001778:	f080 80f1 	bcs.w	800195e <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	3301      	adds	r3, #1
 8001786:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	3301      	adds	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6a3a      	ldr	r2, [r7, #32]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	461a      	mov	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d203      	bcs.n	80017a8 <parse_string+0x94>
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b22      	cmp	r3, #34	@ 0x22
 80017a6:	d1da      	bne.n	800175e <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	461a      	mov	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	f080 80d3 	bcs.w	8001962 <parse_string+0x24e>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b22      	cmp	r3, #34	@ 0x22
 80017c2:	f040 80ce 	bne.w	8001962 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	4413      	add	r3, r2
 80017d0:	6a3a      	ldr	r2, [r7, #32]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	3201      	adds	r2, #1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4798      	blx	r3
 80017e8:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80ba 	beq.w	8001966 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80017f6:	e094      	b.n	8001922 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80017fe:	d008      	beq.n	8001812 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001802:	1c53      	adds	r3, r2, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1c59      	adds	r1, r3, #1
 800180a:	60f9      	str	r1, [r7, #12]
 800180c:	7812      	ldrb	r2, [r2, #0]
 800180e:	701a      	strb	r2, [r3, #0]
 8001810:	e087      	b.n	8001922 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001812:	2302      	movs	r3, #2
 8001814:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001816:	6a3a      	ldr	r2, [r7, #32]
 8001818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f340 80a4 	ble.w	800196a <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	3301      	adds	r3, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b75      	cmp	r3, #117	@ 0x75
 800182a:	f300 80a0 	bgt.w	800196e <parse_string+0x25a>
 800182e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001830:	da04      	bge.n	800183c <parse_string+0x128>
 8001832:	2b22      	cmp	r3, #34	@ 0x22
 8001834:	d05c      	beq.n	80018f0 <parse_string+0x1dc>
 8001836:	2b2f      	cmp	r3, #47	@ 0x2f
 8001838:	d05a      	beq.n	80018f0 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800183a:	e098      	b.n	800196e <parse_string+0x25a>
            switch (input_pointer[1])
 800183c:	3b5c      	subs	r3, #92	@ 0x5c
 800183e:	2b19      	cmp	r3, #25
 8001840:	f200 8095 	bhi.w	800196e <parse_string+0x25a>
 8001844:	a201      	add	r2, pc, #4	@ (adr r2, 800184c <parse_string+0x138>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	080018f1 	.word	0x080018f1
 8001850:	0800196f 	.word	0x0800196f
 8001854:	0800196f 	.word	0x0800196f
 8001858:	0800196f 	.word	0x0800196f
 800185c:	0800196f 	.word	0x0800196f
 8001860:	0800196f 	.word	0x0800196f
 8001864:	080018b5 	.word	0x080018b5
 8001868:	0800196f 	.word	0x0800196f
 800186c:	0800196f 	.word	0x0800196f
 8001870:	0800196f 	.word	0x0800196f
 8001874:	080018c1 	.word	0x080018c1
 8001878:	0800196f 	.word	0x0800196f
 800187c:	0800196f 	.word	0x0800196f
 8001880:	0800196f 	.word	0x0800196f
 8001884:	0800196f 	.word	0x0800196f
 8001888:	0800196f 	.word	0x0800196f
 800188c:	0800196f 	.word	0x0800196f
 8001890:	0800196f 	.word	0x0800196f
 8001894:	080018cd 	.word	0x080018cd
 8001898:	0800196f 	.word	0x0800196f
 800189c:	0800196f 	.word	0x0800196f
 80018a0:	0800196f 	.word	0x0800196f
 80018a4:	080018d9 	.word	0x080018d9
 80018a8:	0800196f 	.word	0x0800196f
 80018ac:	080018e5 	.word	0x080018e5
 80018b0:	08001901 	.word	0x08001901
                    *output_pointer++ = '\b';
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60fa      	str	r2, [r7, #12]
 80018ba:	2208      	movs	r2, #8
 80018bc:	701a      	strb	r2, [r3, #0]
                    break;
 80018be:	e02c      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\f';
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60fa      	str	r2, [r7, #12]
 80018c6:	220c      	movs	r2, #12
 80018c8:	701a      	strb	r2, [r3, #0]
                    break;
 80018ca:	e026      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\n';
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	60fa      	str	r2, [r7, #12]
 80018d2:	220a      	movs	r2, #10
 80018d4:	701a      	strb	r2, [r3, #0]
                    break;
 80018d6:	e020      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\r';
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	60fa      	str	r2, [r7, #12]
 80018de:	220d      	movs	r2, #13
 80018e0:	701a      	strb	r2, [r3, #0]
                    break;
 80018e2:	e01a      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = '\t';
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	60fa      	str	r2, [r7, #12]
 80018ea:	2209      	movs	r2, #9
 80018ec:	701a      	strb	r2, [r3, #0]
                    break;
 80018ee:	e014      	b.n	800191a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	1c59      	adds	r1, r3, #1
 80018f8:	60f9      	str	r1, [r7, #12]
 80018fa:	7812      	ldrb	r2, [r2, #0]
 80018fc:	701a      	strb	r2, [r3, #0]
                    break;
 80018fe:	e00c      	b.n	800191a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	461a      	mov	r2, r3
 8001906:	6a39      	ldr	r1, [r7, #32]
 8001908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800190a:	f7ff fe1b 	bl	8001544 <utf16_literal_to_utf8>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001912:	7dfb      	ldrb	r3, [r7, #23]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d02c      	beq.n	8001972 <parse_string+0x25e>
                    break;
 8001918:	bf00      	nop
            }
            input_pointer += sequence_length;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191e:	4413      	add	r3, r2
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	f4ff af66 	bcc.w	80017f8 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2210      	movs	r2, #16
 8001936:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a3a      	ldr	r2, [r7, #32]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	609a      	str	r2, [r3, #8]

    return true;
 8001956:	2301      	movs	r3, #1
 8001958:	e020      	b.n	800199c <parse_string+0x288>
        goto fail;
 800195a:	bf00      	nop
 800195c:	e00a      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800195e:	bf00      	nop
 8001960:	e008      	b.n	8001974 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001962:	bf00      	nop
 8001964:	e006      	b.n	8001974 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001966:	bf00      	nop
 8001968:	e004      	b.n	8001974 <parse_string+0x260>
                goto fail;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <parse_string+0x260>
                    goto fail;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <parse_string+0x260>
                        goto fail;
 8001972:	bf00      	nop

fail:
    if (output != NULL)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	69f8      	ldr	r0, [r7, #28]
 8001980:	4798      	blx	r3
        output = NULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	461a      	mov	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	609a      	str	r2, [r3, #8]
    }

    return false;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3728      	adds	r7, #40	@ 0x28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <buffer_skip_whitespace+0x16>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e02c      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <buffer_skip_whitespace+0x2c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d306      	bcc.n	80019de <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e021      	b.n	8001a18 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00d      	beq.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d207      	bcs.n	8001a00 <buffer_skip_whitespace+0x5c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	d9e9      	bls.n	80019d4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d104      	bne.n	8001a16 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <skip_utf8_bom+0x1e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e01c      	b.n	8001a80 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d018      	beq.n	8001a7e <skip_utf8_bom+0x5a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	1d1a      	adds	r2, r3, #4
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d211      	bcs.n	8001a7e <skip_utf8_bom+0x5a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	2203      	movs	r2, #3
 8001a66:	4908      	ldr	r1, [pc, #32]	@ (8001a88 <skip_utf8_bom+0x64>)
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f007 fbb6 	bl	80091da <strncmp>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d104      	bne.n	8001a7e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	1cda      	adds	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001a7e:	687b      	ldr	r3, [r7, #4]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	0800b188 	.word	0x0800b188

08001a8c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e00c      	b.n	8001abc <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7fe fb9e 	bl	80001e4 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	6979      	ldr	r1, [r7, #20]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f805 	bl	8001ac4 <cJSON_ParseWithLengthOpts>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08e      	sub	sp, #56	@ 0x38
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001ad2:	f107 0318 	add.w	r3, r7, #24
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001aea:	4b41      	ldr	r3, [pc, #260]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d042      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d03f      	beq.n	8001b82 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001b0e:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8001b1a:	4836      	ldr	r0, [pc, #216]	@ (8001bf4 <cJSON_ParseWithLengthOpts+0x130>)
 8001b1c:	f7ff fb74 	bl	8001208 <cJSON_New_Item>
 8001b20:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d02e      	beq.n	8001b86 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8001b28:	f107 0318 	add.w	r3, r7, #24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff79 	bl	8001a24 <skip_utf8_bom>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff35 	bl	80019a4 <buffer_skip_whitespace>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b40:	f000 f868 	bl	8001c14 <parse_value>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01f      	beq.n	8001b8a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00e      	beq.n	8001b6e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001b50:	f107 0318 	add.w	r3, r7, #24
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff25 	bl	80019a4 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d215      	bcs.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	4413      	add	r3, r2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	6a3b      	ldr	r3, [r7, #32]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
    }

    return item;
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	e031      	b.n	8001be6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001b82:	bf00      	nop
 8001b84:	e004      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b86:	bf00      	nop
 8001b88:	e002      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001b8a:	bf00      	nop
 8001b8c:	e000      	b.n	8001b90 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 8001b8e:	bf00      	nop

fail:
    if (item != NULL)
 8001b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001b96:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b98:	f7ff fb4c 	bl	8001234 <cJSON_Delete>
    }

    if (value != NULL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8001baa:	6a3a      	ldr	r2, [r7, #32]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d202      	bcs.n	8001bb8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001bb2:	6a3b      	ldr	r3, [r7, #32]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e005      	b.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d004      	beq.n	8001bd4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	441a      	add	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f107 0310 	add.w	r3, r7, #16
 8001bdc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001be0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3738      	adds	r7, #56	@ 0x38
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000024c 	.word	0x2000024c
 8001bf4:	20000000 	.word	0x20000000

08001bf8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2100      	movs	r1, #0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ff41 	bl	8001a8c <cJSON_ParseWithOpts>
 8001c0a:	4603      	mov	r3, r0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <parse_value+0x18>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <parse_value+0x1c>
    {
        return false; /* no input */
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e0d2      	b.n	8001dd6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01d      	beq.n	8001c72 <parse_value+0x5e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d816      	bhi.n	8001c72 <parse_value+0x5e>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4963      	ldr	r1, [pc, #396]	@ (8001de0 <parse_value+0x1cc>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 fac1 	bl	80091da <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	1d1a      	adds	r2, r3, #4
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]
        return true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0b1      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d01d      	beq.n	8001cb4 <parse_value+0xa0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	1d5a      	adds	r2, r3, #5
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d816      	bhi.n	8001cb4 <parse_value+0xa0>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2205      	movs	r2, #5
 8001c92:	4954      	ldr	r1, [pc, #336]	@ (8001de4 <parse_value+0x1d0>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f007 faa0 	bl	80091da <strncmp>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	1d5a      	adds	r2, r3, #5
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	609a      	str	r2, [r3, #8]
        return true;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e090      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d020      	beq.n	8001cfc <parse_value+0xe8>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	1d1a      	adds	r2, r3, #4
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d819      	bhi.n	8001cfc <parse_value+0xe8>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4944      	ldr	r1, [pc, #272]	@ (8001de8 <parse_value+0x1d4>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f007 fa7f 	bl	80091da <strncmp>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10c      	bne.n	8001cfc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	1d1a      	adds	r2, r3, #4
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	609a      	str	r2, [r3, #8]
        return true;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e06c      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d013      	beq.n	8001d2a <parse_value+0x116>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d20d      	bcs.n	8001d2a <parse_value+0x116>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b22      	cmp	r3, #34	@ 0x22
 8001d1c:	d105      	bne.n	8001d2a <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fcf7 	bl	8001714 <parse_string>
 8001d26:	4603      	mov	r3, r0
 8001d28:	e055      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d023      	beq.n	8001d78 <parse_value+0x164>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d21d      	bcs.n	8001d78 <parse_value+0x164>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d4a:	d00f      	beq.n	8001d6c <parse_value+0x158>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4413      	add	r3, r2
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d5a:	d90d      	bls.n	8001d78 <parse_value+0x164>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b39      	cmp	r3, #57	@ 0x39
 8001d6a:	d805      	bhi.n	8001d78 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001d6c:	6839      	ldr	r1, [r7, #0]
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff faba 	bl	80012e8 <parse_number>
 8001d74:	4603      	mov	r3, r0
 8001d76:	e02e      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d013      	beq.n	8001da6 <parse_value+0x192>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d20d      	bcs.n	8001da6 <parse_value+0x192>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b5b      	cmp	r3, #91	@ 0x5b
 8001d98:	d105      	bne.n	8001da6 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f825 	bl	8001dec <parse_array>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e017      	b.n	8001dd6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <parse_value+0x1c0>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20d      	bcs.n	8001dd4 <parse_value+0x1c0>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b7b      	cmp	r3, #123	@ 0x7b
 8001dc6:	d105      	bne.n	8001dd4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8d2 	bl	8001f74 <parse_object>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	e000      	b.n	8001dd6 <parse_value+0x1c2>
    }

    return false;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800b15c 	.word	0x0800b15c
 8001de4:	0800b18c 	.word	0x0800b18c
 8001de8:	0800b194 	.word	0x0800b194

08001dec <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e06:	d301      	bcc.n	8001e0c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e0af      	b.n	8001f6c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b5b      	cmp	r3, #91	@ 0x5b
 8001e24:	f040 8094 	bne.w	8001f50 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f7ff fdb6 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <parse_array+0x6e>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d207      	bcs.n	8001e5a <parse_array+0x6e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b5d      	cmp	r3, #93	@ 0x5d
 8001e58:	d061      	beq.n	8001f1e <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <parse_array+0x80>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d305      	bcc.n	8001e78 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	609a      	str	r2, [r3, #8]
        goto fail;
 8001e76:	e072      	b.n	8001f5e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9be 	bl	8001208 <cJSON_New_Item>
 8001e8c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d05f      	beq.n	8001f54 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d104      	bne.n	8001ea4 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e007      	b.n	8001eb4 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001ebe:	6838      	ldr	r0, [r7, #0]
 8001ec0:	f7ff fd70 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	6938      	ldr	r0, [r7, #16]
 8001ec8:	f7ff fea4 	bl	8001c14 <parse_value>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d042      	beq.n	8001f58 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ed2:	6838      	ldr	r0, [r7, #0]
 8001ed4:	f7ff fd66 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <parse_array+0x10e>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d207      	bcs.n	8001efa <parse_array+0x10e>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b2c      	cmp	r3, #44	@ 0x2c
 8001ef8:	d0c3      	beq.n	8001e82 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02d      	beq.n	8001f5c <parse_array+0x170>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d227      	bcs.n	8001f5c <parse_array+0x170>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b5d      	cmp	r3, #93	@ 0x5d
 8001f1a:	d11f      	bne.n	8001f5c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001f1c:	e000      	b.n	8001f20 <parse_array+0x134>
        goto success;
 8001f1e:	bf00      	nop
    input_buffer->depth--;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	1e5a      	subs	r2, r3, #1
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <parse_array+0x14a>
        head->prev = current_item;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	609a      	str	r2, [r3, #8]

    return true;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e00d      	b.n	8001f6c <parse_array+0x180>
        goto fail;
 8001f50:	bf00      	nop
 8001f52:	e004      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001f54:	bf00      	nop
 8001f56:	e002      	b.n	8001f5e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001f58:	bf00      	nop
 8001f5a:	e000      	b.n	8001f5e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001f5c:	bf00      	nop

fail:
    if (head != NULL)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001f64:	6978      	ldr	r0, [r7, #20]
 8001f66:	f7ff f965 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f8e:	d301      	bcc.n	8001f94 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001f90:	2300      	movs	r3, #0
 8001f92:	e0f7      	b.n	8002184 <parse_object+0x210>
    }
    input_buffer->depth++;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80db 	beq.w	800215c <parse_object+0x1e8>
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	f080 80d4 	bcs.w	800215c <parse_object+0x1e8>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b7b      	cmp	r3, #123	@ 0x7b
 8001fc2:	f040 80cb 	bne.w	800215c <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001fd0:	6838      	ldr	r0, [r7, #0]
 8001fd2:	f7ff fce7 	bl	80019a4 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00e      	beq.n	8001ffa <parse_object+0x86>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d208      	bcs.n	8001ffa <parse_object+0x86>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b7d      	cmp	r3, #125	@ 0x7d
 8001ff6:	f000 8098 	beq.w	800212a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <parse_object+0x98>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d305      	bcc.n	8002018 <parse_object+0xa4>
    {
        input_buffer->offset--;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	609a      	str	r2, [r3, #8]
        goto fail;
 8002016:	e0ae      	b.n	8002176 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	1e5a      	subs	r2, r3, #1
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3310      	adds	r3, #16
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff f8ee 	bl	8001208 <cJSON_New_Item>
 800202c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8095 	beq.w	8002160 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d104      	bne.n	8002046 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e007      	b.n	8002056 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8083 	beq.w	8002164 <parse_object+0x1f0>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	429a      	cmp	r2, r3
 800206a:	d27b      	bcs.n	8002164 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8002076:	6838      	ldr	r0, [r7, #0]
 8002078:	f7ff fc94 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	6938      	ldr	r0, [r7, #16]
 8002080:	f7ff fb48 	bl	8001714 <parse_string>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d06e      	beq.n	8002168 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f7ff fc8a 	bl	80019a4 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d063      	beq.n	800216c <parse_object+0x1f8>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d25d      	bcs.n	800216c <parse_object+0x1f8>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80020be:	d155      	bne.n	800216c <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80020ca:	6838      	ldr	r0, [r7, #0]
 80020cc:	f7ff fc6a 	bl	80019a4 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	6938      	ldr	r0, [r7, #16]
 80020d4:	f7ff fd9e 	bl	8001c14 <parse_value>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d048      	beq.n	8002170 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7ff fc60 	bl	80019a4 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00d      	beq.n	8002106 <parse_object+0x192>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d207      	bcs.n	8002106 <parse_object+0x192>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2c      	cmp	r3, #44	@ 0x2c
 8002104:	d08d      	beq.n	8002022 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d033      	beq.n	8002174 <parse_object+0x200>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	d22d      	bcs.n	8002174 <parse_object+0x200>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4413      	add	r3, r2
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b7d      	cmp	r3, #125	@ 0x7d
 8002126:	d125      	bne.n	8002174 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002128:	e000      	b.n	800212c <parse_object+0x1b8>
        goto success; /* empty object */
 800212a:	bf00      	nop
    input_buffer->depth--;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <parse_object+0x1ce>
        head->prev = current_item;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	609a      	str	r2, [r3, #8]
    return true;
 8002158:	2301      	movs	r3, #1
 800215a:	e013      	b.n	8002184 <parse_object+0x210>
        goto fail; /* not an object */
 800215c:	bf00      	nop
 800215e:	e00a      	b.n	8002176 <parse_object+0x202>
            goto fail; /* allocation failure */
 8002160:	bf00      	nop
 8002162:	e008      	b.n	8002176 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002164:	bf00      	nop
 8002166:	e006      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002168:	bf00      	nop
 800216a:	e004      	b.n	8002176 <parse_object+0x202>
            goto fail; /* invalid object */
 800216c:	bf00      	nop
 800216e:	e002      	b.n	8002176 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002170:	bf00      	nop
 8002172:	e000      	b.n	8002176 <parse_object+0x202>
        goto fail; /* expected end of object */
 8002174:	bf00      	nop

fail:
    if (head != NULL)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff f859 	bl	8001234 <cJSON_Delete>
    }

    return false;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <get_array_item>:

    return (int)size;
}

static cJSON* get_array_item(const cJSON *array, size_t index)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    cJSON *current_child = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]

    if (array == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <get_array_item+0x18>
    {
        return NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	e010      	b.n	80021c6 <get_array_item+0x3a>
    }

    current_child = array->child;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021aa:	e005      	b.n	80021b8 <get_array_item+0x2c>
    {
        index--;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	603b      	str	r3, [r7, #0]
        current_child = current_child->next;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
    while ((current_child != NULL) && (index > 0))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <get_array_item+0x38>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f3      	bne.n	80021ac <get_array_item+0x20>
    }

    return current_child;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <cJSON_GetArrayItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
    if (index < 0)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da01      	bge.n	80021e6 <cJSON_GetArrayItem+0x14>
    {
        return NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e005      	b.n	80021f2 <cJSON_GetArrayItem+0x20>
    }

    return get_array_item(array, (size_t)index);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	4619      	mov	r1, r3
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ffce 	bl	800218c <get_array_item>
 80021f0:	4603      	mov	r3, r0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <get_object_item>:

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <get_object_item+0x1c>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <get_object_item+0x20>
    {
        return NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	e033      	b.n	8002282 <get_object_item+0x88>
    }

    current_element = object->child;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d017      	beq.n	8002256 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002226:	e002      	b.n	800222e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d01c      	beq.n	800226e <get_object_item+0x74>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <get_object_item+0x74>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	4619      	mov	r1, r3
 8002242:	68b8      	ldr	r0, [r7, #8]
 8002244:	f7fd ffc4 	bl	80001d0 <strcmp>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ec      	bne.n	8002228 <get_object_item+0x2e>
 800224e:	e00e      	b.n	800226e <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <get_object_item+0x74>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4619      	mov	r1, r3
 8002262:	68b8      	ldr	r0, [r7, #8]
 8002264:	f7fe ff64 	bl	8001130 <case_insensitive_strcmp>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <get_object_item+0x82>
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <get_object_item+0x86>
        return NULL;
 800227c:	2300      	movs	r3, #0
 800227e:	e000      	b.n	8002282 <get_object_item+0x88>
    }

    return current_element;
 8002280:	697b      	ldr	r3, [r7, #20]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002294:	2200      	movs	r2, #0
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffae 	bl	80021fa <get_object_item>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <cJSON_IsArray>:

    return (item->type & 0xFF) == cJSON_String;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <cJSON_IsArray+0x12>
    {
        return false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e007      	b.n	80022ca <cJSON_IsArray+0x22>
    }

    return (item->type & 0xFF) == cJSON_Array;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 80022de:	2300      	movs	r3, #0
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	2301      	movs	r3, #1
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2200      	movs	r2, #0
 80022ea:	2101      	movs	r1, #1
 80022ec:	2000      	movs	r0, #0
 80022ee:	f001 fccf 	bl	8003c90 <lcdBuildMemoryAccessControlConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4bae      	ldr	r3, [pc, #696]	@ (80025b0 <lcdInit+0x2d8>)
 80022f8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80022fa:	2300      	movs	r3, #0
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2301      	movs	r3, #1
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	2201      	movs	r2, #1
 8002306:	2100      	movs	r1, #0
 8002308:	2000      	movs	r0, #0
 800230a:	f001 fcc1 	bl	8003c90 <lcdBuildMemoryAccessControlConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	4ba8      	ldr	r3, [pc, #672]	@ (80025b4 <lcdInit+0x2dc>)
 8002314:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8002316:	2300      	movs	r3, #0
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2301      	movs	r3, #1
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2001      	movs	r0, #1
 8002326:	f001 fcb3 	bl	8003c90 <lcdBuildMemoryAccessControlConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4ba2      	ldr	r3, [pc, #648]	@ (80025b8 <lcdInit+0x2e0>)
 8002330:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8002332:	2300      	movs	r3, #0
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2301      	movs	r3, #1
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	2201      	movs	r2, #1
 800233e:	2101      	movs	r1, #1
 8002340:	2001      	movs	r0, #1
 8002342:	f001 fca5 	bl	8003c90 <lcdBuildMemoryAccessControlConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b9c      	ldr	r3, [pc, #624]	@ (80025bc <lcdInit+0x2e4>)
 800234c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 800234e:	f001 fc75 	bl	8003c3c <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8002352:	2028      	movs	r0, #40	@ 0x28
 8002354:	f001 fc7c 	bl	8003c50 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 8002358:	20cf      	movs	r0, #207	@ 0xcf
 800235a:	f001 fc79 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 800235e:	2000      	movs	r0, #0
 8002360:	f001 fc86 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x83);
 8002364:	2083      	movs	r0, #131	@ 0x83
 8002366:	f001 fc83 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x30);
 800236a:	2030      	movs	r0, #48	@ 0x30
 800236c:	f001 fc80 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xED);
 8002370:	20ed      	movs	r0, #237	@ 0xed
 8002372:	f001 fc6d 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x64);
 8002376:	2064      	movs	r0, #100	@ 0x64
 8002378:	f001 fc7a 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x03);
 800237c:	2003      	movs	r0, #3
 800237e:	f001 fc77 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x12);
 8002382:	2012      	movs	r0, #18
 8002384:	f001 fc74 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x81);
 8002388:	2081      	movs	r0, #129	@ 0x81
 800238a:	f001 fc71 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xE8);
 800238e:	20e8      	movs	r0, #232	@ 0xe8
 8002390:	f001 fc5e 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x85);
 8002394:	2085      	movs	r0, #133	@ 0x85
 8002396:	f001 fc6b 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x01);
 800239a:	2001      	movs	r0, #1
 800239c:	f001 fc68 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x79);
 80023a0:	2079      	movs	r0, #121	@ 0x79
 80023a2:	f001 fc65 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xCB);
 80023a6:	20cb      	movs	r0, #203	@ 0xcb
 80023a8:	f001 fc52 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x39);
 80023ac:	2039      	movs	r0, #57	@ 0x39
 80023ae:	f001 fc5f 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x2C);
 80023b2:	202c      	movs	r0, #44	@ 0x2c
 80023b4:	f001 fc5c 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 80023b8:	2000      	movs	r0, #0
 80023ba:	f001 fc59 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x34);
 80023be:	2034      	movs	r0, #52	@ 0x34
 80023c0:	f001 fc56 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x02);
 80023c4:	2002      	movs	r0, #2
 80023c6:	f001 fc53 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xF7);
 80023ca:	20f7      	movs	r0, #247	@ 0xf7
 80023cc:	f001 fc40 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x20);
 80023d0:	2020      	movs	r0, #32
 80023d2:	f001 fc4d 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xEA);
 80023d6:	20ea      	movs	r0, #234	@ 0xea
 80023d8:	f001 fc3a 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 80023dc:	2000      	movs	r0, #0
 80023de:	f001 fc47 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f001 fc44 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 80023e8:	20c0      	movs	r0, #192	@ 0xc0
 80023ea:	f001 fc31 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x26);
 80023ee:	2026      	movs	r0, #38	@ 0x26
 80023f0:	f001 fc3e 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 80023f4:	20c1      	movs	r0, #193	@ 0xc1
 80023f6:	f001 fc2b 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x11);
 80023fa:	2011      	movs	r0, #17
 80023fc:	f001 fc38 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8002400:	20c5      	movs	r0, #197	@ 0xc5
 8002402:	f001 fc25 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x35);
 8002406:	2035      	movs	r0, #53	@ 0x35
 8002408:	f001 fc32 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x3E);
 800240c:	203e      	movs	r0, #62	@ 0x3e
 800240e:	f001 fc2f 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8002412:	20c7      	movs	r0, #199	@ 0xc7
 8002414:	f001 fc1c 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8002418:	20be      	movs	r0, #190	@ 0xbe
 800241a:	f001 fc29 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800241e:	2036      	movs	r0, #54	@ 0x36
 8002420:	f001 fc16 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8002424:	4b62      	ldr	r3, [pc, #392]	@ (80025b0 <lcdInit+0x2d8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f001 fc21 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800242e:	203a      	movs	r0, #58	@ 0x3a
 8002430:	f001 fc0e 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x55);
 8002434:	2055      	movs	r0, #85	@ 0x55
 8002436:	f001 fc1b 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 800243a:	20b1      	movs	r0, #177	@ 0xb1
 800243c:	f001 fc08 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f001 fc15 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x1B);
 8002446:	201b      	movs	r0, #27
 8002448:	f001 fc12 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(0xF2);
 800244c:	20f2      	movs	r0, #242	@ 0xf2
 800244e:	f001 fbff 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x08);
 8002452:	2008      	movs	r0, #8
 8002454:	f001 fc0c 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 8002458:	2026      	movs	r0, #38	@ 0x26
 800245a:	f001 fbf9 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x01);
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fc06 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 8002464:	20e0      	movs	r0, #224	@ 0xe0
 8002466:	f001 fbf3 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x1F);
 800246a:	201f      	movs	r0, #31
 800246c:	f001 fc00 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x1A);
 8002470:	201a      	movs	r0, #26
 8002472:	f001 fbfd 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x18);
 8002476:	2018      	movs	r0, #24
 8002478:	f001 fbfa 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x0A);
 800247c:	200a      	movs	r0, #10
 800247e:	f001 fbf7 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x0F);
 8002482:	200f      	movs	r0, #15
 8002484:	f001 fbf4 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x06);
 8002488:	2006      	movs	r0, #6
 800248a:	f001 fbf1 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x45);
 800248e:	2045      	movs	r0, #69	@ 0x45
 8002490:	f001 fbee 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x87);
 8002494:	2087      	movs	r0, #135	@ 0x87
 8002496:	f001 fbeb 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x32);
 800249a:	2032      	movs	r0, #50	@ 0x32
 800249c:	f001 fbe8 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x0A);
 80024a0:	200a      	movs	r0, #10
 80024a2:	f001 fbe5 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x07);
 80024a6:	2007      	movs	r0, #7
 80024a8:	f001 fbe2 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x02);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f001 fbdf 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x07);
 80024b2:	2007      	movs	r0, #7
 80024b4:	f001 fbdc 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x05);
 80024b8:	2005      	movs	r0, #5
 80024ba:	f001 fbd9 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f001 fbd6 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 80024c4:	20e1      	movs	r0, #225	@ 0xe1
 80024c6:	f001 fbc3 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f001 fbd0 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x25);
 80024d0:	2025      	movs	r0, #37	@ 0x25
 80024d2:	f001 fbcd 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x27);
 80024d6:	2027      	movs	r0, #39	@ 0x27
 80024d8:	f001 fbca 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x05);
 80024dc:	2005      	movs	r0, #5
 80024de:	f001 fbc7 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x10);
 80024e2:	2010      	movs	r0, #16
 80024e4:	f001 fbc4 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x09);
 80024e8:	2009      	movs	r0, #9
 80024ea:	f001 fbc1 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x3A);
 80024ee:	203a      	movs	r0, #58	@ 0x3a
 80024f0:	f001 fbbe 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x78);
 80024f4:	2078      	movs	r0, #120	@ 0x78
 80024f6:	f001 fbbb 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x4D);
 80024fa:	204d      	movs	r0, #77	@ 0x4d
 80024fc:	f001 fbb8 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x05);
 8002500:	2005      	movs	r0, #5
 8002502:	f001 fbb5 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x18);
 8002506:	2018      	movs	r0, #24
 8002508:	f001 fbb2 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x0D);
 800250c:	200d      	movs	r0, #13
 800250e:	f001 fbaf 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x38);
 8002512:	2038      	movs	r0, #56	@ 0x38
 8002514:	f001 fbac 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x3A);
 8002518:	203a      	movs	r0, #58	@ 0x3a
 800251a:	f001 fba9 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x1F);
 800251e:	201f      	movs	r0, #31
 8002520:	f001 fba6 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8002524:	202a      	movs	r0, #42	@ 0x2a
 8002526:	f001 fb93 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f001 fba0 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f001 fb9d 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f001 fb9a 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0xEF);
 800253c:	20ef      	movs	r0, #239	@ 0xef
 800253e:	f001 fb97 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8002542:	202b      	movs	r0, #43	@ 0x2b
 8002544:	f001 fb84 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f001 fb91 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f001 fb8e 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x01);
 8002554:	2001      	movs	r0, #1
 8002556:	f001 fb8b 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x3F);
 800255a:	203f      	movs	r0, #63	@ 0x3f
 800255c:	f001 fb88 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8002560:	20b7      	movs	r0, #183	@ 0xb7
 8002562:	f001 fb75 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x07);
 8002566:	2007      	movs	r0, #7
 8002568:	f001 fb82 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 800256c:	20b6      	movs	r0, #182	@ 0xb6
 800256e:	f001 fb6f 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData(0x0A);
 8002572:	200a      	movs	r0, #10
 8002574:	f001 fb7c 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x82);
 8002578:	2082      	movs	r0, #130	@ 0x82
 800257a:	f001 fb79 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x27);
 800257e:	2027      	movs	r0, #39	@ 0x27
 8002580:	f001 fb76 	bl	8003c70 <lcdWriteData>
  lcdWriteData(0x00);
 8002584:	2000      	movs	r0, #0
 8002586:	f001 fb73 	bl	8003c70 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 800258a:	2011      	movs	r0, #17
 800258c:	f001 fb60 	bl	8003c50 <lcdWriteCommand>
  HAL_Delay(100);
 8002590:	2064      	movs	r0, #100	@ 0x64
 8002592:	f002 ffc9 	bl	8005528 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 8002596:	2029      	movs	r0, #41	@ 0x29
 8002598:	f001 fb5a 	bl	8003c50 <lcdWriteCommand>
  HAL_Delay(100);
 800259c:	2064      	movs	r0, #100	@ 0x64
 800259e:	f002 ffc3 	bl	8005528 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80025a2:	202c      	movs	r0, #44	@ 0x2c
 80025a4:	f001 fb54 	bl	8003c50 <lcdWriteCommand>
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000258 	.word	0x20000258
 80025b4:	20000259 	.word	0x20000259
 80025b8:	2000025a 	.word	0x2000025a
 80025bc:	2000025b 	.word	0x2000025b

080025c0 <drawAlignedText>:

void drawAlignedText(char *text, int yPosition, int sectionWidth, int size, int backColor)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
    int textWidth = getTextWidth(text, size);
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 faec 	bl	8002bae <getTextWidth>
 80025d6:	6178      	str	r0, [r7, #20]
    int xPosition = (sectionWidth - textWidth) / 2;
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	0fda      	lsrs	r2, r3, #31
 80025e0:	4413      	add	r3, r2
 80025e2:	105b      	asrs	r3, r3, #1
 80025e4:	613b      	str	r3, [r7, #16]
    lcdSetCursor(xPosition, yPosition);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	b292      	uxth	r2, r2
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 fa91 	bl	8003b18 <lcdSetCursor>
    if (backColor == 1)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d103      	bne.n	8002604 <drawAlignedText+0x44>
    {
    	lcdPrintf(text);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f001 f8e9 	bl	80037d4 <lcdPrintf>
    }
    else
    {
    	lcdPrintfNoBackColor(text);
    }
}
 8002602:	e002      	b.n	800260a <drawAlignedText+0x4a>
    	lcdPrintfNoBackColor(text);
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f001 f971 	bl	80038ec <lcdPrintfNoBackColor>
}
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <drawClearDay>:

void drawClearDay(uint16_t xPosition, uint16_t yPosition)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	460a      	mov	r2, r1
 800261c:	80fb      	strh	r3, [r7, #6]
 800261e:	4613      	mov	r3, r2
 8002620:	80bb      	strh	r3, [r7, #4]
	uint8_t sunRadius = 12;
 8002622:	230c      	movs	r3, #12
 8002624:	73fb      	strb	r3, [r7, #15]

	lcdFillCircle(xPosition, yPosition, sunRadius, COLOR_YELLOW);
 8002626:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800262a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	b21a      	sxth	r2, r3
 8002632:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002636:	f000 fc57 	bl	8002ee8 <lcdFillCircle>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <drawCloudyDay>:

void drawCloudyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	460a      	mov	r2, r1
 800264c:	80fb      	strh	r3, [r7, #6]
 800264e:	4613      	mov	r3, r2
 8002650:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	3b0b      	subs	r3, #11
 8002656:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 8002658:	88bb      	ldrh	r3, [r7, #4]
 800265a:	3305      	adds	r3, #5
 800265c:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 8002662:	88bb      	ldrh	r3, [r7, #4]
 8002664:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	3308      	adds	r3, #8
 800266a:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 800266c:	88bb      	ldrh	r3, [r7, #4]
 800266e:	3308      	adds	r3, #8
 8002670:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 8002672:	2308      	movs	r3, #8
 8002674:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002676:	230a      	movs	r3, #10
 8002678:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 800267a:	2308      	movs	r3, #8
 800267c:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 800267e:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002682:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002686:	7afb      	ldrb	r3, [r7, #11]
 8002688:	b21a      	sxth	r2, r3
 800268a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800268e:	f000 fc2b 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 8002692:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002696:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800269a:	7abb      	ldrb	r3, [r7, #10]
 800269c:	b21a      	sxth	r2, r3
 800269e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a2:	f000 fc21 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 80026a6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80026aa:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80026ae:	7a7b      	ldrb	r3, [r7, #9]
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026b6:	f000 fc17 	bl	8002ee8 <lcdFillCircle>
}
 80026ba:	bf00      	nop
 80026bc:	3718      	adds	r7, #24
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <drawRainyDay>:

void drawRainyDay(uint16_t xPosition, uint16_t yPosition)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af02      	add	r7, sp, #8
 80026c8:	4603      	mov	r3, r0
 80026ca:	460a      	mov	r2, r1
 80026cc:	80fb      	strh	r3, [r7, #6]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80bb      	strh	r3, [r7, #4]
	drawDiagonal(xPosition - 10, yPosition - 4, 11, COLOR_WHITE, -1);
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	3b0a      	subs	r3, #10
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	b218      	sxth	r0, r3
 80026da:	88bb      	ldrh	r3, [r7, #4]
 80026dc:	3b04      	subs	r3, #4
 80026de:	b29b      	uxth	r3, r3
 80026e0:	b219      	sxth	r1, r3
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026ec:	220b      	movs	r2, #11
 80026ee:	f000 fa29 	bl	8002b44 <drawDiagonal>
	drawDiagonal(xPosition + 2, yPosition, 15, COLOR_WHITE, -1);
 80026f2:	88fb      	ldrh	r3, [r7, #6]
 80026f4:	3302      	adds	r3, #2
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	b218      	sxth	r0, r3
 80026fa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002708:	220f      	movs	r2, #15
 800270a:	f000 fa1b 	bl	8002b44 <drawDiagonal>
	drawDiagonal(xPosition - 17, yPosition + 9, 13, COLOR_WHITE, -1);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	3b11      	subs	r3, #17
 8002712:	b29b      	uxth	r3, r3
 8002714:	b218      	sxth	r0, r3
 8002716:	88bb      	ldrh	r3, [r7, #4]
 8002718:	3309      	adds	r3, #9
 800271a:	b29b      	uxth	r3, r3
 800271c:	b219      	sxth	r1, r3
 800271e:	f04f 33ff 	mov.w	r3, #4294967295
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002728:	220d      	movs	r2, #13
 800272a:	f000 fa0b 	bl	8002b44 <drawDiagonal>
	drawDiagonal(xPosition - 7, yPosition + 3, 10, COLOR_WHITE, -1);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	3b07      	subs	r3, #7
 8002732:	b29b      	uxth	r3, r3
 8002734:	b218      	sxth	r0, r3
 8002736:	88bb      	ldrh	r3, [r7, #4]
 8002738:	3303      	adds	r3, #3
 800273a:	b29b      	uxth	r3, r3
 800273c:	b219      	sxth	r1, r3
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002748:	220a      	movs	r2, #10
 800274a:	f000 f9fb 	bl	8002b44 <drawDiagonal>
	drawDiagonal(xPosition - 4, yPosition + 15, 12, COLOR_WHITE, -1);
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	3b04      	subs	r3, #4
 8002752:	b29b      	uxth	r3, r3
 8002754:	b218      	sxth	r0, r3
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	330f      	adds	r3, #15
 800275a:	b29b      	uxth	r3, r3
 800275c:	b219      	sxth	r1, r3
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002768:	220c      	movs	r2, #12
 800276a:	f000 f9eb 	bl	8002b44 <drawDiagonal>
	drawDiagonal(xPosition - 9, yPosition + 13, 8, COLOR_WHITE, -1);
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	3b09      	subs	r3, #9
 8002772:	b29b      	uxth	r3, r3
 8002774:	b218      	sxth	r0, r3
 8002776:	88bb      	ldrh	r3, [r7, #4]
 8002778:	330d      	adds	r3, #13
 800277a:	b29b      	uxth	r3, r3
 800277c:	b219      	sxth	r1, r3
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002788:	2208      	movs	r2, #8
 800278a:	f000 f9db 	bl	8002b44 <drawDiagonal>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
	...

08002798 <drawSnowyDay>:

void drawSnowyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	460a      	mov	r2, r1
 80027a2:	80fb      	strh	r3, [r7, #6]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80bb      	strh	r3, [r7, #4]
	lcdSetTextFont(&Font16);
 80027a8:	4823      	ldr	r0, [pc, #140]	@ (8002838 <drawSnowyDay+0xa0>)
 80027aa:	f001 f925 	bl	80039f8 <lcdSetTextFont>
	lcdSetCursor(xPosition, yPosition);
 80027ae:	88ba      	ldrh	r2, [r7, #4]
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f001 f9af 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 80027ba:	4820      	ldr	r0, [pc, #128]	@ (800283c <drawSnowyDay+0xa4>)
 80027bc:	f001 f896 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition - 10);
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	3b0a      	subs	r3, #10
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	88bb      	ldrh	r3, [r7, #4]
 80027c8:	3b0a      	subs	r3, #10
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4619      	mov	r1, r3
 80027ce:	4610      	mov	r0, r2
 80027d0:	f001 f9a2 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 80027d4:	4819      	ldr	r0, [pc, #100]	@ (800283c <drawSnowyDay+0xa4>)
 80027d6:	f001 f889 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition + 10);
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	330a      	adds	r3, #10
 80027de:	b29a      	uxth	r2, r3
 80027e0:	88bb      	ldrh	r3, [r7, #4]
 80027e2:	330a      	adds	r3, #10
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f001 f995 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 80027ee:	4813      	ldr	r0, [pc, #76]	@ (800283c <drawSnowyDay+0xa4>)
 80027f0:	f001 f87c 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition + 10, yPosition - 10);
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	330a      	adds	r3, #10
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	3b0a      	subs	r3, #10
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f001 f988 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002808:	480c      	ldr	r0, [pc, #48]	@ (800283c <drawSnowyDay+0xa4>)
 800280a:	f001 f86f 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetCursor(xPosition - 10, yPosition + 10);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	3b0a      	subs	r3, #10
 8002812:	b29a      	uxth	r2, r3
 8002814:	88bb      	ldrh	r3, [r7, #4]
 8002816:	330a      	adds	r3, #10
 8002818:	b29b      	uxth	r3, r3
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f001 f97b 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("*");
 8002822:	4806      	ldr	r0, [pc, #24]	@ (800283c <drawSnowyDay+0xa4>)
 8002824:	f001 f862 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font12);
 8002828:	4805      	ldr	r0, [pc, #20]	@ (8002840 <drawSnowyDay+0xa8>)
 800282a:	f001 f8e5 	bl	80039f8 <lcdSetTextFont>

}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000014 	.word	0x20000014
 800283c:	0800b19c 	.word	0x0800b19c
 8002840:	2000000c 	.word	0x2000000c

08002844 <drawFoggyDay>:

void drawFoggyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b089      	sub	sp, #36	@ 0x24
 8002848:	af02      	add	r7, sp, #8
 800284a:	4603      	mov	r3, r0
 800284c:	460a      	mov	r2, r1
 800284e:	80fb      	strh	r3, [r7, #6]
 8002850:	4613      	mov	r3, r2
 8002852:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	3b0b      	subs	r3, #11
 8002858:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY1 = yPosition + 5;
 800285a:	88bb      	ldrh	r3, [r7, #4]
 800285c:	3305      	adds	r3, #5
 800285e:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX2 = xPosition;
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY2 = yPosition;
 8002864:	88bb      	ldrh	r3, [r7, #4]
 8002866:	823b      	strh	r3, [r7, #16]

	uint16_t cloudCenterX3 = xPosition + 8;
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	3308      	adds	r3, #8
 800286c:	81fb      	strh	r3, [r7, #14]
	uint16_t cloudCenterY3 = yPosition + 8;
 800286e:	88bb      	ldrh	r3, [r7, #4]
 8002870:	3308      	adds	r3, #8
 8002872:	81bb      	strh	r3, [r7, #12]

	uint8_t cloudRadius1 = 8;
 8002874:	2308      	movs	r3, #8
 8002876:	72fb      	strb	r3, [r7, #11]
	uint8_t cloudRadius2 = 10;
 8002878:	230a      	movs	r3, #10
 800287a:	72bb      	strb	r3, [r7, #10]
	uint8_t cloudRadius3 = 8;
 800287c:	2308      	movs	r3, #8
 800287e:	727b      	strb	r3, [r7, #9]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_WHITE);
 8002880:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002884:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	b21a      	sxth	r2, r3
 800288c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002890:	f000 fb2a 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_WHITE);
 8002894:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002898:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800289c:	7abb      	ldrb	r3, [r7, #10]
 800289e:	b21a      	sxth	r2, r3
 80028a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a4:	f000 fb20 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_WHITE);
 80028a8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80028ac:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80028b0:	7a7b      	ldrb	r3, [r7, #9]
 80028b2:	b21a      	sxth	r2, r3
 80028b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028b8:	f000 fb16 	bl	8002ee8 <lcdFillCircle>

	lcdDrawLine(xPosition - 10, yPosition + 2, xPosition + 10, yPosition + 2, COLOR_BLACK);
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	3b0a      	subs	r3, #10
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	b218      	sxth	r0, r3
 80028c4:	88bb      	ldrh	r3, [r7, #4]
 80028c6:	3302      	adds	r3, #2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b219      	sxth	r1, r3
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	330a      	adds	r3, #10
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	b21a      	sxth	r2, r3
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	3302      	adds	r3, #2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	b21b      	sxth	r3, r3
 80028dc:	2400      	movs	r4, #0
 80028de:	9400      	str	r4, [sp, #0]
 80028e0:	f000 fa64 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition - 10, yPosition + 3, xPosition + 10, yPosition + 3, COLOR_BLACK);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	3b0a      	subs	r3, #10
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	b218      	sxth	r0, r3
 80028ec:	88bb      	ldrh	r3, [r7, #4]
 80028ee:	3303      	adds	r3, #3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b219      	sxth	r1, r3
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	330a      	adds	r3, #10
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	b21a      	sxth	r2, r3
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	3303      	adds	r3, #3
 8002900:	b29b      	uxth	r3, r3
 8002902:	b21b      	sxth	r3, r3
 8002904:	2400      	movs	r4, #0
 8002906:	9400      	str	r4, [sp, #0]
 8002908:	f000 fa50 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 6, xPosition - 9, yPosition + 6, COLOR_BLACK);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	3b19      	subs	r3, #25
 8002910:	b29b      	uxth	r3, r3
 8002912:	b218      	sxth	r0, r3
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	3306      	adds	r3, #6
 8002918:	b29b      	uxth	r3, r3
 800291a:	b219      	sxth	r1, r3
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	3b09      	subs	r3, #9
 8002920:	b29b      	uxth	r3, r3
 8002922:	b21a      	sxth	r2, r3
 8002924:	88bb      	ldrh	r3, [r7, #4]
 8002926:	3306      	adds	r3, #6
 8002928:	b29b      	uxth	r3, r3
 800292a:	b21b      	sxth	r3, r3
 800292c:	2400      	movs	r4, #0
 800292e:	9400      	str	r4, [sp, #0]
 8002930:	f000 fa3c 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition - 25, yPosition + 7, xPosition - 9, yPosition + 7, COLOR_BLACK);
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	3b19      	subs	r3, #25
 8002938:	b29b      	uxth	r3, r3
 800293a:	b218      	sxth	r0, r3
 800293c:	88bb      	ldrh	r3, [r7, #4]
 800293e:	3307      	adds	r3, #7
 8002940:	b29b      	uxth	r3, r3
 8002942:	b219      	sxth	r1, r3
 8002944:	88fb      	ldrh	r3, [r7, #6]
 8002946:	3b09      	subs	r3, #9
 8002948:	b29b      	uxth	r3, r3
 800294a:	b21a      	sxth	r2, r3
 800294c:	88bb      	ldrh	r3, [r7, #4]
 800294e:	3307      	adds	r3, #7
 8002950:	b29b      	uxth	r3, r3
 8002952:	b21b      	sxth	r3, r3
 8002954:	2400      	movs	r4, #0
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	f000 fa28 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 8, xPosition + 15, yPosition + 8, COLOR_BLACK);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	3302      	adds	r3, #2
 8002960:	b29b      	uxth	r3, r3
 8002962:	b218      	sxth	r0, r3
 8002964:	88bb      	ldrh	r3, [r7, #4]
 8002966:	3308      	adds	r3, #8
 8002968:	b29b      	uxth	r3, r3
 800296a:	b219      	sxth	r1, r3
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	330f      	adds	r3, #15
 8002970:	b29b      	uxth	r3, r3
 8002972:	b21a      	sxth	r2, r3
 8002974:	88bb      	ldrh	r3, [r7, #4]
 8002976:	3308      	adds	r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b21b      	sxth	r3, r3
 800297c:	2400      	movs	r4, #0
 800297e:	9400      	str	r4, [sp, #0]
 8002980:	f000 fa14 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition + 2, yPosition + 9, xPosition + 15, yPosition + 9, COLOR_BLACK);
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	3302      	adds	r3, #2
 8002988:	b29b      	uxth	r3, r3
 800298a:	b218      	sxth	r0, r3
 800298c:	88bb      	ldrh	r3, [r7, #4]
 800298e:	3309      	adds	r3, #9
 8002990:	b29b      	uxth	r3, r3
 8002992:	b219      	sxth	r1, r3
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	330f      	adds	r3, #15
 8002998:	b29b      	uxth	r3, r3
 800299a:	b21a      	sxth	r2, r3
 800299c:	88bb      	ldrh	r3, [r7, #4]
 800299e:	3309      	adds	r3, #9
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	2400      	movs	r4, #0
 80029a6:	9400      	str	r4, [sp, #0]
 80029a8:	f000 fa00 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 10, xPosition + 5, yPosition + 10, COLOR_BLACK);
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	3b09      	subs	r3, #9
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	b218      	sxth	r0, r3
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	330a      	adds	r3, #10
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b219      	sxth	r1, r3
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	3305      	adds	r3, #5
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	330a      	adds	r3, #10
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	2400      	movs	r4, #0
 80029ce:	9400      	str	r4, [sp, #0]
 80029d0:	f000 f9ec 	bl	8002dac <lcdDrawLine>
	lcdDrawLine(xPosition - 9, yPosition + 11, xPosition + 5, yPosition + 11, COLOR_BLACK);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	3b09      	subs	r3, #9
 80029d8:	b29b      	uxth	r3, r3
 80029da:	b218      	sxth	r0, r3
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	330b      	adds	r3, #11
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b219      	sxth	r1, r3
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	3305      	adds	r3, #5
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b21a      	sxth	r2, r3
 80029ec:	88bb      	ldrh	r3, [r7, #4]
 80029ee:	330b      	adds	r3, #11
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	2400      	movs	r4, #0
 80029f6:	9400      	str	r4, [sp, #0]
 80029f8:	f000 f9d8 	bl	8002dac <lcdDrawLine>
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <drawStormyDay>:

void drawStormyDay(uint16_t xPosition, uint16_t yPosition)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b08b      	sub	sp, #44	@ 0x2c
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	80fb      	strh	r3, [r7, #6]
 8002a10:	4613      	mov	r3, r2
 8002a12:	80bb      	strh	r3, [r7, #4]
	uint16_t cloudCenterX1 = xPosition - 11;
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	3b0b      	subs	r3, #11
 8002a18:	837b      	strh	r3, [r7, #26]
	uint16_t cloudCenterY1 = yPosition + 5;
 8002a1a:	88bb      	ldrh	r3, [r7, #4]
 8002a1c:	3305      	adds	r3, #5
 8002a1e:	833b      	strh	r3, [r7, #24]

	uint16_t cloudCenterX2 = xPosition;
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	82fb      	strh	r3, [r7, #22]
	uint16_t cloudCenterY2 = yPosition;
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	82bb      	strh	r3, [r7, #20]

	uint16_t cloudCenterX3 = xPosition + 8;
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	827b      	strh	r3, [r7, #18]
	uint16_t cloudCenterY3 = yPosition + 8;
 8002a2e:	88bb      	ldrh	r3, [r7, #4]
 8002a30:	3308      	adds	r3, #8
 8002a32:	823b      	strh	r3, [r7, #16]

	uint8_t cloudRadius1 = 8;
 8002a34:	2308      	movs	r3, #8
 8002a36:	73fb      	strb	r3, [r7, #15]
	uint8_t cloudRadius2 = 10;
 8002a38:	230a      	movs	r3, #10
 8002a3a:	73bb      	strb	r3, [r7, #14]
	uint8_t cloudRadius3 = 8;
 8002a3c:	2308      	movs	r3, #8
 8002a3e:	737b      	strb	r3, [r7, #13]

	lcdFillCircle(cloudCenterX1, cloudCenterY1, cloudRadius1, COLOR_BLACK);
 8002a40:	f9b7 001a 	ldrsh.w	r0, [r7, #26]
 8002a44:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	b21a      	sxth	r2, r3
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f000 fa4b 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX2, cloudCenterY2, cloudRadius2, COLOR_BLACK);
 8002a52:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8002a56:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	b21a      	sxth	r2, r3
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f000 fa42 	bl	8002ee8 <lcdFillCircle>
	lcdFillCircle(cloudCenterX3, cloudCenterY3, cloudRadius3, COLOR_BLACK);
 8002a64:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8002a68:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002a6c:	7b7b      	ldrb	r3, [r7, #13]
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	2300      	movs	r3, #0
 8002a72:	f000 fa39 	bl	8002ee8 <lcdFillCircle>

	for (uint16_t i = 0; i <= 8; i++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	83fb      	strh	r3, [r7, #30]
 8002a7a:	e024      	b.n	8002ac6 <drawStormyDay+0xc2>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 4 + i, xPosition + 5 - i, yPosition + 4 + i, COLOR_YELLOW);
 8002a7c:	88fa      	ldrh	r2, [r7, #6]
 8002a7e:	8bfb      	ldrh	r3, [r7, #30]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b05      	subs	r3, #5
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b218      	sxth	r0, r3
 8002a8a:	88ba      	ldrh	r2, [r7, #4]
 8002a8c:	8bfb      	ldrh	r3, [r7, #30]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3304      	adds	r3, #4
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	b219      	sxth	r1, r3
 8002a98:	88fa      	ldrh	r2, [r7, #6]
 8002a9a:	8bfb      	ldrh	r3, [r7, #30]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3305      	adds	r3, #5
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b21c      	sxth	r4, r3
 8002aa6:	88ba      	ldrh	r2, [r7, #4]
 8002aa8:	8bfb      	ldrh	r3, [r7, #30]
 8002aaa:	4413      	add	r3, r2
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3304      	adds	r3, #4
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002ab8:	9200      	str	r2, [sp, #0]
 8002aba:	4622      	mov	r2, r4
 8002abc:	f000 f976 	bl	8002dac <lcdDrawLine>
	for (uint16_t i = 0; i <= 8; i++)
 8002ac0:	8bfb      	ldrh	r3, [r7, #30]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	83fb      	strh	r3, [r7, #30]
 8002ac6:	8bfb      	ldrh	r3, [r7, #30]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d9d7      	bls.n	8002a7c <drawStormyDay+0x78>
	}
	for (uint16_t i = 0; i <= 7; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	83bb      	strh	r3, [r7, #28]
 8002ad0:	e026      	b.n	8002b20 <drawStormyDay+0x11c>
	{
		lcdDrawLine(xPosition - 5 - i, yPosition + 13 + i, xPosition + 3 - 2 * i, yPosition + 13 + i, COLOR_YELLOW);
 8002ad2:	88fa      	ldrh	r2, [r7, #6]
 8002ad4:	8bbb      	ldrh	r3, [r7, #28]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b05      	subs	r3, #5
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	b218      	sxth	r0, r3
 8002ae0:	88ba      	ldrh	r2, [r7, #4]
 8002ae2:	8bbb      	ldrh	r3, [r7, #28]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	330d      	adds	r3, #13
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	b219      	sxth	r1, r3
 8002aee:	8bbb      	ldrh	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3303      	adds	r3, #3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b21c      	sxth	r4, r3
 8002b00:	88ba      	ldrh	r2, [r7, #4]
 8002b02:	8bbb      	ldrh	r3, [r7, #28]
 8002b04:	4413      	add	r3, r2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	330d      	adds	r3, #13
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	b21b      	sxth	r3, r3
 8002b0e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b12:	9200      	str	r2, [sp, #0]
 8002b14:	4622      	mov	r2, r4
 8002b16:	f000 f949 	bl	8002dac <lcdDrawLine>
	for (uint16_t i = 0; i <= 7; i++)
 8002b1a:	8bbb      	ldrh	r3, [r7, #28]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	83bb      	strh	r3, [r7, #28]
 8002b20:	8bbb      	ldrh	r3, [r7, #28]
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d9d5      	bls.n	8002ad2 <drawStormyDay+0xce>
	}
	lcdDrawPixel(xPosition - 13, yPosition + 21, COLOR_YELLOW);
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	3b0d      	subs	r3, #13
 8002b2a:	b298      	uxth	r0, r3
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	3315      	adds	r3, #21
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b36:	4619      	mov	r1, r3
 8002b38:	f000 f87e 	bl	8002c38 <lcdDrawPixel>
}
 8002b3c:	bf00      	nop
 8002b3e:	3724      	adds	r7, #36	@ 0x24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <drawDiagonal>:

void drawDiagonal(int16_t x, int16_t y, int16_t length, uint16_t color, int8_t direction)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4608      	mov	r0, r1
 8002b4e:	4611      	mov	r1, r2
 8002b50:	461a      	mov	r2, r3
 8002b52:	4623      	mov	r3, r4
 8002b54:	80fb      	strh	r3, [r7, #6]
 8002b56:	4603      	mov	r3, r0
 8002b58:	80bb      	strh	r3, [r7, #4]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	807b      	strh	r3, [r7, #2]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	803b      	strh	r3, [r7, #0]
    for (int16_t i = 0; i < length; i++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	81fb      	strh	r3, [r7, #14]
 8002b66:	e017      	b.n	8002b98 <drawDiagonal+0x54>
    {
        lcdDrawPixel(x + i, y + i * direction, color);
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	89fb      	ldrh	r3, [r7, #14]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b298      	uxth	r0, r3
 8002b70:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	89fb      	ldrh	r3, [r7, #14]
 8002b78:	fb12 f303 	smulbb	r3, r2, r3
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	88bb      	ldrh	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	883a      	ldrh	r2, [r7, #0]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f000 f856 	bl	8002c38 <lcdDrawPixel>
    for (int16_t i = 0; i < length; i++)
 8002b8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	81fb      	strh	r3, [r7, #14]
 8002b98:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	dbe1      	blt.n	8002b68 <drawDiagonal+0x24>
    }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd90      	pop	{r4, r7, pc}

08002bae <getTextWidth>:


int getTextWidth(const char *text, int size)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
    int characterWidth;
	if (size == 12)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d102      	bne.n	8002bc4 <getTextWidth+0x16>
    {
    	characterWidth = 6;
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	e001      	b.n	8002bc8 <getTextWidth+0x1a>
    }
    else
    {
    	characterWidth = 11;
 8002bc4:	230b      	movs	r3, #11
 8002bc6:	60fb      	str	r3, [r7, #12]
    }
    int length = strlen(text);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7fd fb0b 	bl	80001e4 <strlen>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	60bb      	str	r3, [r7, #8]

    return length * characterWidth;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <lcdFillRGB>:

void lcdFillRGB(uint16_t color)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <lcdFillRGB+0x50>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <lcdFillRGB+0x50>)
 8002bf8:	885b      	ldrh	r3, [r3, #2]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2000      	movs	r0, #0
 8002c02:	f000 ffa3 	bl	8003b4c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <lcdFillRGB+0x50>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <lcdFillRGB+0x50>)
 8002c0e:	885b      	ldrh	r3, [r3, #2]
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8002c16:	e003      	b.n	8002c20 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8002c18:	88fb      	ldrh	r3, [r7, #6]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f828 	bl	8003c70 <lcdWriteData>
  while(dimensions--)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	60fa      	str	r2, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f6      	bne.n	8002c18 <lcdFillRGB+0x34>
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000024 	.word	0x20000024

08002c38 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
 8002c42:	460b      	mov	r3, r1
 8002c44:	80bb      	strh	r3, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c7c <lcdDrawPixel+0x44>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d20f      	bcs.n	8002c74 <lcdDrawPixel+0x3c>
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <lcdDrawPixel+0x44>)
 8002c56:	885b      	ldrh	r3, [r3, #2]
 8002c58:	88ba      	ldrh	r2, [r7, #4]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20a      	bcs.n	8002c74 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8002c5e:	88bb      	ldrh	r3, [r7, #4]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	88b9      	ldrh	r1, [r7, #4]
 8002c64:	88f8      	ldrh	r0, [r7, #6]
 8002c66:	f000 ff71 	bl	8003b4c <lcdSetWindow>
    lcdWriteData(color);
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 ffff 	bl	8003c70 <lcdWriteData>
 8002c72:	e000      	b.n	8002c76 <lcdDrawPixel+0x3e>
        return;
 8002c74:	bf00      	nop
}
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000024 	.word	0x20000024

08002c80 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4604      	mov	r4, r0
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	80fb      	strh	r3, [r7, #6]
 8002c92:	4603      	mov	r3, r0
 8002c94:	80bb      	strh	r3, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	807b      	strh	r3, [r7, #2]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8002c9e:	88ba      	ldrh	r2, [r7, #4]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d205      	bcs.n	8002cb2 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	88bb      	ldrh	r3, [r7, #4]
 8002cac:	80fb      	strh	r3, [r7, #6]
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <lcdDrawHLine+0x88>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	88ba      	ldrh	r2, [r7, #4]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d303      	bcc.n	8002cc4 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <lcdDrawHLine+0x88>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <lcdDrawHLine+0x88>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d303      	bcc.n	8002cd6 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <lcdDrawHLine+0x88>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	88ba      	ldrh	r2, [r7, #4]
 8002cda:	8879      	ldrh	r1, [r7, #2]
 8002cdc:	88f8      	ldrh	r0, [r7, #6]
 8002cde:	f000 ff35 	bl	8003b4c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	e006      	b.n	8002cf6 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8002ce8:	883b      	ldrh	r3, [r7, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 ffc0 	bl	8003c70 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	88bb      	ldrh	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	ddf4      	ble.n	8002ce8 <lcdDrawHLine+0x68>
	}
}
 8002cfe:	bf00      	nop
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	20000024 	.word	0x20000024

08002d0c <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	807b      	strh	r3, [r7, #2]
 8002d26:	4613      	mov	r3, r2
 8002d28:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8002d2a:	887a      	ldrh	r2, [r7, #2]
 8002d2c:	88bb      	ldrh	r3, [r7, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d205      	bcs.n	8002d3e <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	817b      	strh	r3, [r7, #10]
 8002d36:	887b      	ldrh	r3, [r7, #2]
 8002d38:	80bb      	strh	r3, [r7, #4]
 8002d3a:	897b      	ldrh	r3, [r7, #10]
 8002d3c:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d40:	881b      	ldrh	r3, [r3, #0]
 8002d42:	88fa      	ldrh	r2, [r7, #6]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d303      	bcc.n	8002d50 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8002d50:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d52:	885b      	ldrh	r3, [r3, #2]
 8002d54:	88ba      	ldrh	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d303      	bcc.n	8002d62 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d5c:	885b      	ldrh	r3, [r3, #2]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8002d62:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d64:	885b      	ldrh	r3, [r3, #2]
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d303      	bcc.n	8002d74 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <lcdDrawVLine+0x9c>)
 8002d6e:	885b      	ldrh	r3, [r3, #2]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	88fa      	ldrh	r2, [r7, #6]
 8002d78:	88b9      	ldrh	r1, [r7, #4]
 8002d7a:	88f8      	ldrh	r0, [r7, #6]
 8002d7c:	f000 fee6 	bl	8003b4c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8002d80:	88bb      	ldrh	r3, [r7, #4]
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e006      	b.n	8002d94 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8002d86:	883b      	ldrh	r3, [r7, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 ff71 	bl	8003c70 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	ddf4      	ble.n	8002d86 <lcdDrawVLine+0x7a>
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000024 	.word	0x20000024

08002dac <lcdDrawLine>:
 * \param color	Color
 *
 * \return void
 */
void lcdDrawLine(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b089      	sub	sp, #36	@ 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4604      	mov	r4, r0
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4623      	mov	r3, r4
 8002dbc:	80fb      	strh	r3, [r7, #6]
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80bb      	strh	r3, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	807b      	strh	r3, [r7, #2]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	803b      	strh	r3, [r7, #0]
	// Bresenham's algorithm - thx wikpedia

	int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8002dca:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002dce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dd8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ddc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002de4:	1acb      	subs	r3, r1, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bfb8      	it	lt
 8002dea:	425b      	neglt	r3, r3
 8002dec:	429a      	cmp	r2, r3
 8002dee:	bfcc      	ite	gt
 8002df0:	2301      	movgt	r3, #1
 8002df2:	2300      	movle	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	837b      	strh	r3, [r7, #26]
	if (steep)
 8002df8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <lcdDrawLine+0x6c>
	{
		swap(x1, y1);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	833b      	strh	r3, [r7, #24]
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	80fb      	strh	r3, [r7, #6]
 8002e08:	8b3b      	ldrh	r3, [r7, #24]
 8002e0a:	80bb      	strh	r3, [r7, #4]
		swap(x2, y2);
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	82fb      	strh	r3, [r7, #22]
 8002e10:	883b      	ldrh	r3, [r7, #0]
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	8afb      	ldrh	r3, [r7, #22]
 8002e16:	803b      	strh	r3, [r7, #0]
	}

	if (x1 > x2)
 8002e18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	dd0b      	ble.n	8002e3c <lcdDrawLine+0x90>
	{
		swap(x1, x2);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	82bb      	strh	r3, [r7, #20]
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	80fb      	strh	r3, [r7, #6]
 8002e2c:	8abb      	ldrh	r3, [r7, #20]
 8002e2e:	807b      	strh	r3, [r7, #2]
		swap(y1, y2);
 8002e30:	88bb      	ldrh	r3, [r7, #4]
 8002e32:	827b      	strh	r3, [r7, #18]
 8002e34:	883b      	ldrh	r3, [r7, #0]
 8002e36:	80bb      	strh	r3, [r7, #4]
 8002e38:	8a7b      	ldrh	r3, [r7, #18]
 8002e3a:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x2 - x1;
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	823b      	strh	r3, [r7, #16]
	dy = abs(y2 - y1);
 8002e46:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	bfb8      	it	lt
 8002e54:	425b      	neglt	r3, r3
 8002e56:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8002e58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e5c:	0fda      	lsrs	r2, r3, #31
 8002e5e:	4413      	add	r3, r2
 8002e60:	105b      	asrs	r3, r3, #1
 8002e62:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y1 < y2)
 8002e64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	da02      	bge.n	8002e76 <lcdDrawLine+0xca>
	{
		ystep = 1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	83bb      	strh	r3, [r7, #28]
 8002e74:	e02d      	b.n	8002ed2 <lcdDrawLine+0x126>
	}
	else
	{
		ystep = -1;
 8002e76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e7a:	83bb      	strh	r3, [r7, #28]
	}

	for (; x1 <= x2; x1++)
 8002e7c:	e029      	b.n	8002ed2 <lcdDrawLine+0x126>
	{
		if (steep)
 8002e7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <lcdDrawLine+0xe8>
		{
			lcdDrawPixel(y1, x1, color);
 8002e86:	88bb      	ldrh	r3, [r7, #4]
 8002e88:	88f9      	ldrh	r1, [r7, #6]
 8002e8a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fed3 	bl	8002c38 <lcdDrawPixel>
 8002e92:	e005      	b.n	8002ea0 <lcdDrawLine+0xf4>
		}
		else
		{
			lcdDrawPixel(x1, y1, color);
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	88b9      	ldrh	r1, [r7, #4]
 8002e98:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fecc 	bl	8002c38 <lcdDrawPixel>
		}
		err -= dy;
 8002ea0:	8bfa      	ldrh	r2, [r7, #30]
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8002eaa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	da09      	bge.n	8002ec6 <lcdDrawLine+0x11a>
		{
			y1 += ystep;
 8002eb2:	88ba      	ldrh	r2, [r7, #4]
 8002eb4:	8bbb      	ldrh	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8002ebc:	8bfa      	ldrh	r2, [r7, #30]
 8002ebe:	8a3b      	ldrh	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	83fb      	strh	r3, [r7, #30]
	for (; x1 <= x2; x1++)
 8002ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	80fb      	strh	r3, [r7, #6]
 8002ed2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	ddcf      	ble.n	8002e7e <lcdDrawLine+0xd2>
		}
	}
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	3724      	adds	r7, #36	@ 0x24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd90      	pop	{r4, r7, pc}

08002ee8 <lcdFillCircle>:
 * \param color		Color
 *
 * \return void
 */
void lcdFillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	80fb      	strh	r3, [r7, #6]
 8002efa:	4603      	mov	r3, r0
 8002efc:	80bb      	strh	r3, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	807b      	strh	r3, [r7, #2]
 8002f02:	4613      	mov	r3, r2
 8002f04:	803b      	strh	r3, [r7, #0]
	lcdDrawVLine(x0, y0 - r, y0 + r + 1, color);
 8002f06:	88f8      	ldrh	r0, [r7, #6]
 8002f08:	88ba      	ldrh	r2, [r7, #4]
 8002f0a:	887b      	ldrh	r3, [r7, #2]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	88ba      	ldrh	r2, [r7, #4]
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	4413      	add	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	883b      	ldrh	r3, [r7, #0]
 8002f1e:	f7ff fef5 	bl	8002d0c <lcdDrawVLine>
	lcdFillCircleHelper(x0, y0, r, 3, 0, color);
 8002f22:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002f26:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002f2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f2e:	883b      	ldrh	r3, [r7, #0]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2303      	movs	r3, #3
 8002f38:	f000 f804 	bl	8002f44 <lcdFillCircleHelper>
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd90      	pop	{r4, r7, pc}

08002f44 <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8002f44:	b590      	push	{r4, r7, lr}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4623      	mov	r3, r4
 8002f54:	80fb      	strh	r3, [r7, #6]
 8002f56:	4603      	mov	r3, r0
 8002f58:	80bb      	strh	r3, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	f1c3 0301 	rsb	r3, r3, #1
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	461a      	mov	r2, r3
 8002f74:	03d2      	lsls	r2, r2, #15
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002f82:	887b      	ldrh	r3, [r7, #2]
 8002f84:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8002f86:	e07b      	b.n	8003080 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8002f88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0e      	blt.n	8002fae <lcdFillCircleHelper+0x6a>
		{
			y--;
 8002f90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002f9c:	8a7b      	ldrh	r3, [r7, #18]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002fa4:	8afa      	ldrh	r2, [r7, #22]
 8002fa6:	8a7b      	ldrh	r3, [r7, #18]
 8002fa8:	4413      	add	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002fae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	3302      	adds	r3, #2
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002fc2:	8afa      	ldrh	r2, [r7, #22]
 8002fc4:	8abb      	ldrh	r3, [r7, #20]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8002fcc:	787b      	ldrb	r3, [r7, #1]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d027      	beq.n	8003026 <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8002fd6:	88fa      	ldrh	r2, [r7, #6]
 8002fd8:	8a3b      	ldrh	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b298      	uxth	r0, r3
 8002fde:	88ba      	ldrh	r2, [r7, #4]
 8002fe0:	89fb      	ldrh	r3, [r7, #14]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	b299      	uxth	r1, r3
 8002fe6:	88ba      	ldrh	r2, [r7, #4]
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	4413      	add	r3, r2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ff0:	4413      	add	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002ffa:	f7ff fe87 	bl	8002d0c <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	89fb      	ldrh	r3, [r7, #14]
 8003002:	4413      	add	r3, r2
 8003004:	b298      	uxth	r0, r3
 8003006:	88ba      	ldrh	r2, [r7, #4]
 8003008:	8a3b      	ldrh	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b299      	uxth	r1, r3
 800300e:	88ba      	ldrh	r2, [r7, #4]
 8003010:	8a3b      	ldrh	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	b29a      	uxth	r2, r3
 8003016:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003018:	4413      	add	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	3301      	adds	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003022:	f7ff fe73 	bl	8002d0c <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d027      	beq.n	8003080 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8003030:	88fa      	ldrh	r2, [r7, #6]
 8003032:	8a3b      	ldrh	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	b298      	uxth	r0, r3
 8003038:	88ba      	ldrh	r2, [r7, #4]
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b299      	uxth	r1, r3
 8003040:	88ba      	ldrh	r2, [r7, #4]
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	4413      	add	r3, r2
 8003046:	b29a      	uxth	r2, r3
 8003048:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800304a:	4413      	add	r3, r2
 800304c:	b29b      	uxth	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003054:	f7ff fe5a 	bl	8002d0c <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8003058:	88fa      	ldrh	r2, [r7, #6]
 800305a:	89fb      	ldrh	r3, [r7, #14]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b298      	uxth	r0, r3
 8003060:	88ba      	ldrh	r2, [r7, #4]
 8003062:	8a3b      	ldrh	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	b299      	uxth	r1, r3
 8003068:	88ba      	ldrh	r2, [r7, #4]
 800306a:	8a3b      	ldrh	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003072:	4413      	add	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	3301      	adds	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800307c:	f7ff fe46 	bl	8002d0c <lcdDrawVLine>
	while (x < y)
 8003080:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003084:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003088:	429a      	cmp	r2, r3
 800308a:	f6ff af7d 	blt.w	8002f88 <lcdFillCircleHelper+0x44>
		}
	}
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	461a      	mov	r2, r3
 80030a6:	4623      	mov	r3, r4
 80030a8:	80fb      	strh	r3, [r7, #6]
 80030aa:	4603      	mov	r3, r0
 80030ac:	80bb      	strh	r3, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	807b      	strh	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	4a24      	ldr	r2, [pc, #144]	@ (800314c <lcdFillRect+0xb4>)
 80030bc:	8812      	ldrh	r2, [r2, #0]
 80030be:	4293      	cmp	r3, r2
 80030c0:	da3f      	bge.n	8003142 <lcdFillRect+0xaa>
 80030c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80030c6:	4a21      	ldr	r2, [pc, #132]	@ (800314c <lcdFillRect+0xb4>)
 80030c8:	8852      	ldrh	r2, [r2, #2]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	da39      	bge.n	8003142 <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 80030ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030d6:	4413      	add	r3, r2
 80030d8:	4a1c      	ldr	r2, [pc, #112]	@ (800314c <lcdFillRect+0xb4>)
 80030da:	8812      	ldrh	r2, [r2, #0]
 80030dc:	4293      	cmp	r3, r2
 80030de:	dd05      	ble.n	80030ec <lcdFillRect+0x54>
 80030e0:	4b1a      	ldr	r3, [pc, #104]	@ (800314c <lcdFillRect+0xb4>)
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 80030ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80030f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a15      	ldr	r2, [pc, #84]	@ (800314c <lcdFillRect+0xb4>)
 80030f8:	8852      	ldrh	r2, [r2, #2]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	dd05      	ble.n	800310a <lcdFillRect+0x72>
 80030fe:	4b13      	ldr	r3, [pc, #76]	@ (800314c <lcdFillRect+0xb4>)
 8003100:	885a      	ldrh	r2, [r3, #2]
 8003102:	88bb      	ldrh	r3, [r7, #4]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	b29b      	uxth	r3, r3
 8003108:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 800310a:	88bb      	ldrh	r3, [r7, #4]
 800310c:	81fb      	strh	r3, [r7, #14]
 800310e:	e00e      	b.n	800312e <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8003110:	88f8      	ldrh	r0, [r7, #6]
 8003112:	88fa      	ldrh	r2, [r7, #6]
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	4413      	add	r3, r2
 8003118:	b299      	uxth	r1, r3
 800311a:	89fa      	ldrh	r2, [r7, #14]
 800311c:	8c3b      	ldrh	r3, [r7, #32]
 800311e:	f7ff fdaf 	bl	8002c80 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8003122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	81fb      	strh	r3, [r7, #14]
 800312e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003132:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003136:	f9b7 3000 	ldrsh.w	r3, [r7]
 800313a:	440b      	add	r3, r1
 800313c:	429a      	cmp	r2, r3
 800313e:	dde7      	ble.n	8003110 <lcdFillRect+0x78>
 8003140:	e000      	b.n	8003144 <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003142:	bf00      	nop
	}
}
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
 800314a:	bf00      	nop
 800314c:	20000024 	.word	0x20000024

08003150 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b085      	sub	sp, #20
 8003154:	af02      	add	r7, sp, #8
 8003156:	4604      	mov	r4, r0
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4623      	mov	r3, r4
 8003160:	80fb      	strh	r3, [r7, #6]
 8003162:	4603      	mov	r3, r0
 8003164:	80bb      	strh	r3, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	807b      	strh	r3, [r7, #2]
 800316a:	4613      	mov	r3, r2
 800316c:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	8b3b      	ldrh	r3, [r7, #24]
 8003172:	4413      	add	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	b218      	sxth	r0, r3
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	8b3b      	ldrh	r3, [r7, #24]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	b29b      	uxth	r3, r3
 8003184:	b21a      	sxth	r2, r3
 8003186:	f9b7 4000 	ldrsh.w	r4, [r7]
 800318a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800318e:	8bbb      	ldrh	r3, [r7, #28]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	4623      	mov	r3, r4
 8003194:	f7ff ff80 	bl	8003098 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8003198:	88fa      	ldrh	r2, [r7, #6]
 800319a:	887b      	ldrh	r3, [r7, #2]
 800319c:	4413      	add	r3, r2
 800319e:	b29a      	uxth	r2, r3
 80031a0:	8b3b      	ldrh	r3, [r7, #24]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b218      	sxth	r0, r3
 80031ac:	88ba      	ldrh	r2, [r7, #4]
 80031ae:	8b3b      	ldrh	r3, [r7, #24]
 80031b0:	4413      	add	r3, r2
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	b219      	sxth	r1, r3
 80031b6:	883a      	ldrh	r2, [r7, #0]
 80031b8:	8b3b      	ldrh	r3, [r7, #24]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80031cc:	8bba      	ldrh	r2, [r7, #28]
 80031ce:	9201      	str	r2, [sp, #4]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	4622      	mov	r2, r4
 80031d6:	f7ff feb5 	bl	8002f44 <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 80031da:	88fa      	ldrh	r2, [r7, #6]
 80031dc:	8b3b      	ldrh	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	b218      	sxth	r0, r3
 80031e4:	88ba      	ldrh	r2, [r7, #4]
 80031e6:	8b3b      	ldrh	r3, [r7, #24]
 80031e8:	4413      	add	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	b219      	sxth	r1, r3
 80031ee:	883a      	ldrh	r2, [r7, #0]
 80031f0:	8b3b      	ldrh	r3, [r7, #24]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	b21b      	sxth	r3, r3
 8003200:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8003204:	8bba      	ldrh	r2, [r7, #28]
 8003206:	9201      	str	r2, [sp, #4]
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2302      	movs	r3, #2
 800320c:	4622      	mov	r2, r4
 800320e:	f7ff fe99 	bl	8002f44 <lcdFillCircleHelper>
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}

0800321a <lcdFillTriangle>:
    @param    y2  Vertex #2 y coordinate
    @param    color 16-bit 5-6-5 Color to fill/draw with
*/
/**************************************************************************/
void lcdFillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 800321a:	b590      	push	{r4, r7, lr}
 800321c:	b08f      	sub	sp, #60	@ 0x3c
 800321e:	af00      	add	r7, sp, #0
 8003220:	4604      	mov	r4, r0
 8003222:	4608      	mov	r0, r1
 8003224:	4611      	mov	r1, r2
 8003226:	461a      	mov	r2, r3
 8003228:	4623      	mov	r3, r4
 800322a:	80fb      	strh	r3, [r7, #6]
 800322c:	4603      	mov	r3, r0
 800322e:	80bb      	strh	r3, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	803b      	strh	r3, [r7, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1)
 8003238:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800323c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003240:	429a      	cmp	r2, r3
 8003242:	dd0b      	ble.n	800325c <lcdFillTriangle+0x42>
    {
        swap(y0, y1); swap(x0, x1);
 8003244:	88bb      	ldrh	r3, [r7, #4]
 8003246:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003248:	883b      	ldrh	r3, [r7, #0]
 800324a:	80bb      	strh	r3, [r7, #4]
 800324c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800324e:	803b      	strh	r3, [r7, #0]
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003254:	887b      	ldrh	r3, [r7, #2]
 8003256:	80fb      	strh	r3, [r7, #6]
 8003258:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800325a:	807b      	strh	r3, [r7, #2]
    }
    if (y1 > y2)
 800325c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003260:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003264:	429a      	cmp	r2, r3
 8003266:	dd0f      	ble.n	8003288 <lcdFillTriangle+0x6e>
    {
        swap(y2, y1); swap(x2, x1);
 8003268:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800326c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800326e:	883b      	ldrh	r3, [r7, #0]
 8003270:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8003274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003276:	803b      	strh	r3, [r7, #0]
 8003278:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800327c:	843b      	strh	r3, [r7, #32]
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003284:	8c3b      	ldrh	r3, [r7, #32]
 8003286:	807b      	strh	r3, [r7, #2]
    }
    if (y0 > y1)
 8003288:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800328c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003290:	429a      	cmp	r2, r3
 8003292:	dd0b      	ble.n	80032ac <lcdFillTriangle+0x92>
    {
        swap(y0, y1); swap(x0, x1);
 8003294:	88bb      	ldrh	r3, [r7, #4]
 8003296:	83fb      	strh	r3, [r7, #30]
 8003298:	883b      	ldrh	r3, [r7, #0]
 800329a:	80bb      	strh	r3, [r7, #4]
 800329c:	8bfb      	ldrh	r3, [r7, #30]
 800329e:	803b      	strh	r3, [r7, #0]
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	83bb      	strh	r3, [r7, #28]
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	80fb      	strh	r3, [r7, #6]
 80032a8:	8bbb      	ldrh	r3, [r7, #28]
 80032aa:	807b      	strh	r3, [r7, #2]
    }

    if(y0 == y2)
 80032ac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80032b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d131      	bne.n	800331c <lcdFillTriangle+0x102>
    { // Handle awkward all-on-same-line case as its own thing
        a = b = x0;
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80032bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80032be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        if(x1 < a)      a = x1;
 80032c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80032c4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80032c8:	429a      	cmp	r2, r3
 80032ca:	da02      	bge.n	80032d2 <lcdFillTriangle+0xb8>
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80032d0:	e007      	b.n	80032e2 <lcdFillTriangle+0xc8>
        else if(x1 > b) b = x1;
 80032d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80032d6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80032da:	429a      	cmp	r2, r3
 80032dc:	dd01      	ble.n	80032e2 <lcdFillTriangle+0xc8>
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if(x2 < a)      a = x2;
 80032e2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80032e6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80032ea:	429a      	cmp	r2, r3
 80032ec:	da03      	bge.n	80032f6 <lcdFillTriangle+0xdc>
 80032ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80032f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80032f4:	e008      	b.n	8003308 <lcdFillTriangle+0xee>
        else if(x2 > b) b = x2;
 80032f6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	@ 0x48
 80032fa:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80032fe:	429a      	cmp	r2, r3
 8003300:	dd02      	ble.n	8003308 <lcdFillTriangle+0xee>
 8003302:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003306:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y0, color);
 8003308:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 800330a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800330c:	3301      	adds	r3, #1
 800330e:	b299      	uxth	r1, r3
 8003310:	88ba      	ldrh	r2, [r7, #4]
 8003312:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003316:	f7ff fcb3 	bl	8002c80 <lcdDrawHLine>
        return;
 800331a:	e0c8      	b.n	80034ae <lcdFillTriangle+0x294>
    }

    int16_t
    dx01 = x1 - x0,
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	837b      	strh	r3, [r7, #26]
    dy01 = y1 - y0,
 8003326:	883a      	ldrh	r2, [r7, #0]
 8003328:	88bb      	ldrh	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	b29b      	uxth	r3, r3
 800332e:	833b      	strh	r3, [r7, #24]
    dx02 = x2 - x0,
 8003330:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003334:	88fb      	ldrh	r3, [r7, #6]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29b      	uxth	r3, r3
 800333a:	82fb      	strh	r3, [r7, #22]
    dy02 = y2 - y0,
 800333c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003340:	88bb      	ldrh	r3, [r7, #4]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	b29b      	uxth	r3, r3
 8003346:	82bb      	strh	r3, [r7, #20]
    dx12 = x2 - x1,
 8003348:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b29b      	uxth	r3, r3
 8003352:	827b      	strh	r3, [r7, #18]
    dy12 = y2 - y1;
 8003354:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8003358:	883b      	ldrh	r3, [r7, #0]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	823b      	strh	r3, [r7, #16]
    int32_t
    sa   = 0,
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb   = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	62bb      	str	r3, [r7, #40]	@ 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003368:	f9b7 2000 	ldrsh.w	r2, [r7]
 800336c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003370:	429a      	cmp	r2, r3
 8003372:	d102      	bne.n	800337a <lcdFillTriangle+0x160>
 8003374:	883b      	ldrh	r3, [r7, #0]
 8003376:	863b      	strh	r3, [r7, #48]	@ 0x30
 8003378:	e003      	b.n	8003382 <lcdFillTriangle+0x168>
    else         last = y1-1; // Skip it
 800337a:	883b      	ldrh	r3, [r7, #0]
 800337c:	3b01      	subs	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	863b      	strh	r3, [r7, #48]	@ 0x30

    for(y=y0; y<=last; y++)
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	867b      	strh	r3, [r7, #50]	@ 0x32
 8003386:	e038      	b.n	80033fa <lcdFillTriangle+0x1e0>
    {
        a   = x0 + sa / dy01;
 8003388:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800338c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003392:	b29a      	uxth	r2, r3
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	4413      	add	r3, r2
 8003398:	b29b      	uxth	r3, r3
 800339a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 800339c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	4413      	add	r3, r2
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx01;
 80033b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80033b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b6:	4413      	add	r3, r2
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 80033ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80033be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033c0:	4413      	add	r3, r2
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 80033c4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80033c8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dd05      	ble.n	80033dc <lcdFillTriangle+0x1c2>
 80033d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80033d2:	81bb      	strh	r3, [r7, #12]
 80033d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80033d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80033d8:	89bb      	ldrh	r3, [r7, #12]
 80033da:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 80033dc:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 80033de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80033e0:	3301      	adds	r3, #1
 80033e2:	b299      	uxth	r1, r3
 80033e4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80033e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033ea:	f7ff fc49 	bl	8002c80 <lcdDrawHLine>
    for(y=y0; y<=last; y++)
 80033ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3301      	adds	r3, #1
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	867b      	strh	r3, [r7, #50]	@ 0x32
 80033fa:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80033fe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8003402:	429a      	cmp	r2, r3
 8003404:	ddc0      	ble.n	8003388 <lcdFillTriangle+0x16e>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003406:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800340a:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800340e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003412:	1a8a      	subs	r2, r1, r2
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sb = (int32_t)dx02 * (y - y0);
 800341a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800341e:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 8003422:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003426:	1a8a      	subs	r2, r1, r2
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(; y<=y2; y++)
 800342e:	e038      	b.n	80034a2 <lcdFillTriangle+0x288>
    {
        a   = x1 + sa / dy12;
 8003430:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003436:	fb92 f3f3 	sdiv	r3, r2, r3
 800343a:	b29a      	uxth	r2, r3
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	4413      	add	r3, r2
 8003440:	b29b      	uxth	r3, r3
 8003442:	86fb      	strh	r3, [r7, #54]	@ 0x36
        b   = x0 + sb / dy02;
 8003444:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003448:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800344a:	fb92 f3f3 	sdiv	r3, r2, r3
 800344e:	b29a      	uxth	r2, r3
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	4413      	add	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	86bb      	strh	r3, [r7, #52]	@ 0x34
        sa += dx12;
 8003458:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800345c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800345e:	4413      	add	r3, r2
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        sb += dx02;
 8003462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	4413      	add	r3, r2
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) swap(a,b);
 800346c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8003470:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8003474:	429a      	cmp	r2, r3
 8003476:	dd05      	ble.n	8003484 <lcdFillTriangle+0x26a>
 8003478:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800347a:	81fb      	strh	r3, [r7, #14]
 800347c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800347e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lcdDrawHLine(a, b + 1, y, color);
 8003484:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 8003486:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003488:	3301      	adds	r3, #1
 800348a:	b299      	uxth	r1, r3
 800348c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800348e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003492:	f7ff fbf5 	bl	8002c80 <lcdDrawHLine>
    for(; y<=y2; y++)
 8003496:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800349a:	b29b      	uxth	r3, r3
 800349c:	3301      	adds	r3, #1
 800349e:	b29b      	uxth	r3, r3
 80034a0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80034a2:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80034a6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80034aa:	429a      	cmp	r2, r3
 80034ac:	ddc0      	ble.n	8003430 <lcdFillTriangle+0x216>
    }
}
 80034ae:	373c      	adds	r7, #60	@ 0x3c
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}

080034b4 <lcdDrawImage>:

void lcdDrawImage(uint16_t x, uint16_t y, GUI_CONST_STORAGE GUI_BITMAP* pBitmap)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	603a      	str	r2, [r7, #0]
 80034be:	80fb      	strh	r3, [r7, #6]
 80034c0:	460b      	mov	r3, r1
 80034c2:	80bb      	strh	r3, [r7, #4]
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <lcdDrawImage+0xa4>)
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d23c      	bcs.n	8003548 <lcdDrawImage+0x94>
 80034ce:	4b22      	ldr	r3, [pc, #136]	@ (8003558 <lcdDrawImage+0xa4>)
 80034d0:	885b      	ldrh	r3, [r3, #2]
 80034d2:	88ba      	ldrh	r2, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d237      	bcs.n	8003548 <lcdDrawImage+0x94>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	8812      	ldrh	r2, [r2, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <lcdDrawImage+0xa4>)
 80034e2:	8812      	ldrh	r2, [r2, #0]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	dc31      	bgt.n	800354c <lcdDrawImage+0x98>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 80034e8:	88bb      	ldrh	r3, [r7, #4]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	8852      	ldrh	r2, [r2, #2]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a19      	ldr	r2, [pc, #100]	@ (8003558 <lcdDrawImage+0xa4>)
 80034f2:	8852      	ldrh	r2, [r2, #2]
 80034f4:	4293      	cmp	r3, r2
 80034f6:	dc2b      	bgt.n	8003550 <lcdDrawImage+0x9c>

	for (int i = 0; i < pBitmap->ySize; ++i)
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e01d      	b.n	800353a <lcdDrawImage+0x86>
	{
		lcdDrawPixels(x, y + i, (uint16_t*)(pBitmap->pData + i * pBitmap->bytesPerLine), pBitmap->bytesPerLine / (pBitmap->bitsPerPixel / 8));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	b29a      	uxth	r2, r3
 8003502:	88bb      	ldrh	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	b299      	uxth	r1, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	889b      	ldrh	r3, [r3, #4]
 8003510:	4618      	mov	r0, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	fb00 f303 	mul.w	r3, r0, r3
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	441a      	add	r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	889b      	ldrh	r3, [r3, #4]
 8003520:	4618      	mov	r0, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	799b      	ldrb	r3, [r3, #6]
 8003526:	08db      	lsrs	r3, r3, #3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	fb90 f3f3 	sdiv	r3, r0, r3
 800352e:	88f8      	ldrh	r0, [r7, #6]
 8003530:	f000 fb58 	bl	8003be4 <lcdDrawPixels>
	for (int i = 0; i < pBitmap->ySize; ++i)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3301      	adds	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	885b      	ldrh	r3, [r3, #2]
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4293      	cmp	r3, r2
 8003544:	dbdb      	blt.n	80034fe <lcdDrawImage+0x4a>
 8003546:	e004      	b.n	8003552 <lcdDrawImage+0x9e>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <lcdDrawImage+0x9e>
	if((x + pBitmap->xSize - 1) >= lcdProperties.width) return;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <lcdDrawImage+0x9e>
	if((y + pBitmap->ySize - 1) >= lcdProperties.height) return;
 8003550:	bf00      	nop
	}
}
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000024 	.word	0x20000024

0800355c <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	4604      	mov	r4, r0
 8003564:	4608      	mov	r0, r1
 8003566:	4611      	mov	r1, r2
 8003568:	461a      	mov	r2, r3
 800356a:	4623      	mov	r3, r4
 800356c:	80fb      	strh	r3, [r7, #6]
 800356e:	4603      	mov	r3, r0
 8003570:	80bb      	strh	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
 8003576:	4613      	mov	r3, r2
 8003578:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 800357a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357e:	4a4a      	ldr	r2, [pc, #296]	@ (80036a8 <lcdDrawChar+0x14c>)
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	4293      	cmp	r3, r2
 8003584:	f280 808c 	bge.w	80036a0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8003588:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800358c:	4a46      	ldr	r2, [pc, #280]	@ (80036a8 <lcdDrawChar+0x14c>)
 800358e:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8003590:	4293      	cmp	r3, r2
 8003592:	f280 8085 	bge.w	80036a0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359a:	4a44      	ldr	r2, [pc, #272]	@ (80036ac <lcdDrawChar+0x150>)
 800359c:	6892      	ldr	r2, [r2, #8]
 800359e:	8892      	ldrh	r2, [r2, #4]
 80035a0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db7c      	blt.n	80036a0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80035a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80035aa:	4a40      	ldr	r2, [pc, #256]	@ (80036ac <lcdDrawChar+0x150>)
 80035ac:	6892      	ldr	r2, [r2, #8]
 80035ae:	88d2      	ldrh	r2, [r2, #6]
 80035b0:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db74      	blt.n	80036a0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 80035b6:	4b3d      	ldr	r3, [pc, #244]	@ (80036ac <lcdDrawChar+0x150>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	88db      	ldrh	r3, [r3, #6]
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	b29b      	uxth	r3, r3
 80035c0:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	73bb      	strb	r3, [r7, #14]
 80035ca:	e061      	b.n	8003690 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	733b      	strb	r3, [r7, #12]
 80035d0:	e055      	b.n	800367e <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 80035d2:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <lcdDrawChar+0x150>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	3a20      	subs	r2, #32
 80035dc:	4933      	ldr	r1, [pc, #204]	@ (80036ac <lcdDrawChar+0x150>)
 80035de:	6889      	ldr	r1, [r1, #8]
 80035e0:	88c9      	ldrh	r1, [r1, #6]
 80035e2:	fb01 f202 	mul.w	r2, r1, r2
 80035e6:	7ab9      	ldrb	r1, [r7, #10]
 80035e8:	fb02 f101 	mul.w	r1, r2, r1
 80035ec:	7bba      	ldrb	r2, [r7, #14]
 80035ee:	7ab8      	ldrb	r0, [r7, #10]
 80035f0:	fb00 f202 	mul.w	r2, r0, r2
 80035f4:	4411      	add	r1, r2
 80035f6:	7b3a      	ldrb	r2, [r7, #12]
 80035f8:	440a      	add	r2, r1
 80035fa:	4413      	add	r3, r2
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8003600:	2300      	movs	r3, #0
 8003602:	72fb      	strb	r3, [r7, #11]
 8003604:	e032      	b.n	800366c <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8003606:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800360a:	2b00      	cmp	r3, #0
 800360c:	da12      	bge.n	8003634 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	b29a      	uxth	r2, r3
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4413      	add	r3, r2
 8003616:	b29a      	uxth	r2, r3
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	b29b      	uxth	r3, r3
 800361c:	4413      	add	r3, r2
 800361e:	b298      	uxth	r0, r3
 8003620:	7bbb      	ldrb	r3, [r7, #14]
 8003622:	b29a      	uxth	r2, r3
 8003624:	88bb      	ldrh	r3, [r7, #4]
 8003626:	4413      	add	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	883a      	ldrh	r2, [r7, #0]
 800362c:	4619      	mov	r1, r3
 800362e:	f7ff fb03 	bl	8002c38 <lcdDrawPixel>
 8003632:	e015      	b.n	8003660 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8003634:	8c3a      	ldrh	r2, [r7, #32]
 8003636:	883b      	ldrh	r3, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d011      	beq.n	8003660 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 800363c:	7afb      	ldrb	r3, [r7, #11]
 800363e:	b29a      	uxth	r2, r3
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	4413      	add	r3, r2
 8003644:	b29a      	uxth	r2, r3
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	b29b      	uxth	r3, r3
 800364a:	4413      	add	r3, r2
 800364c:	b298      	uxth	r0, r3
 800364e:	7bbb      	ldrb	r3, [r7, #14]
 8003650:	b29a      	uxth	r2, r3
 8003652:	88bb      	ldrh	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	8c3a      	ldrh	r2, [r7, #32]
 800365a:	4619      	mov	r1, r3
 800365c:	f7ff faec 	bl	8002c38 <lcdDrawPixel>
				}
				line <<= 1;
 8003660:	7b7b      	ldrb	r3, [r7, #13]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8003666:	7afb      	ldrb	r3, [r7, #11]
 8003668:	3301      	adds	r3, #1
 800366a:	72fb      	strb	r3, [r7, #11]
 800366c:	7afb      	ldrb	r3, [r7, #11]
 800366e:	2b07      	cmp	r3, #7
 8003670:	d9c9      	bls.n	8003606 <lcdDrawChar+0xaa>
			}

			xP += 8;
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	3308      	adds	r3, #8
 8003676:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8003678:	7b3b      	ldrb	r3, [r7, #12]
 800367a:	3301      	adds	r3, #1
 800367c:	733b      	strb	r3, [r7, #12]
 800367e:	7b3a      	ldrb	r2, [r7, #12]
 8003680:	7abb      	ldrb	r3, [r7, #10]
 8003682:	429a      	cmp	r2, r3
 8003684:	d3a5      	bcc.n	80035d2 <lcdDrawChar+0x76>
		}

		xP = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	3301      	adds	r3, #1
 800368e:	73bb      	strb	r3, [r7, #14]
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	b29a      	uxth	r2, r3
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <lcdDrawChar+0x150>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	88db      	ldrh	r3, [r3, #6]
 800369a:	429a      	cmp	r2, r3
 800369c:	d396      	bcc.n	80035cc <lcdDrawChar+0x70>
 800369e:	e000      	b.n	80036a2 <lcdDrawChar+0x146>
		return;
 80036a0:	bf00      	nop
	}
}
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd90      	pop	{r4, r7, pc}
 80036a8:	20000024 	.word	0x20000024
 80036ac:	2000002c 	.word	0x2000002c

080036b0 <lcdDrawCharNoBackColor>:

void lcdDrawCharNoBackColor(int16_t x, int16_t y, unsigned char c, uint16_t color)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4604      	mov	r4, r0
 80036b8:	4608      	mov	r0, r1
 80036ba:	4611      	mov	r1, r2
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	80fb      	strh	r3, [r7, #6]
 80036c2:	4603      	mov	r3, r0
 80036c4:	80bb      	strh	r3, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
 80036ca:	4613      	mov	r3, r2
 80036cc:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 80036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d2:	4a3e      	ldr	r2, [pc, #248]	@ (80037cc <lcdDrawCharNoBackColor+0x11c>)
 80036d4:	8812      	ldrh	r2, [r2, #0]
 80036d6:	4293      	cmp	r3, r2
 80036d8:	da73      	bge.n	80037c2 <lcdDrawCharNoBackColor+0x112>
			(y >= lcdProperties.height) || 		// Clip bottom
 80036da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036de:	4a3b      	ldr	r2, [pc, #236]	@ (80037cc <lcdDrawCharNoBackColor+0x11c>)
 80036e0:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 80036e2:	4293      	cmp	r3, r2
 80036e4:	da6d      	bge.n	80037c2 <lcdDrawCharNoBackColor+0x112>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80036e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ea:	4a39      	ldr	r2, [pc, #228]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 80036ec:	6892      	ldr	r2, [r2, #8]
 80036ee:	8892      	ldrh	r2, [r2, #4]
 80036f0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db65      	blt.n	80037c2 <lcdDrawCharNoBackColor+0x112>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80036f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036fa:	4a35      	ldr	r2, [pc, #212]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 80036fc:	6892      	ldr	r2, [r2, #8]
 80036fe:	88d2      	ldrh	r2, [r2, #6]
 8003700:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8003702:	2b00      	cmp	r3, #0
 8003704:	db5d      	blt.n	80037c2 <lcdDrawCharNoBackColor+0x112>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8003706:	4b32      	ldr	r3, [pc, #200]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	88db      	ldrh	r3, [r3, #6]
 800370c:	08db      	lsrs	r3, r3, #3
 800370e:	b29b      	uxth	r3, r3
 8003710:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8003716:	2300      	movs	r3, #0
 8003718:	73bb      	strb	r3, [r7, #14]
 800371a:	e04a      	b.n	80037b2 <lcdDrawCharNoBackColor+0x102>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 800371c:	2300      	movs	r3, #0
 800371e:	733b      	strb	r3, [r7, #12]
 8003720:	e03e      	b.n	80037a0 <lcdDrawCharNoBackColor+0xf0>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8003722:	4b2b      	ldr	r3, [pc, #172]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	3a20      	subs	r2, #32
 800372c:	4928      	ldr	r1, [pc, #160]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 800372e:	6889      	ldr	r1, [r1, #8]
 8003730:	88c9      	ldrh	r1, [r1, #6]
 8003732:	fb01 f202 	mul.w	r2, r1, r2
 8003736:	7ab9      	ldrb	r1, [r7, #10]
 8003738:	fb02 f101 	mul.w	r1, r2, r1
 800373c:	7bba      	ldrb	r2, [r7, #14]
 800373e:	7ab8      	ldrb	r0, [r7, #10]
 8003740:	fb00 f202 	mul.w	r2, r0, r2
 8003744:	4411      	add	r1, r2
 8003746:	7b3a      	ldrb	r2, [r7, #12]
 8003748:	440a      	add	r2, r1
 800374a:	4413      	add	r3, r2
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8003750:	2300      	movs	r3, #0
 8003752:	72fb      	strb	r3, [r7, #11]
 8003754:	e01b      	b.n	800378e <lcdDrawCharNoBackColor+0xde>
			{
				if((line & 0x80) == 0x80)
 8003756:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800375a:	2b00      	cmp	r3, #0
 800375c:	da11      	bge.n	8003782 <lcdDrawCharNoBackColor+0xd2>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	b29a      	uxth	r2, r3
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	4413      	add	r3, r2
 8003766:	b29a      	uxth	r2, r3
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	b29b      	uxth	r3, r3
 800376c:	4413      	add	r3, r2
 800376e:	b298      	uxth	r0, r3
 8003770:	7bbb      	ldrb	r3, [r7, #14]
 8003772:	b29a      	uxth	r2, r3
 8003774:	88bb      	ldrh	r3, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	883a      	ldrh	r2, [r7, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	f7ff fa5b 	bl	8002c38 <lcdDrawPixel>
				}
				line <<= 1;
 8003782:	7b7b      	ldrb	r3, [r7, #13]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8003788:	7afb      	ldrb	r3, [r7, #11]
 800378a:	3301      	adds	r3, #1
 800378c:	72fb      	strb	r3, [r7, #11]
 800378e:	7afb      	ldrb	r3, [r7, #11]
 8003790:	2b07      	cmp	r3, #7
 8003792:	d9e0      	bls.n	8003756 <lcdDrawCharNoBackColor+0xa6>
			}

			xP += 8;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
 8003796:	3308      	adds	r3, #8
 8003798:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 800379a:	7b3b      	ldrb	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	733b      	strb	r3, [r7, #12]
 80037a0:	7b3a      	ldrb	r2, [r7, #12]
 80037a2:	7abb      	ldrb	r3, [r7, #10]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3bc      	bcc.n	8003722 <lcdDrawCharNoBackColor+0x72>
		}

		xP = 0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80037ac:	7bbb      	ldrb	r3, [r7, #14]
 80037ae:	3301      	adds	r3, #1
 80037b0:	73bb      	strb	r3, [r7, #14]
 80037b2:	7bbb      	ldrb	r3, [r7, #14]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <lcdDrawCharNoBackColor+0x120>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	88db      	ldrh	r3, [r3, #6]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3ad      	bcc.n	800371c <lcdDrawCharNoBackColor+0x6c>
 80037c0:	e000      	b.n	80037c4 <lcdDrawCharNoBackColor+0x114>
		return;
 80037c2:	bf00      	nop
	}
}
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000024 	.word	0x20000024
 80037d0:	2000002c 	.word	0x2000002c

080037d4 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 80037d4:	b40f      	push	{r0, r1, r2, r3}
 80037d6:	b590      	push	{r4, r7, lr}
 80037d8:	b085      	sub	sp, #20
 80037da:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	483d      	ldr	r0, [pc, #244]	@ (80038dc <lcdPrintf+0x108>)
 80037e8:	f005 fcca 	bl	8009180 <vsiprintf>
	va_end(lst);

	p = buf;
 80037ec:	4b3b      	ldr	r3, [pc, #236]	@ (80038dc <lcdPrintf+0x108>)
 80037ee:	607b      	str	r3, [r7, #4]
	while (*p)
 80037f0:	e067      	b.n	80038c2 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b0a      	cmp	r3, #10
 80037f8:	d10c      	bne.n	8003814 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 80037fa:	4b39      	ldr	r3, [pc, #228]	@ (80038e0 <lcdPrintf+0x10c>)
 80037fc:	885a      	ldrh	r2, [r3, #2]
 80037fe:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <lcdPrintf+0x110>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	88db      	ldrh	r3, [r3, #6]
 8003804:	4413      	add	r3, r2
 8003806:	b29a      	uxth	r2, r3
 8003808:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <lcdPrintf+0x10c>)
 800380a:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 800380c:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <lcdPrintf+0x10c>)
 800380e:	2200      	movs	r2, #0
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	e04a      	b.n	80038aa <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b0d      	cmp	r3, #13
 800381a:	d046      	beq.n	80038aa <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b09      	cmp	r3, #9
 8003822:	d10b      	bne.n	800383c <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8003824:	4b2e      	ldr	r3, [pc, #184]	@ (80038e0 <lcdPrintf+0x10c>)
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	4b2e      	ldr	r3, [pc, #184]	@ (80038e4 <lcdPrintf+0x110>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	889b      	ldrh	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	b29b      	uxth	r3, r3
 8003832:	4413      	add	r3, r2
 8003834:	b29a      	uxth	r2, r3
 8003836:	4b2a      	ldr	r3, [pc, #168]	@ (80038e0 <lcdPrintf+0x10c>)
 8003838:	801a      	strh	r2, [r3, #0]
 800383a:	e036      	b.n	80038aa <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800383c:	4b28      	ldr	r3, [pc, #160]	@ (80038e0 <lcdPrintf+0x10c>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b218      	sxth	r0, r3
 8003842:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <lcdPrintf+0x10c>)
 8003844:	885b      	ldrh	r3, [r3, #2]
 8003846:	b219      	sxth	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	4b25      	ldr	r3, [pc, #148]	@ (80038e4 <lcdPrintf+0x110>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	b29c      	uxth	r4, r3
 8003852:	4b24      	ldr	r3, [pc, #144]	@ (80038e4 <lcdPrintf+0x110>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b29b      	uxth	r3, r3
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	4623      	mov	r3, r4
 800385c:	f7ff fe7e 	bl	800355c <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8003860:	4b1f      	ldr	r3, [pc, #124]	@ (80038e0 <lcdPrintf+0x10c>)
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	4b1f      	ldr	r3, [pc, #124]	@ (80038e4 <lcdPrintf+0x110>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	889b      	ldrh	r3, [r3, #4]
 800386a:	4413      	add	r3, r2
 800386c:	b29a      	uxth	r2, r3
 800386e:	4b1c      	ldr	r3, [pc, #112]	@ (80038e0 <lcdPrintf+0x10c>)
 8003870:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8003872:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <lcdPrintf+0x110>)
 8003874:	7b1b      	ldrb	r3, [r3, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d017      	beq.n	80038aa <lcdPrintf+0xd6>
 800387a:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <lcdPrintf+0x10c>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <lcdPrintf+0x114>)
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	4619      	mov	r1, r3
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <lcdPrintf+0x110>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	889b      	ldrh	r3, [r3, #4]
 800388c:	1acb      	subs	r3, r1, r3
 800388e:	429a      	cmp	r2, r3
 8003890:	dd0b      	ble.n	80038aa <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8003892:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <lcdPrintf+0x10c>)
 8003894:	885a      	ldrh	r2, [r3, #2]
 8003896:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <lcdPrintf+0x110>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	88db      	ldrh	r3, [r3, #6]
 800389c:	4413      	add	r3, r2
 800389e:	b29a      	uxth	r2, r3
 80038a0:	4b0f      	ldr	r3, [pc, #60]	@ (80038e0 <lcdPrintf+0x10c>)
 80038a2:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <lcdPrintf+0x10c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3301      	adds	r3, #1
 80038ae:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <lcdPrintf+0x10c>)
 80038b2:	885a      	ldrh	r2, [r3, #2]
 80038b4:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <lcdPrintf+0x114>)
 80038b6:	885b      	ldrh	r3, [r3, #2]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 80038bc:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <lcdPrintf+0x10c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	805a      	strh	r2, [r3, #2]
	while (*p)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d193      	bne.n	80037f2 <lcdPrintf+0x1e>
		}
	}
}
 80038ca:	bf00      	nop
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80038d6:	b004      	add	sp, #16
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	2000025c 	.word	0x2000025c
 80038e0:	20000254 	.word	0x20000254
 80038e4:	2000002c 	.word	0x2000002c
 80038e8:	20000024 	.word	0x20000024

080038ec <lcdPrintfNoBackColor>:

void lcdPrintfNoBackColor(const char *fmt, ...)
{
 80038ec:	b40f      	push	{r0, r1, r2, r3}
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b082      	sub	sp, #8
 80038f2:	af00      	add	r7, sp, #0
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	483a      	ldr	r0, [pc, #232]	@ (80039e8 <lcdPrintfNoBackColor+0xfc>)
 8003900:	f005 fc3e 	bl	8009180 <vsiprintf>
	va_end(lst);

	p = buf;
 8003904:	4b38      	ldr	r3, [pc, #224]	@ (80039e8 <lcdPrintfNoBackColor+0xfc>)
 8003906:	607b      	str	r3, [r7, #4]
	while (*p)
 8003908:	e062      	b.n	80039d0 <lcdPrintfNoBackColor+0xe4>
	{
		if (*p == '\n')
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b0a      	cmp	r3, #10
 8003910:	d10c      	bne.n	800392c <lcdPrintfNoBackColor+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8003912:	4b36      	ldr	r3, [pc, #216]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003914:	885a      	ldrh	r2, [r3, #2]
 8003916:	4b36      	ldr	r3, [pc, #216]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	88db      	ldrh	r3, [r3, #6]
 800391c:	4413      	add	r3, r2
 800391e:	b29a      	uxth	r2, r3
 8003920:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003922:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8003924:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
 800392a:	e045      	b.n	80039b8 <lcdPrintfNoBackColor+0xcc>
		}
		else if (*p == '\r')
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b0d      	cmp	r3, #13
 8003932:	d041      	beq.n	80039b8 <lcdPrintfNoBackColor+0xcc>
		{
			// skip em
		}
		else if (*p == '\t')
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b09      	cmp	r3, #9
 800393a:	d10b      	bne.n	8003954 <lcdPrintfNoBackColor+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 800393c:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 800393e:	881a      	ldrh	r2, [r3, #0]
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	889b      	ldrh	r3, [r3, #4]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	b29b      	uxth	r3, r3
 800394a:	4413      	add	r3, r2
 800394c:	b29a      	uxth	r2, r3
 800394e:	4b27      	ldr	r3, [pc, #156]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003950:	801a      	strh	r2, [r3, #0]
 8003952:	e031      	b.n	80039b8 <lcdPrintfNoBackColor+0xcc>
		}
		else
		{
			lcdDrawCharNoBackColor(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor);
 8003954:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003956:	881b      	ldrh	r3, [r3, #0]
 8003958:	b218      	sxth	r0, r3
 800395a:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 800395c:	885b      	ldrh	r3, [r3, #2]
 800395e:	b219      	sxth	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	4b22      	ldr	r3, [pc, #136]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	f7ff fea1 	bl	80036b0 <lcdDrawCharNoBackColor>
			cursorXY.x += lcdFont.pFont->Width;
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 8003970:	881a      	ldrh	r2, [r3, #0]
 8003972:	4b1f      	ldr	r3, [pc, #124]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	889b      	ldrh	r3, [r3, #4]
 8003978:	4413      	add	r3, r2
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 800397e:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003982:	7b1b      	ldrb	r3, [r3, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d017      	beq.n	80039b8 <lcdPrintfNoBackColor+0xcc>
 8003988:	4b18      	ldr	r3, [pc, #96]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <lcdPrintfNoBackColor+0x108>)
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	4b16      	ldr	r3, [pc, #88]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	889b      	ldrh	r3, [r3, #4]
 800399a:	1acb      	subs	r3, r1, r3
 800399c:	429a      	cmp	r2, r3
 800399e:	dd0b      	ble.n	80039b8 <lcdPrintfNoBackColor+0xcc>
			{
				cursorXY.y += lcdFont.pFont->Height;
 80039a0:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 80039a2:	885a      	ldrh	r2, [r3, #2]
 80039a4:	4b12      	ldr	r3, [pc, #72]	@ (80039f0 <lcdPrintfNoBackColor+0x104>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	88db      	ldrh	r3, [r3, #6]
 80039aa:	4413      	add	r3, r2
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 80039b0:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3301      	adds	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 80039be:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 80039c0:	885a      	ldrh	r2, [r3, #2]
 80039c2:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <lcdPrintfNoBackColor+0x108>)
 80039c4:	885b      	ldrh	r3, [r3, #2]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <lcdPrintfNoBackColor+0xe4>
		{
			cursorXY.y = 0;
 80039ca:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <lcdPrintfNoBackColor+0x100>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	805a      	strh	r2, [r3, #2]
	while (*p)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d198      	bne.n	800390a <lcdPrintfNoBackColor+0x1e>
		}
	}
}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039e4:	b004      	add	sp, #16
 80039e6:	4770      	bx	lr
 80039e8:	2000035c 	.word	0x2000035c
 80039ec:	20000254 	.word	0x20000254
 80039f0:	2000002c 	.word	0x2000002c
 80039f4:	20000024 	.word	0x20000024

080039f8 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <lcdSetTextFont+0x1c>)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6093      	str	r3, [r2, #8]
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2000002c 	.word	0x2000002c

08003a18 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460a      	mov	r2, r1
 8003a22:	80fb      	strh	r3, [r7, #6]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	4a05      	ldr	r2, [pc, #20]	@ (8003a40 <lcdSetTextColor+0x28>)
 8003a2c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8003a2e:	88bb      	ldrh	r3, [r7, #4]
 8003a30:	4a03      	ldr	r2, [pc, #12]	@ (8003a40 <lcdSetTextColor+0x28>)
 8003a32:	6053      	str	r3, [r2, #4]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	2000002c 	.word	0x2000002c

08003a44 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8003a54:	2036      	movs	r0, #54	@ 0x36
 8003a56:	f000 f8fb 	bl	8003c50 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d83e      	bhi.n	8003ae0 <lcdSetOrientation+0x9c>
 8003a62:	a201      	add	r2, pc, #4	@ (adr r2, 8003a68 <lcdSetOrientation+0x24>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a79 	.word	0x08003a79
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003a93 	.word	0x08003a93
 8003a74:	08003ac7 	.word	0x08003ac7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8003a78:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <lcdSetOrientation+0xc4>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f8f7 	bl	8003c70 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003a82:	4b20      	ldr	r3, [pc, #128]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003a84:	22f0      	movs	r2, #240	@ 0xf0
 8003a86:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003a88:	4b1e      	ldr	r3, [pc, #120]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003a8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003a8e:	805a      	strh	r2, [r3, #2]
			break;
 8003a90:	e027      	b.n	8003ae2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <lcdSetOrientation+0xc8>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 f8ea 	bl	8003c70 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003a9e:	22f0      	movs	r2, #240	@ 0xf0
 8003aa0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8003aa2:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003aa4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003aa8:	805a      	strh	r2, [r3, #2]
			break;
 8003aaa:	e01a      	b.n	8003ae2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8003aac:	4b18      	ldr	r3, [pc, #96]	@ (8003b10 <lcdSetOrientation+0xcc>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f8dd 	bl	8003c70 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003ab6:	4b13      	ldr	r3, [pc, #76]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003ab8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003abc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003abe:	4b11      	ldr	r3, [pc, #68]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003ac0:	22f0      	movs	r2, #240	@ 0xf0
 8003ac2:	805a      	strh	r2, [r3, #2]
			break;
 8003ac4:	e00d      	b.n	8003ae2 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8003ac6:	4b13      	ldr	r3, [pc, #76]	@ (8003b14 <lcdSetOrientation+0xd0>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f8d0 	bl	8003c70 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003ad2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003ad6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003ada:	22f0      	movs	r2, #240	@ 0xf0
 8003adc:	805a      	strh	r2, [r3, #2]
			break;
 8003ade:	e000      	b.n	8003ae2 <lcdSetOrientation+0x9e>
		default:
			break;
 8003ae0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <lcdSetOrientation+0xc0>)
 8003aec:	885b      	ldrh	r3, [r3, #2]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2100      	movs	r1, #0
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 f829 	bl	8003b4c <lcdSetWindow>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000024 	.word	0x20000024
 8003b08:	20000258 	.word	0x20000258
 8003b0c:	2000025a 	.word	0x2000025a
 8003b10:	20000259 	.word	0x20000259
 8003b14:	2000025b 	.word	0x2000025b

08003b18 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460a      	mov	r2, r1
 8003b22:	80fb      	strh	r3, [r7, #6]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8003b28:	4a07      	ldr	r2, [pc, #28]	@ (8003b48 <lcdSetCursor+0x30>)
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8003b2e:	4a06      	ldr	r2, [pc, #24]	@ (8003b48 <lcdSetCursor+0x30>)
 8003b30:	88bb      	ldrh	r3, [r7, #4]
 8003b32:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8003b34:	88bb      	ldrh	r3, [r7, #4]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	88b9      	ldrh	r1, [r7, #4]
 8003b3a:	88f8      	ldrh	r0, [r7, #6]
 8003b3c:	f000 f806 	bl	8003b4c <lcdSetWindow>
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	20000254 	.word	0x20000254

08003b4c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4604      	mov	r4, r0
 8003b54:	4608      	mov	r0, r1
 8003b56:	4611      	mov	r1, r2
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	80fb      	strh	r3, [r7, #6]
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80bb      	strh	r3, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]
 8003b66:	4613      	mov	r3, r2
 8003b68:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8003b6a:	202a      	movs	r0, #42	@ 0x2a
 8003b6c:	f000 f870 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f87a 	bl	8003c70 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f874 	bl	8003c70 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f86e 	bl	8003c70 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f868 	bl	8003c70 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8003ba0:	202b      	movs	r0, #43	@ 0x2b
 8003ba2:	f000 f855 	bl	8003c50 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8003ba6:	88bb      	ldrh	r3, [r7, #4]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f85f 	bl	8003c70 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8003bb2:	88bb      	ldrh	r3, [r7, #4]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f859 	bl	8003c70 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8003bbe:	883b      	ldrh	r3, [r7, #0]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 f853 	bl	8003c70 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8003bca:	883b      	ldrh	r3, [r7, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f84d 	bl	8003c70 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8003bd6:	202c      	movs	r0, #44	@ 0x2c
 8003bd8:	f000 f83a 	bl	8003c50 <lcdWriteCommand>
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}

08003be4 <lcdDrawPixels>:
}

/*---------Static functions--------------------------*/

static void lcdDrawPixels(uint16_t x, uint16_t y, uint16_t *data, uint32_t dataLength)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60ba      	str	r2, [r7, #8]
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	4603      	mov	r3, r0
 8003bf0:	81fb      	strh	r3, [r7, #14]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	81bb      	strh	r3, [r7, #12]
  uint32_t i = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]

  lcdSetWindow(x, y, lcdProperties.width - 1, lcdProperties.height - 1);
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003c38 <lcdDrawPixels+0x54>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <lcdDrawPixels+0x54>)
 8003c04:	885b      	ldrh	r3, [r3, #2]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	89b9      	ldrh	r1, [r7, #12]
 8003c0c:	89f8      	ldrh	r0, [r7, #14]
 8003c0e:	f7ff ff9d 	bl	8003b4c <lcdSetWindow>

  do
  {
    lcdWriteData(data[i++]);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	617a      	str	r2, [r7, #20]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f825 	bl	8003c70 <lcdWriteData>
  }
  while (i < dataLength);
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3f1      	bcc.n	8003c12 <lcdDrawPixels+0x2e>
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000024 	.word	0x20000024

08003c3c <lcdReset>:

static void lcdReset(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f000 f805 	bl	8003c50 <lcdWriteCommand>
	HAL_Delay(50);
 8003c46:	2032      	movs	r0, #50	@ 0x32
 8003c48:	f001 fc6e 	bl	8005528 <HAL_Delay>
}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8003c5a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8003c5e:	79fa      	ldrb	r2, [r7, #7]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <lcdWriteData+0x1c>)
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	8013      	strh	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	60080000 	.word	0x60080000

08003c90 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8003c90:	b490      	push	{r4, r7}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4604      	mov	r4, r0
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	71fb      	strb	r3, [r7, #7]
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	71bb      	strb	r3, [r7, #6]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	717b      	strb	r3, [r7, #5]
 8003caa:	4613      	mov	r3, r2
 8003cac:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8003cb2:	7f3b      	ldrb	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <lcdBuildMemoryAccessControlConfig+0x30>
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	f043 0304 	orr.w	r3, r3, #4
 8003cbe:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8003cc0:	7e3b      	ldrb	r3, [r7, #24]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <lcdBuildMemoryAccessControlConfig+0x3e>
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	f043 0308 	orr.w	r3, r3, #8
 8003ccc:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8003cce:	793b      	ldrb	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <lcdBuildMemoryAccessControlConfig+0x4c>
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
 8003cd6:	f043 0310 	orr.w	r3, r3, #16
 8003cda:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8003cdc:	797b      	ldrb	r3, [r7, #5]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <lcdBuildMemoryAccessControlConfig+0x5a>
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	f043 0320 	orr.w	r3, r3, #32
 8003ce8:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8003cea:	79bb      	ldrb	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <lcdBuildMemoryAccessControlConfig+0x68>
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cf6:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <lcdBuildMemoryAccessControlConfig+0x76>
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d04:	73fb      	strb	r3, [r7, #15]
  return value;
 8003d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc90      	pop	{r4, r7}
 8003d10:	4770      	bx	lr
	...

08003d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d18:	f001 fb94 	bl	8005444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d1c:	f000 f854 	bl	8003dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d20:	f000 f91c 	bl	8003f5c <MX_GPIO_Init>
  MX_FSMC_Init();
 8003d24:	f000 f9c0 	bl	80040a8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8003d28:	f000 f8ee 	bl	8003f08 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003d2c:	f000 f8b6 	bl	8003e9c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  LCD_BL_ON();
 8003d30:	2201      	movs	r2, #1
 8003d32:	2102      	movs	r1, #2
 8003d34:	481b      	ldr	r0, [pc, #108]	@ (8003da4 <main+0x90>)
 8003d36:	f001 ff73 	bl	8005c20 <HAL_GPIO_WritePin>
  lcdInit();
 8003d3a:	f7fe facd 	bl	80022d8 <lcdInit>
  lcdSetOrientation(PORTRAIT);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7ff fe80 	bl	8003a44 <lcdSetOrientation>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003d44:	2201      	movs	r2, #1
 8003d46:	4918      	ldr	r1, [pc, #96]	@ (8003da8 <main+0x94>)
 8003d48:	4818      	ldr	r0, [pc, #96]	@ (8003dac <main+0x98>)
 8003d4a:	f003 f9a8 	bl	800709e <HAL_UART_Receive_IT>
  mainMenu();
 8003d4e:	f000 fb09 	bl	8004364 <mainMenu>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rxComplete)
 8003d52:	4b17      	ldr	r3, [pc, #92]	@ (8003db0 <main+0x9c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01e      	beq.n	8003d98 <main+0x84>
	  {
		  rxComplete = 0;
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <main+0x9c>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
		  rxIndex = 0;
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <main+0xa0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	801a      	strh	r2, [r3, #0]
		  processWeatherData((const char*) rxBuffer);
 8003d66:	4814      	ldr	r0, [pc, #80]	@ (8003db8 <main+0xa4>)
 8003d68:	f000 ffc8 	bl	8004cfc <processWeatherData>
		  if (processComplete)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <main+0xa8>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <main+0x76>
		  {
			  processComplete = 0;
 8003d74:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <main+0xa8>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
			  weatherIndex = 0;
 8003d7a:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <main+0xac>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	801a      	strh	r2, [r3, #0]
			  dateIndex = 0;
 8003d80:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <main+0xb0>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	801a      	strh	r2, [r3, #0]
			  drawInterface();
 8003d86:	f000 fe71 	bl	8004a6c <drawInterface>
		  }
		  resetBuffer();
 8003d8a:	f001 f8e1 	bl	8004f50 <resetBuffer>
		  HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4905      	ldr	r1, [pc, #20]	@ (8003da8 <main+0x94>)
 8003d92:	4806      	ldr	r0, [pc, #24]	@ (8003dac <main+0x98>)
 8003d94:	f003 f983 	bl	800709e <HAL_UART_Receive_IT>
	  }
	  HAL_Delay(1000);
 8003d98:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d9c:	f001 fbc4 	bl	8005528 <HAL_Delay>
	  if(rxComplete)
 8003da0:	e7d7      	b.n	8003d52 <main+0x3e>
 8003da2:	bf00      	nop
 8003da4:	40020400 	.word	0x40020400
 8003da8:	2000054c 	.word	0x2000054c
 8003dac:	200004b4 	.word	0x200004b4
 8003db0:	20000952 	.word	0x20000952
 8003db4:	20000950 	.word	0x20000950
 8003db8:	20000550 	.word	0x20000550
 8003dbc:	20000988 	.word	0x20000988
 8003dc0:	20000984 	.word	0x20000984
 8003dc4:	20000986 	.word	0x20000986

08003dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b094      	sub	sp, #80	@ 0x50
 8003dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dce:	f107 0320 	add.w	r3, r7, #32
 8003dd2:	2230      	movs	r2, #48	@ 0x30
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 f9dc 	bl	8009194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <SystemClock_Config+0xcc>)
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <SystemClock_Config+0xcc>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dfc:	4b25      	ldr	r3, [pc, #148]	@ (8003e94 <SystemClock_Config+0xcc>)
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e08:	2300      	movs	r3, #0
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	4b22      	ldr	r3, [pc, #136]	@ (8003e98 <SystemClock_Config+0xd0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a21      	ldr	r2, [pc, #132]	@ (8003e98 <SystemClock_Config+0xd0>)
 8003e12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b1f      	ldr	r3, [pc, #124]	@ (8003e98 <SystemClock_Config+0xd0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e32:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e38:	2304      	movs	r3, #4
 8003e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003e3c:	23a8      	movs	r3, #168	@ 0xa8
 8003e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e40:	2302      	movs	r3, #2
 8003e42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e44:	2304      	movs	r3, #4
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e48:	f107 0320 	add.w	r3, r7, #32
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 ff19 	bl	8005c84 <HAL_RCC_OscConfig>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e58:	f001 f896 	bl	8004f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e5c:	230f      	movs	r3, #15
 8003e5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e60:	2302      	movs	r3, #2
 8003e62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e68:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003e6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2105      	movs	r1, #5
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f002 f97a 	bl	8006174 <HAL_RCC_ClockConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003e86:	f001 f87f 	bl	8004f88 <Error_Handler>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3750      	adds	r7, #80	@ 0x50
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40023800 	.word	0x40023800
 8003e98:	40007000 	.word	0x40007000

08003e9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ea0:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ea2:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <MX_SPI2_Init+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ea8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003eae:	4b14      	ldr	r3, [pc, #80]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eba:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ecc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ece:	4b0c      	ldr	r3, [pc, #48]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eda:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ee6:	4b06      	ldr	r3, [pc, #24]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003eec:	4804      	ldr	r0, [pc, #16]	@ (8003f00 <MX_SPI2_Init+0x64>)
 8003eee:	f002 fb61 	bl	80065b4 <HAL_SPI_Init>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ef8:	f001 f846 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000045c 	.word	0x2000045c
 8003f04:	40003800 	.word	0x40003800

08003f08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f0c:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <MX_USART1_UART_Init+0x50>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003f12:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f14:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003f18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f20:	4b0c      	ldr	r3, [pc, #48]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f26:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f2c:	4b09      	ldr	r3, [pc, #36]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f2e:	220c      	movs	r2, #12
 8003f30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f32:	4b08      	ldr	r3, [pc, #32]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f38:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3e:	4805      	ldr	r0, [pc, #20]	@ (8003f54 <MX_USART1_UART_Init+0x4c>)
 8003f40:	f002 ffd2 	bl	8006ee8 <HAL_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f4a:	f001 f81d 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200004b4 	.word	0x200004b4
 8003f58:	40011000 	.word	0x40011000

08003f5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08c      	sub	sp, #48	@ 0x30
 8003f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
 8003f6e:	60da      	str	r2, [r3, #12]
 8003f70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	4b49      	ldr	r3, [pc, #292]	@ (800409c <MX_GPIO_Init+0x140>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	4a48      	ldr	r2, [pc, #288]	@ (800409c <MX_GPIO_Init+0x140>)
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f82:	4b46      	ldr	r3, [pc, #280]	@ (800409c <MX_GPIO_Init+0x140>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	4b42      	ldr	r3, [pc, #264]	@ (800409c <MX_GPIO_Init+0x140>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	4a41      	ldr	r2, [pc, #260]	@ (800409c <MX_GPIO_Init+0x140>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	613b      	str	r3, [r7, #16]
 8003fae:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fb4:	f043 0302 	orr.w	r3, r3, #2
 8003fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fba:	4b38      	ldr	r3, [pc, #224]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	4b34      	ldr	r3, [pc, #208]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a33      	ldr	r2, [pc, #204]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	4a2c      	ldr	r2, [pc, #176]	@ (800409c <MX_GPIO_Init+0x140>)
 8003fec:	f043 0308 	orr.w	r3, r3, #8
 8003ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <MX_GPIO_Init+0x140>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	4b26      	ldr	r3, [pc, #152]	@ (800409c <MX_GPIO_Init+0x140>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004006:	4a25      	ldr	r2, [pc, #148]	@ (800409c <MX_GPIO_Init+0x140>)
 8004008:	f043 0301 	orr.w	r3, r3, #1
 800400c:	6313      	str	r3, [r2, #48]	@ 0x30
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <MX_GPIO_Init+0x140>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	607b      	str	r3, [r7, #4]
 8004018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800401a:	2200      	movs	r2, #0
 800401c:	2102      	movs	r1, #2
 800401e:	4820      	ldr	r0, [pc, #128]	@ (80040a0 <MX_GPIO_Init+0x144>)
 8004020:	f001 fdfe 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, GPIO_PIN_SET);
 8004024:	2201      	movs	r2, #1
 8004026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800402a:	481d      	ldr	r0, [pc, #116]	@ (80040a0 <MX_GPIO_Init+0x144>)
 800402c:	f001 fdf8 	bl	8005c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8004030:	2320      	movs	r3, #32
 8004032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004034:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800403a:	2301      	movs	r3, #1
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800403e:	f107 031c 	add.w	r3, r7, #28
 8004042:	4619      	mov	r1, r3
 8004044:	4817      	ldr	r0, [pc, #92]	@ (80040a4 <MX_GPIO_Init+0x148>)
 8004046:	f001 fc37 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 800404a:	2302      	movs	r3, #2
 800404c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800404e:	2301      	movs	r3, #1
 8004050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800405a:	f107 031c 	add.w	r3, r7, #28
 800405e:	4619      	mov	r1, r3
 8004060:	480f      	ldr	r0, [pc, #60]	@ (80040a0 <MX_GPIO_Init+0x144>)
 8004062:	f001 fc29 	bl	80058b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_CS_Pin */
  GPIO_InitStruct.Pin = T_CS_Pin;
 8004066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800406a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406c:	2301      	movs	r3, #1
 800406e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004070:	2301      	movs	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004074:	2302      	movs	r3, #2
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	4808      	ldr	r0, [pc, #32]	@ (80040a0 <MX_GPIO_Init+0x144>)
 8004080:	f001 fc1a 	bl	80058b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004084:	2200      	movs	r2, #0
 8004086:	2100      	movs	r1, #0
 8004088:	2017      	movs	r0, #23
 800408a:	f001 fb4c 	bl	8005726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800408e:	2017      	movs	r0, #23
 8004090:	f001 fb65 	bl	800575e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004094:	bf00      	nop
 8004096:	3730      	adds	r7, #48	@ 0x30
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020400 	.word	0x40020400
 80040a4:	40020800 	.word	0x40020800

080040a8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	605a      	str	r2, [r3, #4]
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	611a      	str	r2, [r3, #16]
 80040bc:	615a      	str	r2, [r3, #20]
 80040be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80040c0:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040c2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80040c6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040ca:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <MX_FSMC_Init+0xbc>)
 80040cc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80040ce:	4b24      	ldr	r3, [pc, #144]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80040d4:	4b22      	ldr	r3, [pc, #136]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80040da:	4b21      	ldr	r3, [pc, #132]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80040e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040e2:	2210      	movs	r2, #16
 80040e4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80040e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80040f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80040f8:	4b19      	ldr	r3, [pc, #100]	@ (8004160 <MX_FSMC_Init+0xb8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80040fe:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <MX_FSMC_Init+0xb8>)
 8004100:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004104:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004106:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <MX_FSMC_Init+0xb8>)
 8004108:	2200      	movs	r2, #0
 800410a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800410c:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <MX_FSMC_Init+0xb8>)
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004112:	4b13      	ldr	r3, [pc, #76]	@ (8004160 <MX_FSMC_Init+0xb8>)
 8004114:	2200      	movs	r2, #0
 8004116:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004118:	4b11      	ldr	r3, [pc, #68]	@ (8004160 <MX_FSMC_Init+0xb8>)
 800411a:	2200      	movs	r2, #0
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800411e:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <MX_FSMC_Init+0xb8>)
 8004120:	2200      	movs	r2, #0
 8004122:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8004124:	2301      	movs	r3, #1
 8004126:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8004128:	230f      	movs	r3, #15
 800412a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 800412c:	2305      	movs	r3, #5
 800412e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004134:	2310      	movs	r3, #16
 8004136:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8004138:	2311      	movs	r3, #17
 800413a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	2200      	movs	r2, #0
 8004144:	4619      	mov	r1, r3
 8004146:	4806      	ldr	r0, [pc, #24]	@ (8004160 <MX_FSMC_Init+0xb8>)
 8004148:	f002 fe86 	bl	8006e58 <HAL_SRAM_Init>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004152:	f000 ff19 	bl	8004f88 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004156:	bf00      	nop
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	200004fc 	.word	0x200004fc
 8004164:	a0000104 	.word	0xa0000104

08004168 <drawBackIcon>:

/* USER CODE BEGIN 4 */
void drawBackIcon()
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af04      	add	r7, sp, #16
	lcdFillRoundRect(0, 0, 27, 23, 8, COLOR_WHITE);
 800416e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	2308      	movs	r3, #8
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2317      	movs	r3, #23
 800417a:	221b      	movs	r2, #27
 800417c:	2100      	movs	r1, #0
 800417e:	2000      	movs	r0, #0
 8004180:	f7fe ffe6 	bl	8003150 <lcdFillRoundRect>
	lcdFillRect(10, 7, 13, 8, COLOR_BLACK);
 8004184:	2300      	movs	r3, #0
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2308      	movs	r3, #8
 800418a:	220d      	movs	r2, #13
 800418c:	2107      	movs	r1, #7
 800418e:	200a      	movs	r0, #10
 8004190:	f7fe ff82 	bl	8003098 <lcdFillRect>
	lcdFillTriangle(1, 11, 13, 2, 13, 20, COLOR_BLACK);
 8004194:	2300      	movs	r3, #0
 8004196:	9302      	str	r3, [sp, #8]
 8004198:	2314      	movs	r3, #20
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	230d      	movs	r3, #13
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	2302      	movs	r3, #2
 80041a2:	220d      	movs	r2, #13
 80041a4:	210b      	movs	r1, #11
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7ff f837 	bl	800321a <lcdFillTriangle>
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <wifiMenu>:

void wifiMenu()
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 80041ba:	480f      	ldr	r0, [pc, #60]	@ (80041f8 <wifiMenu+0x44>)
 80041bc:	f7ff fc1c 	bl	80039f8 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 80041c0:	2100      	movs	r1, #0
 80041c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80041c6:	f7ff fc27 	bl	8003a18 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 80041ca:	2000      	movs	r0, #0
 80041cc:	f7fe fd0a 	bl	8002be4 <lcdFillRGB>
	drawBackIcon();
 80041d0:	f7ff ffca 	bl	8004168 <drawBackIcon>
	wifi = 1;
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <wifiMenu+0x48>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	701a      	strb	r2, [r3, #0]
	menu = 0;
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <wifiMenu+0x4c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
	drawAlignedText("Feature in development", 32, 240, 16, NOBACKCOLOR);
 80041e0:	2300      	movs	r3, #0
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2310      	movs	r3, #16
 80041e6:	22f0      	movs	r2, #240	@ 0xf0
 80041e8:	2120      	movs	r1, #32
 80041ea:	4806      	ldr	r0, [pc, #24]	@ (8004204 <wifiMenu+0x50>)
 80041ec:	f7fe f9e8 	bl	80025c0 <drawAlignedText>
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000014 	.word	0x20000014
 80041fc:	20000958 	.word	0x20000958
 8004200:	20000058 	.word	0x20000058
 8004204:	0800b564 	.word	0x0800b564

08004208 <weatherForecastMenu>:

void weatherForecastMenu()
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 800420e:	484b      	ldr	r0, [pc, #300]	@ (800433c <weatherForecastMenu+0x134>)
 8004210:	f7ff fbf2 	bl	80039f8 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004214:	2100      	movs	r1, #0
 8004216:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800421a:	f7ff fbfd 	bl	8003a18 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 800421e:	2000      	movs	r0, #0
 8004220:	f7fe fce0 	bl	8002be4 <lcdFillRGB>
	drawBackIcon();
 8004224:	f7ff ffa0 	bl	8004168 <drawBackIcon>
	weatherForecast = 1;
 8004228:	4b45      	ldr	r3, [pc, #276]	@ (8004340 <weatherForecastMenu+0x138>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
	menu = 0;
 800422e:	4b45      	ldr	r3, [pc, #276]	@ (8004344 <weatherForecastMenu+0x13c>)
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
	drawAlignedText(" Choose a location", 0, 240, 16, NOBACKCOLOR);
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2310      	movs	r3, #16
 800423a:	22f0      	movs	r2, #240	@ 0xf0
 800423c:	2100      	movs	r1, #0
 800423e:	4842      	ldr	r0, [pc, #264]	@ (8004348 <weatherForecastMenu+0x140>)
 8004240:	f7fe f9be 	bl	80025c0 <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 8004244:	2100      	movs	r1, #0
 8004246:	2000      	movs	r0, #0
 8004248:	f7ff fbe6 	bl	8003a18 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 800424c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	230a      	movs	r3, #10
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2328      	movs	r3, #40	@ 0x28
 8004258:	22f0      	movs	r2, #240	@ 0xf0
 800425a:	2120      	movs	r1, #32
 800425c:	2000      	movs	r0, #0
 800425e:	f7fe ff77 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Sai Gon", 45, 240, 16, NOBACKCOLOR);
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	2310      	movs	r3, #16
 8004268:	22f0      	movs	r2, #240	@ 0xf0
 800426a:	212d      	movs	r1, #45	@ 0x2d
 800426c:	4837      	ldr	r0, [pc, #220]	@ (800434c <weatherForecastMenu+0x144>)
 800426e:	f7fe f9a7 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 8004272:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004276:	9301      	str	r3, [sp, #4]
 8004278:	230a      	movs	r3, #10
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	2328      	movs	r3, #40	@ 0x28
 800427e:	22f0      	movs	r2, #240	@ 0xf0
 8004280:	2150      	movs	r1, #80	@ 0x50
 8004282:	2000      	movs	r0, #0
 8004284:	f7fe ff64 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Nha Trang", 93, 240, 16, NOBACKCOLOR);
 8004288:	2300      	movs	r3, #0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	2310      	movs	r3, #16
 800428e:	22f0      	movs	r2, #240	@ 0xf0
 8004290:	215d      	movs	r1, #93	@ 0x5d
 8004292:	482f      	ldr	r0, [pc, #188]	@ (8004350 <weatherForecastMenu+0x148>)
 8004294:	f7fe f994 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 8004298:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	230a      	movs	r3, #10
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2328      	movs	r3, #40	@ 0x28
 80042a4:	22f0      	movs	r2, #240	@ 0xf0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	2000      	movs	r0, #0
 80042aa:	f7fe ff51 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Ha Noi", 141, 240, 16, NOBACKCOLOR);
 80042ae:	2300      	movs	r3, #0
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2310      	movs	r3, #16
 80042b4:	22f0      	movs	r2, #240	@ 0xf0
 80042b6:	218d      	movs	r1, #141	@ 0x8d
 80042b8:	4826      	ldr	r0, [pc, #152]	@ (8004354 <weatherForecastMenu+0x14c>)
 80042ba:	f7fe f981 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 176, 240, 40, 10, COLOR_WHITE);
 80042be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	230a      	movs	r3, #10
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2328      	movs	r3, #40	@ 0x28
 80042ca:	22f0      	movs	r2, #240	@ 0xf0
 80042cc:	21b0      	movs	r1, #176	@ 0xb0
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fe ff3e 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Tampere", 189, 240, 16, NOBACKCOLOR);
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2310      	movs	r3, #16
 80042da:	22f0      	movs	r2, #240	@ 0xf0
 80042dc:	21bd      	movs	r1, #189	@ 0xbd
 80042de:	481e      	ldr	r0, [pc, #120]	@ (8004358 <weatherForecastMenu+0x150>)
 80042e0:	f7fe f96e 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 224, 240, 40, 10, COLOR_WHITE);
 80042e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80042e8:	9301      	str	r3, [sp, #4]
 80042ea:	230a      	movs	r3, #10
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	2328      	movs	r3, #40	@ 0x28
 80042f0:	22f0      	movs	r2, #240	@ 0xf0
 80042f2:	21e0      	movs	r1, #224	@ 0xe0
 80042f4:	2000      	movs	r0, #0
 80042f6:	f7fe ff2b 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Arnhem", 237, 240, 16, NOBACKCOLOR);
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2310      	movs	r3, #16
 8004300:	22f0      	movs	r2, #240	@ 0xf0
 8004302:	21ed      	movs	r1, #237	@ 0xed
 8004304:	4815      	ldr	r0, [pc, #84]	@ (800435c <weatherForecastMenu+0x154>)
 8004306:	f7fe f95b 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 272, 240, 40, 10, COLOR_WHITE);
 800430a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	230a      	movs	r3, #10
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2328      	movs	r3, #40	@ 0x28
 8004316:	22f0      	movs	r2, #240	@ 0xf0
 8004318:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800431c:	2000      	movs	r0, #0
 800431e:	f7fe ff17 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Sydney", 285, 240, 16, NOBACKCOLOR);
 8004322:	2300      	movs	r3, #0
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2310      	movs	r3, #16
 8004328:	22f0      	movs	r2, #240	@ 0xf0
 800432a:	f240 111d 	movw	r1, #285	@ 0x11d
 800432e:	480c      	ldr	r0, [pc, #48]	@ (8004360 <weatherForecastMenu+0x158>)
 8004330:	f7fe f946 	bl	80025c0 <drawAlignedText>
}
 8004334:	bf00      	nop
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20000014 	.word	0x20000014
 8004340:	20000959 	.word	0x20000959
 8004344:	20000058 	.word	0x20000058
 8004348:	0800b57c 	.word	0x0800b57c
 800434c:	0800b590 	.word	0x0800b590
 8004350:	0800b598 	.word	0x0800b598
 8004354:	0800b5a4 	.word	0x0800b5a4
 8004358:	0800b5ac 	.word	0x0800b5ac
 800435c:	0800b5b4 	.word	0x0800b5b4
 8004360:	0800b5bc 	.word	0x0800b5bc

08004364 <mainMenu>:

void mainMenu()
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af02      	add	r7, sp, #8
	lcdSetTextFont(&Font16);
 800436a:	482f      	ldr	r0, [pc, #188]	@ (8004428 <mainMenu+0xc4>)
 800436c:	f7ff fb44 	bl	80039f8 <lcdSetTextFont>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004370:	2100      	movs	r1, #0
 8004372:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004376:	f7ff fb4f 	bl	8003a18 <lcdSetTextColor>
	lcdFillRGB(COLOR_BLACK);
 800437a:	2000      	movs	r0, #0
 800437c:	f7fe fc32 	bl	8002be4 <lcdFillRGB>
	menu = 1;
 8004380:	4b2a      	ldr	r3, [pc, #168]	@ (800442c <mainMenu+0xc8>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
	gardenState = 0;
 8004386:	4b2a      	ldr	r3, [pc, #168]	@ (8004430 <mainMenu+0xcc>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
	weatherForecast = 0;
 800438c:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <mainMenu+0xd0>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
	wifi = 0;
 8004392:	4b29      	ldr	r3, [pc, #164]	@ (8004438 <mainMenu+0xd4>)
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
	drawAlignedText("Choose an option", 0, 240, 16, NOBACKCOLOR);
 8004398:	2300      	movs	r3, #0
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2310      	movs	r3, #16
 800439e:	22f0      	movs	r2, #240	@ 0xf0
 80043a0:	2100      	movs	r1, #0
 80043a2:	4826      	ldr	r0, [pc, #152]	@ (800443c <mainMenu+0xd8>)
 80043a4:	f7fe f90c 	bl	80025c0 <drawAlignedText>

	lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 80043a8:	2100      	movs	r1, #0
 80043aa:	2000      	movs	r0, #0
 80043ac:	f7ff fb34 	bl	8003a18 <lcdSetTextColor>
	lcdFillRoundRect(0, 32, 240, 40, 10, COLOR_WHITE);
 80043b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	230a      	movs	r3, #10
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	2328      	movs	r3, #40	@ 0x28
 80043bc:	22f0      	movs	r2, #240	@ 0xf0
 80043be:	2120      	movs	r1, #32
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fe fec5 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Connect to WiFi", 45, 240, 16, NOBACKCOLOR);
 80043c6:	2300      	movs	r3, #0
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2310      	movs	r3, #16
 80043cc:	22f0      	movs	r2, #240	@ 0xf0
 80043ce:	212d      	movs	r1, #45	@ 0x2d
 80043d0:	481b      	ldr	r0, [pc, #108]	@ (8004440 <mainMenu+0xdc>)
 80043d2:	f7fe f8f5 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 80, 240, 40, 10, COLOR_WHITE);
 80043d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	230a      	movs	r3, #10
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2328      	movs	r3, #40	@ 0x28
 80043e2:	22f0      	movs	r2, #240	@ 0xf0
 80043e4:	2150      	movs	r1, #80	@ 0x50
 80043e6:	2000      	movs	r0, #0
 80043e8:	f7fe feb2 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Weather forecast", 93, 240, 16, NOBACKCOLOR);
 80043ec:	2300      	movs	r3, #0
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2310      	movs	r3, #16
 80043f2:	22f0      	movs	r2, #240	@ 0xf0
 80043f4:	215d      	movs	r1, #93	@ 0x5d
 80043f6:	4813      	ldr	r0, [pc, #76]	@ (8004444 <mainMenu+0xe0>)
 80043f8:	f7fe f8e2 	bl	80025c0 <drawAlignedText>

	lcdFillRoundRect(0, 128, 240, 40, 10, COLOR_WHITE);
 80043fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	230a      	movs	r3, #10
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	2328      	movs	r3, #40	@ 0x28
 8004408:	22f0      	movs	r2, #240	@ 0xf0
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	2000      	movs	r0, #0
 800440e:	f7fe fe9f 	bl	8003150 <lcdFillRoundRect>
	drawAlignedText("Show garden state", 141, 240, 16, NOBACKCOLOR);
 8004412:	2300      	movs	r3, #0
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2310      	movs	r3, #16
 8004418:	22f0      	movs	r2, #240	@ 0xf0
 800441a:	218d      	movs	r1, #141	@ 0x8d
 800441c:	480a      	ldr	r0, [pc, #40]	@ (8004448 <mainMenu+0xe4>)
 800441e:	f7fe f8cf 	bl	80025c0 <drawAlignedText>
}
 8004422:	bf00      	nop
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000014 	.word	0x20000014
 800442c:	20000058 	.word	0x20000058
 8004430:	2000095a 	.word	0x2000095a
 8004434:	20000959 	.word	0x20000959
 8004438:	20000958 	.word	0x20000958
 800443c:	0800b5c4 	.word	0x0800b5c4
 8004440:	0800b5d8 	.word	0x0800b5d8
 8004444:	0800b5e8 	.word	0x0800b5e8
 8004448:	0800b5fc 	.word	0x0800b5fc

0800444c <drawBufferScreen>:

void drawBufferScreen()
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af02      	add	r7, sp, #8
	menu = 0;
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <drawBufferScreen+0x38>)
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]
	lcdFillRGB(COLOR_BLACK);
 8004458:	2000      	movs	r0, #0
 800445a:	f7fe fbc3 	bl	8002be4 <lcdFillRGB>
	drawBackIcon();
 800445e:	f7ff fe83 	bl	8004168 <drawBackIcon>
	lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 8004462:	2100      	movs	r1, #0
 8004464:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004468:	f7ff fad6 	bl	8003a18 <lcdSetTextColor>
	drawAlignedText("Fetching data", 160, 240, 16, NOBACKCOLOR);
 800446c:	2300      	movs	r3, #0
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2310      	movs	r3, #16
 8004472:	22f0      	movs	r2, #240	@ 0xf0
 8004474:	21a0      	movs	r1, #160	@ 0xa0
 8004476:	4804      	ldr	r0, [pc, #16]	@ (8004488 <drawBufferScreen+0x3c>)
 8004478:	f7fe f8a2 	bl	80025c0 <drawAlignedText>
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000058 	.word	0x20000058
 8004488:	0800b610 	.word	0x0800b610

0800448c <checkCoordinates>:

void checkCoordinates()
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
	if ((yCoordinates >= 32 && yCoordinates <= 72) && menu == 1)
 8004490:	4b63      	ldr	r3, [pc, #396]	@ (8004620 <checkCoordinates+0x194>)
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	2b1f      	cmp	r3, #31
 8004496:	d90c      	bls.n	80044b2 <checkCoordinates+0x26>
 8004498:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <checkCoordinates+0x194>)
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	2b48      	cmp	r3, #72	@ 0x48
 800449e:	d808      	bhi.n	80044b2 <checkCoordinates+0x26>
 80044a0:	4b60      	ldr	r3, [pc, #384]	@ (8004624 <checkCoordinates+0x198>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d104      	bne.n	80044b2 <checkCoordinates+0x26>
	{
		drawBufferScreen();
 80044a8:	f7ff ffd0 	bl	800444c <drawBufferScreen>
		wifiMenu();
 80044ac:	f7ff fe82 	bl	80041b4 <wifiMenu>
 80044b0:	e0b3      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates <= 23 && xCoordinates <= 35) && menu != 1)
 80044b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004620 <checkCoordinates+0x194>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	2b17      	cmp	r3, #23
 80044b8:	d80a      	bhi.n	80044d0 <checkCoordinates+0x44>
 80044ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004628 <checkCoordinates+0x19c>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2b23      	cmp	r3, #35	@ 0x23
 80044c0:	d806      	bhi.n	80044d0 <checkCoordinates+0x44>
 80044c2:	4b58      	ldr	r3, [pc, #352]	@ (8004624 <checkCoordinates+0x198>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d002      	beq.n	80044d0 <checkCoordinates+0x44>
	{
		mainMenu();
 80044ca:	f7ff ff4b 	bl	8004364 <mainMenu>
 80044ce:	e0a4      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120) && menu == 1)
 80044d0:	4b53      	ldr	r3, [pc, #332]	@ (8004620 <checkCoordinates+0x194>)
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	2b4f      	cmp	r3, #79	@ 0x4f
 80044d6:	d90a      	bls.n	80044ee <checkCoordinates+0x62>
 80044d8:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <checkCoordinates+0x194>)
 80044da:	881b      	ldrh	r3, [r3, #0]
 80044dc:	2b78      	cmp	r3, #120	@ 0x78
 80044de:	d806      	bhi.n	80044ee <checkCoordinates+0x62>
 80044e0:	4b50      	ldr	r3, [pc, #320]	@ (8004624 <checkCoordinates+0x198>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d102      	bne.n	80044ee <checkCoordinates+0x62>
	{
		weatherForecastMenu();
 80044e8:	f7ff fe8e 	bl	8004208 <weatherForecastMenu>
 80044ec:	e095      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 272 && yCoordinates <= 312) && menu == 1)
 80044ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004620 <checkCoordinates+0x194>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80044f6:	d30f      	bcc.n	8004518 <checkCoordinates+0x8c>
 80044f8:	4b49      	ldr	r3, [pc, #292]	@ (8004620 <checkCoordinates+0x194>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8004500:	d80a      	bhi.n	8004518 <checkCoordinates+0x8c>
 8004502:	4b48      	ldr	r3, [pc, #288]	@ (8004624 <checkCoordinates+0x198>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d106      	bne.n	8004518 <checkCoordinates+0x8c>
	{
		drawBufferScreen();
 800450a:	f7ff ff9f 	bl	800444c <drawBufferScreen>
		sendGardenStateRequest();
 800450e:	f000 fb91 	bl	8004c34 <sendGardenStateRequest>
		gardenStateInterface();
 8004512:	f000 fa2f 	bl	8004974 <gardenStateInterface>
 8004516:	e080      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 32 && yCoordinates <= 72) && weatherForecast == 1)
 8004518:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <checkCoordinates+0x194>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	2b1f      	cmp	r3, #31
 800451e:	d910      	bls.n	8004542 <checkCoordinates+0xb6>
 8004520:	4b3f      	ldr	r3, [pc, #252]	@ (8004620 <checkCoordinates+0x194>)
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	2b48      	cmp	r3, #72	@ 0x48
 8004526:	d80c      	bhi.n	8004542 <checkCoordinates+0xb6>
 8004528:	4b40      	ldr	r3, [pc, #256]	@ (800462c <checkCoordinates+0x1a0>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d108      	bne.n	8004542 <checkCoordinates+0xb6>
	{
		drawBufferScreen();
 8004530:	f7ff ff8c 	bl	800444c <drawBufferScreen>
		sendAPIURL(SAIGON);
 8004534:	2001      	movs	r0, #1
 8004536:	f000 faf3 	bl	8004b20 <sendAPIURL>
		currentCity = 1;
 800453a:	4b3d      	ldr	r3, [pc, #244]	@ (8004630 <checkCoordinates+0x1a4>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e06b      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 80 && yCoordinates <= 120) && weatherForecast == 1)
 8004542:	4b37      	ldr	r3, [pc, #220]	@ (8004620 <checkCoordinates+0x194>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	2b4f      	cmp	r3, #79	@ 0x4f
 8004548:	d910      	bls.n	800456c <checkCoordinates+0xe0>
 800454a:	4b35      	ldr	r3, [pc, #212]	@ (8004620 <checkCoordinates+0x194>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	2b78      	cmp	r3, #120	@ 0x78
 8004550:	d80c      	bhi.n	800456c <checkCoordinates+0xe0>
 8004552:	4b36      	ldr	r3, [pc, #216]	@ (800462c <checkCoordinates+0x1a0>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d108      	bne.n	800456c <checkCoordinates+0xe0>
	{
		drawBufferScreen();
 800455a:	f7ff ff77 	bl	800444c <drawBufferScreen>
		sendAPIURL(NHATRANG);
 800455e:	2000      	movs	r0, #0
 8004560:	f000 fade 	bl	8004b20 <sendAPIURL>
		currentCity = 0;
 8004564:	4b32      	ldr	r3, [pc, #200]	@ (8004630 <checkCoordinates+0x1a4>)
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	e056      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 128 && yCoordinates <= 168) && weatherForecast == 1)
 800456c:	4b2c      	ldr	r3, [pc, #176]	@ (8004620 <checkCoordinates+0x194>)
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	2b7f      	cmp	r3, #127	@ 0x7f
 8004572:	d910      	bls.n	8004596 <checkCoordinates+0x10a>
 8004574:	4b2a      	ldr	r3, [pc, #168]	@ (8004620 <checkCoordinates+0x194>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	2ba8      	cmp	r3, #168	@ 0xa8
 800457a:	d80c      	bhi.n	8004596 <checkCoordinates+0x10a>
 800457c:	4b2b      	ldr	r3, [pc, #172]	@ (800462c <checkCoordinates+0x1a0>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d108      	bne.n	8004596 <checkCoordinates+0x10a>
	{
		drawBufferScreen();
 8004584:	f7ff ff62 	bl	800444c <drawBufferScreen>
		sendAPIURL(HANOI);
 8004588:	2002      	movs	r0, #2
 800458a:	f000 fac9 	bl	8004b20 <sendAPIURL>
		currentCity = 2;
 800458e:	4b28      	ldr	r3, [pc, #160]	@ (8004630 <checkCoordinates+0x1a4>)
 8004590:	2202      	movs	r2, #2
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e041      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 176 && yCoordinates <= 216) && weatherForecast == 1)
 8004596:	4b22      	ldr	r3, [pc, #136]	@ (8004620 <checkCoordinates+0x194>)
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	2baf      	cmp	r3, #175	@ 0xaf
 800459c:	d910      	bls.n	80045c0 <checkCoordinates+0x134>
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <checkCoordinates+0x194>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2bd8      	cmp	r3, #216	@ 0xd8
 80045a4:	d80c      	bhi.n	80045c0 <checkCoordinates+0x134>
 80045a6:	4b21      	ldr	r3, [pc, #132]	@ (800462c <checkCoordinates+0x1a0>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d108      	bne.n	80045c0 <checkCoordinates+0x134>
	{
		drawBufferScreen();
 80045ae:	f7ff ff4d 	bl	800444c <drawBufferScreen>
		sendAPIURL(TAMPERE);
 80045b2:	2003      	movs	r0, #3
 80045b4:	f000 fab4 	bl	8004b20 <sendAPIURL>
		currentCity = 3;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004630 <checkCoordinates+0x1a4>)
 80045ba:	2203      	movs	r2, #3
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e02c      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 224 && yCoordinates <= 264) && weatherForecast == 1)
 80045c0:	4b17      	ldr	r3, [pc, #92]	@ (8004620 <checkCoordinates+0x194>)
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	2bdf      	cmp	r3, #223	@ 0xdf
 80045c6:	d911      	bls.n	80045ec <checkCoordinates+0x160>
 80045c8:	4b15      	ldr	r3, [pc, #84]	@ (8004620 <checkCoordinates+0x194>)
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 80045d0:	d80c      	bhi.n	80045ec <checkCoordinates+0x160>
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <checkCoordinates+0x1a0>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <checkCoordinates+0x160>
	{
		drawBufferScreen();
 80045da:	f7ff ff37 	bl	800444c <drawBufferScreen>
		sendAPIURL(ARNHEM);
 80045de:	2004      	movs	r0, #4
 80045e0:	f000 fa9e 	bl	8004b20 <sendAPIURL>
		currentCity = 4;
 80045e4:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <checkCoordinates+0x1a4>)
 80045e6:	2204      	movs	r2, #4
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e016      	b.n	800461a <checkCoordinates+0x18e>
	}
	else if ((yCoordinates >= 272 && yCoordinates <= 312) && weatherForecast == 1)
 80045ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <checkCoordinates+0x194>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80045f4:	d311      	bcc.n	800461a <checkCoordinates+0x18e>
 80045f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004620 <checkCoordinates+0x194>)
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 80045fe:	d80c      	bhi.n	800461a <checkCoordinates+0x18e>
 8004600:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <checkCoordinates+0x1a0>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d108      	bne.n	800461a <checkCoordinates+0x18e>
	{
		drawBufferScreen();
 8004608:	f7ff ff20 	bl	800444c <drawBufferScreen>
		sendAPIURL(SYDNEY);
 800460c:	2005      	movs	r0, #5
 800460e:	f000 fa87 	bl	8004b20 <sendAPIURL>
		currentCity = 5;
 8004612:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <checkCoordinates+0x1a4>)
 8004614:	2205      	movs	r2, #5
 8004616:	601a      	str	r2, [r3, #0]
	}
}
 8004618:	e7ff      	b.n	800461a <checkCoordinates+0x18e>
 800461a:	bf00      	nop
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000956 	.word	0x20000956
 8004624:	20000058 	.word	0x20000058
 8004628:	20000954 	.word	0x20000954
 800462c:	20000959 	.word	0x20000959
 8004630:	20000980 	.word	0x20000980

08004634 <drawWeather>:

void drawWeather(uint16_t xPosition, uint16_t yPosition, int weatherCode)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	603a      	str	r2, [r7, #0]
 800463e:	80fb      	strh	r3, [r7, #6]
 8004640:	460b      	mov	r3, r1
 8004642:	80bb      	strh	r3, [r7, #4]
	if (weatherCode == 0)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <drawWeather+0x24>
	{
		drawClearDay(xPosition, yPosition);
 800464a:	88ba      	ldrh	r2, [r7, #4]
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	4611      	mov	r1, r2
 8004650:	4618      	mov	r0, r3
 8004652:	f7fd ffde 	bl	8002612 <drawClearDay>
	}
	else if (weatherCode == 45 || weatherCode == 48)
	{
		drawFoggyDay(xPosition, yPosition);
	}
}
 8004656:	e04c      	b.n	80046f2 <drawWeather+0xbe>
	else if (weatherCode >= 1 && weatherCode <= 3)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	dd09      	ble.n	8004672 <drawWeather+0x3e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b03      	cmp	r3, #3
 8004662:	dc06      	bgt.n	8004672 <drawWeather+0x3e>
		drawCloudyDay(xPosition, yPosition);
 8004664:	88ba      	ldrh	r2, [r7, #4]
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7fd ffe9 	bl	8002642 <drawCloudyDay>
 8004670:	e03f      	b.n	80046f2 <drawWeather+0xbe>
	else if ((weatherCode >= 51 && weatherCode <= 67) || (weatherCode >= 80 && weatherCode <= 82))
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b32      	cmp	r3, #50	@ 0x32
 8004676:	dd02      	ble.n	800467e <drawWeather+0x4a>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b43      	cmp	r3, #67	@ 0x43
 800467c:	dd05      	ble.n	800468a <drawWeather+0x56>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b4f      	cmp	r3, #79	@ 0x4f
 8004682:	dd09      	ble.n	8004698 <drawWeather+0x64>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b52      	cmp	r3, #82	@ 0x52
 8004688:	dc06      	bgt.n	8004698 <drawWeather+0x64>
		drawRainyDay(xPosition, yPosition);
 800468a:	88ba      	ldrh	r2, [r7, #4]
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe f816 	bl	80026c2 <drawRainyDay>
 8004696:	e02c      	b.n	80046f2 <drawWeather+0xbe>
	else if ((weatherCode >= 71 && weatherCode <= 77) || (weatherCode == 85 || weatherCode == 86))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b46      	cmp	r3, #70	@ 0x46
 800469c:	dd02      	ble.n	80046a4 <drawWeather+0x70>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b4d      	cmp	r3, #77	@ 0x4d
 80046a2:	dd05      	ble.n	80046b0 <drawWeather+0x7c>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b55      	cmp	r3, #85	@ 0x55
 80046a8:	d002      	beq.n	80046b0 <drawWeather+0x7c>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b56      	cmp	r3, #86	@ 0x56
 80046ae:	d106      	bne.n	80046be <drawWeather+0x8a>
		drawSnowyDay(xPosition, yPosition);
 80046b0:	88ba      	ldrh	r2, [r7, #4]
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe f86e 	bl	8002798 <drawSnowyDay>
 80046bc:	e019      	b.n	80046f2 <drawWeather+0xbe>
	else if (weatherCode >= 95 && weatherCode <= 99)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b5e      	cmp	r3, #94	@ 0x5e
 80046c2:	dd09      	ble.n	80046d8 <drawWeather+0xa4>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b63      	cmp	r3, #99	@ 0x63
 80046c8:	dc06      	bgt.n	80046d8 <drawWeather+0xa4>
		drawStormyDay(xPosition, yPosition);
 80046ca:	88ba      	ldrh	r2, [r7, #4]
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe f997 	bl	8002a04 <drawStormyDay>
 80046d6:	e00c      	b.n	80046f2 <drawWeather+0xbe>
	else if (weatherCode == 45 || weatherCode == 48)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b2d      	cmp	r3, #45	@ 0x2d
 80046dc:	d002      	beq.n	80046e4 <drawWeather+0xb0>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b30      	cmp	r3, #48	@ 0x30
 80046e2:	d106      	bne.n	80046f2 <drawWeather+0xbe>
		drawFoggyDay(xPosition, yPosition);
 80046e4:	88ba      	ldrh	r2, [r7, #4]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe f8aa 	bl	8002844 <drawFoggyDay>
}
 80046f0:	e7ff      	b.n	80046f2 <drawWeather+0xbe>
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <weatherForecastInterface>:

void weatherForecastInterface()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af02      	add	r7, sp, #8
	menu = 0;
 8004702:	4b89      	ldr	r3, [pc, #548]	@ (8004928 <weatherForecastInterface+0x22c>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
	uint16_t color;
	if (isDay == 0)
 8004708:	4b88      	ldr	r3, [pc, #544]	@ (800492c <weatherForecastInterface+0x230>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10c      	bne.n	800472a <weatherForecastInterface+0x2e>
	{
		lcdDrawImage(0, 0, &imageNight);
 8004710:	4a87      	ldr	r2, [pc, #540]	@ (8004930 <weatherForecastInterface+0x234>)
 8004712:	2100      	movs	r1, #0
 8004714:	2000      	movs	r0, #0
 8004716:	f7fe fecd 	bl	80034b4 <lcdDrawImage>
		color = COLOR_NAVY;
 800471a:	230f      	movs	r3, #15
 800471c:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800471e:	2100      	movs	r1, #0
 8004720:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004724:	f7ff f978 	bl	8003a18 <lcdSetTextColor>
 8004728:	e00b      	b.n	8004742 <weatherForecastInterface+0x46>
	}
	else
	{
		lcdDrawImage(0, 0, &imageDay);
 800472a:	4a82      	ldr	r2, [pc, #520]	@ (8004934 <weatherForecastInterface+0x238>)
 800472c:	2100      	movs	r1, #0
 800472e:	2000      	movs	r0, #0
 8004730:	f7fe fec0 	bl	80034b4 <lcdDrawImage>
		color = COLOR_CYAN;
 8004734:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004738:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 800473a:	2100      	movs	r1, #0
 800473c:	2000      	movs	r0, #0
 800473e:	f7ff f96b 	bl	8003a18 <lcdSetTextColor>
	}
	drawBackIcon();
 8004742:	f7ff fd11 	bl	8004168 <drawBackIcon>

	for (int y = 160; y < 320; y++)
 8004746:	23a0      	movs	r3, #160	@ 0xa0
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	e013      	b.n	8004774 <weatherForecastInterface+0x78>
	{
		for (int x = 0; x < 240; x++)
 800474c:	2300      	movs	r3, #0
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e00a      	b.n	8004768 <weatherForecastInterface+0x6c>
		{
		    lcdDrawPixel(x, y, color);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	b29b      	uxth	r3, r3
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	b291      	uxth	r1, r2
 800475a:	89fa      	ldrh	r2, [r7, #14]
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fa6b 	bl	8002c38 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3301      	adds	r3, #1
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2bef      	cmp	r3, #239	@ 0xef
 800476c:	ddf1      	ble.n	8004752 <weatherForecastInterface+0x56>
	for (int y = 160; y < 320; y++)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3301      	adds	r3, #1
 8004772:	60bb      	str	r3, [r7, #8]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800477a:	dbe7      	blt.n	800474c <weatherForecastInterface+0x50>
		}
	}

	lcdSetTextFont(&Font12);
 800477c:	486e      	ldr	r0, [pc, #440]	@ (8004938 <weatherForecastInterface+0x23c>)
 800477e:	f7ff f93b 	bl	80039f8 <lcdSetTextFont>

	reformatDate();
 8004782:	f000 f991 	bl	8004aa8 <reformatDate>

	drawWeather(40, 190, weather[0]);
 8004786:	4b6d      	ldr	r3, [pc, #436]	@ (800493c <weatherForecastInterface+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	21be      	movs	r1, #190	@ 0xbe
 800478e:	2028      	movs	r0, #40	@ 0x28
 8004790:	f7ff ff50 	bl	8004634 <drawWeather>
	lcdSetCursor(25, 160);
 8004794:	21a0      	movs	r1, #160	@ 0xa0
 8004796:	2019      	movs	r0, #25
 8004798:	f7ff f9be 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[0]);
 800479c:	4b68      	ldr	r3, [pc, #416]	@ (8004940 <weatherForecastInterface+0x244>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f8a3 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(90, 190, weather[1]);
 80047a6:	4b65      	ldr	r3, [pc, #404]	@ (800493c <weatherForecastInterface+0x240>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	461a      	mov	r2, r3
 80047ac:	21be      	movs	r1, #190	@ 0xbe
 80047ae:	205a      	movs	r0, #90	@ 0x5a
 80047b0:	f7ff ff40 	bl	8004634 <drawWeather>
	lcdSetCursor(75, 160);
 80047b4:	21a0      	movs	r1, #160	@ 0xa0
 80047b6:	204b      	movs	r0, #75	@ 0x4b
 80047b8:	f7ff f9ae 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[1]);
 80047bc:	4b60      	ldr	r3, [pc, #384]	@ (8004940 <weatherForecastInterface+0x244>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff f893 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(150, 190, weather[2]);
 80047c6:	4b5d      	ldr	r3, [pc, #372]	@ (800493c <weatherForecastInterface+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	461a      	mov	r2, r3
 80047cc:	21be      	movs	r1, #190	@ 0xbe
 80047ce:	2096      	movs	r0, #150	@ 0x96
 80047d0:	f7ff ff30 	bl	8004634 <drawWeather>
	lcdSetCursor(135, 160);
 80047d4:	21a0      	movs	r1, #160	@ 0xa0
 80047d6:	2087      	movs	r0, #135	@ 0x87
 80047d8:	f7ff f99e 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[2]);
 80047dc:	4b58      	ldr	r3, [pc, #352]	@ (8004940 <weatherForecastInterface+0x244>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff f883 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(200, 190, weather[3]);
 80047e6:	4b55      	ldr	r3, [pc, #340]	@ (800493c <weatherForecastInterface+0x240>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	461a      	mov	r2, r3
 80047ec:	21be      	movs	r1, #190	@ 0xbe
 80047ee:	20c8      	movs	r0, #200	@ 0xc8
 80047f0:	f7ff ff20 	bl	8004634 <drawWeather>
	lcdSetCursor(185, 160);
 80047f4:	21a0      	movs	r1, #160	@ 0xa0
 80047f6:	20b9      	movs	r0, #185	@ 0xb9
 80047f8:	f7ff f98e 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[3]);
 80047fc:	4b50      	ldr	r3, [pc, #320]	@ (8004940 <weatherForecastInterface+0x244>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff f873 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(65, 270, weather[4]);
 8004806:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <weatherForecastInterface+0x240>)
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	461a      	mov	r2, r3
 800480c:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004810:	2041      	movs	r0, #65	@ 0x41
 8004812:	f7ff ff0f 	bl	8004634 <drawWeather>
	lcdSetCursor(50, 240);
 8004816:	21f0      	movs	r1, #240	@ 0xf0
 8004818:	2032      	movs	r0, #50	@ 0x32
 800481a:	f7ff f97d 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[4]);
 800481e:	4b48      	ldr	r3, [pc, #288]	@ (8004940 <weatherForecastInterface+0x244>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	4618      	mov	r0, r3
 8004824:	f7ff f862 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(120, 270, weather[5]);
 8004828:	4b44      	ldr	r3, [pc, #272]	@ (800493c <weatherForecastInterface+0x240>)
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	461a      	mov	r2, r3
 800482e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004832:	2078      	movs	r0, #120	@ 0x78
 8004834:	f7ff fefe 	bl	8004634 <drawWeather>
	lcdSetCursor(105, 240);
 8004838:	21f0      	movs	r1, #240	@ 0xf0
 800483a:	2069      	movs	r0, #105	@ 0x69
 800483c:	f7ff f96c 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[5]);
 8004840:	4b3f      	ldr	r3, [pc, #252]	@ (8004940 <weatherForecastInterface+0x244>)
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff f851 	bl	80038ec <lcdPrintfNoBackColor>

	drawWeather(175, 270, weather[6]);
 800484a:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <weatherForecastInterface+0x240>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	461a      	mov	r2, r3
 8004850:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8004854:	20af      	movs	r0, #175	@ 0xaf
 8004856:	f7ff feed 	bl	8004634 <drawWeather>
	lcdSetCursor(160, 240);
 800485a:	21f0      	movs	r1, #240	@ 0xf0
 800485c:	20a0      	movs	r0, #160	@ 0xa0
 800485e:	f7ff f95b 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor(date[6]);
 8004862:	4b37      	ldr	r3, [pc, #220]	@ (8004940 <weatherForecastInterface+0x244>)
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff f840 	bl	80038ec <lcdPrintfNoBackColor>

	lcdSetCursor(80, 110);
 800486c:	216e      	movs	r1, #110	@ 0x6e
 800486e:	2050      	movs	r0, #80	@ 0x50
 8004870:	f7ff f952 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", currentHumidity);
 8004874:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <weatherForecastInterface+0x248>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	4833      	ldr	r0, [pc, #204]	@ (8004948 <weatherForecastInterface+0x24c>)
 800487c:	f7ff f836 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font20);
 8004880:	4832      	ldr	r0, [pc, #200]	@ (800494c <weatherForecastInterface+0x250>)
 8004882:	f7ff f8b9 	bl	80039f8 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 8004886:	215a      	movs	r1, #90	@ 0x5a
 8004888:	206e      	movs	r0, #110	@ 0x6e
 800488a:	f7ff f945 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", currentTemperature);
 800488e:	4b30      	ldr	r3, [pc, #192]	@ (8004950 <weatherForecastInterface+0x254>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	482f      	ldr	r0, [pc, #188]	@ (8004954 <weatherForecastInterface+0x258>)
 8004896:	f7ff f829 	bl	80038ec <lcdPrintfNoBackColor>

	switch (currentCity)
 800489a:	4b2f      	ldr	r3, [pc, #188]	@ (8004958 <weatherForecastInterface+0x25c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b05      	cmp	r3, #5
 80048a0:	d83e      	bhi.n	8004920 <weatherForecastInterface+0x224>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <weatherForecastInterface+0x1ac>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048c1 	.word	0x080048c1
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048e1 	.word	0x080048e1
 80048b4:	080048f1 	.word	0x080048f1
 80048b8:	08004901 	.word	0x08004901
 80048bc:	08004911 	.word	0x08004911
	{
		case NHATRANG:
			drawAlignedText("Nha Trang", 10, 240, 16, NOBACKCOLOR);
 80048c0:	2300      	movs	r3, #0
 80048c2:	9300      	str	r3, [sp, #0]
 80048c4:	2310      	movs	r3, #16
 80048c6:	22f0      	movs	r2, #240	@ 0xf0
 80048c8:	210a      	movs	r1, #10
 80048ca:	4824      	ldr	r0, [pc, #144]	@ (800495c <weatherForecastInterface+0x260>)
 80048cc:	f7fd fe78 	bl	80025c0 <drawAlignedText>
		case SAIGON:
			drawAlignedText("Sai Gon", 10, 240, 16, NOBACKCOLOR);
 80048d0:	2300      	movs	r3, #0
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	22f0      	movs	r2, #240	@ 0xf0
 80048d8:	210a      	movs	r1, #10
 80048da:	4821      	ldr	r0, [pc, #132]	@ (8004960 <weatherForecastInterface+0x264>)
 80048dc:	f7fd fe70 	bl	80025c0 <drawAlignedText>
		case HANOI:
			drawAlignedText("Ha Noi", 10, 240, 16, NOBACKCOLOR);
 80048e0:	2300      	movs	r3, #0
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	2310      	movs	r3, #16
 80048e6:	22f0      	movs	r2, #240	@ 0xf0
 80048e8:	210a      	movs	r1, #10
 80048ea:	481e      	ldr	r0, [pc, #120]	@ (8004964 <weatherForecastInterface+0x268>)
 80048ec:	f7fd fe68 	bl	80025c0 <drawAlignedText>
		case TAMPERE:
			drawAlignedText("Tampere", 10, 240, 16, NOBACKCOLOR);
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2310      	movs	r3, #16
 80048f6:	22f0      	movs	r2, #240	@ 0xf0
 80048f8:	210a      	movs	r1, #10
 80048fa:	481b      	ldr	r0, [pc, #108]	@ (8004968 <weatherForecastInterface+0x26c>)
 80048fc:	f7fd fe60 	bl	80025c0 <drawAlignedText>
		case ARNHEM:
			drawAlignedText("Arnhem", 10, 240, 16, NOBACKCOLOR);
 8004900:	2300      	movs	r3, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2310      	movs	r3, #16
 8004906:	22f0      	movs	r2, #240	@ 0xf0
 8004908:	210a      	movs	r1, #10
 800490a:	4818      	ldr	r0, [pc, #96]	@ (800496c <weatherForecastInterface+0x270>)
 800490c:	f7fd fe58 	bl	80025c0 <drawAlignedText>
		case SYDNEY:
			drawAlignedText("Sydney", 10, 240, 16, NOBACKCOLOR);
 8004910:	2300      	movs	r3, #0
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2310      	movs	r3, #16
 8004916:	22f0      	movs	r2, #240	@ 0xf0
 8004918:	210a      	movs	r1, #10
 800491a:	4815      	ldr	r0, [pc, #84]	@ (8004970 <weatherForecastInterface+0x274>)
 800491c:	f7fd fe50 	bl	80025c0 <drawAlignedText>
	}
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000058 	.word	0x20000058
 800492c:	20000989 	.word	0x20000989
 8004930:	08030f14 	.word	0x08030f14
 8004934:	0801e308 	.word	0x0801e308
 8004938:	2000000c 	.word	0x2000000c
 800493c:	2000095c 	.word	0x2000095c
 8004940:	2000098c 	.word	0x2000098c
 8004944:	2000097c 	.word	0x2000097c
 8004948:	0800b620 	.word	0x0800b620
 800494c:	2000001c 	.word	0x2000001c
 8004950:	20000978 	.word	0x20000978
 8004954:	0800b630 	.word	0x0800b630
 8004958:	20000980 	.word	0x20000980
 800495c:	0800b598 	.word	0x0800b598
 8004960:	0800b590 	.word	0x0800b590
 8004964:	0800b5a4 	.word	0x0800b5a4
 8004968:	0800b5ac 	.word	0x0800b5ac
 800496c:	0800b5b4 	.word	0x0800b5b4
 8004970:	0800b5bc 	.word	0x0800b5bc

08004974 <gardenStateInterface>:

void gardenStateInterface()
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af02      	add	r7, sp, #8
	gardenState = 1;
 800497a:	4b31      	ldr	r3, [pc, #196]	@ (8004a40 <gardenStateInterface+0xcc>)
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
	menu = 0;
 8004980:	4b30      	ldr	r3, [pc, #192]	@ (8004a44 <gardenStateInterface+0xd0>)
 8004982:	2200      	movs	r2, #0
 8004984:	701a      	strb	r2, [r3, #0]
	uint16_t color;
	if (isDay == 0)
 8004986:	4b30      	ldr	r3, [pc, #192]	@ (8004a48 <gardenStateInterface+0xd4>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10c      	bne.n	80049a8 <gardenStateInterface+0x34>
	{
		lcdDrawImage(0, 0, &imageNight);
 800498e:	4a2f      	ldr	r2, [pc, #188]	@ (8004a4c <gardenStateInterface+0xd8>)
 8004990:	2100      	movs	r1, #0
 8004992:	2000      	movs	r0, #0
 8004994:	f7fe fd8e 	bl	80034b4 <lcdDrawImage>
		color = COLOR_NAVY;
 8004998:	230f      	movs	r3, #15
 800499a:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_WHITE, COLOR_BLACK);
 800499c:	2100      	movs	r1, #0
 800499e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80049a2:	f7ff f839 	bl	8003a18 <lcdSetTextColor>
 80049a6:	e00b      	b.n	80049c0 <gardenStateInterface+0x4c>
	}
	else
	{
		lcdDrawImage(0, 0, &imageDay);
 80049a8:	4a29      	ldr	r2, [pc, #164]	@ (8004a50 <gardenStateInterface+0xdc>)
 80049aa:	2100      	movs	r1, #0
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fe fd81 	bl	80034b4 <lcdDrawImage>
		color = COLOR_CYAN;
 80049b2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80049b6:	81fb      	strh	r3, [r7, #14]
		lcdSetTextColor(COLOR_BLACK, COLOR_BLACK);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2000      	movs	r0, #0
 80049bc:	f7ff f82c 	bl	8003a18 <lcdSetTextColor>
	}
	drawBackIcon();
 80049c0:	f7ff fbd2 	bl	8004168 <drawBackIcon>
	for (int y = 160; y < 320; y++)
 80049c4:	23a0      	movs	r3, #160	@ 0xa0
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	e013      	b.n	80049f2 <gardenStateInterface+0x7e>
	{
		for (int x = 0; x < 240; x++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	607b      	str	r3, [r7, #4]
 80049ce:	e00a      	b.n	80049e6 <gardenStateInterface+0x72>
		{
			lcdDrawPixel(x, y, color);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	b291      	uxth	r1, r2
 80049d8:	89fa      	ldrh	r2, [r7, #14]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe f92c 	bl	8002c38 <lcdDrawPixel>
		for (int x = 0; x < 240; x++)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2bef      	cmp	r3, #239	@ 0xef
 80049ea:	ddf1      	ble.n	80049d0 <gardenStateInterface+0x5c>
	for (int y = 160; y < 320; y++)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80049f8:	dbe7      	blt.n	80049ca <gardenStateInterface+0x56>
		}
	}
	lcdSetCursor(80, 110);
 80049fa:	216e      	movs	r1, #110	@ 0x6e
 80049fc:	2050      	movs	r0, #80	@ 0x50
 80049fe:	f7ff f88b 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("Humidity: %d%%", gardenHumidity);
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <gardenStateInterface+0xe0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4619      	mov	r1, r3
 8004a08:	4813      	ldr	r0, [pc, #76]	@ (8004a58 <gardenStateInterface+0xe4>)
 8004a0a:	f7fe ff6f 	bl	80038ec <lcdPrintfNoBackColor>
	lcdSetTextFont(&Font20);
 8004a0e:	4813      	ldr	r0, [pc, #76]	@ (8004a5c <gardenStateInterface+0xe8>)
 8004a10:	f7fe fff2 	bl	80039f8 <lcdSetTextFont>
	lcdSetCursor(110, 90);
 8004a14:	215a      	movs	r1, #90	@ 0x5a
 8004a16:	206e      	movs	r0, #110	@ 0x6e
 8004a18:	f7ff f87e 	bl	8003b18 <lcdSetCursor>
	lcdPrintfNoBackColor("%d", gardenTemperature);
 8004a1c:	4b10      	ldr	r3, [pc, #64]	@ (8004a60 <gardenStateInterface+0xec>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4619      	mov	r1, r3
 8004a22:	4810      	ldr	r0, [pc, #64]	@ (8004a64 <gardenStateInterface+0xf0>)
 8004a24:	f7fe ff62 	bl	80038ec <lcdPrintfNoBackColor>
	drawAlignedText("Currently in: Phu Nhuan", 10, 240, 16, NOBACKCOLOR);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	22f0      	movs	r2, #240	@ 0xf0
 8004a30:	210a      	movs	r1, #10
 8004a32:	480d      	ldr	r0, [pc, #52]	@ (8004a68 <gardenStateInterface+0xf4>)
 8004a34:	f7fd fdc4 	bl	80025c0 <drawAlignedText>
}
 8004a38:	bf00      	nop
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	2000095a 	.word	0x2000095a
 8004a44:	20000058 	.word	0x20000058
 8004a48:	20000989 	.word	0x20000989
 8004a4c:	08030f14 	.word	0x08030f14
 8004a50:	0801e308 	.word	0x0801e308
 8004a54:	200009ac 	.word	0x200009ac
 8004a58:	0800b620 	.word	0x0800b620
 8004a5c:	2000001c 	.word	0x2000001c
 8004a60:	200009a8 	.word	0x200009a8
 8004a64:	0800b630 	.word	0x0800b630
 8004a68:	0800b634 	.word	0x0800b634

08004a6c <drawInterface>:

void drawInterface()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	if (wifi == 1)
 8004a70:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <drawInterface+0x30>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d102      	bne.n	8004a7e <drawInterface+0x12>
	{
		wifiMenu();
 8004a78:	f7ff fb9c 	bl	80041b4 <wifiMenu>
	}
	else if (gardenState == 1)
	{
		gardenStateInterface();
	}
}
 8004a7c:	e00c      	b.n	8004a98 <drawInterface+0x2c>
	else if (weatherForecast == 1)
 8004a7e:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <drawInterface+0x34>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <drawInterface+0x20>
		weatherForecastInterface();
 8004a86:	f7ff fe39 	bl	80046fc <weatherForecastInterface>
}
 8004a8a:	e005      	b.n	8004a98 <drawInterface+0x2c>
	else if (gardenState == 1)
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <drawInterface+0x38>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <drawInterface+0x2c>
		gardenStateInterface();
 8004a94:	f7ff ff6e 	bl	8004974 <gardenStateInterface>
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000958 	.word	0x20000958
 8004aa0:	20000959 	.word	0x20000959
 8004aa4:	2000095a 	.word	0x2000095a

08004aa8 <reformatDate>:

void reformatDate()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
	char temp[6];
	for (int i = 0; i < 7; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e02b      	b.n	8004b0c <reformatDate+0x64>
	{
	    if (date[i])
 8004ab4:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <reformatDate+0x74>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d022      	beq.n	8004b06 <reformatDate+0x5e>
	    {
	        strncpy(temp, &date[i][8], 2);
 8004ac0:	4a16      	ldr	r2, [pc, #88]	@ (8004b1c <reformatDate+0x74>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	f103 0108 	add.w	r1, r3, #8
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f004 fb94 	bl	80091fe <strncpy>
	        temp[2] = '-';
 8004ad6:	232d      	movs	r3, #45	@ 0x2d
 8004ad8:	71bb      	strb	r3, [r7, #6]
	        strncpy(&temp[3], &date[i][5], 2);
 8004ada:	4a10      	ldr	r2, [pc, #64]	@ (8004b1c <reformatDate+0x74>)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae2:	1d59      	adds	r1, r3, #5
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	3303      	adds	r3, #3
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f004 fb87 	bl	80091fe <strncpy>
	        temp[5] = '\0';
 8004af0:	2300      	movs	r3, #0
 8004af2:	727b      	strb	r3, [r7, #9]
	        strcpy(date[i], temp);
 8004af4:	4a09      	ldr	r2, [pc, #36]	@ (8004b1c <reformatDate+0x74>)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afc:	1d3a      	adds	r2, r7, #4
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f004 fc12 	bl	800932a <strcpy>
	for (int i = 0; i < 7; i++)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	ddd0      	ble.n	8004ab4 <reformatDate+0xc>
	    }
	}
}
 8004b12:	bf00      	nop
 8004b14:	bf00      	nop
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	2000098c 	.word	0x2000098c

08004b20 <sendAPIURL>:

void sendAPIURL(uint16_t chooseCity)
{
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
    switch(chooseCity)
 8004b2a:	88fb      	ldrh	r3, [r7, #6]
 8004b2c:	2b05      	cmp	r3, #5
 8004b2e:	d86f      	bhi.n	8004c10 <sendAPIURL+0xf0>
 8004b30:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <sendAPIURL+0x18>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b51 	.word	0x08004b51
 8004b3c:	08004b71 	.word	0x08004b71
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004bb1 	.word	0x08004bb1
 8004b48:	08004bd1 	.word	0x08004bd1
 8004b4c:	08004bf1 	.word	0x08004bf1
    {
    	case NHATRANG:
    		HAL_UART_Transmit(&huart1, (uint8_t*)nhaTrangURL, strlen(nhaTrangURL), HAL_MAX_DELAY);
 8004b50:	4b31      	ldr	r3, [pc, #196]	@ (8004c18 <sendAPIURL+0xf8>)
 8004b52:	681c      	ldr	r4, [r3, #0]
 8004b54:	4b30      	ldr	r3, [pc, #192]	@ (8004c18 <sendAPIURL+0xf8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fb fb43 	bl	80001e4 <strlen>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	4621      	mov	r1, r4
 8004b68:	482c      	ldr	r0, [pc, #176]	@ (8004c1c <sendAPIURL+0xfc>)
 8004b6a:	f002 fa0d 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004b6e:	e04f      	b.n	8004c10 <sendAPIURL+0xf0>
    	case SAIGON:
    		HAL_UART_Transmit(&huart1, (uint8_t*)saiGonURL, strlen(saiGonURL), HAL_MAX_DELAY);
 8004b70:	4b2b      	ldr	r3, [pc, #172]	@ (8004c20 <sendAPIURL+0x100>)
 8004b72:	681c      	ldr	r4, [r3, #0]
 8004b74:	4b2a      	ldr	r3, [pc, #168]	@ (8004c20 <sendAPIURL+0x100>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fb fb33 	bl	80001e4 <strlen>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	f04f 33ff 	mov.w	r3, #4294967295
 8004b86:	4621      	mov	r1, r4
 8004b88:	4824      	ldr	r0, [pc, #144]	@ (8004c1c <sendAPIURL+0xfc>)
 8004b8a:	f002 f9fd 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004b8e:	e03f      	b.n	8004c10 <sendAPIURL+0xf0>
    	case HANOI:
    		HAL_UART_Transmit(&huart1, (uint8_t*)haNoiURL, strlen(haNoiURL), HAL_MAX_DELAY);
 8004b90:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <sendAPIURL+0x104>)
 8004b92:	681c      	ldr	r4, [r3, #0]
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <sendAPIURL+0x104>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb fb23 	bl	80001e4 <strlen>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	481c      	ldr	r0, [pc, #112]	@ (8004c1c <sendAPIURL+0xfc>)
 8004baa:	f002 f9ed 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004bae:	e02f      	b.n	8004c10 <sendAPIURL+0xf0>
    	case TAMPERE:
    		HAL_UART_Transmit(&huart1, (uint8_t*)tampereURL, strlen(tampereURL), HAL_MAX_DELAY);
 8004bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c28 <sendAPIURL+0x108>)
 8004bb2:	681c      	ldr	r4, [r3, #0]
 8004bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c28 <sendAPIURL+0x108>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fb fb13 	bl	80001e4 <strlen>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	4814      	ldr	r0, [pc, #80]	@ (8004c1c <sendAPIURL+0xfc>)
 8004bca:	f002 f9dd 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004bce:	e01f      	b.n	8004c10 <sendAPIURL+0xf0>
    	case ARNHEM:
    		HAL_UART_Transmit(&huart1, (uint8_t*)arnhemURL, strlen(arnhemURL), HAL_MAX_DELAY);
 8004bd0:	4b16      	ldr	r3, [pc, #88]	@ (8004c2c <sendAPIURL+0x10c>)
 8004bd2:	681c      	ldr	r4, [r3, #0]
 8004bd4:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <sendAPIURL+0x10c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fb fb03 	bl	80001e4 <strlen>
 8004bde:	4603      	mov	r3, r0
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	f04f 33ff 	mov.w	r3, #4294967295
 8004be6:	4621      	mov	r1, r4
 8004be8:	480c      	ldr	r0, [pc, #48]	@ (8004c1c <sendAPIURL+0xfc>)
 8004bea:	f002 f9cd 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004bee:	e00f      	b.n	8004c10 <sendAPIURL+0xf0>
    	case SYDNEY:
    		HAL_UART_Transmit(&huart1, (uint8_t*)sydneyURL, strlen(sydneyURL), HAL_MAX_DELAY);
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c30 <sendAPIURL+0x110>)
 8004bf2:	681c      	ldr	r4, [r3, #0]
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <sendAPIURL+0x110>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fb faf3 	bl	80001e4 <strlen>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	f04f 33ff 	mov.w	r3, #4294967295
 8004c06:	4621      	mov	r1, r4
 8004c08:	4804      	ldr	r0, [pc, #16]	@ (8004c1c <sendAPIURL+0xfc>)
 8004c0a:	f002 f9bd 	bl	8006f88 <HAL_UART_Transmit>
    		break;
 8004c0e:	bf00      	nop
    }
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd90      	pop	{r4, r7, pc}
 8004c18:	2000003c 	.word	0x2000003c
 8004c1c:	200004b4 	.word	0x200004b4
 8004c20:	20000040 	.word	0x20000040
 8004c24:	20000044 	.word	0x20000044
 8004c28:	20000048 	.word	0x20000048
 8004c2c:	2000004c 	.word	0x2000004c
 8004c30:	20000050 	.word	0x20000050

08004c34 <sendGardenStateRequest>:

void sendGardenStateRequest()
{
 8004c34:	b598      	push	{r3, r4, r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)requestGardenInfo, strlen(requestGardenInfo), HAL_MAX_DELAY);
 8004c38:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <sendGardenStateRequest+0x28>)
 8004c3a:	681c      	ldr	r4, [r3, #0]
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <sendGardenStateRequest+0x28>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb facf 	bl	80001e4 <strlen>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4803      	ldr	r0, [pc, #12]	@ (8004c60 <sendGardenStateRequest+0x2c>)
 8004c52:	f002 f999 	bl	8006f88 <HAL_UART_Transmit>
}
 8004c56:	bf00      	nop
 8004c58:	bd98      	pop	{r3, r4, r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000054 	.word	0x20000054
 8004c60:	200004b4 	.word	0x200004b4

08004c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
	if (rxIndex < BUFFER_SIZE - 1)
 8004c6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x7c>)
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d828      	bhi.n	8004cca <HAL_UART_RxCpltCallback+0x66>
	{
		if (tempBuffer[0] == '!')
 8004c78:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x80>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b21      	cmp	r3, #33	@ 0x21
 8004c7e:	d103      	bne.n	8004c88 <HAL_UART_RxCpltCallback+0x24>
		{
			rxComplete = 1;
 8004c80:	4b19      	ldr	r3, [pc, #100]	@ (8004ce8 <HAL_UART_RxCpltCallback+0x84>)
 8004c82:	2201      	movs	r2, #1
 8004c84:	701a      	strb	r2, [r3, #0]
			return;
 8004c86:	e028      	b.n	8004cda <HAL_UART_RxCpltCallback+0x76>
		}
		else if (tempBuffer[0] == '?')
 8004c88:	4b16      	ldr	r3, [pc, #88]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x80>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004c8e:	d110      	bne.n	8004cb2 <HAL_UART_RxCpltCallback+0x4e>
		{
			lcdPrintf("Error fetching data\n");
 8004c90:	4816      	ldr	r0, [pc, #88]	@ (8004cec <HAL_UART_RxCpltCallback+0x88>)
 8004c92:	f7fe fd9f 	bl	80037d4 <lcdPrintf>
			lcdPrintf("Go back to menu!\n");
 8004c96:	4816      	ldr	r0, [pc, #88]	@ (8004cf0 <HAL_UART_RxCpltCallback+0x8c>)
 8004c98:	f7fe fd9c 	bl	80037d4 <lcdPrintf>
			rxIndex = 0;
 8004c9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x7c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	801a      	strh	r2, [r3, #0]
			resetBuffer();
 8004ca2:	f000 f955 	bl	8004f50 <resetBuffer>
			HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	490e      	ldr	r1, [pc, #56]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x80>)
 8004caa:	4812      	ldr	r0, [pc, #72]	@ (8004cf4 <HAL_UART_RxCpltCallback+0x90>)
 8004cac:	f002 f9f7 	bl	800709e <HAL_UART_Receive_IT>
			return;
 8004cb0:	e013      	b.n	8004cda <HAL_UART_RxCpltCallback+0x76>
		}
		rxBuffer[rxIndex++] = tempBuffer[0];
 8004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x7c>)
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	b291      	uxth	r1, r2
 8004cba:	4a09      	ldr	r2, [pc, #36]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x7c>)
 8004cbc:	8011      	strh	r1, [r2, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	4b08      	ldr	r3, [pc, #32]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x80>)
 8004cc2:	7819      	ldrb	r1, [r3, #0]
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <HAL_UART_RxCpltCallback+0x94>)
 8004cc6:	5499      	strb	r1, [r3, r2]
 8004cc8:	e002      	b.n	8004cd0 <HAL_UART_RxCpltCallback+0x6c>
	}
	else
	{
	    rxIndex = 0;
 8004cca:	4b05      	ldr	r3, [pc, #20]	@ (8004ce0 <HAL_UART_RxCpltCallback+0x7c>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	801a      	strh	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*)tempBuffer, 1);
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4904      	ldr	r1, [pc, #16]	@ (8004ce4 <HAL_UART_RxCpltCallback+0x80>)
 8004cd4:	4807      	ldr	r0, [pc, #28]	@ (8004cf4 <HAL_UART_RxCpltCallback+0x90>)
 8004cd6:	f002 f9e2 	bl	800709e <HAL_UART_Receive_IT>
}
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000950 	.word	0x20000950
 8004ce4:	2000054c 	.word	0x2000054c
 8004ce8:	20000952 	.word	0x20000952
 8004cec:	0800b64c 	.word	0x0800b64c
 8004cf0:	0800b664 	.word	0x0800b664
 8004cf4:	200004b4 	.word	0x200004b4
 8004cf8:	20000550 	.word	0x20000550

08004cfc <processWeatherData>:

void processWeatherData(const char *jsonData)
{
 8004cfc:	b590      	push	{r4, r7, lr}
 8004cfe:	b091      	sub	sp, #68	@ 0x44
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
    cJSON *root = cJSON_Parse(jsonData);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fc ff77 	bl	8001bf8 <cJSON_Parse>
 8004d0a:	6378      	str	r0, [r7, #52]	@ 0x34
    if (root == NULL)
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <processWeatherData+0x2a>
    {
        lcdPrintf("Error parsing JSON\n");
 8004d12:	4863      	ldr	r0, [pc, #396]	@ (8004ea0 <processWeatherData+0x1a4>)
 8004d14:	f7fe fd5e 	bl	80037d4 <lcdPrintf>
        lcdPrintf("Go back to menu!\n");
 8004d18:	4862      	ldr	r0, [pc, #392]	@ (8004ea4 <processWeatherData+0x1a8>)
 8004d1a:	f7fe fd5b 	bl	80037d4 <lcdPrintf>
        cJSON_Delete(root);
 8004d1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d20:	f7fc fa88 	bl	8001234 <cJSON_Delete>
        return;
 8004d24:	e0b8      	b.n	8004e98 <processWeatherData+0x19c>
    }

    if(gardenState == 1)
 8004d26:	4b60      	ldr	r3, [pc, #384]	@ (8004ea8 <processWeatherData+0x1ac>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d11e      	bne.n	8004d6c <processWeatherData+0x70>
    {
    	cJSON *gardenTemp = cJSON_GetObjectItem(root, "gardenTemperature");
 8004d2e:	495f      	ldr	r1, [pc, #380]	@ (8004eac <processWeatherData+0x1b0>)
 8004d30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d32:	f7fd faaa 	bl	800228a <cJSON_GetObjectItem>
 8004d36:	60f8      	str	r0, [r7, #12]
    	cJSON *gardenHumid = cJSON_GetObjectItem(root, "gardenHumidity");
 8004d38:	495d      	ldr	r1, [pc, #372]	@ (8004eb0 <processWeatherData+0x1b4>)
 8004d3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d3c:	f7fd faa5 	bl	800228a <cJSON_GetObjectItem>
 8004d40:	60b8      	str	r0, [r7, #8]
    	if (gardenTemp)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d003      	beq.n	8004d50 <processWeatherData+0x54>
    	{
    		gardenTemperature = gardenTemp->valueint;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	4a59      	ldr	r2, [pc, #356]	@ (8004eb4 <processWeatherData+0x1b8>)
 8004d4e:	6013      	str	r3, [r2, #0]
    	}
    	if (gardenHumid)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <processWeatherData+0x62>
    	{
    		gardenHumidity = gardenHumid->valueint;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4a57      	ldr	r2, [pc, #348]	@ (8004eb8 <processWeatherData+0x1bc>)
 8004d5c:	6013      	str	r3, [r2, #0]
    	}
    	processComplete = 1;
 8004d5e:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <processWeatherData+0x1c0>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
    	cJSON_Delete(root);
 8004d64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d66:	f7fc fa65 	bl	8001234 <cJSON_Delete>
    	return;
 8004d6a:	e095      	b.n	8004e98 <processWeatherData+0x19c>
    }

    cJSON *current = cJSON_GetObjectItem(root, "current");
 8004d6c:	4954      	ldr	r1, [pc, #336]	@ (8004ec0 <processWeatherData+0x1c4>)
 8004d6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d70:	f7fd fa8b 	bl	800228a <cJSON_GetObjectItem>
 8004d74:	6338      	str	r0, [r7, #48]	@ 0x30
    if (current)
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d024      	beq.n	8004dc6 <processWeatherData+0xca>
    {
        cJSON *temperature = cJSON_GetObjectItem(current, "temperature_2m");
 8004d7c:	4951      	ldr	r1, [pc, #324]	@ (8004ec4 <processWeatherData+0x1c8>)
 8004d7e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d80:	f7fd fa83 	bl	800228a <cJSON_GetObjectItem>
 8004d84:	62f8      	str	r0, [r7, #44]	@ 0x2c
        cJSON *humidity = cJSON_GetObjectItem(current, "relative_humidity_2m");
 8004d86:	4950      	ldr	r1, [pc, #320]	@ (8004ec8 <processWeatherData+0x1cc>)
 8004d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d8a:	f7fd fa7e 	bl	800228a <cJSON_GetObjectItem>
 8004d8e:	62b8      	str	r0, [r7, #40]	@ 0x28
        cJSON *dayOrNight = cJSON_GetObjectItem(current, "is_day");
 8004d90:	494e      	ldr	r1, [pc, #312]	@ (8004ecc <processWeatherData+0x1d0>)
 8004d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d94:	f7fd fa79 	bl	800228a <cJSON_GetObjectItem>
 8004d98:	6278      	str	r0, [r7, #36]	@ 0x24
        if (temperature)
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <processWeatherData+0xac>
        {
        	currentTemperature = temperature->valueint;
 8004da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed0 <processWeatherData+0x1d4>)
 8004da6:	6013      	str	r3, [r2, #0]
        }
        if (humidity)
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <processWeatherData+0xba>
        {
        	currentHumidity = humidity->valueint;
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	4a48      	ldr	r2, [pc, #288]	@ (8004ed4 <processWeatherData+0x1d8>)
 8004db4:	6013      	str	r3, [r2, #0]
        }
        if (dayOrNight)
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <processWeatherData+0xca>
        {
        	isDay = dayOrNight->valueint;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b45      	ldr	r3, [pc, #276]	@ (8004ed8 <processWeatherData+0x1dc>)
 8004dc4:	701a      	strb	r2, [r3, #0]
        }
    }

    cJSON *daily = cJSON_GetObjectItem(root, "daily");
 8004dc6:	4945      	ldr	r1, [pc, #276]	@ (8004edc <processWeatherData+0x1e0>)
 8004dc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004dca:	f7fd fa5e 	bl	800228a <cJSON_GetObjectItem>
 8004dce:	6238      	str	r0, [r7, #32]
    if (daily)
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d05a      	beq.n	8004e8c <processWeatherData+0x190>
    {
    	cJSON *weatherCodes = cJSON_GetObjectItem(daily, "weather_code");
 8004dd6:	4942      	ldr	r1, [pc, #264]	@ (8004ee0 <processWeatherData+0x1e4>)
 8004dd8:	6a38      	ldr	r0, [r7, #32]
 8004dda:	f7fd fa56 	bl	800228a <cJSON_GetObjectItem>
 8004dde:	61f8      	str	r0, [r7, #28]
    	cJSON *dateCodes = cJSON_GetObjectItem(daily, "time");
 8004de0:	4940      	ldr	r1, [pc, #256]	@ (8004ee4 <processWeatherData+0x1e8>)
 8004de2:	6a38      	ldr	r0, [r7, #32]
 8004de4:	f7fd fa51 	bl	800228a <cJSON_GetObjectItem>
 8004de8:	61b8      	str	r0, [r7, #24]
    	if (dateCodes && cJSON_IsArray(dateCodes))
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d027      	beq.n	8004e40 <processWeatherData+0x144>
 8004df0:	69b8      	ldr	r0, [r7, #24]
 8004df2:	f7fd fa59 	bl	80022a8 <cJSON_IsArray>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d021      	beq.n	8004e40 <processWeatherData+0x144>
    	{
    		for (int i = 0; i < 7; i++)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e00:	e01b      	b.n	8004e3a <processWeatherData+0x13e>
    	    {
    	        cJSON *dates = cJSON_GetArrayItem(dateCodes, i);
 8004e02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e04:	69b8      	ldr	r0, [r7, #24]
 8004e06:	f7fd f9e4 	bl	80021d2 <cJSON_GetArrayItem>
 8004e0a:	6178      	str	r0, [r7, #20]
    	        if (dates)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d010      	beq.n	8004e34 <processWeatherData+0x138>
    	        {
    	        	date[dateIndex++] = strdup(dates->valuestring);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	4b34      	ldr	r3, [pc, #208]	@ (8004ee8 <processWeatherData+0x1ec>)
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	1c59      	adds	r1, r3, #1
 8004e1c:	b288      	uxth	r0, r1
 8004e1e:	4932      	ldr	r1, [pc, #200]	@ (8004ee8 <processWeatherData+0x1ec>)
 8004e20:	8008      	strh	r0, [r1, #0]
 8004e22:	461c      	mov	r4, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f004 f9bd 	bl	80091a4 <strdup>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8004eec <processWeatherData+0x1f0>)
 8004e30:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    		for (int i = 0; i < 7; i++)
 8004e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e36:	3301      	adds	r3, #1
 8004e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	dde0      	ble.n	8004e02 <processWeatherData+0x106>
    	        }
    	    }
    	}
        if (weatherCodes && cJSON_IsArray(weatherCodes))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d022      	beq.n	8004e8c <processWeatherData+0x190>
 8004e46:	69f8      	ldr	r0, [r7, #28]
 8004e48:	f7fd fa2e 	bl	80022a8 <cJSON_IsArray>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01c      	beq.n	8004e8c <processWeatherData+0x190>
        {
            for (int i = 0; i < 7; i++)
 8004e52:	2300      	movs	r3, #0
 8004e54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e56:	e016      	b.n	8004e86 <processWeatherData+0x18a>
            {
                cJSON *code = cJSON_GetArrayItem(weatherCodes, i);
 8004e58:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e5a:	69f8      	ldr	r0, [r7, #28]
 8004e5c:	f7fd f9b9 	bl	80021d2 <cJSON_GetArrayItem>
 8004e60:	6138      	str	r0, [r7, #16]
                if (code)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <processWeatherData+0x184>
                {
                    weather[weatherIndex++] = code->valueint;
 8004e68:	4b21      	ldr	r3, [pc, #132]	@ (8004ef0 <processWeatherData+0x1f4>)
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	b291      	uxth	r1, r2
 8004e70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ef0 <processWeatherData+0x1f4>)
 8004e72:	8011      	strh	r1, [r2, #0]
 8004e74:	4619      	mov	r1, r3
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <processWeatherData+0x1f8>)
 8004e7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
            for (int i = 0; i < 7; i++)
 8004e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e82:	3301      	adds	r3, #1
 8004e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	dde5      	ble.n	8004e58 <processWeatherData+0x15c>
                }
            }
        }
    }
    processComplete = 1;
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <processWeatherData+0x1c0>)
 8004e8e:	2201      	movs	r2, #1
 8004e90:	701a      	strb	r2, [r3, #0]
    cJSON_Delete(root);
 8004e92:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e94:	f7fc f9ce 	bl	8001234 <cJSON_Delete>
}
 8004e98:	3744      	adds	r7, #68	@ 0x44
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	0800b678 	.word	0x0800b678
 8004ea4:	0800b664 	.word	0x0800b664
 8004ea8:	2000095a 	.word	0x2000095a
 8004eac:	0800b68c 	.word	0x0800b68c
 8004eb0:	0800b6a0 	.word	0x0800b6a0
 8004eb4:	200009a8 	.word	0x200009a8
 8004eb8:	200009ac 	.word	0x200009ac
 8004ebc:	20000988 	.word	0x20000988
 8004ec0:	0800b6b0 	.word	0x0800b6b0
 8004ec4:	0800b6b8 	.word	0x0800b6b8
 8004ec8:	0800b6c8 	.word	0x0800b6c8
 8004ecc:	0800b6e0 	.word	0x0800b6e0
 8004ed0:	20000978 	.word	0x20000978
 8004ed4:	2000097c 	.word	0x2000097c
 8004ed8:	20000989 	.word	0x20000989
 8004edc:	0800b6e8 	.word	0x0800b6e8
 8004ee0:	0800b6f0 	.word	0x0800b6f0
 8004ee4:	0800b700 	.word	0x0800b700
 8004ee8:	20000986 	.word	0x20000986
 8004eec:	2000098c 	.word	0x2000098c
 8004ef0:	20000984 	.word	0x20000984
 8004ef4:	2000095c 	.word	0x2000095c

08004ef8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == T_IRQ_Pin)
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d11b      	bne.n	8004f40 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if(XPT2046_TouchPressed())
 8004f08:	f7fc f84c 	bl	8000fa4 <XPT2046_TouchPressed>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d016      	beq.n	8004f40 <HAL_GPIO_EXTI_Callback+0x48>
		{
			if(XPT2046_TouchGetCoordinates(&xCoordinates, &yCoordinates))
 8004f12:	490d      	ldr	r1, [pc, #52]	@ (8004f48 <HAL_GPIO_EXTI_Callback+0x50>)
 8004f14:	480d      	ldr	r0, [pc, #52]	@ (8004f4c <HAL_GPIO_EXTI_Callback+0x54>)
 8004f16:	f7fc f855 	bl	8000fc4 <XPT2046_TouchGetCoordinates>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00f      	beq.n	8004f40 <HAL_GPIO_EXTI_Callback+0x48>
			{
				xCoordinates = 240 - xCoordinates;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <HAL_GPIO_EXTI_Callback+0x54>)
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <HAL_GPIO_EXTI_Callback+0x54>)
 8004f2c:	801a      	strh	r2, [r3, #0]
				yCoordinates = 320 - yCoordinates;
 8004f2e:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <HAL_GPIO_EXTI_Callback+0x50>)
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <HAL_GPIO_EXTI_Callback+0x50>)
 8004f3a:	801a      	strh	r2, [r3, #0]
				checkCoordinates();
 8004f3c:	f7ff faa6 	bl	800448c <checkCoordinates>
			}
		}
	}
}
 8004f40:	bf00      	nop
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000956 	.word	0x20000956
 8004f4c:	20000954 	.word	0x20000954

08004f50 <resetBuffer>:

void resetBuffer()
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	e007      	b.n	8004f6c <resetBuffer+0x1c>
	{
		rxBuffer[i] = 0;
 8004f5c:	4a09      	ldr	r2, [pc, #36]	@ (8004f84 <resetBuffer+0x34>)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(rxBuffer); i++)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	607b      	str	r3, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f72:	d3f3      	bcc.n	8004f5c <resetBuffer+0xc>
	}
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000550 	.word	0x20000550

08004f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f8c:	b672      	cpsid	i
}
 8004f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f90:	bf00      	nop
 8004f92:	e7fd      	b.n	8004f90 <Error_Handler+0x8>

08004f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	4b10      	ldr	r3, [pc, #64]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004faa:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	4a08      	ldr	r2, [pc, #32]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_MspInit+0x4c>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	@ 0x28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	605a      	str	r2, [r3, #4]
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	60da      	str	r2, [r3, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_SPI_MspInit+0x84>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d12c      	bne.n	8005060 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	4b18      	ldr	r3, [pc, #96]	@ (800506c <HAL_SPI_MspInit+0x88>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500e:	4a17      	ldr	r2, [pc, #92]	@ (800506c <HAL_SPI_MspInit+0x88>)
 8005010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005014:	6413      	str	r3, [r2, #64]	@ 0x40
 8005016:	4b15      	ldr	r3, [pc, #84]	@ (800506c <HAL_SPI_MspInit+0x88>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b11      	ldr	r3, [pc, #68]	@ (800506c <HAL_SPI_MspInit+0x88>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502a:	4a10      	ldr	r2, [pc, #64]	@ (800506c <HAL_SPI_MspInit+0x88>)
 800502c:	f043 0302 	orr.w	r3, r3, #2
 8005030:	6313      	str	r3, [r2, #48]	@ 0x30
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_SPI_MspInit+0x88>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800503e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005044:	2302      	movs	r3, #2
 8005046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005048:	2300      	movs	r3, #0
 800504a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800504c:	2303      	movs	r3, #3
 800504e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005050:	2305      	movs	r3, #5
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005054:	f107 0314 	add.w	r3, r7, #20
 8005058:	4619      	mov	r1, r3
 800505a:	4805      	ldr	r0, [pc, #20]	@ (8005070 <HAL_SPI_MspInit+0x8c>)
 800505c:	f000 fc2c 	bl	80058b8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005060:	bf00      	nop
 8005062:	3728      	adds	r7, #40	@ 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40003800 	.word	0x40003800
 800506c:	40023800 	.word	0x40023800
 8005070:	40020400 	.word	0x40020400

08005074 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	@ 0x28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
 800508a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1d      	ldr	r2, [pc, #116]	@ (8005108 <HAL_UART_MspInit+0x94>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d134      	bne.n	8005100 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	4b1c      	ldr	r3, [pc, #112]	@ (800510c <HAL_UART_MspInit+0x98>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <HAL_UART_MspInit+0x98>)
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80050a6:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_UART_MspInit+0x98>)
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <HAL_UART_MspInit+0x98>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	4a14      	ldr	r2, [pc, #80]	@ (800510c <HAL_UART_MspInit+0x98>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c2:	4b12      	ldr	r3, [pc, #72]	@ (800510c <HAL_UART_MspInit+0x98>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050ce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80050d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d4:	2302      	movs	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050dc:	2303      	movs	r3, #3
 80050de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050e0:	2307      	movs	r3, #7
 80050e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	4619      	mov	r1, r3
 80050ea:	4809      	ldr	r0, [pc, #36]	@ (8005110 <HAL_UART_MspInit+0x9c>)
 80050ec:	f000 fbe4 	bl	80058b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050f0:	2200      	movs	r2, #0
 80050f2:	2100      	movs	r1, #0
 80050f4:	2025      	movs	r0, #37	@ 0x25
 80050f6:	f000 fb16 	bl	8005726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050fa:	2025      	movs	r0, #37	@ 0x25
 80050fc:	f000 fb2f 	bl	800575e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8005100:	bf00      	nop
 8005102:	3728      	adds	r7, #40	@ 0x28
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40011000 	.word	0x40011000
 800510c:	40023800 	.word	0x40023800
 8005110:	40020000 	.word	0x40020000

08005114 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005128:	4b1c      	ldr	r3, [pc, #112]	@ (800519c <HAL_FSMC_MspInit+0x88>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d131      	bne.n	8005194 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005130:	4b1a      	ldr	r3, [pc, #104]	@ (800519c <HAL_FSMC_MspInit+0x88>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	603b      	str	r3, [r7, #0]
 800513a:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_FSMC_MspInit+0x8c>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <HAL_FSMC_MspInit+0x8c>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6393      	str	r3, [r2, #56]	@ 0x38
 8005146:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <HAL_FSMC_MspInit+0x8c>)
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005152:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8005156:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005158:	2302      	movs	r3, #2
 800515a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005160:	2303      	movs	r3, #3
 8005162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005164:	230c      	movs	r3, #12
 8005166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	4619      	mov	r1, r3
 800516c:	480d      	ldr	r0, [pc, #52]	@ (80051a4 <HAL_FSMC_MspInit+0x90>)
 800516e:	f000 fba3 	bl	80058b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005172:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8005176:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	2302      	movs	r3, #2
 800517a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	2303      	movs	r3, #3
 8005182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005184:	230c      	movs	r3, #12
 8005186:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4806      	ldr	r0, [pc, #24]	@ (80051a8 <HAL_FSMC_MspInit+0x94>)
 800518e:	f000 fb93 	bl	80058b8 <HAL_GPIO_Init>
 8005192:	e000      	b.n	8005196 <HAL_FSMC_MspInit+0x82>
    return;
 8005194:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200009b0 	.word	0x200009b0
 80051a0:	40023800 	.word	0x40023800
 80051a4:	40021000 	.word	0x40021000
 80051a8:	40020c00 	.word	0x40020c00

080051ac <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80051b4:	f7ff ffae 	bl	8005114 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80051b8:	bf00      	nop
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051c0:	b480      	push	{r7}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <NMI_Handler+0x4>

080051c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051cc:	bf00      	nop
 80051ce:	e7fd      	b.n	80051cc <HardFault_Handler+0x4>

080051d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <MemManage_Handler+0x4>

080051d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <BusFault_Handler+0x4>

080051e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <UsageFault_Handler+0x4>

080051e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051fa:	bf00      	nop
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005216:	f000 f967 	bl	80054e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}

0800521e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 8005222:	2020      	movs	r0, #32
 8005224:	f000 fd16 	bl	8005c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005228:	bf00      	nop
 800522a:	bd80      	pop	{r7, pc}

0800522c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005230:	4802      	ldr	r0, [pc, #8]	@ (800523c <USART1_IRQHandler+0x10>)
 8005232:	f001 ff59 	bl	80070e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005236:	bf00      	nop
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	200004b4 	.word	0x200004b4

08005240 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return 1;
 8005244:	2301      	movs	r3, #1
}
 8005246:	4618      	mov	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <_kill>:

int _kill(int pid, int sig)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800525a:	f004 f839 	bl	80092d0 <__errno>
 800525e:	4603      	mov	r3, r0
 8005260:	2216      	movs	r2, #22
 8005262:	601a      	str	r2, [r3, #0]
  return -1;
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <_exit>:

void _exit (int status)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005278:	f04f 31ff 	mov.w	r1, #4294967295
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff ffe7 	bl	8005250 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005282:	bf00      	nop
 8005284:	e7fd      	b.n	8005282 <_exit+0x12>

08005286 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005292:	2300      	movs	r3, #0
 8005294:	617b      	str	r3, [r7, #20]
 8005296:	e00a      	b.n	80052ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005298:	f3af 8000 	nop.w
 800529c:	4601      	mov	r1, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	60ba      	str	r2, [r7, #8]
 80052a4:	b2ca      	uxtb	r2, r1
 80052a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3301      	adds	r3, #1
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	dbf0      	blt.n	8005298 <_read+0x12>
  }

  return len;
 80052b6:	687b      	ldr	r3, [r7, #4]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e009      	b.n	80052e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	60ba      	str	r2, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	3301      	adds	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	dbf1      	blt.n	80052d2 <_write+0x12>
  }
  return len;
 80052ee:	687b      	ldr	r3, [r7, #4]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <_close>:

int _close(int file)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005300:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005320:	605a      	str	r2, [r3, #4]
  return 0;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <_isatty>:

int _isatty(int file)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005338:	2301      	movs	r3, #1
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005368:	4a14      	ldr	r2, [pc, #80]	@ (80053bc <_sbrk+0x5c>)
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <_sbrk+0x60>)
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005374:	4b13      	ldr	r3, [pc, #76]	@ (80053c4 <_sbrk+0x64>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800537c:	4b11      	ldr	r3, [pc, #68]	@ (80053c4 <_sbrk+0x64>)
 800537e:	4a12      	ldr	r2, [pc, #72]	@ (80053c8 <_sbrk+0x68>)
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005382:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <_sbrk+0x64>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4413      	add	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d207      	bcs.n	80053a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005390:	f003 ff9e 	bl	80092d0 <__errno>
 8005394:	4603      	mov	r3, r0
 8005396:	220c      	movs	r2, #12
 8005398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800539a:	f04f 33ff 	mov.w	r3, #4294967295
 800539e:	e009      	b.n	80053b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053a0:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <_sbrk+0x64>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053a6:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <_sbrk+0x64>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	4a05      	ldr	r2, [pc, #20]	@ (80053c4 <_sbrk+0x64>)
 80053b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053b2:	68fb      	ldr	r3, [r7, #12]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20020000 	.word	0x20020000
 80053c0:	00000400 	.word	0x00000400
 80053c4:	200009b4 	.word	0x200009b4
 80053c8:	20000b08 	.word	0x20000b08

080053cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053d0:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <SystemInit+0x20>)
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	4a05      	ldr	r2, [pc, #20]	@ (80053ec <SystemInit+0x20>)
 80053d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	e000ed00 	.word	0xe000ed00

080053f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005428 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80053f4:	f7ff ffea 	bl	80053cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053f8:	480c      	ldr	r0, [pc, #48]	@ (800542c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80053fa:	490d      	ldr	r1, [pc, #52]	@ (8005430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80053fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80053fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005400:	e002      	b.n	8005408 <LoopCopyDataInit>

08005402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005406:	3304      	adds	r3, #4

08005408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800540a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800540c:	d3f9      	bcc.n	8005402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800540e:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005410:	4c0a      	ldr	r4, [pc, #40]	@ (800543c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005414:	e001      	b.n	800541a <LoopFillZerobss>

08005416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005418:	3204      	adds	r2, #4

0800541a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800541a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800541c:	d3fb      	bcc.n	8005416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800541e:	f003 ff5d 	bl	80092dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005422:	f7fe fc77 	bl	8003d14 <main>
  bx  lr    
 8005426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800542c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005430:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8005434:	08033238 	.word	0x08033238
  ldr r2, =_sbss
 8005438:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800543c:	20000b08 	.word	0x20000b08

08005440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005440:	e7fe      	b.n	8005440 <ADC_IRQHandler>
	...

08005444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_Init+0x40>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a0d      	ldr	r2, [pc, #52]	@ (8005484 <HAL_Init+0x40>)
 800544e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005454:	4b0b      	ldr	r3, [pc, #44]	@ (8005484 <HAL_Init+0x40>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a0a      	ldr	r2, [pc, #40]	@ (8005484 <HAL_Init+0x40>)
 800545a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800545e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005460:	4b08      	ldr	r3, [pc, #32]	@ (8005484 <HAL_Init+0x40>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a07      	ldr	r2, [pc, #28]	@ (8005484 <HAL_Init+0x40>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800546c:	2003      	movs	r0, #3
 800546e:	f000 f94f 	bl	8005710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005472:	200f      	movs	r0, #15
 8005474:	f000 f808 	bl	8005488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005478:	f7ff fd8c 	bl	8004f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40023c00 	.word	0x40023c00

08005488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <HAL_InitTick+0x54>)
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <HAL_InitTick+0x58>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	4619      	mov	r1, r3
 800549a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800549e:	fbb3 f3f1 	udiv	r3, r3, r1
 80054a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f967 	bl	800577a <HAL_SYSTICK_Config>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e00e      	b.n	80054d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d80a      	bhi.n	80054d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054bc:	2200      	movs	r2, #0
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
 80054c4:	f000 f92f 	bl	8005726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054c8:	4a06      	ldr	r2, [pc, #24]	@ (80054e4 <HAL_InitTick+0x5c>)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2000005c 	.word	0x2000005c
 80054e0:	20000064 	.word	0x20000064
 80054e4:	20000060 	.word	0x20000060

080054e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <HAL_IncTick+0x20>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_IncTick+0x24>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4413      	add	r3, r2
 80054f8:	4a04      	ldr	r2, [pc, #16]	@ (800550c <HAL_IncTick+0x24>)
 80054fa:	6013      	str	r3, [r2, #0]
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000064 	.word	0x20000064
 800550c:	200009b8 	.word	0x200009b8

08005510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  return uwTick;
 8005514:	4b03      	ldr	r3, [pc, #12]	@ (8005524 <HAL_GetTick+0x14>)
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	200009b8 	.word	0x200009b8

08005528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005530:	f7ff ffee 	bl	8005510 <HAL_GetTick>
 8005534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005540:	d005      	beq.n	800554e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005542:	4b0a      	ldr	r3, [pc, #40]	@ (800556c <HAL_Delay+0x44>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800554e:	bf00      	nop
 8005550:	f7ff ffde 	bl	8005510 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	429a      	cmp	r2, r3
 800555e:	d8f7      	bhi.n	8005550 <HAL_Delay+0x28>
  {
  }
}
 8005560:	bf00      	nop
 8005562:	bf00      	nop
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000064 	.word	0x20000064

08005570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005580:	4b0c      	ldr	r3, [pc, #48]	@ (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800558c:	4013      	ands	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800559c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80055a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a2:	4a04      	ldr	r2, [pc, #16]	@ (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	60d3      	str	r3, [r2, #12]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055bc:	4b04      	ldr	r3, [pc, #16]	@ (80055d0 <__NVIC_GetPriorityGrouping+0x18>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f003 0307 	and.w	r3, r3, #7
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db0b      	blt.n	80055fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	4907      	ldr	r1, [pc, #28]	@ (800560c <__NVIC_EnableIRQ+0x38>)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2001      	movs	r0, #1
 80055f6:	fa00 f202 	lsl.w	r2, r0, r2
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e100 	.word	0xe000e100

08005610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	db0a      	blt.n	800563a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	490c      	ldr	r1, [pc, #48]	@ (800565c <__NVIC_SetPriority+0x4c>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	440b      	add	r3, r1
 8005634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005638:	e00a      	b.n	8005650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4908      	ldr	r1, [pc, #32]	@ (8005660 <__NVIC_SetPriority+0x50>)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3b04      	subs	r3, #4
 8005648:	0112      	lsls	r2, r2, #4
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	440b      	add	r3, r1
 800564e:	761a      	strb	r2, [r3, #24]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000e100 	.word	0xe000e100
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	@ 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	bf28      	it	cs
 8005682:	2304      	movcs	r3, #4
 8005684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3304      	adds	r3, #4
 800568a:	2b06      	cmp	r3, #6
 800568c:	d902      	bls.n	8005694 <NVIC_EncodePriority+0x30>
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3b03      	subs	r3, #3
 8005692:	e000      	b.n	8005696 <NVIC_EncodePriority+0x32>
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	401a      	ands	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056ac:	f04f 31ff 	mov.w	r1, #4294967295
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43d9      	mvns	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	4313      	orrs	r3, r2
         );
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	@ 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056dc:	d301      	bcc.n	80056e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056de:	2301      	movs	r3, #1
 80056e0:	e00f      	b.n	8005702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e2:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <SysTick_Config+0x40>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ea:	210f      	movs	r1, #15
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	f7ff ff8e 	bl	8005610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <SysTick_Config+0x40>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fa:	4b04      	ldr	r3, [pc, #16]	@ (800570c <SysTick_Config+0x40>)
 80056fc:	2207      	movs	r2, #7
 80056fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	e000e010 	.word	0xe000e010

08005710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff29 	bl	8005570 <__NVIC_SetPriorityGrouping>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff3e 	bl	80055b8 <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff8e 	bl	8005664 <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff5d 	bl	8005610 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff31 	bl	80055d4 <__NVIC_EnableIRQ>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffa2 	bl	80056cc <SysTick_Config>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b084      	sub	sp, #16
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800579e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057a0:	f7ff feb6 	bl	8005510 <HAL_GetTick>
 80057a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d008      	beq.n	80057c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2280      	movs	r2, #128	@ 0x80
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e052      	b.n	800586a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f022 0216 	bic.w	r2, r2, #22
 80057d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d103      	bne.n	80057f4 <HAL_DMA_Abort+0x62>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0208 	bic.w	r2, r2, #8
 8005802:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005814:	e013      	b.n	800583e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005816:	f7ff fe7b 	bl	8005510 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b05      	cmp	r3, #5
 8005822:	d90c      	bls.n	800583e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2220      	movs	r2, #32
 8005828:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2203      	movs	r2, #3
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e015      	b.n	800586a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e4      	bne.n	8005816 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005850:	223f      	movs	r2, #63	@ 0x3f
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d004      	beq.n	8005890 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00c      	b.n	80058aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2205      	movs	r2, #5
 8005894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b089      	sub	sp, #36	@ 0x24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e16b      	b.n	8005bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058d4:	2201      	movs	r2, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4013      	ands	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	f040 815a 	bne.w	8005ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d005      	beq.n	800590a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005906:	2b02      	cmp	r3, #2
 8005908:	d130      	bne.n	800596c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	2203      	movs	r2, #3
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43db      	mvns	r3, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4013      	ands	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005940:	2201      	movs	r2, #1
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	f003 0201 	and.w	r2, r3, #1
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 0303 	and.w	r3, r3, #3
 8005974:	2b03      	cmp	r3, #3
 8005976:	d017      	beq.n	80059a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	2203      	movs	r2, #3
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43db      	mvns	r3, r3
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	4013      	ands	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d123      	bne.n	80059fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	08da      	lsrs	r2, r3, #3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3208      	adds	r2, #8
 80059bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	220f      	movs	r2, #15
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	08da      	lsrs	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3208      	adds	r2, #8
 80059f6:	69b9      	ldr	r1, [r7, #24]
 80059f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	2203      	movs	r2, #3
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 0203 	and.w	r2, r3, #3
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 80b4 	beq.w	8005ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	4b60      	ldr	r3, [pc, #384]	@ (8005bc4 <HAL_GPIO_Init+0x30c>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	4a5f      	ldr	r2, [pc, #380]	@ (8005bc4 <HAL_GPIO_Init+0x30c>)
 8005a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc4 <HAL_GPIO_Init+0x30c>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8005bc8 <HAL_GPIO_Init+0x310>)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	089b      	lsrs	r3, r3, #2
 8005a60:	3302      	adds	r3, #2
 8005a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	220f      	movs	r2, #15
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a52      	ldr	r2, [pc, #328]	@ (8005bcc <HAL_GPIO_Init+0x314>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02b      	beq.n	8005ade <HAL_GPIO_Init+0x226>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a51      	ldr	r2, [pc, #324]	@ (8005bd0 <HAL_GPIO_Init+0x318>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d025      	beq.n	8005ada <HAL_GPIO_Init+0x222>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a50      	ldr	r2, [pc, #320]	@ (8005bd4 <HAL_GPIO_Init+0x31c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <HAL_GPIO_Init+0x21e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a4f      	ldr	r2, [pc, #316]	@ (8005bd8 <HAL_GPIO_Init+0x320>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d019      	beq.n	8005ad2 <HAL_GPIO_Init+0x21a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8005bdc <HAL_GPIO_Init+0x324>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_GPIO_Init+0x216>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8005be0 <HAL_GPIO_Init+0x328>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00d      	beq.n	8005aca <HAL_GPIO_Init+0x212>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8005be4 <HAL_GPIO_Init+0x32c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <HAL_GPIO_Init+0x20e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8005be8 <HAL_GPIO_Init+0x330>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <HAL_GPIO_Init+0x20a>
 8005abe:	2307      	movs	r3, #7
 8005ac0:	e00e      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	e00c      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ac6:	2306      	movs	r3, #6
 8005ac8:	e00a      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005aca:	2305      	movs	r3, #5
 8005acc:	e008      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ace:	2304      	movs	r3, #4
 8005ad0:	e006      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e004      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e002      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <HAL_GPIO_Init+0x228>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	f002 0203 	and.w	r2, r2, #3
 8005ae6:	0092      	lsls	r2, r2, #2
 8005ae8:	4093      	lsls	r3, r2
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005af0:	4935      	ldr	r1, [pc, #212]	@ (8005bc8 <HAL_GPIO_Init+0x310>)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	3302      	adds	r3, #2
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005afe:	4b3b      	ldr	r3, [pc, #236]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b22:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b28:	4b30      	ldr	r3, [pc, #192]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	43db      	mvns	r3, r3
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	4013      	ands	r3, r2
 8005b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b4c:	4a27      	ldr	r2, [pc, #156]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b52:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b76:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	43db      	mvns	r3, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ba0:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <HAL_GPIO_Init+0x334>)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	f67f ae90 	bls.w	80058d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	3724      	adds	r7, #36	@ 0x24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	40013800 	.word	0x40013800
 8005bcc:	40020000 	.word	0x40020000
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020800 	.word	0x40020800
 8005bd8:	40020c00 	.word	0x40020c00
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40021400 	.word	0x40021400
 8005be4:	40021800 	.word	0x40021800
 8005be8:	40021c00 	.word	0x40021c00
 8005bec:	40013c00 	.word	0x40013c00

08005bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691a      	ldr	r2, [r3, #16]
 8005c00:	887b      	ldrh	r3, [r7, #2]
 8005c02:	4013      	ands	r3, r2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
 8005c0c:	e001      	b.n	8005c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	807b      	strh	r3, [r7, #2]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c30:	787b      	ldrb	r3, [r7, #1]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c36:	887a      	ldrh	r2, [r7, #2]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c3c:	e003      	b.n	8005c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	041a      	lsls	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	619a      	str	r2, [r3, #24]
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005c5e:	4b08      	ldr	r3, [pc, #32]	@ (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c6a:	4a05      	ldr	r2, [pc, #20]	@ (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff f940 	bl	8004ef8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40013c00 	.word	0x40013c00

08005c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e267      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d075      	beq.n	8005d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ca2:	4b88      	ldr	r3, [pc, #544]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d00c      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cae:	4b85      	ldr	r3, [pc, #532]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	d112      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cba:	4b82      	ldr	r3, [pc, #520]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d05b      	beq.n	8005d8c <HAL_RCC_OscConfig+0x108>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d157      	bne.n	8005d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e242      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce8:	d106      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x74>
 8005cea:	4b76      	ldr	r3, [pc, #472]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a75      	ldr	r2, [pc, #468]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	e01d      	b.n	8005d34 <HAL_RCC_OscConfig+0xb0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x98>
 8005d02:	4b70      	ldr	r3, [pc, #448]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a6f      	ldr	r2, [pc, #444]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a6c      	ldr	r2, [pc, #432]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	e00b      	b.n	8005d34 <HAL_RCC_OscConfig+0xb0>
 8005d1c:	4b69      	ldr	r3, [pc, #420]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a68      	ldr	r2, [pc, #416]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4b66      	ldr	r3, [pc, #408]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a65      	ldr	r2, [pc, #404]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d013      	beq.n	8005d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7ff fbe8 	bl	8005510 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d44:	f7ff fbe4 	bl	8005510 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b64      	cmp	r3, #100	@ 0x64
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e207      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	4b5b      	ldr	r3, [pc, #364]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0xc0>
 8005d62:	e014      	b.n	8005d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d64:	f7ff fbd4 	bl	8005510 <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d6a:	e008      	b.n	8005d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d6c:	f7ff fbd0 	bl	8005510 <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	2b64      	cmp	r3, #100	@ 0x64
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e1f3      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7e:	4b51      	ldr	r3, [pc, #324]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1f0      	bne.n	8005d6c <HAL_RCC_OscConfig+0xe8>
 8005d8a:	e000      	b.n	8005d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d063      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 030c 	and.w	r3, r3, #12
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00b      	beq.n	8005dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005da6:	4b47      	ldr	r3, [pc, #284]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d11c      	bne.n	8005dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005db2:	4b44      	ldr	r3, [pc, #272]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d116      	bne.n	8005dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dbe:	4b41      	ldr	r3, [pc, #260]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x152>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d001      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e1c7      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	4937      	ldr	r1, [pc, #220]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dea:	e03a      	b.n	8005e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005df4:	4b34      	ldr	r3, [pc, #208]	@ (8005ec8 <HAL_RCC_OscConfig+0x244>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7ff fb89 	bl	8005510 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e02:	f7ff fb85 	bl	8005510 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1a8      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	4b28      	ldr	r3, [pc, #160]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4925      	ldr	r1, [pc, #148]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
 8005e34:	e015      	b.n	8005e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e36:	4b24      	ldr	r3, [pc, #144]	@ (8005ec8 <HAL_RCC_OscConfig+0x244>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e3c:	f7ff fb68 	bl	8005510 <HAL_GetTick>
 8005e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e42:	e008      	b.n	8005e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e44:	f7ff fb64 	bl	8005510 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e187      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f0      	bne.n	8005e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0308 	and.w	r3, r3, #8
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d036      	beq.n	8005edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d016      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e76:	4b15      	ldr	r3, [pc, #84]	@ (8005ecc <HAL_RCC_OscConfig+0x248>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7ff fb48 	bl	8005510 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e84:	f7ff fb44 	bl	8005510 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e167      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <HAL_RCC_OscConfig+0x240>)
 8005e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d0f0      	beq.n	8005e84 <HAL_RCC_OscConfig+0x200>
 8005ea2:	e01b      	b.n	8005edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <HAL_RCC_OscConfig+0x248>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eaa:	f7ff fb31 	bl	8005510 <HAL_GetTick>
 8005eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eb0:	e00e      	b.n	8005ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eb2:	f7ff fb2d 	bl	8005510 <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d907      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e150      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	42470000 	.word	0x42470000
 8005ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ed0:	4b88      	ldr	r3, [pc, #544]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ea      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0304 	and.w	r3, r3, #4
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8097 	beq.w	8006018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eee:	4b81      	ldr	r3, [pc, #516]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10f      	bne.n	8005f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	4b7d      	ldr	r3, [pc, #500]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	4a7c      	ldr	r2, [pc, #496]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f16:	2301      	movs	r3, #1
 8005f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f1a:	4b77      	ldr	r3, [pc, #476]	@ (80060f8 <HAL_RCC_OscConfig+0x474>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d118      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f26:	4b74      	ldr	r3, [pc, #464]	@ (80060f8 <HAL_RCC_OscConfig+0x474>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a73      	ldr	r2, [pc, #460]	@ (80060f8 <HAL_RCC_OscConfig+0x474>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f32:	f7ff faed 	bl	8005510 <HAL_GetTick>
 8005f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7ff fae9 	bl	8005510 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e10c      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80060f8 <HAL_RCC_OscConfig+0x474>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0f0      	beq.n	8005f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x2ea>
 8005f60:	4b64      	ldr	r3, [pc, #400]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f64:	4a63      	ldr	r2, [pc, #396]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f6c:	e01c      	b.n	8005fa8 <HAL_RCC_OscConfig+0x324>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x30c>
 8005f76:	4b5f      	ldr	r3, [pc, #380]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	f043 0304 	orr.w	r3, r3, #4
 8005f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f82:	4b5c      	ldr	r3, [pc, #368]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f86:	4a5b      	ldr	r2, [pc, #364]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f8e:	e00b      	b.n	8005fa8 <HAL_RCC_OscConfig+0x324>
 8005f90:	4b58      	ldr	r3, [pc, #352]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f94:	4a57      	ldr	r2, [pc, #348]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f9c:	4b55      	ldr	r3, [pc, #340]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa0:	4a54      	ldr	r2, [pc, #336]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f023 0304 	bic.w	r3, r3, #4
 8005fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d015      	beq.n	8005fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7ff faae 	bl	8005510 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb8:	f7ff faaa 	bl	8005510 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e0cb      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fce:	4b49      	ldr	r3, [pc, #292]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ee      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x334>
 8005fda:	e014      	b.n	8006006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fdc:	f7ff fa98 	bl	8005510 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7ff fa94 	bl	8005510 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e0b5      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ee      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006006:	7dfb      	ldrb	r3, [r7, #23]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d105      	bne.n	8006018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600c:	4b39      	ldr	r3, [pc, #228]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	4a38      	ldr	r2, [pc, #224]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8006012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80a1 	beq.w	8006164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006022:	4b34      	ldr	r3, [pc, #208]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
 800602a:	2b08      	cmp	r3, #8
 800602c:	d05c      	beq.n	80060e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d141      	bne.n	80060ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006036:	4b31      	ldr	r3, [pc, #196]	@ (80060fc <HAL_RCC_OscConfig+0x478>)
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603c:	f7ff fa68 	bl	8005510 <HAL_GetTick>
 8006040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006044:	f7ff fa64 	bl	8005510 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e087      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	4b27      	ldr	r3, [pc, #156]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f0      	bne.n	8006044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69da      	ldr	r2, [r3, #28]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	085b      	lsrs	r3, r3, #1
 800607a:	3b01      	subs	r3, #1
 800607c:	041b      	lsls	r3, r3, #16
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	491b      	ldr	r1, [pc, #108]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 8006088:	4313      	orrs	r3, r2
 800608a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800608c:	4b1b      	ldr	r3, [pc, #108]	@ (80060fc <HAL_RCC_OscConfig+0x478>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7ff fa3d 	bl	8005510 <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609a:	f7ff fa39 	bl	8005510 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e05c      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ac:	4b11      	ldr	r3, [pc, #68]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x416>
 80060b8:	e054      	b.n	8006164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7ff fa26 	bl	8005510 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7ff fa22 	bl	8005510 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e045      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b06      	ldr	r3, [pc, #24]	@ (80060f4 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x444>
 80060e6:	e03d      	b.n	8006164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d107      	bne.n	8006100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e038      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
 80060f4:	40023800 	.word	0x40023800
 80060f8:	40007000 	.word	0x40007000
 80060fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006100:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <HAL_RCC_OscConfig+0x4ec>)
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d028      	beq.n	8006160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006118:	429a      	cmp	r2, r3
 800611a:	d121      	bne.n	8006160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006126:	429a      	cmp	r2, r3
 8006128:	d11a      	bne.n	8006160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006138:	4293      	cmp	r3, r2
 800613a:	d111      	bne.n	8006160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	3b01      	subs	r3, #1
 800614a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d107      	bne.n	8006160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d001      	beq.n	8006164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e000      	b.n	8006166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40023800 	.word	0x40023800

08006174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0cc      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006188:	4b68      	ldr	r3, [pc, #416]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d90c      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b65      	ldr	r3, [pc, #404]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619e:	4b63      	ldr	r3, [pc, #396]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0b8      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d020      	beq.n	80061fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061c8:	4b59      	ldr	r3, [pc, #356]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4a58      	ldr	r2, [pc, #352]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80061d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d005      	beq.n	80061ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e0:	4b53      	ldr	r3, [pc, #332]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4a52      	ldr	r2, [pc, #328]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ec:	4b50      	ldr	r3, [pc, #320]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	494d      	ldr	r1, [pc, #308]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d044      	beq.n	8006294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006212:	4b47      	ldr	r3, [pc, #284]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d119      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e07f      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d003      	beq.n	8006232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800622e:	2b03      	cmp	r3, #3
 8006230:	d107      	bne.n	8006242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006232:	4b3f      	ldr	r3, [pc, #252]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e06f      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	4b3b      	ldr	r3, [pc, #236]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e067      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006252:	4b37      	ldr	r3, [pc, #220]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f023 0203 	bic.w	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4934      	ldr	r1, [pc, #208]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	4313      	orrs	r3, r2
 8006262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006264:	f7ff f954 	bl	8005510 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626a:	e00a      	b.n	8006282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626c:	f7ff f950 	bl	8005510 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e04f      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006282:	4b2b      	ldr	r3, [pc, #172]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 020c 	and.w	r2, r3, #12
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	429a      	cmp	r2, r3
 8006292:	d1eb      	bne.n	800626c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006294:	4b25      	ldr	r3, [pc, #148]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d20c      	bcs.n	80062bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b22      	ldr	r3, [pc, #136]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b20      	ldr	r3, [pc, #128]	@ (800632c <HAL_RCC_ClockConfig+0x1b8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e032      	b.n	8006322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c8:	4b19      	ldr	r3, [pc, #100]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	4916      	ldr	r1, [pc, #88]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0308 	and.w	r3, r3, #8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e6:	4b12      	ldr	r3, [pc, #72]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	490e      	ldr	r1, [pc, #56]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062fa:	f000 f821 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80062fe:	4602      	mov	r2, r0
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	490a      	ldr	r1, [pc, #40]	@ (8006334 <HAL_RCC_ClockConfig+0x1c0>)
 800630c:	5ccb      	ldrb	r3, [r1, r3]
 800630e:	fa22 f303 	lsr.w	r3, r2, r3
 8006312:	4a09      	ldr	r2, [pc, #36]	@ (8006338 <HAL_RCC_ClockConfig+0x1c4>)
 8006314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006316:	4b09      	ldr	r3, [pc, #36]	@ (800633c <HAL_RCC_ClockConfig+0x1c8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f8b4 	bl	8005488 <HAL_InitTick>

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40023c00 	.word	0x40023c00
 8006330:	40023800 	.word	0x40023800
 8006334:	08032e58 	.word	0x08032e58
 8006338:	2000005c 	.word	0x2000005c
 800633c:	20000060 	.word	0x20000060

08006340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006344:	b094      	sub	sp, #80	@ 0x50
 8006346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006358:	4b79      	ldr	r3, [pc, #484]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b08      	cmp	r3, #8
 8006362:	d00d      	beq.n	8006380 <HAL_RCC_GetSysClockFreq+0x40>
 8006364:	2b08      	cmp	r3, #8
 8006366:	f200 80e1 	bhi.w	800652c <HAL_RCC_GetSysClockFreq+0x1ec>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x34>
 800636e:	2b04      	cmp	r3, #4
 8006370:	d003      	beq.n	800637a <HAL_RCC_GetSysClockFreq+0x3a>
 8006372:	e0db      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006374:	4b73      	ldr	r3, [pc, #460]	@ (8006544 <HAL_RCC_GetSysClockFreq+0x204>)
 8006376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006378:	e0db      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800637a:	4b73      	ldr	r3, [pc, #460]	@ (8006548 <HAL_RCC_GetSysClockFreq+0x208>)
 800637c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800637e:	e0d8      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006380:	4b6f      	ldr	r3, [pc, #444]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006388:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800638a:	4b6d      	ldr	r3, [pc, #436]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d063      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006396:	4b6a      	ldr	r3, [pc, #424]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	099b      	lsrs	r3, r3, #6
 800639c:	2200      	movs	r2, #0
 800639e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80063aa:	2300      	movs	r3, #0
 80063ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80063b2:	4622      	mov	r2, r4
 80063b4:	462b      	mov	r3, r5
 80063b6:	f04f 0000 	mov.w	r0, #0
 80063ba:	f04f 0100 	mov.w	r1, #0
 80063be:	0159      	lsls	r1, r3, #5
 80063c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063c4:	0150      	lsls	r0, r2, #5
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4621      	mov	r1, r4
 80063cc:	1a51      	subs	r1, r2, r1
 80063ce:	6139      	str	r1, [r7, #16]
 80063d0:	4629      	mov	r1, r5
 80063d2:	eb63 0301 	sbc.w	r3, r3, r1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e4:	4659      	mov	r1, fp
 80063e6:	018b      	lsls	r3, r1, #6
 80063e8:	4651      	mov	r1, sl
 80063ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063ee:	4651      	mov	r1, sl
 80063f0:	018a      	lsls	r2, r1, #6
 80063f2:	4651      	mov	r1, sl
 80063f4:	ebb2 0801 	subs.w	r8, r2, r1
 80063f8:	4659      	mov	r1, fp
 80063fa:	eb63 0901 	sbc.w	r9, r3, r1
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800640a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800640e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006412:	4690      	mov	r8, r2
 8006414:	4699      	mov	r9, r3
 8006416:	4623      	mov	r3, r4
 8006418:	eb18 0303 	adds.w	r3, r8, r3
 800641c:	60bb      	str	r3, [r7, #8]
 800641e:	462b      	mov	r3, r5
 8006420:	eb49 0303 	adc.w	r3, r9, r3
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006432:	4629      	mov	r1, r5
 8006434:	024b      	lsls	r3, r1, #9
 8006436:	4621      	mov	r1, r4
 8006438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800643c:	4621      	mov	r1, r4
 800643e:	024a      	lsls	r2, r1, #9
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006446:	2200      	movs	r2, #0
 8006448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800644a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006450:	f7fa fbc4 	bl	8000bdc <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4613      	mov	r3, r2
 800645a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800645c:	e058      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645e:	4b38      	ldr	r3, [pc, #224]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	2200      	movs	r2, #0
 8006466:	4618      	mov	r0, r3
 8006468:	4611      	mov	r1, r2
 800646a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	2300      	movs	r3, #0
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
 8006474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	f04f 0000 	mov.w	r0, #0
 8006480:	f04f 0100 	mov.w	r1, #0
 8006484:	0159      	lsls	r1, r3, #5
 8006486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800648a:	0150      	lsls	r0, r2, #5
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4641      	mov	r1, r8
 8006492:	ebb2 0a01 	subs.w	sl, r2, r1
 8006496:	4649      	mov	r1, r9
 8006498:	eb63 0b01 	sbc.w	fp, r3, r1
 800649c:	f04f 0200 	mov.w	r2, #0
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064b0:	ebb2 040a 	subs.w	r4, r2, sl
 80064b4:	eb63 050b 	sbc.w	r5, r3, fp
 80064b8:	f04f 0200 	mov.w	r2, #0
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	00eb      	lsls	r3, r5, #3
 80064c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064c6:	00e2      	lsls	r2, r4, #3
 80064c8:	4614      	mov	r4, r2
 80064ca:	461d      	mov	r5, r3
 80064cc:	4643      	mov	r3, r8
 80064ce:	18e3      	adds	r3, r4, r3
 80064d0:	603b      	str	r3, [r7, #0]
 80064d2:	464b      	mov	r3, r9
 80064d4:	eb45 0303 	adc.w	r3, r5, r3
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064e6:	4629      	mov	r1, r5
 80064e8:	028b      	lsls	r3, r1, #10
 80064ea:	4621      	mov	r1, r4
 80064ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064f0:	4621      	mov	r1, r4
 80064f2:	028a      	lsls	r2, r1, #10
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064fa:	2200      	movs	r2, #0
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	61fa      	str	r2, [r7, #28]
 8006500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006504:	f7fa fb6a 	bl	8000bdc <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4613      	mov	r3, r2
 800650e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006510:	4b0b      	ldr	r3, [pc, #44]	@ (8006540 <HAL_RCC_GetSysClockFreq+0x200>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	3301      	adds	r3, #1
 800651c:	005b      	lsls	r3, r3, #1
 800651e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006524:	fbb2 f3f3 	udiv	r3, r2, r3
 8006528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800652a:	e002      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800652c:	4b05      	ldr	r3, [pc, #20]	@ (8006544 <HAL_RCC_GetSysClockFreq+0x204>)
 800652e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006534:	4618      	mov	r0, r3
 8006536:	3750      	adds	r7, #80	@ 0x50
 8006538:	46bd      	mov	sp, r7
 800653a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	00f42400 	.word	0x00f42400
 8006548:	007a1200 	.word	0x007a1200

0800654c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006550:	4b03      	ldr	r3, [pc, #12]	@ (8006560 <HAL_RCC_GetHCLKFreq+0x14>)
 8006552:	681b      	ldr	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	2000005c 	.word	0x2000005c

08006564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006568:	f7ff fff0 	bl	800654c <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	@ (8006584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0a9b      	lsrs	r3, r3, #10
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4903      	ldr	r1, [pc, #12]	@ (8006588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	08032e68 	.word	0x08032e68

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006590:	f7ff ffdc 	bl	800654c <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	@ (80065ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0b5b      	lsrs	r3, r3, #13
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	@ (80065b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	08032e68 	.word	0x08032e68

080065b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e07b      	b.n	80066be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065d6:	d009      	beq.n	80065ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	61da      	str	r2, [r3, #28]
 80065de:	e005      	b.n	80065ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fe fcec 	bl	8004fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006622:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800663e:	431a      	orrs	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006670:	ea42 0103 	orr.w	r1, r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	0c1b      	lsrs	r3, r3, #16
 800668a:	f003 0104 	and.w	r1, r3, #4
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	f003 0210 	and.w	r2, r3, #16
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b088      	sub	sp, #32
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	603b      	str	r3, [r7, #0]
 80066d2:	4613      	mov	r3, r2
 80066d4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066d6:	f7fe ff1b 	bl	8005510 <HAL_GetTick>
 80066da:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d001      	beq.n	80066f0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
 80066ee:	e12a      	b.n	8006946 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_SPI_Transmit+0x36>
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e122      	b.n	8006946 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_SPI_Transmit+0x48>
 800670a:	2302      	movs	r3, #2
 800670c:	e11b      	b.n	8006946 <HAL_SPI_Transmit+0x280>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800675c:	d10f      	bne.n	800677e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800676c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800677c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b40      	cmp	r3, #64	@ 0x40
 800678a:	d007      	beq.n	800679c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067a4:	d152      	bne.n	800684c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_Transmit+0xee>
 80067ae:	8b7b      	ldrh	r3, [r7, #26]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d145      	bne.n	8006840 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067d8:	e032      	b.n	8006840 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d112      	bne.n	800680e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ec:	881a      	ldrh	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	1c9a      	adds	r2, r3, #2
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800680c:	e018      	b.n	8006840 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680e:	f7fe fe7f 	bl	8005510 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d803      	bhi.n	8006826 <HAL_SPI_Transmit+0x160>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006824:	d102      	bne.n	800682c <HAL_SPI_Transmit+0x166>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e082      	b.n	8006946 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006844:	b29b      	uxth	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1c7      	bne.n	80067da <HAL_SPI_Transmit+0x114>
 800684a:	e053      	b.n	80068f4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_SPI_Transmit+0x194>
 8006854:	8b7b      	ldrh	r3, [r7, #26]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d147      	bne.n	80068ea <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	7812      	ldrb	r2, [r2, #0]
 8006866:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006880:	e033      	b.n	80068ea <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d113      	bne.n	80068b8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068b6:	e018      	b.n	80068ea <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068b8:	f7fe fe2a 	bl	8005510 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d803      	bhi.n	80068d0 <HAL_SPI_Transmit+0x20a>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ce:	d102      	bne.n	80068d6 <HAL_SPI_Transmit+0x210>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e02d      	b.n	8006946 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1c6      	bne.n	8006882 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	6839      	ldr	r1, [r7, #0]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fa59 	bl	8006db0 <SPI_EndRxTxTransaction>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006912:	2300      	movs	r3, #0
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006944:	2300      	movs	r3, #0
  }
}
 8006946:	4618      	mov	r0, r3
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08a      	sub	sp, #40	@ 0x28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800695c:	2301      	movs	r3, #1
 800695e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006960:	f7fe fdd6 	bl	8005510 <HAL_GetTick>
 8006964:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800696c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006974:	887b      	ldrh	r3, [r7, #2]
 8006976:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006978:	7ffb      	ldrb	r3, [r7, #31]
 800697a:	2b01      	cmp	r3, #1
 800697c:	d00c      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x4a>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006984:	d106      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x46>
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	2b04      	cmp	r3, #4
 8006992:	d001      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
 8006996:	e17f      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x5c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <HAL_SPI_TransmitReceive+0x5c>
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e174      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_TransmitReceive+0x6e>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e16d      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d003      	beq.n	80069d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2205      	movs	r2, #5
 80069d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	887a      	ldrh	r2, [r7, #2]
 80069e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	887a      	ldrh	r2, [r7, #2]
 80069ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	887a      	ldrh	r2, [r7, #2]
 8006a00:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	d007      	beq.n	8006a2c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a34:	d17e      	bne.n	8006b34 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_SPI_TransmitReceive+0xf6>
 8006a3e:	8afb      	ldrh	r3, [r7, #22]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d16c      	bne.n	8006b1e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	881a      	ldrh	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	1c9a      	adds	r2, r3, #2
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	3b01      	subs	r3, #1
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a68:	e059      	b.n	8006b1e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d11b      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x162>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0x162>
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d113      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	881a      	ldrh	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d119      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x1a4>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d014      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad2:	b292      	uxth	r2, r2
 8006ad4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ada:	1c9a      	adds	r2, r3, #2
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aee:	2301      	movs	r3, #1
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006af2:	f7fe fd0d 	bl	8005510 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d80d      	bhi.n	8006b1e <HAL_SPI_TransmitReceive+0x1d0>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b08:	d009      	beq.n	8006b1e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e0bc      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1a0      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x11c>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d19b      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x11c>
 8006b32:	e082      	b.n	8006c3a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_SPI_TransmitReceive+0x1f4>
 8006b3c:	8afb      	ldrh	r3, [r7, #22]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d171      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	330c      	adds	r3, #12
 8006b4c:	7812      	ldrb	r2, [r2, #0]
 8006b4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b68:	e05d      	b.n	8006c26 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d11c      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x264>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d017      	beq.n	8006bb2 <HAL_SPI_TransmitReceive+0x264>
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d114      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d119      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x2a6>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d014      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bf4:	f7fe fc8c 	bl	8005510 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d803      	bhi.n	8006c0c <HAL_SPI_TransmitReceive+0x2be>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d102      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x2c4>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d109      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e038      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d19c      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x21c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d197      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c3a:	6a3a      	ldr	r2, [r7, #32]
 8006c3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 f8b6 	bl	8006db0 <SPI_EndRxTxTransaction>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e01d      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c96:	2300      	movs	r3, #0
  }
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3728      	adds	r7, #40	@ 0x28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006cb0:	f7fe fc2e 	bl	8005510 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006cc0:	f7fe fc26 	bl	8005510 <HAL_GetTick>
 8006cc4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006cc6:	4b39      	ldr	r3, [pc, #228]	@ (8006dac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	015b      	lsls	r3, r3, #5
 8006ccc:	0d1b      	lsrs	r3, r3, #20
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	fb02 f303 	mul.w	r3, r2, r3
 8006cd4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd6:	e054      	b.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d050      	beq.n	8006d82 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ce0:	f7fe fc16 	bl	8005510 <HAL_GetTick>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d902      	bls.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d13d      	bne.n	8006d72 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d0e:	d111      	bne.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d18:	d004      	beq.n	8006d24 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d22:	d107      	bne.n	8006d34 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d3c:	d10f      	bne.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e017      	b.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	bf0c      	ite	eq
 8006d92:	2301      	moveq	r3, #1
 8006d94:	2300      	movne	r3, #0
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d19b      	bne.n	8006cd8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	2000005c 	.word	0x2000005c

08006db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	2102      	movs	r1, #2
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ff6a 	bl	8006ca0 <SPI_WaitFlagStateUntilTimeout>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d007      	beq.n	8006de2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd6:	f043 0220 	orr.w	r2, r3, #32
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e032      	b.n	8006e48 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006de2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e50 <SPI_EndRxTxTransaction+0xa0>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <SPI_EndRxTxTransaction+0xa4>)
 8006de8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dec:	0d5b      	lsrs	r3, r3, #21
 8006dee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006df2:	fb02 f303 	mul.w	r3, r2, r3
 8006df6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e00:	d112      	bne.n	8006e28 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2180      	movs	r1, #128	@ 0x80
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff ff47 	bl	8006ca0 <SPI_WaitFlagStateUntilTimeout>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e1c:	f043 0220 	orr.w	r2, r3, #32
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e00f      	b.n	8006e48 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3e:	2b80      	cmp	r3, #128	@ 0x80
 8006e40:	d0f2      	beq.n	8006e28 <SPI_EndRxTxTransaction+0x78>
 8006e42:	e000      	b.n	8006e46 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e44:	bf00      	nop
  }

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	2000005c 	.word	0x2000005c
 8006e54:	165e9f81 	.word	0x165e9f81

08006e58 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e038      	b.n	8006ee0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7fe f992 	bl	80051ac <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3308      	adds	r3, #8
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f001 f87e 	bl	8007f94 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	f001 f8e0 	bl	8008068 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6858      	ldr	r0, [r3, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	f001 f90d 	bl	80080d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	6892      	ldr	r2, [r2, #8]
 8006ec2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	6892      	ldr	r2, [r2, #8]
 8006ece:	f041 0101 	orr.w	r1, r1, #1
 8006ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e042      	b.n	8006f80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d106      	bne.n	8006f14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f7fe f8b0 	bl	8005074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	@ 0x24
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fdbd 	bl	8007aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	695a      	ldr	r2, [r3, #20]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	@ 0x28
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	603b      	str	r3, [r7, #0]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d175      	bne.n	8007094 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Transmit+0x2c>
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e06e      	b.n	8007096 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2221      	movs	r2, #33	@ 0x21
 8006fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc6:	f7fe faa3 	bl	8005510 <HAL_GetTick>
 8006fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	88fa      	ldrh	r2, [r7, #6]
 8006fd0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	88fa      	ldrh	r2, [r7, #6]
 8006fd6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fe0:	d108      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e003      	b.n	8006ffc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ffc:	e02e      	b.n	800705c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2200      	movs	r2, #0
 8007006:	2180      	movs	r1, #128	@ 0x80
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fb1f 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2220      	movs	r2, #32
 8007018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e03a      	b.n	8007096 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	461a      	mov	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007034:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	3302      	adds	r3, #2
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e007      	b.n	800704e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007060:	b29b      	uxth	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1cb      	bne.n	8006ffe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2200      	movs	r2, #0
 800706e:	2140      	movs	r1, #64	@ 0x40
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 faeb 	bl	800764c <UART_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e006      	b.n	8007096 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	e000      	b.n	8007096 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007094:	2302      	movs	r3, #2
  }
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b084      	sub	sp, #16
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d112      	bne.n	80070de <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <HAL_UART_Receive_IT+0x26>
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e00b      	b.n	80070e0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f000 fb12 	bl	80076fe <UART_Start_Receive_IT>
 80070da:	4603      	mov	r3, r0
 80070dc:	e000      	b.n	80070e0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80070de:	2302      	movs	r3, #2
  }
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b0ba      	sub	sp, #232	@ 0xe8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800710e:	2300      	movs	r3, #0
 8007110:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007114:	2300      	movs	r3, #0
 8007116:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800711a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10f      	bne.n	800714e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_UART_IRQHandler+0x66>
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713e:	f003 0320 	and.w	r3, r3, #32
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fbf2 	bl	8007930 <UART_Receive_IT>
      return;
 800714c:	e25b      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800714e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80de 	beq.w	8007314 <HAL_UART_IRQHandler+0x22c>
 8007158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d106      	bne.n	8007172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007168:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 80d1 	beq.w	8007314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00b      	beq.n	8007196 <HAL_UART_IRQHandler+0xae>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719a:	f003 0304 	and.w	r3, r3, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00b      	beq.n	80071ba <HAL_UART_IRQHandler+0xd2>
 80071a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d005      	beq.n	80071ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b2:	f043 0202 	orr.w	r2, r3, #2
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_UART_IRQHandler+0xf6>
 80071c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071d6:	f043 0204 	orr.w	r2, r3, #4
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <HAL_UART_IRQHandler+0x126>
 80071ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	f043 0208 	orr.w	r2, r3, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 81f2 	beq.w	80075fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_UART_IRQHandler+0x14e>
 8007224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb7d 	bl	8007930 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007240:	2b40      	cmp	r3, #64	@ 0x40
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2300      	movne	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <HAL_UART_IRQHandler+0x17a>
 800725a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04f      	beq.n	8007302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa85 	bl	8007772 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d141      	bne.n	80072fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3314      	adds	r3, #20
 800727c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800728c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3314      	adds	r3, #20
 800729e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1d9      	bne.n	8007276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d013      	beq.n	80072f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ce:	4a7e      	ldr	r2, [pc, #504]	@ (80074c8 <HAL_UART_IRQHandler+0x3e0>)
 80072d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe facb 	bl	8005872 <HAL_DMA_Abort_IT>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d016      	beq.n	8007310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f0:	e00e      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f994 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f8:	e00a      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f990 	bl	8007620 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e006      	b.n	8007310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f98c 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800730e:	e175      	b.n	80075fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	bf00      	nop
    return;
 8007312:	e173      	b.n	80075fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 814f 	bne.w	80075bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800731e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007322:	f003 0310 	and.w	r3, r3, #16
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 8148 	beq.w	80075bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 8141 	beq.w	80075bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733a:	2300      	movs	r3, #0
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	f040 80b6 	bne.w	80074cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800736c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8145 	beq.w	8007600 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800737a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800737e:	429a      	cmp	r2, r3
 8007380:	f080 813e 	bcs.w	8007600 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800738a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007396:	f000 8088 	beq.w	80074aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	330c      	adds	r3, #12
 80073c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d9      	bne.n	800739a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3314      	adds	r3, #20
 80073ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3314      	adds	r3, #20
 8007406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800740a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800740e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007412:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800741c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e1      	bne.n	80073e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3314      	adds	r3, #20
 8007442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007448:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800744c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e3      	bne.n	8007422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007478:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800747a:	f023 0310 	bic.w	r3, r3, #16
 800747e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800748c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800748e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800749a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e3      	bne.n	8007468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe f974 	bl	8005792 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f8b7 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c6:	e09b      	b.n	8007600 <HAL_UART_IRQHandler+0x518>
 80074c8:	08007839 	.word	0x08007839
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 808e 	beq.w	8007604 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80074e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8089 	beq.w	8007604 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007516:	647a      	str	r2, [r7, #68]	@ 0x44
 8007518:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800751c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	623b      	str	r3, [r7, #32]
   return(result);
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800754e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007550:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007594:	61fa      	str	r2, [r7, #28]
 8007596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	69b9      	ldr	r1, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	617b      	str	r3, [r7, #20]
   return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2202      	movs	r2, #2
 80075ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f83d 	bl	8007634 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ba:	e023      	b.n	8007604 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d009      	beq.n	80075dc <HAL_UART_IRQHandler+0x4f4>
 80075c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f943 	bl	8007860 <UART_Transmit_IT>
    return;
 80075da:	e014      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <HAL_UART_IRQHandler+0x51e>
 80075e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f983 	bl	8007900 <UART_EndTransmit_IT>
    return;
 80075fa:	e004      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
    return;
 80075fc:	bf00      	nop
 80075fe:	e002      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
      return;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <HAL_UART_IRQHandler+0x51e>
      return;
 8007604:	bf00      	nop
  }
}
 8007606:	37e8      	adds	r7, #232	@ 0xe8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	4613      	mov	r3, r2
 800765a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800765c:	e03b      	b.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d037      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007666:	f7fd ff53 	bl	8005510 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <UART_WaitOnFlagUntilTimeout+0x30>
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e03a      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0304 	and.w	r3, r3, #4
 800768a:	2b00      	cmp	r3, #0
 800768c:	d023      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b80      	cmp	r3, #128	@ 0x80
 8007692:	d020      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b40      	cmp	r3, #64	@ 0x40
 8007698:	d01d      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0308 	and.w	r3, r3, #8
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d116      	bne.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 f857 	bl	8007772 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2208      	movs	r2, #8
 80076c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e00f      	b.n	80076f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4013      	ands	r3, r2
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	bf0c      	ite	eq
 80076e6:	2301      	moveq	r3, #1
 80076e8:	2300      	movne	r3, #0
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d0b4      	beq.n	800765e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3718      	adds	r7, #24
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076fe:	b480      	push	{r7}
 8007700:	b085      	sub	sp, #20
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	4613      	mov	r3, r2
 800770a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2222      	movs	r2, #34	@ 0x22
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007742:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695a      	ldr	r2, [r3, #20]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0201 	orr.w	r2, r2, #1
 8007752:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0220 	orr.w	r2, r2, #32
 8007762:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007772:	b480      	push	{r7}
 8007774:	b095      	sub	sp, #84	@ 0x54
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	330c      	adds	r3, #12
 8007780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800778a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	330c      	adds	r3, #12
 8007798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800779a:	643a      	str	r2, [r7, #64]	@ 0x40
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e5      	bne.n	800777a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3314      	adds	r3, #20
 80077b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	f023 0301 	bic.w	r3, r3, #1
 80077c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3314      	adds	r3, #20
 80077cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e5      	bne.n	80077ae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d119      	bne.n	800781e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	330c      	adds	r3, #12
 80077f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f023 0310 	bic.w	r3, r3, #16
 8007800:	647b      	str	r3, [r7, #68]	@ 0x44
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	330c      	adds	r3, #12
 8007808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800780a:	61ba      	str	r2, [r7, #24]
 800780c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6979      	ldr	r1, [r7, #20]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	613b      	str	r3, [r7, #16]
   return(result);
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800782c:	bf00      	nop
 800782e:	3754      	adds	r7, #84	@ 0x54
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fee4 	bl	8007620 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b21      	cmp	r3, #33	@ 0x21
 8007872:	d13e      	bne.n	80078f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800787c:	d114      	bne.n	80078a8 <UART_Transmit_IT+0x48>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d110      	bne.n	80078a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800789a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a1b      	ldr	r3, [r3, #32]
 80078a0:	1c9a      	adds	r2, r3, #2
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	621a      	str	r2, [r3, #32]
 80078a6:	e008      	b.n	80078ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a1b      	ldr	r3, [r3, #32]
 80078ac:	1c59      	adds	r1, r3, #1
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6211      	str	r1, [r2, #32]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	4619      	mov	r1, r3
 80078c8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	e000      	b.n	80078f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
  }
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007916:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fe73 	bl	800760c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	@ 0x30
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b22      	cmp	r3, #34	@ 0x22
 8007942:	f040 80ae 	bne.w	8007aa2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794e:	d117      	bne.n	8007980 <UART_Receive_IT+0x50>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d113      	bne.n	8007980 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007958:	2300      	movs	r3, #0
 800795a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007960:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796e:	b29a      	uxth	r2, r3
 8007970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007972:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	1c9a      	adds	r2, r3, #2
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	629a      	str	r2, [r3, #40]	@ 0x28
 800797e:	e026      	b.n	80079ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007984:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007992:	d007      	beq.n	80079a4 <UART_Receive_IT+0x74>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <UART_Receive_IT+0x82>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	b2da      	uxtb	r2, r3
 80079ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ae:	701a      	strb	r2, [r3, #0]
 80079b0:	e008      	b.n	80079c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	4619      	mov	r1, r3
 80079dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d15d      	bne.n	8007a9e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0220 	bic.w	r2, r2, #32
 80079f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2220      	movs	r2, #32
 8007a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d135      	bne.n	8007a94 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	330c      	adds	r3, #12
 8007a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a4e:	623a      	str	r2, [r7, #32]
 8007a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	69f9      	ldr	r1, [r7, #28]
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e5      	bne.n	8007a2e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d10a      	bne.n	8007a86 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a70:	2300      	movs	r3, #0
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fdd1 	bl	8007634 <HAL_UARTEx_RxEventCallback>
 8007a92:	e002      	b.n	8007a9a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7fd f8e5 	bl	8004c64 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	e002      	b.n	8007aa4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e000      	b.n	8007aa4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007aa2:	2302      	movs	r3, #2
  }
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3730      	adds	r7, #48	@ 0x30
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab0:	b0c0      	sub	sp, #256	@ 0x100
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	68d9      	ldr	r1, [r3, #12]
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	ea40 0301 	orr.w	r3, r0, r1
 8007ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b04:	f021 010c 	bic.w	r1, r1, #12
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b12:	430b      	orrs	r3, r1
 8007b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b26:	6999      	ldr	r1, [r3, #24]
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	ea40 0301 	orr.w	r3, r0, r1
 8007b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8007d78 <UART_SetConfig+0x2cc>)
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d005      	beq.n	8007b4c <UART_SetConfig+0xa0>
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b8d      	ldr	r3, [pc, #564]	@ (8007d7c <UART_SetConfig+0x2d0>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d104      	bne.n	8007b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b4c:	f7fe fd1e 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8007b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b54:	e003      	b.n	8007b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b56:	f7fe fd05 	bl	8006564 <HAL_RCC_GetPCLK1Freq>
 8007b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b68:	f040 810c 	bne.w	8007d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b7e:	4622      	mov	r2, r4
 8007b80:	462b      	mov	r3, r5
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b86:	415b      	adcs	r3, r3
 8007b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b8e:	4621      	mov	r1, r4
 8007b90:	eb12 0801 	adds.w	r8, r2, r1
 8007b94:	4629      	mov	r1, r5
 8007b96:	eb43 0901 	adc.w	r9, r3, r1
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bae:	4690      	mov	r8, r2
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	eb18 0303 	adds.w	r3, r8, r3
 8007bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	eb49 0303 	adc.w	r3, r9, r3
 8007bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bda:	460b      	mov	r3, r1
 8007bdc:	18db      	adds	r3, r3, r3
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8007be0:	4613      	mov	r3, r2
 8007be2:	eb42 0303 	adc.w	r3, r2, r3
 8007be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bf0:	f7f8 fff4 	bl	8000bdc <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4b61      	ldr	r3, [pc, #388]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	011c      	lsls	r4, r3, #4
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c14:	4642      	mov	r2, r8
 8007c16:	464b      	mov	r3, r9
 8007c18:	1891      	adds	r1, r2, r2
 8007c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c1c:	415b      	adcs	r3, r3
 8007c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c24:	4641      	mov	r1, r8
 8007c26:	eb12 0a01 	adds.w	sl, r2, r1
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c44:	4692      	mov	sl, r2
 8007c46:	469b      	mov	fp, r3
 8007c48:	4643      	mov	r3, r8
 8007c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c52:	464b      	mov	r3, r9
 8007c54:	eb4b 0303 	adc.w	r3, fp, r3
 8007c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c70:	460b      	mov	r3, r1
 8007c72:	18db      	adds	r3, r3, r3
 8007c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c76:	4613      	mov	r3, r2
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c86:	f7f8 ffa9 	bl	8000bdc <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007c92:	fba3 2301 	umull	r2, r3, r3, r1
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	2264      	movs	r2, #100	@ 0x64
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	1acb      	subs	r3, r1, r3
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ca6:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007cb4:	441c      	add	r4, r3
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	1891      	adds	r1, r2, r2
 8007cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007cd0:	415b      	adcs	r3, r3
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cd8:	4641      	mov	r1, r8
 8007cda:	1851      	adds	r1, r2, r1
 8007cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cde:	4649      	mov	r1, r9
 8007ce0:	414b      	adcs	r3, r1
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	00cb      	lsls	r3, r1, #3
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	00ca      	lsls	r2, r1, #3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	4642      	mov	r2, r8
 8007d06:	189b      	adds	r3, r3, r2
 8007d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	460a      	mov	r2, r1
 8007d10:	eb42 0303 	adc.w	r3, r2, r3
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d32:	4613      	mov	r3, r2
 8007d34:	eb42 0303 	adc.w	r3, r2, r3
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d42:	f7f8 ff4b 	bl	8000bdc <__aeabi_uldivmod>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	2164      	movs	r1, #100	@ 0x64
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	3332      	adds	r3, #50	@ 0x32
 8007d5e:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f003 0207 	and.w	r2, r3, #7
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4422      	add	r2, r4
 8007d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d74:	e106      	b.n	8007f84 <UART_SetConfig+0x4d8>
 8007d76:	bf00      	nop
 8007d78:	40011000 	.word	0x40011000
 8007d7c:	40011400 	.word	0x40011400
 8007d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	1891      	adds	r1, r2, r2
 8007d9c:	6239      	str	r1, [r7, #32]
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007da6:	4641      	mov	r1, r8
 8007da8:	1854      	adds	r4, r2, r1
 8007daa:	4649      	mov	r1, r9
 8007dac:	eb43 0501 	adc.w	r5, r3, r1
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	00eb      	lsls	r3, r5, #3
 8007dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dbe:	00e2      	lsls	r2, r4, #3
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	18e3      	adds	r3, r4, r3
 8007dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dcc:	464b      	mov	r3, r9
 8007dce:	eb45 0303 	adc.w	r3, r5, r3
 8007dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007df2:	4629      	mov	r1, r5
 8007df4:	008b      	lsls	r3, r1, #2
 8007df6:	4621      	mov	r1, r4
 8007df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	008a      	lsls	r2, r1, #2
 8007e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e04:	f7f8 feea 	bl	8000bdc <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b60      	ldr	r3, [pc, #384]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	011c      	lsls	r4, r3, #4
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	1891      	adds	r1, r2, r2
 8007e2e:	61b9      	str	r1, [r7, #24]
 8007e30:	415b      	adcs	r3, r3
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e38:	4641      	mov	r1, r8
 8007e3a:	1851      	adds	r1, r2, r1
 8007e3c:	6139      	str	r1, [r7, #16]
 8007e3e:	4649      	mov	r1, r9
 8007e40:	414b      	adcs	r3, r1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e50:	4659      	mov	r1, fp
 8007e52:	00cb      	lsls	r3, r1, #3
 8007e54:	4651      	mov	r1, sl
 8007e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	00ca      	lsls	r2, r1, #3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	4642      	mov	r2, r8
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	460a      	mov	r2, r1
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e90:	4649      	mov	r1, r9
 8007e92:	008b      	lsls	r3, r1, #2
 8007e94:	4641      	mov	r1, r8
 8007e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	008a      	lsls	r2, r1, #2
 8007e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ea2:	f7f8 fe9b 	bl	8000bdc <__aeabi_uldivmod>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4b38      	ldr	r3, [pc, #224]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007eae:	fba3 2301 	umull	r2, r3, r3, r1
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2264      	movs	r2, #100	@ 0x64
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	1acb      	subs	r3, r1, r3
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	3332      	adds	r3, #50	@ 0x32
 8007ec0:	4a33      	ldr	r2, [pc, #204]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ecc:	441c      	add	r4, r3
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	1891      	adds	r1, r2, r2
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	415b      	adcs	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eec:	4641      	mov	r1, r8
 8007eee:	1851      	adds	r1, r2, r1
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	414b      	adcs	r3, r1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f04:	4659      	mov	r1, fp
 8007f06:	00cb      	lsls	r3, r1, #3
 8007f08:	4651      	mov	r1, sl
 8007f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f0e:	4651      	mov	r1, sl
 8007f10:	00ca      	lsls	r2, r1, #3
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	4642      	mov	r2, r8
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f1e:	464b      	mov	r3, r9
 8007f20:	460a      	mov	r2, r1
 8007f22:	eb42 0303 	adc.w	r3, r2, r3
 8007f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f40:	4649      	mov	r1, r9
 8007f42:	008b      	lsls	r3, r1, #2
 8007f44:	4641      	mov	r1, r8
 8007f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	008a      	lsls	r2, r1, #2
 8007f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f52:	f7f8 fe43 	bl	8000bdc <__aeabi_uldivmod>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	2164      	movs	r1, #100	@ 0x64
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	3332      	adds	r3, #50	@ 0x32
 8007f6e:	4a08      	ldr	r2, [pc, #32]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4422      	add	r2, r4
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f90:	51eb851f 	.word	0x51eb851f

08007f94 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	6812      	ldr	r2, [r2, #0]
 8007fac:	f023 0101 	bic.w	r1, r3, #1
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d102      	bne.n	8007fc4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007fbe:	2340      	movs	r3, #64	@ 0x40
 8007fc0:	617b      	str	r3, [r7, #20]
 8007fc2:	e001      	b.n	8007fc8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007fd4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007fda:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007fe0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007fe6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007fec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007ff2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007ff8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8007ffe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8008004:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8008022:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <FSMC_NORSRAM_Init+0xd0>)
 8008024:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800802c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8008034:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	43db      	mvns	r3, r3
 8008044:	ea02 0103 	and.w	r1, r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4319      	orrs	r1, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	0008fb7f 	.word	0x0008fb7f

08008068 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	431a      	orrs	r2, r3
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	431a      	orrs	r2, r3
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	431a      	orrs	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	051b      	lsls	r3, r3, #20
 80080a6:	431a      	orrs	r2, r3
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	3b02      	subs	r3, #2
 80080ae:	061b      	lsls	r3, r3, #24
 80080b0:	431a      	orrs	r2, r3
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	3201      	adds	r2, #1
 80080bc:	4319      	orrs	r1, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080e8:	d11d      	bne.n	8008126 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080f2:	4b13      	ldr	r3, [pc, #76]	@ (8008140 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	6811      	ldr	r1, [r2, #0]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	6852      	ldr	r2, [r2, #4]
 80080fe:	0112      	lsls	r2, r2, #4
 8008100:	4311      	orrs	r1, r2
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	6892      	ldr	r2, [r2, #8]
 8008106:	0212      	lsls	r2, r2, #8
 8008108:	4311      	orrs	r1, r2
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	6992      	ldr	r2, [r2, #24]
 800810e:	4311      	orrs	r1, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	68d2      	ldr	r2, [r2, #12]
 8008114:	0412      	lsls	r2, r2, #16
 8008116:	430a      	orrs	r2, r1
 8008118:	ea43 0102 	orr.w	r1, r3, r2
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008124:	e005      	b.n	8008132 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800812e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	cff00000 	.word	0xcff00000

08008144 <malloc>:
 8008144:	4b02      	ldr	r3, [pc, #8]	@ (8008150 <malloc+0xc>)
 8008146:	4601      	mov	r1, r0
 8008148:	6818      	ldr	r0, [r3, #0]
 800814a:	f000 b82d 	b.w	80081a8 <_malloc_r>
 800814e:	bf00      	nop
 8008150:	200001e0 	.word	0x200001e0

08008154 <free>:
 8008154:	4b02      	ldr	r3, [pc, #8]	@ (8008160 <free+0xc>)
 8008156:	4601      	mov	r1, r0
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	f001 b905 	b.w	8009368 <_free_r>
 800815e:	bf00      	nop
 8008160:	200001e0 	.word	0x200001e0

08008164 <sbrk_aligned>:
 8008164:	b570      	push	{r4, r5, r6, lr}
 8008166:	4e0f      	ldr	r6, [pc, #60]	@ (80081a4 <sbrk_aligned+0x40>)
 8008168:	460c      	mov	r4, r1
 800816a:	6831      	ldr	r1, [r6, #0]
 800816c:	4605      	mov	r5, r0
 800816e:	b911      	cbnz	r1, 8008176 <sbrk_aligned+0x12>
 8008170:	f001 f88c 	bl	800928c <_sbrk_r>
 8008174:	6030      	str	r0, [r6, #0]
 8008176:	4621      	mov	r1, r4
 8008178:	4628      	mov	r0, r5
 800817a:	f001 f887 	bl	800928c <_sbrk_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	d103      	bne.n	800818a <sbrk_aligned+0x26>
 8008182:	f04f 34ff 	mov.w	r4, #4294967295
 8008186:	4620      	mov	r0, r4
 8008188:	bd70      	pop	{r4, r5, r6, pc}
 800818a:	1cc4      	adds	r4, r0, #3
 800818c:	f024 0403 	bic.w	r4, r4, #3
 8008190:	42a0      	cmp	r0, r4
 8008192:	d0f8      	beq.n	8008186 <sbrk_aligned+0x22>
 8008194:	1a21      	subs	r1, r4, r0
 8008196:	4628      	mov	r0, r5
 8008198:	f001 f878 	bl	800928c <_sbrk_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d1f2      	bne.n	8008186 <sbrk_aligned+0x22>
 80081a0:	e7ef      	b.n	8008182 <sbrk_aligned+0x1e>
 80081a2:	bf00      	nop
 80081a4:	200009bc 	.word	0x200009bc

080081a8 <_malloc_r>:
 80081a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ac:	1ccd      	adds	r5, r1, #3
 80081ae:	f025 0503 	bic.w	r5, r5, #3
 80081b2:	3508      	adds	r5, #8
 80081b4:	2d0c      	cmp	r5, #12
 80081b6:	bf38      	it	cc
 80081b8:	250c      	movcc	r5, #12
 80081ba:	2d00      	cmp	r5, #0
 80081bc:	4606      	mov	r6, r0
 80081be:	db01      	blt.n	80081c4 <_malloc_r+0x1c>
 80081c0:	42a9      	cmp	r1, r5
 80081c2:	d904      	bls.n	80081ce <_malloc_r+0x26>
 80081c4:	230c      	movs	r3, #12
 80081c6:	6033      	str	r3, [r6, #0]
 80081c8:	2000      	movs	r0, #0
 80081ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082a4 <_malloc_r+0xfc>
 80081d2:	f000 f869 	bl	80082a8 <__malloc_lock>
 80081d6:	f8d8 3000 	ldr.w	r3, [r8]
 80081da:	461c      	mov	r4, r3
 80081dc:	bb44      	cbnz	r4, 8008230 <_malloc_r+0x88>
 80081de:	4629      	mov	r1, r5
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ffbf 	bl	8008164 <sbrk_aligned>
 80081e6:	1c43      	adds	r3, r0, #1
 80081e8:	4604      	mov	r4, r0
 80081ea:	d158      	bne.n	800829e <_malloc_r+0xf6>
 80081ec:	f8d8 4000 	ldr.w	r4, [r8]
 80081f0:	4627      	mov	r7, r4
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	d143      	bne.n	800827e <_malloc_r+0xd6>
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	d04b      	beq.n	8008292 <_malloc_r+0xea>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	4639      	mov	r1, r7
 80081fe:	4630      	mov	r0, r6
 8008200:	eb04 0903 	add.w	r9, r4, r3
 8008204:	f001 f842 	bl	800928c <_sbrk_r>
 8008208:	4581      	cmp	r9, r0
 800820a:	d142      	bne.n	8008292 <_malloc_r+0xea>
 800820c:	6821      	ldr	r1, [r4, #0]
 800820e:	1a6d      	subs	r5, r5, r1
 8008210:	4629      	mov	r1, r5
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ffa6 	bl	8008164 <sbrk_aligned>
 8008218:	3001      	adds	r0, #1
 800821a:	d03a      	beq.n	8008292 <_malloc_r+0xea>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	442b      	add	r3, r5
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	f8d8 3000 	ldr.w	r3, [r8]
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	bb62      	cbnz	r2, 8008284 <_malloc_r+0xdc>
 800822a:	f8c8 7000 	str.w	r7, [r8]
 800822e:	e00f      	b.n	8008250 <_malloc_r+0xa8>
 8008230:	6822      	ldr	r2, [r4, #0]
 8008232:	1b52      	subs	r2, r2, r5
 8008234:	d420      	bmi.n	8008278 <_malloc_r+0xd0>
 8008236:	2a0b      	cmp	r2, #11
 8008238:	d917      	bls.n	800826a <_malloc_r+0xc2>
 800823a:	1961      	adds	r1, r4, r5
 800823c:	42a3      	cmp	r3, r4
 800823e:	6025      	str	r5, [r4, #0]
 8008240:	bf18      	it	ne
 8008242:	6059      	strne	r1, [r3, #4]
 8008244:	6863      	ldr	r3, [r4, #4]
 8008246:	bf08      	it	eq
 8008248:	f8c8 1000 	streq.w	r1, [r8]
 800824c:	5162      	str	r2, [r4, r5]
 800824e:	604b      	str	r3, [r1, #4]
 8008250:	4630      	mov	r0, r6
 8008252:	f000 f82f 	bl	80082b4 <__malloc_unlock>
 8008256:	f104 000b 	add.w	r0, r4, #11
 800825a:	1d23      	adds	r3, r4, #4
 800825c:	f020 0007 	bic.w	r0, r0, #7
 8008260:	1ac2      	subs	r2, r0, r3
 8008262:	bf1c      	itt	ne
 8008264:	1a1b      	subne	r3, r3, r0
 8008266:	50a3      	strne	r3, [r4, r2]
 8008268:	e7af      	b.n	80081ca <_malloc_r+0x22>
 800826a:	6862      	ldr	r2, [r4, #4]
 800826c:	42a3      	cmp	r3, r4
 800826e:	bf0c      	ite	eq
 8008270:	f8c8 2000 	streq.w	r2, [r8]
 8008274:	605a      	strne	r2, [r3, #4]
 8008276:	e7eb      	b.n	8008250 <_malloc_r+0xa8>
 8008278:	4623      	mov	r3, r4
 800827a:	6864      	ldr	r4, [r4, #4]
 800827c:	e7ae      	b.n	80081dc <_malloc_r+0x34>
 800827e:	463c      	mov	r4, r7
 8008280:	687f      	ldr	r7, [r7, #4]
 8008282:	e7b6      	b.n	80081f2 <_malloc_r+0x4a>
 8008284:	461a      	mov	r2, r3
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	42a3      	cmp	r3, r4
 800828a:	d1fb      	bne.n	8008284 <_malloc_r+0xdc>
 800828c:	2300      	movs	r3, #0
 800828e:	6053      	str	r3, [r2, #4]
 8008290:	e7de      	b.n	8008250 <_malloc_r+0xa8>
 8008292:	230c      	movs	r3, #12
 8008294:	6033      	str	r3, [r6, #0]
 8008296:	4630      	mov	r0, r6
 8008298:	f000 f80c 	bl	80082b4 <__malloc_unlock>
 800829c:	e794      	b.n	80081c8 <_malloc_r+0x20>
 800829e:	6005      	str	r5, [r0, #0]
 80082a0:	e7d6      	b.n	8008250 <_malloc_r+0xa8>
 80082a2:	bf00      	nop
 80082a4:	200009c0 	.word	0x200009c0

080082a8 <__malloc_lock>:
 80082a8:	4801      	ldr	r0, [pc, #4]	@ (80082b0 <__malloc_lock+0x8>)
 80082aa:	f001 b83c 	b.w	8009326 <__retarget_lock_acquire_recursive>
 80082ae:	bf00      	nop
 80082b0:	20000b04 	.word	0x20000b04

080082b4 <__malloc_unlock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	@ (80082bc <__malloc_unlock+0x8>)
 80082b6:	f001 b837 	b.w	8009328 <__retarget_lock_release_recursive>
 80082ba:	bf00      	nop
 80082bc:	20000b04 	.word	0x20000b04

080082c0 <realloc>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <realloc+0xc>)
 80082c2:	460a      	mov	r2, r1
 80082c4:	4601      	mov	r1, r0
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	f000 b802 	b.w	80082d0 <_realloc_r>
 80082cc:	200001e0 	.word	0x200001e0

080082d0 <_realloc_r>:
 80082d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	4607      	mov	r7, r0
 80082d6:	4614      	mov	r4, r2
 80082d8:	460d      	mov	r5, r1
 80082da:	b921      	cbnz	r1, 80082e6 <_realloc_r+0x16>
 80082dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082e0:	4611      	mov	r1, r2
 80082e2:	f7ff bf61 	b.w	80081a8 <_malloc_r>
 80082e6:	b92a      	cbnz	r2, 80082f4 <_realloc_r+0x24>
 80082e8:	f001 f83e 	bl	8009368 <_free_r>
 80082ec:	4625      	mov	r5, r4
 80082ee:	4628      	mov	r0, r5
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	f002 f878 	bl	800a3e8 <_malloc_usable_size_r>
 80082f8:	4284      	cmp	r4, r0
 80082fa:	4606      	mov	r6, r0
 80082fc:	d802      	bhi.n	8008304 <_realloc_r+0x34>
 80082fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008302:	d8f4      	bhi.n	80082ee <_realloc_r+0x1e>
 8008304:	4621      	mov	r1, r4
 8008306:	4638      	mov	r0, r7
 8008308:	f7ff ff4e 	bl	80081a8 <_malloc_r>
 800830c:	4680      	mov	r8, r0
 800830e:	b908      	cbnz	r0, 8008314 <_realloc_r+0x44>
 8008310:	4645      	mov	r5, r8
 8008312:	e7ec      	b.n	80082ee <_realloc_r+0x1e>
 8008314:	42b4      	cmp	r4, r6
 8008316:	4622      	mov	r2, r4
 8008318:	4629      	mov	r1, r5
 800831a:	bf28      	it	cs
 800831c:	4632      	movcs	r2, r6
 800831e:	f001 f80c 	bl	800933a <memcpy>
 8008322:	4629      	mov	r1, r5
 8008324:	4638      	mov	r0, r7
 8008326:	f001 f81f 	bl	8009368 <_free_r>
 800832a:	e7f1      	b.n	8008310 <_realloc_r+0x40>

0800832c <sulp>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	460d      	mov	r5, r1
 8008332:	ec45 4b10 	vmov	d0, r4, r5
 8008336:	4616      	mov	r6, r2
 8008338:	f001 ff18 	bl	800a16c <__ulp>
 800833c:	ec51 0b10 	vmov	r0, r1, d0
 8008340:	b17e      	cbz	r6, 8008362 <sulp+0x36>
 8008342:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008346:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800834a:	2b00      	cmp	r3, #0
 800834c:	dd09      	ble.n	8008362 <sulp+0x36>
 800834e:	051b      	lsls	r3, r3, #20
 8008350:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008354:	2400      	movs	r4, #0
 8008356:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800835a:	4622      	mov	r2, r4
 800835c:	462b      	mov	r3, r5
 800835e:	f7f8 f95b 	bl	8000618 <__aeabi_dmul>
 8008362:	ec41 0b10 	vmov	d0, r0, r1
 8008366:	bd70      	pop	{r4, r5, r6, pc}

08008368 <_strtod_l>:
 8008368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836c:	b09f      	sub	sp, #124	@ 0x7c
 800836e:	460c      	mov	r4, r1
 8008370:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008372:	2200      	movs	r2, #0
 8008374:	921a      	str	r2, [sp, #104]	@ 0x68
 8008376:	9005      	str	r0, [sp, #20]
 8008378:	f04f 0a00 	mov.w	sl, #0
 800837c:	f04f 0b00 	mov.w	fp, #0
 8008380:	460a      	mov	r2, r1
 8008382:	9219      	str	r2, [sp, #100]	@ 0x64
 8008384:	7811      	ldrb	r1, [r2, #0]
 8008386:	292b      	cmp	r1, #43	@ 0x2b
 8008388:	d04a      	beq.n	8008420 <_strtod_l+0xb8>
 800838a:	d838      	bhi.n	80083fe <_strtod_l+0x96>
 800838c:	290d      	cmp	r1, #13
 800838e:	d832      	bhi.n	80083f6 <_strtod_l+0x8e>
 8008390:	2908      	cmp	r1, #8
 8008392:	d832      	bhi.n	80083fa <_strtod_l+0x92>
 8008394:	2900      	cmp	r1, #0
 8008396:	d03b      	beq.n	8008410 <_strtod_l+0xa8>
 8008398:	2200      	movs	r2, #0
 800839a:	920e      	str	r2, [sp, #56]	@ 0x38
 800839c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800839e:	782a      	ldrb	r2, [r5, #0]
 80083a0:	2a30      	cmp	r2, #48	@ 0x30
 80083a2:	f040 80b2 	bne.w	800850a <_strtod_l+0x1a2>
 80083a6:	786a      	ldrb	r2, [r5, #1]
 80083a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083ac:	2a58      	cmp	r2, #88	@ 0x58
 80083ae:	d16e      	bne.n	800848e <_strtod_l+0x126>
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083b4:	9301      	str	r3, [sp, #4]
 80083b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	4a8f      	ldr	r2, [pc, #572]	@ (80085f8 <_strtod_l+0x290>)
 80083bc:	9805      	ldr	r0, [sp, #20]
 80083be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80083c0:	a919      	add	r1, sp, #100	@ 0x64
 80083c2:	f001 f883 	bl	80094cc <__gethex>
 80083c6:	f010 060f 	ands.w	r6, r0, #15
 80083ca:	4604      	mov	r4, r0
 80083cc:	d005      	beq.n	80083da <_strtod_l+0x72>
 80083ce:	2e06      	cmp	r6, #6
 80083d0:	d128      	bne.n	8008424 <_strtod_l+0xbc>
 80083d2:	3501      	adds	r5, #1
 80083d4:	2300      	movs	r3, #0
 80083d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80083d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80083da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f040 858e 	bne.w	8008efe <_strtod_l+0xb96>
 80083e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083e4:	b1cb      	cbz	r3, 800841a <_strtod_l+0xb2>
 80083e6:	4652      	mov	r2, sl
 80083e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80083ec:	ec43 2b10 	vmov	d0, r2, r3
 80083f0:	b01f      	add	sp, #124	@ 0x7c
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	2920      	cmp	r1, #32
 80083f8:	d1ce      	bne.n	8008398 <_strtod_l+0x30>
 80083fa:	3201      	adds	r2, #1
 80083fc:	e7c1      	b.n	8008382 <_strtod_l+0x1a>
 80083fe:	292d      	cmp	r1, #45	@ 0x2d
 8008400:	d1ca      	bne.n	8008398 <_strtod_l+0x30>
 8008402:	2101      	movs	r1, #1
 8008404:	910e      	str	r1, [sp, #56]	@ 0x38
 8008406:	1c51      	adds	r1, r2, #1
 8008408:	9119      	str	r1, [sp, #100]	@ 0x64
 800840a:	7852      	ldrb	r2, [r2, #1]
 800840c:	2a00      	cmp	r2, #0
 800840e:	d1c5      	bne.n	800839c <_strtod_l+0x34>
 8008410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008412:	9419      	str	r4, [sp, #100]	@ 0x64
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 8570 	bne.w	8008efa <_strtod_l+0xb92>
 800841a:	4652      	mov	r2, sl
 800841c:	465b      	mov	r3, fp
 800841e:	e7e5      	b.n	80083ec <_strtod_l+0x84>
 8008420:	2100      	movs	r1, #0
 8008422:	e7ef      	b.n	8008404 <_strtod_l+0x9c>
 8008424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008426:	b13a      	cbz	r2, 8008438 <_strtod_l+0xd0>
 8008428:	2135      	movs	r1, #53	@ 0x35
 800842a:	a81c      	add	r0, sp, #112	@ 0x70
 800842c:	f001 ff98 	bl	800a360 <__copybits>
 8008430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008432:	9805      	ldr	r0, [sp, #20]
 8008434:	f001 fb6e 	bl	8009b14 <_Bfree>
 8008438:	3e01      	subs	r6, #1
 800843a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800843c:	2e04      	cmp	r6, #4
 800843e:	d806      	bhi.n	800844e <_strtod_l+0xe6>
 8008440:	e8df f006 	tbb	[pc, r6]
 8008444:	201d0314 	.word	0x201d0314
 8008448:	14          	.byte	0x14
 8008449:	00          	.byte	0x00
 800844a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800844e:	05e1      	lsls	r1, r4, #23
 8008450:	bf48      	it	mi
 8008452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800845a:	0d1b      	lsrs	r3, r3, #20
 800845c:	051b      	lsls	r3, r3, #20
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1bb      	bne.n	80083da <_strtod_l+0x72>
 8008462:	f000 ff35 	bl	80092d0 <__errno>
 8008466:	2322      	movs	r3, #34	@ 0x22
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	e7b6      	b.n	80083da <_strtod_l+0x72>
 800846c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800847c:	e7e7      	b.n	800844e <_strtod_l+0xe6>
 800847e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008600 <_strtod_l+0x298>
 8008482:	e7e4      	b.n	800844e <_strtod_l+0xe6>
 8008484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008488:	f04f 3aff 	mov.w	sl, #4294967295
 800848c:	e7df      	b.n	800844e <_strtod_l+0xe6>
 800848e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	9219      	str	r2, [sp, #100]	@ 0x64
 8008494:	785b      	ldrb	r3, [r3, #1]
 8008496:	2b30      	cmp	r3, #48	@ 0x30
 8008498:	d0f9      	beq.n	800848e <_strtod_l+0x126>
 800849a:	2b00      	cmp	r3, #0
 800849c:	d09d      	beq.n	80083da <_strtod_l+0x72>
 800849e:	2301      	movs	r3, #1
 80084a0:	2700      	movs	r7, #0
 80084a2:	9308      	str	r3, [sp, #32]
 80084a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80084a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80084aa:	46b9      	mov	r9, r7
 80084ac:	220a      	movs	r2, #10
 80084ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80084b0:	7805      	ldrb	r5, [r0, #0]
 80084b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80084b6:	b2d9      	uxtb	r1, r3
 80084b8:	2909      	cmp	r1, #9
 80084ba:	d928      	bls.n	800850e <_strtod_l+0x1a6>
 80084bc:	494f      	ldr	r1, [pc, #316]	@ (80085fc <_strtod_l+0x294>)
 80084be:	2201      	movs	r2, #1
 80084c0:	f000 fe8b 	bl	80091da <strncmp>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d032      	beq.n	800852e <_strtod_l+0x1c6>
 80084c8:	2000      	movs	r0, #0
 80084ca:	462a      	mov	r2, r5
 80084cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80084ce:	464d      	mov	r5, r9
 80084d0:	4603      	mov	r3, r0
 80084d2:	2a65      	cmp	r2, #101	@ 0x65
 80084d4:	d001      	beq.n	80084da <_strtod_l+0x172>
 80084d6:	2a45      	cmp	r2, #69	@ 0x45
 80084d8:	d114      	bne.n	8008504 <_strtod_l+0x19c>
 80084da:	b91d      	cbnz	r5, 80084e4 <_strtod_l+0x17c>
 80084dc:	9a08      	ldr	r2, [sp, #32]
 80084de:	4302      	orrs	r2, r0
 80084e0:	d096      	beq.n	8008410 <_strtod_l+0xa8>
 80084e2:	2500      	movs	r5, #0
 80084e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80084e6:	1c62      	adds	r2, r4, #1
 80084e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80084ea:	7862      	ldrb	r2, [r4, #1]
 80084ec:	2a2b      	cmp	r2, #43	@ 0x2b
 80084ee:	d07a      	beq.n	80085e6 <_strtod_l+0x27e>
 80084f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80084f2:	d07e      	beq.n	80085f2 <_strtod_l+0x28a>
 80084f4:	f04f 0c00 	mov.w	ip, #0
 80084f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80084fc:	2909      	cmp	r1, #9
 80084fe:	f240 8085 	bls.w	800860c <_strtod_l+0x2a4>
 8008502:	9419      	str	r4, [sp, #100]	@ 0x64
 8008504:	f04f 0800 	mov.w	r8, #0
 8008508:	e0a5      	b.n	8008656 <_strtod_l+0x2ee>
 800850a:	2300      	movs	r3, #0
 800850c:	e7c8      	b.n	80084a0 <_strtod_l+0x138>
 800850e:	f1b9 0f08 	cmp.w	r9, #8
 8008512:	bfd8      	it	le
 8008514:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008516:	f100 0001 	add.w	r0, r0, #1
 800851a:	bfda      	itte	le
 800851c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008520:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008522:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008526:	f109 0901 	add.w	r9, r9, #1
 800852a:	9019      	str	r0, [sp, #100]	@ 0x64
 800852c:	e7bf      	b.n	80084ae <_strtod_l+0x146>
 800852e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	9219      	str	r2, [sp, #100]	@ 0x64
 8008534:	785a      	ldrb	r2, [r3, #1]
 8008536:	f1b9 0f00 	cmp.w	r9, #0
 800853a:	d03b      	beq.n	80085b4 <_strtod_l+0x24c>
 800853c:	900a      	str	r0, [sp, #40]	@ 0x28
 800853e:	464d      	mov	r5, r9
 8008540:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008544:	2b09      	cmp	r3, #9
 8008546:	d912      	bls.n	800856e <_strtod_l+0x206>
 8008548:	2301      	movs	r3, #1
 800854a:	e7c2      	b.n	80084d2 <_strtod_l+0x16a>
 800854c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	9219      	str	r2, [sp, #100]	@ 0x64
 8008552:	785a      	ldrb	r2, [r3, #1]
 8008554:	3001      	adds	r0, #1
 8008556:	2a30      	cmp	r2, #48	@ 0x30
 8008558:	d0f8      	beq.n	800854c <_strtod_l+0x1e4>
 800855a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800855e:	2b08      	cmp	r3, #8
 8008560:	f200 84d2 	bhi.w	8008f08 <_strtod_l+0xba0>
 8008564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008566:	900a      	str	r0, [sp, #40]	@ 0x28
 8008568:	2000      	movs	r0, #0
 800856a:	930c      	str	r3, [sp, #48]	@ 0x30
 800856c:	4605      	mov	r5, r0
 800856e:	3a30      	subs	r2, #48	@ 0x30
 8008570:	f100 0301 	add.w	r3, r0, #1
 8008574:	d018      	beq.n	80085a8 <_strtod_l+0x240>
 8008576:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008578:	4419      	add	r1, r3
 800857a:	910a      	str	r1, [sp, #40]	@ 0x28
 800857c:	462e      	mov	r6, r5
 800857e:	f04f 0e0a 	mov.w	lr, #10
 8008582:	1c71      	adds	r1, r6, #1
 8008584:	eba1 0c05 	sub.w	ip, r1, r5
 8008588:	4563      	cmp	r3, ip
 800858a:	dc15      	bgt.n	80085b8 <_strtod_l+0x250>
 800858c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008590:	182b      	adds	r3, r5, r0
 8008592:	2b08      	cmp	r3, #8
 8008594:	f105 0501 	add.w	r5, r5, #1
 8008598:	4405      	add	r5, r0
 800859a:	dc1a      	bgt.n	80085d2 <_strtod_l+0x26a>
 800859c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800859e:	230a      	movs	r3, #10
 80085a0:	fb03 2301 	mla	r3, r3, r1, r2
 80085a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085a6:	2300      	movs	r3, #0
 80085a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085aa:	1c51      	adds	r1, r2, #1
 80085ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80085ae:	7852      	ldrb	r2, [r2, #1]
 80085b0:	4618      	mov	r0, r3
 80085b2:	e7c5      	b.n	8008540 <_strtod_l+0x1d8>
 80085b4:	4648      	mov	r0, r9
 80085b6:	e7ce      	b.n	8008556 <_strtod_l+0x1ee>
 80085b8:	2e08      	cmp	r6, #8
 80085ba:	dc05      	bgt.n	80085c8 <_strtod_l+0x260>
 80085bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80085be:	fb0e f606 	mul.w	r6, lr, r6
 80085c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80085c4:	460e      	mov	r6, r1
 80085c6:	e7dc      	b.n	8008582 <_strtod_l+0x21a>
 80085c8:	2910      	cmp	r1, #16
 80085ca:	bfd8      	it	le
 80085cc:	fb0e f707 	mulle.w	r7, lr, r7
 80085d0:	e7f8      	b.n	80085c4 <_strtod_l+0x25c>
 80085d2:	2b0f      	cmp	r3, #15
 80085d4:	bfdc      	itt	le
 80085d6:	230a      	movle	r3, #10
 80085d8:	fb03 2707 	mlale	r7, r3, r7, r2
 80085dc:	e7e3      	b.n	80085a6 <_strtod_l+0x23e>
 80085de:	2300      	movs	r3, #0
 80085e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80085e2:	2301      	movs	r3, #1
 80085e4:	e77a      	b.n	80084dc <_strtod_l+0x174>
 80085e6:	f04f 0c00 	mov.w	ip, #0
 80085ea:	1ca2      	adds	r2, r4, #2
 80085ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ee:	78a2      	ldrb	r2, [r4, #2]
 80085f0:	e782      	b.n	80084f8 <_strtod_l+0x190>
 80085f2:	f04f 0c01 	mov.w	ip, #1
 80085f6:	e7f8      	b.n	80085ea <_strtod_l+0x282>
 80085f8:	08032fec 	.word	0x08032fec
 80085fc:	08032e70 	.word	0x08032e70
 8008600:	7ff00000 	.word	0x7ff00000
 8008604:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008606:	1c51      	adds	r1, r2, #1
 8008608:	9119      	str	r1, [sp, #100]	@ 0x64
 800860a:	7852      	ldrb	r2, [r2, #1]
 800860c:	2a30      	cmp	r2, #48	@ 0x30
 800860e:	d0f9      	beq.n	8008604 <_strtod_l+0x29c>
 8008610:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008614:	2908      	cmp	r1, #8
 8008616:	f63f af75 	bhi.w	8008504 <_strtod_l+0x19c>
 800861a:	3a30      	subs	r2, #48	@ 0x30
 800861c:	9209      	str	r2, [sp, #36]	@ 0x24
 800861e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008620:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008622:	f04f 080a 	mov.w	r8, #10
 8008626:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008628:	1c56      	adds	r6, r2, #1
 800862a:	9619      	str	r6, [sp, #100]	@ 0x64
 800862c:	7852      	ldrb	r2, [r2, #1]
 800862e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008632:	f1be 0f09 	cmp.w	lr, #9
 8008636:	d939      	bls.n	80086ac <_strtod_l+0x344>
 8008638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800863a:	1a76      	subs	r6, r6, r1
 800863c:	2e08      	cmp	r6, #8
 800863e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008642:	dc03      	bgt.n	800864c <_strtod_l+0x2e4>
 8008644:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008646:	4588      	cmp	r8, r1
 8008648:	bfa8      	it	ge
 800864a:	4688      	movge	r8, r1
 800864c:	f1bc 0f00 	cmp.w	ip, #0
 8008650:	d001      	beq.n	8008656 <_strtod_l+0x2ee>
 8008652:	f1c8 0800 	rsb	r8, r8, #0
 8008656:	2d00      	cmp	r5, #0
 8008658:	d14e      	bne.n	80086f8 <_strtod_l+0x390>
 800865a:	9908      	ldr	r1, [sp, #32]
 800865c:	4308      	orrs	r0, r1
 800865e:	f47f aebc 	bne.w	80083da <_strtod_l+0x72>
 8008662:	2b00      	cmp	r3, #0
 8008664:	f47f aed4 	bne.w	8008410 <_strtod_l+0xa8>
 8008668:	2a69      	cmp	r2, #105	@ 0x69
 800866a:	d028      	beq.n	80086be <_strtod_l+0x356>
 800866c:	dc25      	bgt.n	80086ba <_strtod_l+0x352>
 800866e:	2a49      	cmp	r2, #73	@ 0x49
 8008670:	d025      	beq.n	80086be <_strtod_l+0x356>
 8008672:	2a4e      	cmp	r2, #78	@ 0x4e
 8008674:	f47f aecc 	bne.w	8008410 <_strtod_l+0xa8>
 8008678:	499a      	ldr	r1, [pc, #616]	@ (80088e4 <_strtod_l+0x57c>)
 800867a:	a819      	add	r0, sp, #100	@ 0x64
 800867c:	f001 f948 	bl	8009910 <__match>
 8008680:	2800      	cmp	r0, #0
 8008682:	f43f aec5 	beq.w	8008410 <_strtod_l+0xa8>
 8008686:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2b28      	cmp	r3, #40	@ 0x28
 800868c:	d12e      	bne.n	80086ec <_strtod_l+0x384>
 800868e:	4996      	ldr	r1, [pc, #600]	@ (80088e8 <_strtod_l+0x580>)
 8008690:	aa1c      	add	r2, sp, #112	@ 0x70
 8008692:	a819      	add	r0, sp, #100	@ 0x64
 8008694:	f001 f950 	bl	8009938 <__hexnan>
 8008698:	2805      	cmp	r0, #5
 800869a:	d127      	bne.n	80086ec <_strtod_l+0x384>
 800869c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800869e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80086a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80086a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80086aa:	e696      	b.n	80083da <_strtod_l+0x72>
 80086ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086ae:	fb08 2101 	mla	r1, r8, r1, r2
 80086b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80086b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80086b8:	e7b5      	b.n	8008626 <_strtod_l+0x2be>
 80086ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80086bc:	e7da      	b.n	8008674 <_strtod_l+0x30c>
 80086be:	498b      	ldr	r1, [pc, #556]	@ (80088ec <_strtod_l+0x584>)
 80086c0:	a819      	add	r0, sp, #100	@ 0x64
 80086c2:	f001 f925 	bl	8009910 <__match>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f aea2 	beq.w	8008410 <_strtod_l+0xa8>
 80086cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086ce:	4988      	ldr	r1, [pc, #544]	@ (80088f0 <_strtod_l+0x588>)
 80086d0:	3b01      	subs	r3, #1
 80086d2:	a819      	add	r0, sp, #100	@ 0x64
 80086d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80086d6:	f001 f91b 	bl	8009910 <__match>
 80086da:	b910      	cbnz	r0, 80086e2 <_strtod_l+0x37a>
 80086dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086de:	3301      	adds	r3, #1
 80086e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80086e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008900 <_strtod_l+0x598>
 80086e6:	f04f 0a00 	mov.w	sl, #0
 80086ea:	e676      	b.n	80083da <_strtod_l+0x72>
 80086ec:	4881      	ldr	r0, [pc, #516]	@ (80088f4 <_strtod_l+0x58c>)
 80086ee:	f000 fe33 	bl	8009358 <nan>
 80086f2:	ec5b ab10 	vmov	sl, fp, d0
 80086f6:	e670      	b.n	80083da <_strtod_l+0x72>
 80086f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80086fc:	eba8 0303 	sub.w	r3, r8, r3
 8008700:	f1b9 0f00 	cmp.w	r9, #0
 8008704:	bf08      	it	eq
 8008706:	46a9      	moveq	r9, r5
 8008708:	2d10      	cmp	r5, #16
 800870a:	9309      	str	r3, [sp, #36]	@ 0x24
 800870c:	462c      	mov	r4, r5
 800870e:	bfa8      	it	ge
 8008710:	2410      	movge	r4, #16
 8008712:	f7f7 ff07 	bl	8000524 <__aeabi_ui2d>
 8008716:	2d09      	cmp	r5, #9
 8008718:	4682      	mov	sl, r0
 800871a:	468b      	mov	fp, r1
 800871c:	dc13      	bgt.n	8008746 <_strtod_l+0x3de>
 800871e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	f43f ae5a 	beq.w	80083da <_strtod_l+0x72>
 8008726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008728:	dd78      	ble.n	800881c <_strtod_l+0x4b4>
 800872a:	2b16      	cmp	r3, #22
 800872c:	dc5f      	bgt.n	80087ee <_strtod_l+0x486>
 800872e:	4972      	ldr	r1, [pc, #456]	@ (80088f8 <_strtod_l+0x590>)
 8008730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008738:	4652      	mov	r2, sl
 800873a:	465b      	mov	r3, fp
 800873c:	f7f7 ff6c 	bl	8000618 <__aeabi_dmul>
 8008740:	4682      	mov	sl, r0
 8008742:	468b      	mov	fp, r1
 8008744:	e649      	b.n	80083da <_strtod_l+0x72>
 8008746:	4b6c      	ldr	r3, [pc, #432]	@ (80088f8 <_strtod_l+0x590>)
 8008748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800874c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008750:	f7f7 ff62 	bl	8000618 <__aeabi_dmul>
 8008754:	4682      	mov	sl, r0
 8008756:	4638      	mov	r0, r7
 8008758:	468b      	mov	fp, r1
 800875a:	f7f7 fee3 	bl	8000524 <__aeabi_ui2d>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4650      	mov	r0, sl
 8008764:	4659      	mov	r1, fp
 8008766:	f7f7 fda1 	bl	80002ac <__adddf3>
 800876a:	2d0f      	cmp	r5, #15
 800876c:	4682      	mov	sl, r0
 800876e:	468b      	mov	fp, r1
 8008770:	ddd5      	ble.n	800871e <_strtod_l+0x3b6>
 8008772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008774:	1b2c      	subs	r4, r5, r4
 8008776:	441c      	add	r4, r3
 8008778:	2c00      	cmp	r4, #0
 800877a:	f340 8093 	ble.w	80088a4 <_strtod_l+0x53c>
 800877e:	f014 030f 	ands.w	r3, r4, #15
 8008782:	d00a      	beq.n	800879a <_strtod_l+0x432>
 8008784:	495c      	ldr	r1, [pc, #368]	@ (80088f8 <_strtod_l+0x590>)
 8008786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800878a:	4652      	mov	r2, sl
 800878c:	465b      	mov	r3, fp
 800878e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008792:	f7f7 ff41 	bl	8000618 <__aeabi_dmul>
 8008796:	4682      	mov	sl, r0
 8008798:	468b      	mov	fp, r1
 800879a:	f034 040f 	bics.w	r4, r4, #15
 800879e:	d073      	beq.n	8008888 <_strtod_l+0x520>
 80087a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80087a4:	dd49      	ble.n	800883a <_strtod_l+0x4d2>
 80087a6:	2400      	movs	r4, #0
 80087a8:	46a0      	mov	r8, r4
 80087aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087ac:	46a1      	mov	r9, r4
 80087ae:	9a05      	ldr	r2, [sp, #20]
 80087b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008900 <_strtod_l+0x598>
 80087b4:	2322      	movs	r3, #34	@ 0x22
 80087b6:	6013      	str	r3, [r2, #0]
 80087b8:	f04f 0a00 	mov.w	sl, #0
 80087bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f43f ae0b 	beq.w	80083da <_strtod_l+0x72>
 80087c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087c6:	9805      	ldr	r0, [sp, #20]
 80087c8:	f001 f9a4 	bl	8009b14 <_Bfree>
 80087cc:	9805      	ldr	r0, [sp, #20]
 80087ce:	4649      	mov	r1, r9
 80087d0:	f001 f9a0 	bl	8009b14 <_Bfree>
 80087d4:	9805      	ldr	r0, [sp, #20]
 80087d6:	4641      	mov	r1, r8
 80087d8:	f001 f99c 	bl	8009b14 <_Bfree>
 80087dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087de:	9805      	ldr	r0, [sp, #20]
 80087e0:	f001 f998 	bl	8009b14 <_Bfree>
 80087e4:	9805      	ldr	r0, [sp, #20]
 80087e6:	4621      	mov	r1, r4
 80087e8:	f001 f994 	bl	8009b14 <_Bfree>
 80087ec:	e5f5      	b.n	80083da <_strtod_l+0x72>
 80087ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80087f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80087f4:	4293      	cmp	r3, r2
 80087f6:	dbbc      	blt.n	8008772 <_strtod_l+0x40a>
 80087f8:	4c3f      	ldr	r4, [pc, #252]	@ (80088f8 <_strtod_l+0x590>)
 80087fa:	f1c5 050f 	rsb	r5, r5, #15
 80087fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008802:	4652      	mov	r2, sl
 8008804:	465b      	mov	r3, fp
 8008806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800880a:	f7f7 ff05 	bl	8000618 <__aeabi_dmul>
 800880e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008810:	1b5d      	subs	r5, r3, r5
 8008812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800881a:	e78f      	b.n	800873c <_strtod_l+0x3d4>
 800881c:	3316      	adds	r3, #22
 800881e:	dba8      	blt.n	8008772 <_strtod_l+0x40a>
 8008820:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008822:	eba3 0808 	sub.w	r8, r3, r8
 8008826:	4b34      	ldr	r3, [pc, #208]	@ (80088f8 <_strtod_l+0x590>)
 8008828:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800882c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008830:	4650      	mov	r0, sl
 8008832:	4659      	mov	r1, fp
 8008834:	f7f8 f81a 	bl	800086c <__aeabi_ddiv>
 8008838:	e782      	b.n	8008740 <_strtod_l+0x3d8>
 800883a:	2300      	movs	r3, #0
 800883c:	4f2f      	ldr	r7, [pc, #188]	@ (80088fc <_strtod_l+0x594>)
 800883e:	1124      	asrs	r4, r4, #4
 8008840:	4650      	mov	r0, sl
 8008842:	4659      	mov	r1, fp
 8008844:	461e      	mov	r6, r3
 8008846:	2c01      	cmp	r4, #1
 8008848:	dc21      	bgt.n	800888e <_strtod_l+0x526>
 800884a:	b10b      	cbz	r3, 8008850 <_strtod_l+0x4e8>
 800884c:	4682      	mov	sl, r0
 800884e:	468b      	mov	fp, r1
 8008850:	492a      	ldr	r1, [pc, #168]	@ (80088fc <_strtod_l+0x594>)
 8008852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800885a:	4652      	mov	r2, sl
 800885c:	465b      	mov	r3, fp
 800885e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008862:	f7f7 fed9 	bl	8000618 <__aeabi_dmul>
 8008866:	4b26      	ldr	r3, [pc, #152]	@ (8008900 <_strtod_l+0x598>)
 8008868:	460a      	mov	r2, r1
 800886a:	400b      	ands	r3, r1
 800886c:	4925      	ldr	r1, [pc, #148]	@ (8008904 <_strtod_l+0x59c>)
 800886e:	428b      	cmp	r3, r1
 8008870:	4682      	mov	sl, r0
 8008872:	d898      	bhi.n	80087a6 <_strtod_l+0x43e>
 8008874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008878:	428b      	cmp	r3, r1
 800887a:	bf86      	itte	hi
 800887c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008908 <_strtod_l+0x5a0>
 8008880:	f04f 3aff 	movhi.w	sl, #4294967295
 8008884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008888:	2300      	movs	r3, #0
 800888a:	9308      	str	r3, [sp, #32]
 800888c:	e076      	b.n	800897c <_strtod_l+0x614>
 800888e:	07e2      	lsls	r2, r4, #31
 8008890:	d504      	bpl.n	800889c <_strtod_l+0x534>
 8008892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008896:	f7f7 febf 	bl	8000618 <__aeabi_dmul>
 800889a:	2301      	movs	r3, #1
 800889c:	3601      	adds	r6, #1
 800889e:	1064      	asrs	r4, r4, #1
 80088a0:	3708      	adds	r7, #8
 80088a2:	e7d0      	b.n	8008846 <_strtod_l+0x4de>
 80088a4:	d0f0      	beq.n	8008888 <_strtod_l+0x520>
 80088a6:	4264      	negs	r4, r4
 80088a8:	f014 020f 	ands.w	r2, r4, #15
 80088ac:	d00a      	beq.n	80088c4 <_strtod_l+0x55c>
 80088ae:	4b12      	ldr	r3, [pc, #72]	@ (80088f8 <_strtod_l+0x590>)
 80088b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088b4:	4650      	mov	r0, sl
 80088b6:	4659      	mov	r1, fp
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 ffd6 	bl	800086c <__aeabi_ddiv>
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	1124      	asrs	r4, r4, #4
 80088c6:	d0df      	beq.n	8008888 <_strtod_l+0x520>
 80088c8:	2c1f      	cmp	r4, #31
 80088ca:	dd1f      	ble.n	800890c <_strtod_l+0x5a4>
 80088cc:	2400      	movs	r4, #0
 80088ce:	46a0      	mov	r8, r4
 80088d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088d2:	46a1      	mov	r9, r4
 80088d4:	9a05      	ldr	r2, [sp, #20]
 80088d6:	2322      	movs	r3, #34	@ 0x22
 80088d8:	f04f 0a00 	mov.w	sl, #0
 80088dc:	f04f 0b00 	mov.w	fp, #0
 80088e0:	6013      	str	r3, [r2, #0]
 80088e2:	e76b      	b.n	80087bc <_strtod_l+0x454>
 80088e4:	08032e7b 	.word	0x08032e7b
 80088e8:	08032fd8 	.word	0x08032fd8
 80088ec:	08032e72 	.word	0x08032e72
 80088f0:	08032e75 	.word	0x08032e75
 80088f4:	08032fd5 	.word	0x08032fd5
 80088f8:	08033160 	.word	0x08033160
 80088fc:	08033138 	.word	0x08033138
 8008900:	7ff00000 	.word	0x7ff00000
 8008904:	7ca00000 	.word	0x7ca00000
 8008908:	7fefffff 	.word	0x7fefffff
 800890c:	f014 0310 	ands.w	r3, r4, #16
 8008910:	bf18      	it	ne
 8008912:	236a      	movne	r3, #106	@ 0x6a
 8008914:	4ea9      	ldr	r6, [pc, #676]	@ (8008bbc <_strtod_l+0x854>)
 8008916:	9308      	str	r3, [sp, #32]
 8008918:	4650      	mov	r0, sl
 800891a:	4659      	mov	r1, fp
 800891c:	2300      	movs	r3, #0
 800891e:	07e7      	lsls	r7, r4, #31
 8008920:	d504      	bpl.n	800892c <_strtod_l+0x5c4>
 8008922:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008926:	f7f7 fe77 	bl	8000618 <__aeabi_dmul>
 800892a:	2301      	movs	r3, #1
 800892c:	1064      	asrs	r4, r4, #1
 800892e:	f106 0608 	add.w	r6, r6, #8
 8008932:	d1f4      	bne.n	800891e <_strtod_l+0x5b6>
 8008934:	b10b      	cbz	r3, 800893a <_strtod_l+0x5d2>
 8008936:	4682      	mov	sl, r0
 8008938:	468b      	mov	fp, r1
 800893a:	9b08      	ldr	r3, [sp, #32]
 800893c:	b1b3      	cbz	r3, 800896c <_strtod_l+0x604>
 800893e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008946:	2b00      	cmp	r3, #0
 8008948:	4659      	mov	r1, fp
 800894a:	dd0f      	ble.n	800896c <_strtod_l+0x604>
 800894c:	2b1f      	cmp	r3, #31
 800894e:	dd56      	ble.n	80089fe <_strtod_l+0x696>
 8008950:	2b34      	cmp	r3, #52	@ 0x34
 8008952:	bfde      	ittt	le
 8008954:	f04f 33ff 	movle.w	r3, #4294967295
 8008958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800895c:	4093      	lslle	r3, r2
 800895e:	f04f 0a00 	mov.w	sl, #0
 8008962:	bfcc      	ite	gt
 8008964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008968:	ea03 0b01 	andle.w	fp, r3, r1
 800896c:	2200      	movs	r2, #0
 800896e:	2300      	movs	r3, #0
 8008970:	4650      	mov	r0, sl
 8008972:	4659      	mov	r1, fp
 8008974:	f7f8 f8b8 	bl	8000ae8 <__aeabi_dcmpeq>
 8008978:	2800      	cmp	r0, #0
 800897a:	d1a7      	bne.n	80088cc <_strtod_l+0x564>
 800897c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008982:	9805      	ldr	r0, [sp, #20]
 8008984:	462b      	mov	r3, r5
 8008986:	464a      	mov	r2, r9
 8008988:	f001 f92c 	bl	8009be4 <__s2b>
 800898c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800898e:	2800      	cmp	r0, #0
 8008990:	f43f af09 	beq.w	80087a6 <_strtod_l+0x43e>
 8008994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008996:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008998:	2a00      	cmp	r2, #0
 800899a:	eba3 0308 	sub.w	r3, r3, r8
 800899e:	bfa8      	it	ge
 80089a0:	2300      	movge	r3, #0
 80089a2:	9312      	str	r3, [sp, #72]	@ 0x48
 80089a4:	2400      	movs	r4, #0
 80089a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089aa:	9316      	str	r3, [sp, #88]	@ 0x58
 80089ac:	46a0      	mov	r8, r4
 80089ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b0:	9805      	ldr	r0, [sp, #20]
 80089b2:	6859      	ldr	r1, [r3, #4]
 80089b4:	f001 f86e 	bl	8009a94 <_Balloc>
 80089b8:	4681      	mov	r9, r0
 80089ba:	2800      	cmp	r0, #0
 80089bc:	f43f aef7 	beq.w	80087ae <_strtod_l+0x446>
 80089c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	3202      	adds	r2, #2
 80089c6:	f103 010c 	add.w	r1, r3, #12
 80089ca:	0092      	lsls	r2, r2, #2
 80089cc:	300c      	adds	r0, #12
 80089ce:	f000 fcb4 	bl	800933a <memcpy>
 80089d2:	ec4b ab10 	vmov	d0, sl, fp
 80089d6:	9805      	ldr	r0, [sp, #20]
 80089d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80089da:	a91b      	add	r1, sp, #108	@ 0x6c
 80089dc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80089e0:	f001 fc34 	bl	800a24c <__d2b>
 80089e4:	901a      	str	r0, [sp, #104]	@ 0x68
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f43f aee1 	beq.w	80087ae <_strtod_l+0x446>
 80089ec:	9805      	ldr	r0, [sp, #20]
 80089ee:	2101      	movs	r1, #1
 80089f0:	f001 f98e 	bl	8009d10 <__i2b>
 80089f4:	4680      	mov	r8, r0
 80089f6:	b948      	cbnz	r0, 8008a0c <_strtod_l+0x6a4>
 80089f8:	f04f 0800 	mov.w	r8, #0
 80089fc:	e6d7      	b.n	80087ae <_strtod_l+0x446>
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	fa02 f303 	lsl.w	r3, r2, r3
 8008a06:	ea03 0a0a 	and.w	sl, r3, sl
 8008a0a:	e7af      	b.n	800896c <_strtod_l+0x604>
 8008a0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a10:	2d00      	cmp	r5, #0
 8008a12:	bfab      	itete	ge
 8008a14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008a1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008a1c:	bfac      	ite	ge
 8008a1e:	18ef      	addge	r7, r5, r3
 8008a20:	1b5e      	sublt	r6, r3, r5
 8008a22:	9b08      	ldr	r3, [sp, #32]
 8008a24:	1aed      	subs	r5, r5, r3
 8008a26:	4415      	add	r5, r2
 8008a28:	4b65      	ldr	r3, [pc, #404]	@ (8008bc0 <_strtod_l+0x858>)
 8008a2a:	3d01      	subs	r5, #1
 8008a2c:	429d      	cmp	r5, r3
 8008a2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a32:	da50      	bge.n	8008ad6 <_strtod_l+0x76e>
 8008a34:	1b5b      	subs	r3, r3, r5
 8008a36:	2b1f      	cmp	r3, #31
 8008a38:	eba2 0203 	sub.w	r2, r2, r3
 8008a3c:	f04f 0101 	mov.w	r1, #1
 8008a40:	dc3d      	bgt.n	8008abe <_strtod_l+0x756>
 8008a42:	fa01 f303 	lsl.w	r3, r1, r3
 8008a46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a4c:	18bd      	adds	r5, r7, r2
 8008a4e:	9b08      	ldr	r3, [sp, #32]
 8008a50:	42af      	cmp	r7, r5
 8008a52:	4416      	add	r6, r2
 8008a54:	441e      	add	r6, r3
 8008a56:	463b      	mov	r3, r7
 8008a58:	bfa8      	it	ge
 8008a5a:	462b      	movge	r3, r5
 8008a5c:	42b3      	cmp	r3, r6
 8008a5e:	bfa8      	it	ge
 8008a60:	4633      	movge	r3, r6
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	bfc2      	ittt	gt
 8008a66:	1aed      	subgt	r5, r5, r3
 8008a68:	1af6      	subgt	r6, r6, r3
 8008a6a:	1aff      	subgt	r7, r7, r3
 8008a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd16      	ble.n	8008aa0 <_strtod_l+0x738>
 8008a72:	4641      	mov	r1, r8
 8008a74:	9805      	ldr	r0, [sp, #20]
 8008a76:	461a      	mov	r2, r3
 8008a78:	f001 fa02 	bl	8009e80 <__pow5mult>
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0ba      	beq.n	80089f8 <_strtod_l+0x690>
 8008a82:	4601      	mov	r1, r0
 8008a84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a86:	9805      	ldr	r0, [sp, #20]
 8008a88:	f001 f958 	bl	8009d3c <__multiply>
 8008a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f ae8d 	beq.w	80087ae <_strtod_l+0x446>
 8008a94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	f001 f83c 	bl	8009b14 <_Bfree>
 8008a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	dc1d      	bgt.n	8008ae0 <_strtod_l+0x778>
 8008aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	dd23      	ble.n	8008af2 <_strtod_l+0x78a>
 8008aaa:	4649      	mov	r1, r9
 8008aac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008aae:	9805      	ldr	r0, [sp, #20]
 8008ab0:	f001 f9e6 	bl	8009e80 <__pow5mult>
 8008ab4:	4681      	mov	r9, r0
 8008ab6:	b9e0      	cbnz	r0, 8008af2 <_strtod_l+0x78a>
 8008ab8:	f04f 0900 	mov.w	r9, #0
 8008abc:	e677      	b.n	80087ae <_strtod_l+0x446>
 8008abe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ac2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008ac6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008aca:	35e2      	adds	r5, #226	@ 0xe2
 8008acc:	fa01 f305 	lsl.w	r3, r1, r5
 8008ad0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ad2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008ad4:	e7ba      	b.n	8008a4c <_strtod_l+0x6e4>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ada:	2301      	movs	r3, #1
 8008adc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ade:	e7b5      	b.n	8008a4c <_strtod_l+0x6e4>
 8008ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	f001 fa25 	bl	8009f34 <__lshift>
 8008aea:	901a      	str	r0, [sp, #104]	@ 0x68
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d1d9      	bne.n	8008aa4 <_strtod_l+0x73c>
 8008af0:	e65d      	b.n	80087ae <_strtod_l+0x446>
 8008af2:	2e00      	cmp	r6, #0
 8008af4:	dd07      	ble.n	8008b06 <_strtod_l+0x79e>
 8008af6:	4649      	mov	r1, r9
 8008af8:	9805      	ldr	r0, [sp, #20]
 8008afa:	4632      	mov	r2, r6
 8008afc:	f001 fa1a 	bl	8009f34 <__lshift>
 8008b00:	4681      	mov	r9, r0
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d0d8      	beq.n	8008ab8 <_strtod_l+0x750>
 8008b06:	2f00      	cmp	r7, #0
 8008b08:	dd08      	ble.n	8008b1c <_strtod_l+0x7b4>
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	9805      	ldr	r0, [sp, #20]
 8008b0e:	463a      	mov	r2, r7
 8008b10:	f001 fa10 	bl	8009f34 <__lshift>
 8008b14:	4680      	mov	r8, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f ae49 	beq.w	80087ae <_strtod_l+0x446>
 8008b1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b1e:	9805      	ldr	r0, [sp, #20]
 8008b20:	464a      	mov	r2, r9
 8008b22:	f001 fa8f 	bl	800a044 <__mdiff>
 8008b26:	4604      	mov	r4, r0
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	f43f ae40 	beq.w	80087ae <_strtod_l+0x446>
 8008b2e:	68c3      	ldr	r3, [r0, #12]
 8008b30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b32:	2300      	movs	r3, #0
 8008b34:	60c3      	str	r3, [r0, #12]
 8008b36:	4641      	mov	r1, r8
 8008b38:	f001 fa68 	bl	800a00c <__mcmp>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	da45      	bge.n	8008bcc <_strtod_l+0x864>
 8008b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b42:	ea53 030a 	orrs.w	r3, r3, sl
 8008b46:	d16b      	bne.n	8008c20 <_strtod_l+0x8b8>
 8008b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d167      	bne.n	8008c20 <_strtod_l+0x8b8>
 8008b50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b54:	0d1b      	lsrs	r3, r3, #20
 8008b56:	051b      	lsls	r3, r3, #20
 8008b58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b5c:	d960      	bls.n	8008c20 <_strtod_l+0x8b8>
 8008b5e:	6963      	ldr	r3, [r4, #20]
 8008b60:	b913      	cbnz	r3, 8008b68 <_strtod_l+0x800>
 8008b62:	6923      	ldr	r3, [r4, #16]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	dd5b      	ble.n	8008c20 <_strtod_l+0x8b8>
 8008b68:	4621      	mov	r1, r4
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	9805      	ldr	r0, [sp, #20]
 8008b6e:	f001 f9e1 	bl	8009f34 <__lshift>
 8008b72:	4641      	mov	r1, r8
 8008b74:	4604      	mov	r4, r0
 8008b76:	f001 fa49 	bl	800a00c <__mcmp>
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	dd50      	ble.n	8008c20 <_strtod_l+0x8b8>
 8008b7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b82:	9a08      	ldr	r2, [sp, #32]
 8008b84:	0d1b      	lsrs	r3, r3, #20
 8008b86:	051b      	lsls	r3, r3, #20
 8008b88:	2a00      	cmp	r2, #0
 8008b8a:	d06a      	beq.n	8008c62 <_strtod_l+0x8fa>
 8008b8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b90:	d867      	bhi.n	8008c62 <_strtod_l+0x8fa>
 8008b92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b96:	f67f ae9d 	bls.w	80088d4 <_strtod_l+0x56c>
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008bc4 <_strtod_l+0x85c>)
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	4659      	mov	r1, fp
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f7f7 fd39 	bl	8000618 <__aeabi_dmul>
 8008ba6:	4b08      	ldr	r3, [pc, #32]	@ (8008bc8 <_strtod_l+0x860>)
 8008ba8:	400b      	ands	r3, r1
 8008baa:	4682      	mov	sl, r0
 8008bac:	468b      	mov	fp, r1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f47f ae08 	bne.w	80087c4 <_strtod_l+0x45c>
 8008bb4:	9a05      	ldr	r2, [sp, #20]
 8008bb6:	2322      	movs	r3, #34	@ 0x22
 8008bb8:	6013      	str	r3, [r2, #0]
 8008bba:	e603      	b.n	80087c4 <_strtod_l+0x45c>
 8008bbc:	08033000 	.word	0x08033000
 8008bc0:	fffffc02 	.word	0xfffffc02
 8008bc4:	39500000 	.word	0x39500000
 8008bc8:	7ff00000 	.word	0x7ff00000
 8008bcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008bd0:	d165      	bne.n	8008c9e <_strtod_l+0x936>
 8008bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd8:	b35a      	cbz	r2, 8008c32 <_strtod_l+0x8ca>
 8008bda:	4a9f      	ldr	r2, [pc, #636]	@ (8008e58 <_strtod_l+0xaf0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d12b      	bne.n	8008c38 <_strtod_l+0x8d0>
 8008be0:	9b08      	ldr	r3, [sp, #32]
 8008be2:	4651      	mov	r1, sl
 8008be4:	b303      	cbz	r3, 8008c28 <_strtod_l+0x8c0>
 8008be6:	4b9d      	ldr	r3, [pc, #628]	@ (8008e5c <_strtod_l+0xaf4>)
 8008be8:	465a      	mov	r2, fp
 8008bea:	4013      	ands	r3, r2
 8008bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf4:	d81b      	bhi.n	8008c2e <_strtod_l+0x8c6>
 8008bf6:	0d1b      	lsrs	r3, r3, #20
 8008bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008c00:	4299      	cmp	r1, r3
 8008c02:	d119      	bne.n	8008c38 <_strtod_l+0x8d0>
 8008c04:	4b96      	ldr	r3, [pc, #600]	@ (8008e60 <_strtod_l+0xaf8>)
 8008c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d102      	bne.n	8008c12 <_strtod_l+0x8aa>
 8008c0c:	3101      	adds	r1, #1
 8008c0e:	f43f adce 	beq.w	80087ae <_strtod_l+0x446>
 8008c12:	4b92      	ldr	r3, [pc, #584]	@ (8008e5c <_strtod_l+0xaf4>)
 8008c14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c16:	401a      	ands	r2, r3
 8008c18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008c1c:	f04f 0a00 	mov.w	sl, #0
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1b9      	bne.n	8008b9a <_strtod_l+0x832>
 8008c26:	e5cd      	b.n	80087c4 <_strtod_l+0x45c>
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2c:	e7e8      	b.n	8008c00 <_strtod_l+0x898>
 8008c2e:	4613      	mov	r3, r2
 8008c30:	e7e6      	b.n	8008c00 <_strtod_l+0x898>
 8008c32:	ea53 030a 	orrs.w	r3, r3, sl
 8008c36:	d0a2      	beq.n	8008b7e <_strtod_l+0x816>
 8008c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c3a:	b1db      	cbz	r3, 8008c74 <_strtod_l+0x90c>
 8008c3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c3e:	4213      	tst	r3, r2
 8008c40:	d0ee      	beq.n	8008c20 <_strtod_l+0x8b8>
 8008c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c44:	9a08      	ldr	r2, [sp, #32]
 8008c46:	4650      	mov	r0, sl
 8008c48:	4659      	mov	r1, fp
 8008c4a:	b1bb      	cbz	r3, 8008c7c <_strtod_l+0x914>
 8008c4c:	f7ff fb6e 	bl	800832c <sulp>
 8008c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c54:	ec53 2b10 	vmov	r2, r3, d0
 8008c58:	f7f7 fb28 	bl	80002ac <__adddf3>
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	468b      	mov	fp, r1
 8008c60:	e7de      	b.n	8008c20 <_strtod_l+0x8b8>
 8008c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8008c72:	e7d5      	b.n	8008c20 <_strtod_l+0x8b8>
 8008c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c76:	ea13 0f0a 	tst.w	r3, sl
 8008c7a:	e7e1      	b.n	8008c40 <_strtod_l+0x8d8>
 8008c7c:	f7ff fb56 	bl	800832c <sulp>
 8008c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c84:	ec53 2b10 	vmov	r2, r3, d0
 8008c88:	f7f7 fb0e 	bl	80002a8 <__aeabi_dsub>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	f7f7 ff28 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0c1      	beq.n	8008c20 <_strtod_l+0x8b8>
 8008c9c:	e61a      	b.n	80088d4 <_strtod_l+0x56c>
 8008c9e:	4641      	mov	r1, r8
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 fb2b 	bl	800a2fc <__ratio>
 8008ca6:	ec57 6b10 	vmov	r6, r7, d0
 8008caa:	2200      	movs	r2, #0
 8008cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	4639      	mov	r1, r7
 8008cb4:	f7f7 ff2c 	bl	8000b10 <__aeabi_dcmple>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d06f      	beq.n	8008d9c <_strtod_l+0xa34>
 8008cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d17a      	bne.n	8008db8 <_strtod_l+0xa50>
 8008cc2:	f1ba 0f00 	cmp.w	sl, #0
 8008cc6:	d158      	bne.n	8008d7a <_strtod_l+0xa12>
 8008cc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d15a      	bne.n	8008d88 <_strtod_l+0xa20>
 8008cd2:	4b64      	ldr	r3, [pc, #400]	@ (8008e64 <_strtod_l+0xafc>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	4639      	mov	r1, r7
 8008cda:	f7f7 ff0f 	bl	8000afc <__aeabi_dcmplt>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d159      	bne.n	8008d96 <_strtod_l+0xa2e>
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	4b60      	ldr	r3, [pc, #384]	@ (8008e68 <_strtod_l+0xb00>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f7f7 fc95 	bl	8000618 <__aeabi_dmul>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008cf6:	9606      	str	r6, [sp, #24]
 8008cf8:	9307      	str	r3, [sp, #28]
 8008cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cfe:	4d57      	ldr	r5, [pc, #348]	@ (8008e5c <_strtod_l+0xaf4>)
 8008d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d06:	401d      	ands	r5, r3
 8008d08:	4b58      	ldr	r3, [pc, #352]	@ (8008e6c <_strtod_l+0xb04>)
 8008d0a:	429d      	cmp	r5, r3
 8008d0c:	f040 80b2 	bne.w	8008e74 <_strtod_l+0xb0c>
 8008d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d16:	ec4b ab10 	vmov	d0, sl, fp
 8008d1a:	f001 fa27 	bl	800a16c <__ulp>
 8008d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d22:	ec51 0b10 	vmov	r0, r1, d0
 8008d26:	f7f7 fc77 	bl	8000618 <__aeabi_dmul>
 8008d2a:	4652      	mov	r2, sl
 8008d2c:	465b      	mov	r3, fp
 8008d2e:	f7f7 fabd 	bl	80002ac <__adddf3>
 8008d32:	460b      	mov	r3, r1
 8008d34:	4949      	ldr	r1, [pc, #292]	@ (8008e5c <_strtod_l+0xaf4>)
 8008d36:	4a4e      	ldr	r2, [pc, #312]	@ (8008e70 <_strtod_l+0xb08>)
 8008d38:	4019      	ands	r1, r3
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	4682      	mov	sl, r0
 8008d3e:	d942      	bls.n	8008dc6 <_strtod_l+0xa5e>
 8008d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d42:	4b47      	ldr	r3, [pc, #284]	@ (8008e60 <_strtod_l+0xaf8>)
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d103      	bne.n	8008d50 <_strtod_l+0x9e8>
 8008d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f43f ad2f 	beq.w	80087ae <_strtod_l+0x446>
 8008d50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008e60 <_strtod_l+0xaf8>
 8008d54:	f04f 3aff 	mov.w	sl, #4294967295
 8008d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d5a:	9805      	ldr	r0, [sp, #20]
 8008d5c:	f000 feda 	bl	8009b14 <_Bfree>
 8008d60:	9805      	ldr	r0, [sp, #20]
 8008d62:	4649      	mov	r1, r9
 8008d64:	f000 fed6 	bl	8009b14 <_Bfree>
 8008d68:	9805      	ldr	r0, [sp, #20]
 8008d6a:	4641      	mov	r1, r8
 8008d6c:	f000 fed2 	bl	8009b14 <_Bfree>
 8008d70:	9805      	ldr	r0, [sp, #20]
 8008d72:	4621      	mov	r1, r4
 8008d74:	f000 fece 	bl	8009b14 <_Bfree>
 8008d78:	e619      	b.n	80089ae <_strtod_l+0x646>
 8008d7a:	f1ba 0f01 	cmp.w	sl, #1
 8008d7e:	d103      	bne.n	8008d88 <_strtod_l+0xa20>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f43f ada6 	beq.w	80088d4 <_strtod_l+0x56c>
 8008d88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008e38 <_strtod_l+0xad0>
 8008d8c:	4f35      	ldr	r7, [pc, #212]	@ (8008e64 <_strtod_l+0xafc>)
 8008d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d92:	2600      	movs	r6, #0
 8008d94:	e7b1      	b.n	8008cfa <_strtod_l+0x992>
 8008d96:	4f34      	ldr	r7, [pc, #208]	@ (8008e68 <_strtod_l+0xb00>)
 8008d98:	2600      	movs	r6, #0
 8008d9a:	e7aa      	b.n	8008cf2 <_strtod_l+0x98a>
 8008d9c:	4b32      	ldr	r3, [pc, #200]	@ (8008e68 <_strtod_l+0xb00>)
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	2200      	movs	r2, #0
 8008da4:	f7f7 fc38 	bl	8000618 <__aeabi_dmul>
 8008da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d09f      	beq.n	8008cf2 <_strtod_l+0x98a>
 8008db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008db6:	e7a0      	b.n	8008cfa <_strtod_l+0x992>
 8008db8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008e40 <_strtod_l+0xad8>
 8008dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dc0:	ec57 6b17 	vmov	r6, r7, d7
 8008dc4:	e799      	b.n	8008cfa <_strtod_l+0x992>
 8008dc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1c1      	bne.n	8008d58 <_strtod_l+0x9f0>
 8008dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008dd8:	0d1b      	lsrs	r3, r3, #20
 8008dda:	051b      	lsls	r3, r3, #20
 8008ddc:	429d      	cmp	r5, r3
 8008dde:	d1bb      	bne.n	8008d58 <_strtod_l+0x9f0>
 8008de0:	4630      	mov	r0, r6
 8008de2:	4639      	mov	r1, r7
 8008de4:	f7f7 ff12 	bl	8000c0c <__aeabi_d2lz>
 8008de8:	f7f7 fbe8 	bl	80005bc <__aeabi_l2d>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fa58 	bl	80002a8 <__aeabi_dsub>
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e06:	ea46 060a 	orr.w	r6, r6, sl
 8008e0a:	431e      	orrs	r6, r3
 8008e0c:	d06f      	beq.n	8008eee <_strtod_l+0xb86>
 8008e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e48 <_strtod_l+0xae0>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fe72 	bl	8000afc <__aeabi_dcmplt>
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	f47f acd3 	bne.w	80087c4 <_strtod_l+0x45c>
 8008e1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008e50 <_strtod_l+0xae8>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e28:	f7f7 fe86 	bl	8000b38 <__aeabi_dcmpgt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d093      	beq.n	8008d58 <_strtod_l+0x9f0>
 8008e30:	e4c8      	b.n	80087c4 <_strtod_l+0x45c>
 8008e32:	bf00      	nop
 8008e34:	f3af 8000 	nop.w
 8008e38:	00000000 	.word	0x00000000
 8008e3c:	bff00000 	.word	0xbff00000
 8008e40:	00000000 	.word	0x00000000
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	94a03595 	.word	0x94a03595
 8008e4c:	3fdfffff 	.word	0x3fdfffff
 8008e50:	35afe535 	.word	0x35afe535
 8008e54:	3fe00000 	.word	0x3fe00000
 8008e58:	000fffff 	.word	0x000fffff
 8008e5c:	7ff00000 	.word	0x7ff00000
 8008e60:	7fefffff 	.word	0x7fefffff
 8008e64:	3ff00000 	.word	0x3ff00000
 8008e68:	3fe00000 	.word	0x3fe00000
 8008e6c:	7fe00000 	.word	0x7fe00000
 8008e70:	7c9fffff 	.word	0x7c9fffff
 8008e74:	9b08      	ldr	r3, [sp, #32]
 8008e76:	b323      	cbz	r3, 8008ec2 <_strtod_l+0xb5a>
 8008e78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008e7c:	d821      	bhi.n	8008ec2 <_strtod_l+0xb5a>
 8008e7e:	a328      	add	r3, pc, #160	@ (adr r3, 8008f20 <_strtod_l+0xbb8>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	4630      	mov	r0, r6
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fe42 	bl	8000b10 <__aeabi_dcmple>
 8008e8c:	b1a0      	cbz	r0, 8008eb8 <_strtod_l+0xb50>
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4630      	mov	r0, r6
 8008e92:	f7f7 fe83 	bl	8000b9c <__aeabi_d2uiz>
 8008e96:	2801      	cmp	r0, #1
 8008e98:	bf38      	it	cc
 8008e9a:	2001      	movcc	r0, #1
 8008e9c:	f7f7 fb42 	bl	8000524 <__aeabi_ui2d>
 8008ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	460f      	mov	r7, r1
 8008ea6:	b9fb      	cbnz	r3, 8008ee8 <_strtod_l+0xb80>
 8008ea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008eac:	9014      	str	r0, [sp, #80]	@ 0x50
 8008eae:	9315      	str	r3, [sp, #84]	@ 0x54
 8008eb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008eba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008ebe:	1b5b      	subs	r3, r3, r5
 8008ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008eca:	f001 f94f 	bl	800a16c <__ulp>
 8008ece:	4650      	mov	r0, sl
 8008ed0:	ec53 2b10 	vmov	r2, r3, d0
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	f7f7 fb9f 	bl	8000618 <__aeabi_dmul>
 8008eda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ede:	f7f7 f9e5 	bl	80002ac <__adddf3>
 8008ee2:	4682      	mov	sl, r0
 8008ee4:	468b      	mov	fp, r1
 8008ee6:	e770      	b.n	8008dca <_strtod_l+0xa62>
 8008ee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008eec:	e7e0      	b.n	8008eb0 <_strtod_l+0xb48>
 8008eee:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f28 <_strtod_l+0xbc0>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 fe02 	bl	8000afc <__aeabi_dcmplt>
 8008ef8:	e798      	b.n	8008e2c <_strtod_l+0xac4>
 8008efa:	2300      	movs	r3, #0
 8008efc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008efe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f02:	6013      	str	r3, [r2, #0]
 8008f04:	f7ff ba6d 	b.w	80083e2 <_strtod_l+0x7a>
 8008f08:	2a65      	cmp	r2, #101	@ 0x65
 8008f0a:	f43f ab68 	beq.w	80085de <_strtod_l+0x276>
 8008f0e:	2a45      	cmp	r2, #69	@ 0x45
 8008f10:	f43f ab65 	beq.w	80085de <_strtod_l+0x276>
 8008f14:	2301      	movs	r3, #1
 8008f16:	f7ff bba0 	b.w	800865a <_strtod_l+0x2f2>
 8008f1a:	bf00      	nop
 8008f1c:	f3af 8000 	nop.w
 8008f20:	ffc00000 	.word	0xffc00000
 8008f24:	41dfffff 	.word	0x41dfffff
 8008f28:	94a03595 	.word	0x94a03595
 8008f2c:	3fcfffff 	.word	0x3fcfffff

08008f30 <strtod>:
 8008f30:	460a      	mov	r2, r1
 8008f32:	4601      	mov	r1, r0
 8008f34:	4802      	ldr	r0, [pc, #8]	@ (8008f40 <strtod+0x10>)
 8008f36:	4b03      	ldr	r3, [pc, #12]	@ (8008f44 <strtod+0x14>)
 8008f38:	6800      	ldr	r0, [r0, #0]
 8008f3a:	f7ff ba15 	b.w	8008368 <_strtod_l>
 8008f3e:	bf00      	nop
 8008f40:	200001e0 	.word	0x200001e0
 8008f44:	20000074 	.word	0x20000074

08008f48 <std>:
 8008f48:	2300      	movs	r3, #0
 8008f4a:	b510      	push	{r4, lr}
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f56:	6083      	str	r3, [r0, #8]
 8008f58:	8181      	strh	r1, [r0, #12]
 8008f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f5c:	81c2      	strh	r2, [r0, #14]
 8008f5e:	6183      	str	r3, [r0, #24]
 8008f60:	4619      	mov	r1, r3
 8008f62:	2208      	movs	r2, #8
 8008f64:	305c      	adds	r0, #92	@ 0x5c
 8008f66:	f000 f915 	bl	8009194 <memset>
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa0 <std+0x58>)
 8008f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa4 <std+0x5c>)
 8008f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f72:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <std+0x60>)
 8008f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f76:	4b0d      	ldr	r3, [pc, #52]	@ (8008fac <std+0x64>)
 8008f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb0 <std+0x68>)
 8008f7c:	6224      	str	r4, [r4, #32]
 8008f7e:	429c      	cmp	r4, r3
 8008f80:	d006      	beq.n	8008f90 <std+0x48>
 8008f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f86:	4294      	cmp	r4, r2
 8008f88:	d002      	beq.n	8008f90 <std+0x48>
 8008f8a:	33d0      	adds	r3, #208	@ 0xd0
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d105      	bne.n	8008f9c <std+0x54>
 8008f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f98:	f000 b9c4 	b.w	8009324 <__retarget_lock_init_recursive>
 8008f9c:	bd10      	pop	{r4, pc}
 8008f9e:	bf00      	nop
 8008fa0:	080090cd 	.word	0x080090cd
 8008fa4:	080090ef 	.word	0x080090ef
 8008fa8:	08009127 	.word	0x08009127
 8008fac:	0800914b 	.word	0x0800914b
 8008fb0:	200009c4 	.word	0x200009c4

08008fb4 <stdio_exit_handler>:
 8008fb4:	4a02      	ldr	r2, [pc, #8]	@ (8008fc0 <stdio_exit_handler+0xc>)
 8008fb6:	4903      	ldr	r1, [pc, #12]	@ (8008fc4 <stdio_exit_handler+0x10>)
 8008fb8:	4803      	ldr	r0, [pc, #12]	@ (8008fc8 <stdio_exit_handler+0x14>)
 8008fba:	f000 b869 	b.w	8009090 <_fwalk_sglue>
 8008fbe:	bf00      	nop
 8008fc0:	20000068 	.word	0x20000068
 8008fc4:	0800aae1 	.word	0x0800aae1
 8008fc8:	200001e4 	.word	0x200001e4

08008fcc <cleanup_stdio>:
 8008fcc:	6841      	ldr	r1, [r0, #4]
 8008fce:	4b0c      	ldr	r3, [pc, #48]	@ (8009000 <cleanup_stdio+0x34>)
 8008fd0:	4299      	cmp	r1, r3
 8008fd2:	b510      	push	{r4, lr}
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	d001      	beq.n	8008fdc <cleanup_stdio+0x10>
 8008fd8:	f001 fd82 	bl	800aae0 <_fflush_r>
 8008fdc:	68a1      	ldr	r1, [r4, #8]
 8008fde:	4b09      	ldr	r3, [pc, #36]	@ (8009004 <cleanup_stdio+0x38>)
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	d002      	beq.n	8008fea <cleanup_stdio+0x1e>
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f001 fd7b 	bl	800aae0 <_fflush_r>
 8008fea:	68e1      	ldr	r1, [r4, #12]
 8008fec:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <cleanup_stdio+0x3c>)
 8008fee:	4299      	cmp	r1, r3
 8008ff0:	d004      	beq.n	8008ffc <cleanup_stdio+0x30>
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ff8:	f001 bd72 	b.w	800aae0 <_fflush_r>
 8008ffc:	bd10      	pop	{r4, pc}
 8008ffe:	bf00      	nop
 8009000:	200009c4 	.word	0x200009c4
 8009004:	20000a2c 	.word	0x20000a2c
 8009008:	20000a94 	.word	0x20000a94

0800900c <global_stdio_init.part.0>:
 800900c:	b510      	push	{r4, lr}
 800900e:	4b0b      	ldr	r3, [pc, #44]	@ (800903c <global_stdio_init.part.0+0x30>)
 8009010:	4c0b      	ldr	r4, [pc, #44]	@ (8009040 <global_stdio_init.part.0+0x34>)
 8009012:	4a0c      	ldr	r2, [pc, #48]	@ (8009044 <global_stdio_init.part.0+0x38>)
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	4620      	mov	r0, r4
 8009018:	2200      	movs	r2, #0
 800901a:	2104      	movs	r1, #4
 800901c:	f7ff ff94 	bl	8008f48 <std>
 8009020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009024:	2201      	movs	r2, #1
 8009026:	2109      	movs	r1, #9
 8009028:	f7ff ff8e 	bl	8008f48 <std>
 800902c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009030:	2202      	movs	r2, #2
 8009032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009036:	2112      	movs	r1, #18
 8009038:	f7ff bf86 	b.w	8008f48 <std>
 800903c:	20000afc 	.word	0x20000afc
 8009040:	200009c4 	.word	0x200009c4
 8009044:	08008fb5 	.word	0x08008fb5

08009048 <__sfp_lock_acquire>:
 8009048:	4801      	ldr	r0, [pc, #4]	@ (8009050 <__sfp_lock_acquire+0x8>)
 800904a:	f000 b96c 	b.w	8009326 <__retarget_lock_acquire_recursive>
 800904e:	bf00      	nop
 8009050:	20000b05 	.word	0x20000b05

08009054 <__sfp_lock_release>:
 8009054:	4801      	ldr	r0, [pc, #4]	@ (800905c <__sfp_lock_release+0x8>)
 8009056:	f000 b967 	b.w	8009328 <__retarget_lock_release_recursive>
 800905a:	bf00      	nop
 800905c:	20000b05 	.word	0x20000b05

08009060 <__sinit>:
 8009060:	b510      	push	{r4, lr}
 8009062:	4604      	mov	r4, r0
 8009064:	f7ff fff0 	bl	8009048 <__sfp_lock_acquire>
 8009068:	6a23      	ldr	r3, [r4, #32]
 800906a:	b11b      	cbz	r3, 8009074 <__sinit+0x14>
 800906c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009070:	f7ff bff0 	b.w	8009054 <__sfp_lock_release>
 8009074:	4b04      	ldr	r3, [pc, #16]	@ (8009088 <__sinit+0x28>)
 8009076:	6223      	str	r3, [r4, #32]
 8009078:	4b04      	ldr	r3, [pc, #16]	@ (800908c <__sinit+0x2c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1f5      	bne.n	800906c <__sinit+0xc>
 8009080:	f7ff ffc4 	bl	800900c <global_stdio_init.part.0>
 8009084:	e7f2      	b.n	800906c <__sinit+0xc>
 8009086:	bf00      	nop
 8009088:	08008fcd 	.word	0x08008fcd
 800908c:	20000afc 	.word	0x20000afc

08009090 <_fwalk_sglue>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4607      	mov	r7, r0
 8009096:	4688      	mov	r8, r1
 8009098:	4614      	mov	r4, r2
 800909a:	2600      	movs	r6, #0
 800909c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090a0:	f1b9 0901 	subs.w	r9, r9, #1
 80090a4:	d505      	bpl.n	80090b2 <_fwalk_sglue+0x22>
 80090a6:	6824      	ldr	r4, [r4, #0]
 80090a8:	2c00      	cmp	r4, #0
 80090aa:	d1f7      	bne.n	800909c <_fwalk_sglue+0xc>
 80090ac:	4630      	mov	r0, r6
 80090ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b2:	89ab      	ldrh	r3, [r5, #12]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d907      	bls.n	80090c8 <_fwalk_sglue+0x38>
 80090b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090bc:	3301      	adds	r3, #1
 80090be:	d003      	beq.n	80090c8 <_fwalk_sglue+0x38>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4638      	mov	r0, r7
 80090c4:	47c0      	blx	r8
 80090c6:	4306      	orrs	r6, r0
 80090c8:	3568      	adds	r5, #104	@ 0x68
 80090ca:	e7e9      	b.n	80090a0 <_fwalk_sglue+0x10>

080090cc <__sread>:
 80090cc:	b510      	push	{r4, lr}
 80090ce:	460c      	mov	r4, r1
 80090d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d4:	f000 f8c8 	bl	8009268 <_read_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	bfab      	itete	ge
 80090dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80090de:	89a3      	ldrhlt	r3, [r4, #12]
 80090e0:	181b      	addge	r3, r3, r0
 80090e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80090e6:	bfac      	ite	ge
 80090e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80090ea:	81a3      	strhlt	r3, [r4, #12]
 80090ec:	bd10      	pop	{r4, pc}

080090ee <__swrite>:
 80090ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f2:	461f      	mov	r7, r3
 80090f4:	898b      	ldrh	r3, [r1, #12]
 80090f6:	05db      	lsls	r3, r3, #23
 80090f8:	4605      	mov	r5, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	4616      	mov	r6, r2
 80090fe:	d505      	bpl.n	800910c <__swrite+0x1e>
 8009100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009104:	2302      	movs	r3, #2
 8009106:	2200      	movs	r2, #0
 8009108:	f000 f89c 	bl	8009244 <_lseek_r>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	4632      	mov	r2, r6
 800911a:	463b      	mov	r3, r7
 800911c:	4628      	mov	r0, r5
 800911e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009122:	f000 b8c3 	b.w	80092ac <_write_r>

08009126 <__sseek>:
 8009126:	b510      	push	{r4, lr}
 8009128:	460c      	mov	r4, r1
 800912a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912e:	f000 f889 	bl	8009244 <_lseek_r>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	bf15      	itete	ne
 8009138:	6560      	strne	r0, [r4, #84]	@ 0x54
 800913a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800913e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009142:	81a3      	strheq	r3, [r4, #12]
 8009144:	bf18      	it	ne
 8009146:	81a3      	strhne	r3, [r4, #12]
 8009148:	bd10      	pop	{r4, pc}

0800914a <__sclose>:
 800914a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800914e:	f000 b869 	b.w	8009224 <_close_r>
	...

08009154 <_vsiprintf_r>:
 8009154:	b510      	push	{r4, lr}
 8009156:	b09a      	sub	sp, #104	@ 0x68
 8009158:	2400      	movs	r4, #0
 800915a:	9100      	str	r1, [sp, #0]
 800915c:	9104      	str	r1, [sp, #16]
 800915e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009162:	9105      	str	r1, [sp, #20]
 8009164:	9102      	str	r1, [sp, #8]
 8009166:	4905      	ldr	r1, [pc, #20]	@ (800917c <_vsiprintf_r+0x28>)
 8009168:	9103      	str	r1, [sp, #12]
 800916a:	4669      	mov	r1, sp
 800916c:	9419      	str	r4, [sp, #100]	@ 0x64
 800916e:	f001 f9ab 	bl	800a4c8 <_svfiprintf_r>
 8009172:	9b00      	ldr	r3, [sp, #0]
 8009174:	701c      	strb	r4, [r3, #0]
 8009176:	b01a      	add	sp, #104	@ 0x68
 8009178:	bd10      	pop	{r4, pc}
 800917a:	bf00      	nop
 800917c:	ffff0208 	.word	0xffff0208

08009180 <vsiprintf>:
 8009180:	4613      	mov	r3, r2
 8009182:	460a      	mov	r2, r1
 8009184:	4601      	mov	r1, r0
 8009186:	4802      	ldr	r0, [pc, #8]	@ (8009190 <vsiprintf+0x10>)
 8009188:	6800      	ldr	r0, [r0, #0]
 800918a:	f7ff bfe3 	b.w	8009154 <_vsiprintf_r>
 800918e:	bf00      	nop
 8009190:	200001e0 	.word	0x200001e0

08009194 <memset>:
 8009194:	4402      	add	r2, r0
 8009196:	4603      	mov	r3, r0
 8009198:	4293      	cmp	r3, r2
 800919a:	d100      	bne.n	800919e <memset+0xa>
 800919c:	4770      	bx	lr
 800919e:	f803 1b01 	strb.w	r1, [r3], #1
 80091a2:	e7f9      	b.n	8009198 <memset+0x4>

080091a4 <strdup>:
 80091a4:	4b02      	ldr	r3, [pc, #8]	@ (80091b0 <strdup+0xc>)
 80091a6:	4601      	mov	r1, r0
 80091a8:	6818      	ldr	r0, [r3, #0]
 80091aa:	f000 b803 	b.w	80091b4 <_strdup_r>
 80091ae:	bf00      	nop
 80091b0:	200001e0 	.word	0x200001e0

080091b4 <_strdup_r>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	460d      	mov	r5, r1
 80091bc:	f7f7 f812 	bl	80001e4 <strlen>
 80091c0:	1c46      	adds	r6, r0, #1
 80091c2:	4631      	mov	r1, r6
 80091c4:	4620      	mov	r0, r4
 80091c6:	f7fe ffef 	bl	80081a8 <_malloc_r>
 80091ca:	4604      	mov	r4, r0
 80091cc:	b118      	cbz	r0, 80091d6 <_strdup_r+0x22>
 80091ce:	4632      	mov	r2, r6
 80091d0:	4629      	mov	r1, r5
 80091d2:	f000 f8b2 	bl	800933a <memcpy>
 80091d6:	4620      	mov	r0, r4
 80091d8:	bd70      	pop	{r4, r5, r6, pc}

080091da <strncmp>:
 80091da:	b510      	push	{r4, lr}
 80091dc:	b16a      	cbz	r2, 80091fa <strncmp+0x20>
 80091de:	3901      	subs	r1, #1
 80091e0:	1884      	adds	r4, r0, r2
 80091e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d103      	bne.n	80091f6 <strncmp+0x1c>
 80091ee:	42a0      	cmp	r0, r4
 80091f0:	d001      	beq.n	80091f6 <strncmp+0x1c>
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	d1f5      	bne.n	80091e2 <strncmp+0x8>
 80091f6:	1ad0      	subs	r0, r2, r3
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	4610      	mov	r0, r2
 80091fc:	e7fc      	b.n	80091f8 <strncmp+0x1e>

080091fe <strncpy>:
 80091fe:	b510      	push	{r4, lr}
 8009200:	3901      	subs	r1, #1
 8009202:	4603      	mov	r3, r0
 8009204:	b132      	cbz	r2, 8009214 <strncpy+0x16>
 8009206:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800920a:	f803 4b01 	strb.w	r4, [r3], #1
 800920e:	3a01      	subs	r2, #1
 8009210:	2c00      	cmp	r4, #0
 8009212:	d1f7      	bne.n	8009204 <strncpy+0x6>
 8009214:	441a      	add	r2, r3
 8009216:	2100      	movs	r1, #0
 8009218:	4293      	cmp	r3, r2
 800921a:	d100      	bne.n	800921e <strncpy+0x20>
 800921c:	bd10      	pop	{r4, pc}
 800921e:	f803 1b01 	strb.w	r1, [r3], #1
 8009222:	e7f9      	b.n	8009218 <strncpy+0x1a>

08009224 <_close_r>:
 8009224:	b538      	push	{r3, r4, r5, lr}
 8009226:	4d06      	ldr	r5, [pc, #24]	@ (8009240 <_close_r+0x1c>)
 8009228:	2300      	movs	r3, #0
 800922a:	4604      	mov	r4, r0
 800922c:	4608      	mov	r0, r1
 800922e:	602b      	str	r3, [r5, #0]
 8009230:	f7fc f862 	bl	80052f8 <_close>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_close_r+0x1a>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_close_r+0x1a>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	20000b00 	.word	0x20000b00

08009244 <_lseek_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	@ (8009264 <_lseek_r+0x20>)
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7fc f877 	bl	8005346 <_lseek>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_lseek_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_lseek_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20000b00 	.word	0x20000b00

08009268 <_read_r>:
 8009268:	b538      	push	{r3, r4, r5, lr}
 800926a:	4d07      	ldr	r5, [pc, #28]	@ (8009288 <_read_r+0x20>)
 800926c:	4604      	mov	r4, r0
 800926e:	4608      	mov	r0, r1
 8009270:	4611      	mov	r1, r2
 8009272:	2200      	movs	r2, #0
 8009274:	602a      	str	r2, [r5, #0]
 8009276:	461a      	mov	r2, r3
 8009278:	f7fc f805 	bl	8005286 <_read>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_read_r+0x1e>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_read_r+0x1e>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20000b00 	.word	0x20000b00

0800928c <_sbrk_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d06      	ldr	r5, [pc, #24]	@ (80092a8 <_sbrk_r+0x1c>)
 8009290:	2300      	movs	r3, #0
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7fc f862 	bl	8005360 <_sbrk>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_sbrk_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_sbrk_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20000b00 	.word	0x20000b00

080092ac <_write_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d07      	ldr	r5, [pc, #28]	@ (80092cc <_write_r+0x20>)
 80092b0:	4604      	mov	r4, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	4611      	mov	r1, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	602a      	str	r2, [r5, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7fc f800 	bl	80052c0 <_write>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d102      	bne.n	80092ca <_write_r+0x1e>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b103      	cbz	r3, 80092ca <_write_r+0x1e>
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	bd38      	pop	{r3, r4, r5, pc}
 80092cc:	20000b00 	.word	0x20000b00

080092d0 <__errno>:
 80092d0:	4b01      	ldr	r3, [pc, #4]	@ (80092d8 <__errno+0x8>)
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	200001e0 	.word	0x200001e0

080092dc <__libc_init_array>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4d0d      	ldr	r5, [pc, #52]	@ (8009314 <__libc_init_array+0x38>)
 80092e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009318 <__libc_init_array+0x3c>)
 80092e2:	1b64      	subs	r4, r4, r5
 80092e4:	10a4      	asrs	r4, r4, #2
 80092e6:	2600      	movs	r6, #0
 80092e8:	42a6      	cmp	r6, r4
 80092ea:	d109      	bne.n	8009300 <__libc_init_array+0x24>
 80092ec:	4d0b      	ldr	r5, [pc, #44]	@ (800931c <__libc_init_array+0x40>)
 80092ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009320 <__libc_init_array+0x44>)
 80092f0:	f001 ff20 	bl	800b134 <_init>
 80092f4:	1b64      	subs	r4, r4, r5
 80092f6:	10a4      	asrs	r4, r4, #2
 80092f8:	2600      	movs	r6, #0
 80092fa:	42a6      	cmp	r6, r4
 80092fc:	d105      	bne.n	800930a <__libc_init_array+0x2e>
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	f855 3b04 	ldr.w	r3, [r5], #4
 8009304:	4798      	blx	r3
 8009306:	3601      	adds	r6, #1
 8009308:	e7ee      	b.n	80092e8 <__libc_init_array+0xc>
 800930a:	f855 3b04 	ldr.w	r3, [r5], #4
 800930e:	4798      	blx	r3
 8009310:	3601      	adds	r6, #1
 8009312:	e7f2      	b.n	80092fa <__libc_init_array+0x1e>
 8009314:	08033230 	.word	0x08033230
 8009318:	08033230 	.word	0x08033230
 800931c:	08033230 	.word	0x08033230
 8009320:	08033234 	.word	0x08033234

08009324 <__retarget_lock_init_recursive>:
 8009324:	4770      	bx	lr

08009326 <__retarget_lock_acquire_recursive>:
 8009326:	4770      	bx	lr

08009328 <__retarget_lock_release_recursive>:
 8009328:	4770      	bx	lr

0800932a <strcpy>:
 800932a:	4603      	mov	r3, r0
 800932c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009330:	f803 2b01 	strb.w	r2, [r3], #1
 8009334:	2a00      	cmp	r2, #0
 8009336:	d1f9      	bne.n	800932c <strcpy+0x2>
 8009338:	4770      	bx	lr

0800933a <memcpy>:
 800933a:	440a      	add	r2, r1
 800933c:	4291      	cmp	r1, r2
 800933e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009342:	d100      	bne.n	8009346 <memcpy+0xc>
 8009344:	4770      	bx	lr
 8009346:	b510      	push	{r4, lr}
 8009348:	f811 4b01 	ldrb.w	r4, [r1], #1
 800934c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009350:	4291      	cmp	r1, r2
 8009352:	d1f9      	bne.n	8009348 <memcpy+0xe>
 8009354:	bd10      	pop	{r4, pc}
	...

08009358 <nan>:
 8009358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009360 <nan+0x8>
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	00000000 	.word	0x00000000
 8009364:	7ff80000 	.word	0x7ff80000

08009368 <_free_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4605      	mov	r5, r0
 800936c:	2900      	cmp	r1, #0
 800936e:	d041      	beq.n	80093f4 <_free_r+0x8c>
 8009370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009374:	1f0c      	subs	r4, r1, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	bfb8      	it	lt
 800937a:	18e4      	addlt	r4, r4, r3
 800937c:	f7fe ff94 	bl	80082a8 <__malloc_lock>
 8009380:	4a1d      	ldr	r2, [pc, #116]	@ (80093f8 <_free_r+0x90>)
 8009382:	6813      	ldr	r3, [r2, #0]
 8009384:	b933      	cbnz	r3, 8009394 <_free_r+0x2c>
 8009386:	6063      	str	r3, [r4, #4]
 8009388:	6014      	str	r4, [r2, #0]
 800938a:	4628      	mov	r0, r5
 800938c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009390:	f7fe bf90 	b.w	80082b4 <__malloc_unlock>
 8009394:	42a3      	cmp	r3, r4
 8009396:	d908      	bls.n	80093aa <_free_r+0x42>
 8009398:	6820      	ldr	r0, [r4, #0]
 800939a:	1821      	adds	r1, r4, r0
 800939c:	428b      	cmp	r3, r1
 800939e:	bf01      	itttt	eq
 80093a0:	6819      	ldreq	r1, [r3, #0]
 80093a2:	685b      	ldreq	r3, [r3, #4]
 80093a4:	1809      	addeq	r1, r1, r0
 80093a6:	6021      	streq	r1, [r4, #0]
 80093a8:	e7ed      	b.n	8009386 <_free_r+0x1e>
 80093aa:	461a      	mov	r2, r3
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	b10b      	cbz	r3, 80093b4 <_free_r+0x4c>
 80093b0:	42a3      	cmp	r3, r4
 80093b2:	d9fa      	bls.n	80093aa <_free_r+0x42>
 80093b4:	6811      	ldr	r1, [r2, #0]
 80093b6:	1850      	adds	r0, r2, r1
 80093b8:	42a0      	cmp	r0, r4
 80093ba:	d10b      	bne.n	80093d4 <_free_r+0x6c>
 80093bc:	6820      	ldr	r0, [r4, #0]
 80093be:	4401      	add	r1, r0
 80093c0:	1850      	adds	r0, r2, r1
 80093c2:	4283      	cmp	r3, r0
 80093c4:	6011      	str	r1, [r2, #0]
 80093c6:	d1e0      	bne.n	800938a <_free_r+0x22>
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	6053      	str	r3, [r2, #4]
 80093ce:	4408      	add	r0, r1
 80093d0:	6010      	str	r0, [r2, #0]
 80093d2:	e7da      	b.n	800938a <_free_r+0x22>
 80093d4:	d902      	bls.n	80093dc <_free_r+0x74>
 80093d6:	230c      	movs	r3, #12
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	e7d6      	b.n	800938a <_free_r+0x22>
 80093dc:	6820      	ldr	r0, [r4, #0]
 80093de:	1821      	adds	r1, r4, r0
 80093e0:	428b      	cmp	r3, r1
 80093e2:	bf04      	itt	eq
 80093e4:	6819      	ldreq	r1, [r3, #0]
 80093e6:	685b      	ldreq	r3, [r3, #4]
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	bf04      	itt	eq
 80093ec:	1809      	addeq	r1, r1, r0
 80093ee:	6021      	streq	r1, [r4, #0]
 80093f0:	6054      	str	r4, [r2, #4]
 80093f2:	e7ca      	b.n	800938a <_free_r+0x22>
 80093f4:	bd38      	pop	{r3, r4, r5, pc}
 80093f6:	bf00      	nop
 80093f8:	200009c0 	.word	0x200009c0

080093fc <rshift>:
 80093fc:	6903      	ldr	r3, [r0, #16]
 80093fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009402:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009406:	ea4f 1261 	mov.w	r2, r1, asr #5
 800940a:	f100 0414 	add.w	r4, r0, #20
 800940e:	dd45      	ble.n	800949c <rshift+0xa0>
 8009410:	f011 011f 	ands.w	r1, r1, #31
 8009414:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009418:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800941c:	d10c      	bne.n	8009438 <rshift+0x3c>
 800941e:	f100 0710 	add.w	r7, r0, #16
 8009422:	4629      	mov	r1, r5
 8009424:	42b1      	cmp	r1, r6
 8009426:	d334      	bcc.n	8009492 <rshift+0x96>
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	1eea      	subs	r2, r5, #3
 800942e:	4296      	cmp	r6, r2
 8009430:	bf38      	it	cc
 8009432:	2300      	movcc	r3, #0
 8009434:	4423      	add	r3, r4
 8009436:	e015      	b.n	8009464 <rshift+0x68>
 8009438:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800943c:	f1c1 0820 	rsb	r8, r1, #32
 8009440:	40cf      	lsrs	r7, r1
 8009442:	f105 0e04 	add.w	lr, r5, #4
 8009446:	46a1      	mov	r9, r4
 8009448:	4576      	cmp	r6, lr
 800944a:	46f4      	mov	ip, lr
 800944c:	d815      	bhi.n	800947a <rshift+0x7e>
 800944e:	1a9a      	subs	r2, r3, r2
 8009450:	0092      	lsls	r2, r2, #2
 8009452:	3a04      	subs	r2, #4
 8009454:	3501      	adds	r5, #1
 8009456:	42ae      	cmp	r6, r5
 8009458:	bf38      	it	cc
 800945a:	2200      	movcc	r2, #0
 800945c:	18a3      	adds	r3, r4, r2
 800945e:	50a7      	str	r7, [r4, r2]
 8009460:	b107      	cbz	r7, 8009464 <rshift+0x68>
 8009462:	3304      	adds	r3, #4
 8009464:	1b1a      	subs	r2, r3, r4
 8009466:	42a3      	cmp	r3, r4
 8009468:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800946c:	bf08      	it	eq
 800946e:	2300      	moveq	r3, #0
 8009470:	6102      	str	r2, [r0, #16]
 8009472:	bf08      	it	eq
 8009474:	6143      	streq	r3, [r0, #20]
 8009476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947a:	f8dc c000 	ldr.w	ip, [ip]
 800947e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009482:	ea4c 0707 	orr.w	r7, ip, r7
 8009486:	f849 7b04 	str.w	r7, [r9], #4
 800948a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800948e:	40cf      	lsrs	r7, r1
 8009490:	e7da      	b.n	8009448 <rshift+0x4c>
 8009492:	f851 cb04 	ldr.w	ip, [r1], #4
 8009496:	f847 cf04 	str.w	ip, [r7, #4]!
 800949a:	e7c3      	b.n	8009424 <rshift+0x28>
 800949c:	4623      	mov	r3, r4
 800949e:	e7e1      	b.n	8009464 <rshift+0x68>

080094a0 <__hexdig_fun>:
 80094a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80094a4:	2b09      	cmp	r3, #9
 80094a6:	d802      	bhi.n	80094ae <__hexdig_fun+0xe>
 80094a8:	3820      	subs	r0, #32
 80094aa:	b2c0      	uxtb	r0, r0
 80094ac:	4770      	bx	lr
 80094ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80094b2:	2b05      	cmp	r3, #5
 80094b4:	d801      	bhi.n	80094ba <__hexdig_fun+0x1a>
 80094b6:	3847      	subs	r0, #71	@ 0x47
 80094b8:	e7f7      	b.n	80094aa <__hexdig_fun+0xa>
 80094ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80094be:	2b05      	cmp	r3, #5
 80094c0:	d801      	bhi.n	80094c6 <__hexdig_fun+0x26>
 80094c2:	3827      	subs	r0, #39	@ 0x27
 80094c4:	e7f1      	b.n	80094aa <__hexdig_fun+0xa>
 80094c6:	2000      	movs	r0, #0
 80094c8:	4770      	bx	lr
	...

080094cc <__gethex>:
 80094cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d0:	b085      	sub	sp, #20
 80094d2:	468a      	mov	sl, r1
 80094d4:	9302      	str	r3, [sp, #8]
 80094d6:	680b      	ldr	r3, [r1, #0]
 80094d8:	9001      	str	r0, [sp, #4]
 80094da:	4690      	mov	r8, r2
 80094dc:	1c9c      	adds	r4, r3, #2
 80094de:	46a1      	mov	r9, r4
 80094e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80094e4:	2830      	cmp	r0, #48	@ 0x30
 80094e6:	d0fa      	beq.n	80094de <__gethex+0x12>
 80094e8:	eba9 0303 	sub.w	r3, r9, r3
 80094ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80094f0:	f7ff ffd6 	bl	80094a0 <__hexdig_fun>
 80094f4:	4605      	mov	r5, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d168      	bne.n	80095cc <__gethex+0x100>
 80094fa:	49a0      	ldr	r1, [pc, #640]	@ (800977c <__gethex+0x2b0>)
 80094fc:	2201      	movs	r2, #1
 80094fe:	4648      	mov	r0, r9
 8009500:	f7ff fe6b 	bl	80091da <strncmp>
 8009504:	4607      	mov	r7, r0
 8009506:	2800      	cmp	r0, #0
 8009508:	d167      	bne.n	80095da <__gethex+0x10e>
 800950a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800950e:	4626      	mov	r6, r4
 8009510:	f7ff ffc6 	bl	80094a0 <__hexdig_fun>
 8009514:	2800      	cmp	r0, #0
 8009516:	d062      	beq.n	80095de <__gethex+0x112>
 8009518:	4623      	mov	r3, r4
 800951a:	7818      	ldrb	r0, [r3, #0]
 800951c:	2830      	cmp	r0, #48	@ 0x30
 800951e:	4699      	mov	r9, r3
 8009520:	f103 0301 	add.w	r3, r3, #1
 8009524:	d0f9      	beq.n	800951a <__gethex+0x4e>
 8009526:	f7ff ffbb 	bl	80094a0 <__hexdig_fun>
 800952a:	fab0 f580 	clz	r5, r0
 800952e:	096d      	lsrs	r5, r5, #5
 8009530:	f04f 0b01 	mov.w	fp, #1
 8009534:	464a      	mov	r2, r9
 8009536:	4616      	mov	r6, r2
 8009538:	3201      	adds	r2, #1
 800953a:	7830      	ldrb	r0, [r6, #0]
 800953c:	f7ff ffb0 	bl	80094a0 <__hexdig_fun>
 8009540:	2800      	cmp	r0, #0
 8009542:	d1f8      	bne.n	8009536 <__gethex+0x6a>
 8009544:	498d      	ldr	r1, [pc, #564]	@ (800977c <__gethex+0x2b0>)
 8009546:	2201      	movs	r2, #1
 8009548:	4630      	mov	r0, r6
 800954a:	f7ff fe46 	bl	80091da <strncmp>
 800954e:	2800      	cmp	r0, #0
 8009550:	d13f      	bne.n	80095d2 <__gethex+0x106>
 8009552:	b944      	cbnz	r4, 8009566 <__gethex+0x9a>
 8009554:	1c74      	adds	r4, r6, #1
 8009556:	4622      	mov	r2, r4
 8009558:	4616      	mov	r6, r2
 800955a:	3201      	adds	r2, #1
 800955c:	7830      	ldrb	r0, [r6, #0]
 800955e:	f7ff ff9f 	bl	80094a0 <__hexdig_fun>
 8009562:	2800      	cmp	r0, #0
 8009564:	d1f8      	bne.n	8009558 <__gethex+0x8c>
 8009566:	1ba4      	subs	r4, r4, r6
 8009568:	00a7      	lsls	r7, r4, #2
 800956a:	7833      	ldrb	r3, [r6, #0]
 800956c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009570:	2b50      	cmp	r3, #80	@ 0x50
 8009572:	d13e      	bne.n	80095f2 <__gethex+0x126>
 8009574:	7873      	ldrb	r3, [r6, #1]
 8009576:	2b2b      	cmp	r3, #43	@ 0x2b
 8009578:	d033      	beq.n	80095e2 <__gethex+0x116>
 800957a:	2b2d      	cmp	r3, #45	@ 0x2d
 800957c:	d034      	beq.n	80095e8 <__gethex+0x11c>
 800957e:	1c71      	adds	r1, r6, #1
 8009580:	2400      	movs	r4, #0
 8009582:	7808      	ldrb	r0, [r1, #0]
 8009584:	f7ff ff8c 	bl	80094a0 <__hexdig_fun>
 8009588:	1e43      	subs	r3, r0, #1
 800958a:	b2db      	uxtb	r3, r3
 800958c:	2b18      	cmp	r3, #24
 800958e:	d830      	bhi.n	80095f2 <__gethex+0x126>
 8009590:	f1a0 0210 	sub.w	r2, r0, #16
 8009594:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009598:	f7ff ff82 	bl	80094a0 <__hexdig_fun>
 800959c:	f100 3cff 	add.w	ip, r0, #4294967295
 80095a0:	fa5f fc8c 	uxtb.w	ip, ip
 80095a4:	f1bc 0f18 	cmp.w	ip, #24
 80095a8:	f04f 030a 	mov.w	r3, #10
 80095ac:	d91e      	bls.n	80095ec <__gethex+0x120>
 80095ae:	b104      	cbz	r4, 80095b2 <__gethex+0xe6>
 80095b0:	4252      	negs	r2, r2
 80095b2:	4417      	add	r7, r2
 80095b4:	f8ca 1000 	str.w	r1, [sl]
 80095b8:	b1ed      	cbz	r5, 80095f6 <__gethex+0x12a>
 80095ba:	f1bb 0f00 	cmp.w	fp, #0
 80095be:	bf0c      	ite	eq
 80095c0:	2506      	moveq	r5, #6
 80095c2:	2500      	movne	r5, #0
 80095c4:	4628      	mov	r0, r5
 80095c6:	b005      	add	sp, #20
 80095c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	2500      	movs	r5, #0
 80095ce:	462c      	mov	r4, r5
 80095d0:	e7b0      	b.n	8009534 <__gethex+0x68>
 80095d2:	2c00      	cmp	r4, #0
 80095d4:	d1c7      	bne.n	8009566 <__gethex+0x9a>
 80095d6:	4627      	mov	r7, r4
 80095d8:	e7c7      	b.n	800956a <__gethex+0x9e>
 80095da:	464e      	mov	r6, r9
 80095dc:	462f      	mov	r7, r5
 80095de:	2501      	movs	r5, #1
 80095e0:	e7c3      	b.n	800956a <__gethex+0x9e>
 80095e2:	2400      	movs	r4, #0
 80095e4:	1cb1      	adds	r1, r6, #2
 80095e6:	e7cc      	b.n	8009582 <__gethex+0xb6>
 80095e8:	2401      	movs	r4, #1
 80095ea:	e7fb      	b.n	80095e4 <__gethex+0x118>
 80095ec:	fb03 0002 	mla	r0, r3, r2, r0
 80095f0:	e7ce      	b.n	8009590 <__gethex+0xc4>
 80095f2:	4631      	mov	r1, r6
 80095f4:	e7de      	b.n	80095b4 <__gethex+0xe8>
 80095f6:	eba6 0309 	sub.w	r3, r6, r9
 80095fa:	3b01      	subs	r3, #1
 80095fc:	4629      	mov	r1, r5
 80095fe:	2b07      	cmp	r3, #7
 8009600:	dc0a      	bgt.n	8009618 <__gethex+0x14c>
 8009602:	9801      	ldr	r0, [sp, #4]
 8009604:	f000 fa46 	bl	8009a94 <_Balloc>
 8009608:	4604      	mov	r4, r0
 800960a:	b940      	cbnz	r0, 800961e <__gethex+0x152>
 800960c:	4b5c      	ldr	r3, [pc, #368]	@ (8009780 <__gethex+0x2b4>)
 800960e:	4602      	mov	r2, r0
 8009610:	21e4      	movs	r1, #228	@ 0xe4
 8009612:	485c      	ldr	r0, [pc, #368]	@ (8009784 <__gethex+0x2b8>)
 8009614:	f001 faa6 	bl	800ab64 <__assert_func>
 8009618:	3101      	adds	r1, #1
 800961a:	105b      	asrs	r3, r3, #1
 800961c:	e7ef      	b.n	80095fe <__gethex+0x132>
 800961e:	f100 0a14 	add.w	sl, r0, #20
 8009622:	2300      	movs	r3, #0
 8009624:	4655      	mov	r5, sl
 8009626:	469b      	mov	fp, r3
 8009628:	45b1      	cmp	r9, r6
 800962a:	d337      	bcc.n	800969c <__gethex+0x1d0>
 800962c:	f845 bb04 	str.w	fp, [r5], #4
 8009630:	eba5 050a 	sub.w	r5, r5, sl
 8009634:	10ad      	asrs	r5, r5, #2
 8009636:	6125      	str	r5, [r4, #16]
 8009638:	4658      	mov	r0, fp
 800963a:	f000 fb1d 	bl	8009c78 <__hi0bits>
 800963e:	016d      	lsls	r5, r5, #5
 8009640:	f8d8 6000 	ldr.w	r6, [r8]
 8009644:	1a2d      	subs	r5, r5, r0
 8009646:	42b5      	cmp	r5, r6
 8009648:	dd54      	ble.n	80096f4 <__gethex+0x228>
 800964a:	1bad      	subs	r5, r5, r6
 800964c:	4629      	mov	r1, r5
 800964e:	4620      	mov	r0, r4
 8009650:	f000 fea9 	bl	800a3a6 <__any_on>
 8009654:	4681      	mov	r9, r0
 8009656:	b178      	cbz	r0, 8009678 <__gethex+0x1ac>
 8009658:	1e6b      	subs	r3, r5, #1
 800965a:	1159      	asrs	r1, r3, #5
 800965c:	f003 021f 	and.w	r2, r3, #31
 8009660:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009664:	f04f 0901 	mov.w	r9, #1
 8009668:	fa09 f202 	lsl.w	r2, r9, r2
 800966c:	420a      	tst	r2, r1
 800966e:	d003      	beq.n	8009678 <__gethex+0x1ac>
 8009670:	454b      	cmp	r3, r9
 8009672:	dc36      	bgt.n	80096e2 <__gethex+0x216>
 8009674:	f04f 0902 	mov.w	r9, #2
 8009678:	4629      	mov	r1, r5
 800967a:	4620      	mov	r0, r4
 800967c:	f7ff febe 	bl	80093fc <rshift>
 8009680:	442f      	add	r7, r5
 8009682:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009686:	42bb      	cmp	r3, r7
 8009688:	da42      	bge.n	8009710 <__gethex+0x244>
 800968a:	9801      	ldr	r0, [sp, #4]
 800968c:	4621      	mov	r1, r4
 800968e:	f000 fa41 	bl	8009b14 <_Bfree>
 8009692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009694:	2300      	movs	r3, #0
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	25a3      	movs	r5, #163	@ 0xa3
 800969a:	e793      	b.n	80095c4 <__gethex+0xf8>
 800969c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80096a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80096a2:	d012      	beq.n	80096ca <__gethex+0x1fe>
 80096a4:	2b20      	cmp	r3, #32
 80096a6:	d104      	bne.n	80096b2 <__gethex+0x1e6>
 80096a8:	f845 bb04 	str.w	fp, [r5], #4
 80096ac:	f04f 0b00 	mov.w	fp, #0
 80096b0:	465b      	mov	r3, fp
 80096b2:	7830      	ldrb	r0, [r6, #0]
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	f7ff fef3 	bl	80094a0 <__hexdig_fun>
 80096ba:	9b03      	ldr	r3, [sp, #12]
 80096bc:	f000 000f 	and.w	r0, r0, #15
 80096c0:	4098      	lsls	r0, r3
 80096c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80096c6:	3304      	adds	r3, #4
 80096c8:	e7ae      	b.n	8009628 <__gethex+0x15c>
 80096ca:	45b1      	cmp	r9, r6
 80096cc:	d8ea      	bhi.n	80096a4 <__gethex+0x1d8>
 80096ce:	492b      	ldr	r1, [pc, #172]	@ (800977c <__gethex+0x2b0>)
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	2201      	movs	r2, #1
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7ff fd80 	bl	80091da <strncmp>
 80096da:	9b03      	ldr	r3, [sp, #12]
 80096dc:	2800      	cmp	r0, #0
 80096de:	d1e1      	bne.n	80096a4 <__gethex+0x1d8>
 80096e0:	e7a2      	b.n	8009628 <__gethex+0x15c>
 80096e2:	1ea9      	subs	r1, r5, #2
 80096e4:	4620      	mov	r0, r4
 80096e6:	f000 fe5e 	bl	800a3a6 <__any_on>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d0c2      	beq.n	8009674 <__gethex+0x1a8>
 80096ee:	f04f 0903 	mov.w	r9, #3
 80096f2:	e7c1      	b.n	8009678 <__gethex+0x1ac>
 80096f4:	da09      	bge.n	800970a <__gethex+0x23e>
 80096f6:	1b75      	subs	r5, r6, r5
 80096f8:	4621      	mov	r1, r4
 80096fa:	9801      	ldr	r0, [sp, #4]
 80096fc:	462a      	mov	r2, r5
 80096fe:	f000 fc19 	bl	8009f34 <__lshift>
 8009702:	1b7f      	subs	r7, r7, r5
 8009704:	4604      	mov	r4, r0
 8009706:	f100 0a14 	add.w	sl, r0, #20
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	e7b8      	b.n	8009682 <__gethex+0x1b6>
 8009710:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009714:	42bd      	cmp	r5, r7
 8009716:	dd6f      	ble.n	80097f8 <__gethex+0x32c>
 8009718:	1bed      	subs	r5, r5, r7
 800971a:	42ae      	cmp	r6, r5
 800971c:	dc34      	bgt.n	8009788 <__gethex+0x2bc>
 800971e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009722:	2b02      	cmp	r3, #2
 8009724:	d022      	beq.n	800976c <__gethex+0x2a0>
 8009726:	2b03      	cmp	r3, #3
 8009728:	d024      	beq.n	8009774 <__gethex+0x2a8>
 800972a:	2b01      	cmp	r3, #1
 800972c:	d115      	bne.n	800975a <__gethex+0x28e>
 800972e:	42ae      	cmp	r6, r5
 8009730:	d113      	bne.n	800975a <__gethex+0x28e>
 8009732:	2e01      	cmp	r6, #1
 8009734:	d10b      	bne.n	800974e <__gethex+0x282>
 8009736:	9a02      	ldr	r2, [sp, #8]
 8009738:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	2301      	movs	r3, #1
 8009740:	6123      	str	r3, [r4, #16]
 8009742:	f8ca 3000 	str.w	r3, [sl]
 8009746:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009748:	2562      	movs	r5, #98	@ 0x62
 800974a:	601c      	str	r4, [r3, #0]
 800974c:	e73a      	b.n	80095c4 <__gethex+0xf8>
 800974e:	1e71      	subs	r1, r6, #1
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fe28 	bl	800a3a6 <__any_on>
 8009756:	2800      	cmp	r0, #0
 8009758:	d1ed      	bne.n	8009736 <__gethex+0x26a>
 800975a:	9801      	ldr	r0, [sp, #4]
 800975c:	4621      	mov	r1, r4
 800975e:	f000 f9d9 	bl	8009b14 <_Bfree>
 8009762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009764:	2300      	movs	r3, #0
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	2550      	movs	r5, #80	@ 0x50
 800976a:	e72b      	b.n	80095c4 <__gethex+0xf8>
 800976c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1f3      	bne.n	800975a <__gethex+0x28e>
 8009772:	e7e0      	b.n	8009736 <__gethex+0x26a>
 8009774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1dd      	bne.n	8009736 <__gethex+0x26a>
 800977a:	e7ee      	b.n	800975a <__gethex+0x28e>
 800977c:	08032e70 	.word	0x08032e70
 8009780:	08032e86 	.word	0x08032e86
 8009784:	08032e97 	.word	0x08032e97
 8009788:	1e6f      	subs	r7, r5, #1
 800978a:	f1b9 0f00 	cmp.w	r9, #0
 800978e:	d130      	bne.n	80097f2 <__gethex+0x326>
 8009790:	b127      	cbz	r7, 800979c <__gethex+0x2d0>
 8009792:	4639      	mov	r1, r7
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fe06 	bl	800a3a6 <__any_on>
 800979a:	4681      	mov	r9, r0
 800979c:	117a      	asrs	r2, r7, #5
 800979e:	2301      	movs	r3, #1
 80097a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80097a4:	f007 071f 	and.w	r7, r7, #31
 80097a8:	40bb      	lsls	r3, r7
 80097aa:	4213      	tst	r3, r2
 80097ac:	4629      	mov	r1, r5
 80097ae:	4620      	mov	r0, r4
 80097b0:	bf18      	it	ne
 80097b2:	f049 0902 	orrne.w	r9, r9, #2
 80097b6:	f7ff fe21 	bl	80093fc <rshift>
 80097ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80097be:	1b76      	subs	r6, r6, r5
 80097c0:	2502      	movs	r5, #2
 80097c2:	f1b9 0f00 	cmp.w	r9, #0
 80097c6:	d047      	beq.n	8009858 <__gethex+0x38c>
 80097c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d015      	beq.n	80097fc <__gethex+0x330>
 80097d0:	2b03      	cmp	r3, #3
 80097d2:	d017      	beq.n	8009804 <__gethex+0x338>
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d109      	bne.n	80097ec <__gethex+0x320>
 80097d8:	f019 0f02 	tst.w	r9, #2
 80097dc:	d006      	beq.n	80097ec <__gethex+0x320>
 80097de:	f8da 3000 	ldr.w	r3, [sl]
 80097e2:	ea49 0903 	orr.w	r9, r9, r3
 80097e6:	f019 0f01 	tst.w	r9, #1
 80097ea:	d10e      	bne.n	800980a <__gethex+0x33e>
 80097ec:	f045 0510 	orr.w	r5, r5, #16
 80097f0:	e032      	b.n	8009858 <__gethex+0x38c>
 80097f2:	f04f 0901 	mov.w	r9, #1
 80097f6:	e7d1      	b.n	800979c <__gethex+0x2d0>
 80097f8:	2501      	movs	r5, #1
 80097fa:	e7e2      	b.n	80097c2 <__gethex+0x2f6>
 80097fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097fe:	f1c3 0301 	rsb	r3, r3, #1
 8009802:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f0      	beq.n	80097ec <__gethex+0x320>
 800980a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800980e:	f104 0314 	add.w	r3, r4, #20
 8009812:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009816:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800981a:	f04f 0c00 	mov.w	ip, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f853 2b04 	ldr.w	r2, [r3], #4
 8009824:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009828:	d01b      	beq.n	8009862 <__gethex+0x396>
 800982a:	3201      	adds	r2, #1
 800982c:	6002      	str	r2, [r0, #0]
 800982e:	2d02      	cmp	r5, #2
 8009830:	f104 0314 	add.w	r3, r4, #20
 8009834:	d13c      	bne.n	80098b0 <__gethex+0x3e4>
 8009836:	f8d8 2000 	ldr.w	r2, [r8]
 800983a:	3a01      	subs	r2, #1
 800983c:	42b2      	cmp	r2, r6
 800983e:	d109      	bne.n	8009854 <__gethex+0x388>
 8009840:	1171      	asrs	r1, r6, #5
 8009842:	2201      	movs	r2, #1
 8009844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009848:	f006 061f 	and.w	r6, r6, #31
 800984c:	fa02 f606 	lsl.w	r6, r2, r6
 8009850:	421e      	tst	r6, r3
 8009852:	d13a      	bne.n	80098ca <__gethex+0x3fe>
 8009854:	f045 0520 	orr.w	r5, r5, #32
 8009858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800985a:	601c      	str	r4, [r3, #0]
 800985c:	9b02      	ldr	r3, [sp, #8]
 800985e:	601f      	str	r7, [r3, #0]
 8009860:	e6b0      	b.n	80095c4 <__gethex+0xf8>
 8009862:	4299      	cmp	r1, r3
 8009864:	f843 cc04 	str.w	ip, [r3, #-4]
 8009868:	d8d9      	bhi.n	800981e <__gethex+0x352>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	459b      	cmp	fp, r3
 800986e:	db17      	blt.n	80098a0 <__gethex+0x3d4>
 8009870:	6861      	ldr	r1, [r4, #4]
 8009872:	9801      	ldr	r0, [sp, #4]
 8009874:	3101      	adds	r1, #1
 8009876:	f000 f90d 	bl	8009a94 <_Balloc>
 800987a:	4681      	mov	r9, r0
 800987c:	b918      	cbnz	r0, 8009886 <__gethex+0x3ba>
 800987e:	4b1a      	ldr	r3, [pc, #104]	@ (80098e8 <__gethex+0x41c>)
 8009880:	4602      	mov	r2, r0
 8009882:	2184      	movs	r1, #132	@ 0x84
 8009884:	e6c5      	b.n	8009612 <__gethex+0x146>
 8009886:	6922      	ldr	r2, [r4, #16]
 8009888:	3202      	adds	r2, #2
 800988a:	f104 010c 	add.w	r1, r4, #12
 800988e:	0092      	lsls	r2, r2, #2
 8009890:	300c      	adds	r0, #12
 8009892:	f7ff fd52 	bl	800933a <memcpy>
 8009896:	4621      	mov	r1, r4
 8009898:	9801      	ldr	r0, [sp, #4]
 800989a:	f000 f93b 	bl	8009b14 <_Bfree>
 800989e:	464c      	mov	r4, r9
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80098a8:	6122      	str	r2, [r4, #16]
 80098aa:	2201      	movs	r2, #1
 80098ac:	615a      	str	r2, [r3, #20]
 80098ae:	e7be      	b.n	800982e <__gethex+0x362>
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	455a      	cmp	r2, fp
 80098b4:	dd0b      	ble.n	80098ce <__gethex+0x402>
 80098b6:	2101      	movs	r1, #1
 80098b8:	4620      	mov	r0, r4
 80098ba:	f7ff fd9f 	bl	80093fc <rshift>
 80098be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098c2:	3701      	adds	r7, #1
 80098c4:	42bb      	cmp	r3, r7
 80098c6:	f6ff aee0 	blt.w	800968a <__gethex+0x1be>
 80098ca:	2501      	movs	r5, #1
 80098cc:	e7c2      	b.n	8009854 <__gethex+0x388>
 80098ce:	f016 061f 	ands.w	r6, r6, #31
 80098d2:	d0fa      	beq.n	80098ca <__gethex+0x3fe>
 80098d4:	4453      	add	r3, sl
 80098d6:	f1c6 0620 	rsb	r6, r6, #32
 80098da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80098de:	f000 f9cb 	bl	8009c78 <__hi0bits>
 80098e2:	42b0      	cmp	r0, r6
 80098e4:	dbe7      	blt.n	80098b6 <__gethex+0x3ea>
 80098e6:	e7f0      	b.n	80098ca <__gethex+0x3fe>
 80098e8:	08032e86 	.word	0x08032e86

080098ec <L_shift>:
 80098ec:	f1c2 0208 	rsb	r2, r2, #8
 80098f0:	0092      	lsls	r2, r2, #2
 80098f2:	b570      	push	{r4, r5, r6, lr}
 80098f4:	f1c2 0620 	rsb	r6, r2, #32
 80098f8:	6843      	ldr	r3, [r0, #4]
 80098fa:	6804      	ldr	r4, [r0, #0]
 80098fc:	fa03 f506 	lsl.w	r5, r3, r6
 8009900:	432c      	orrs	r4, r5
 8009902:	40d3      	lsrs	r3, r2
 8009904:	6004      	str	r4, [r0, #0]
 8009906:	f840 3f04 	str.w	r3, [r0, #4]!
 800990a:	4288      	cmp	r0, r1
 800990c:	d3f4      	bcc.n	80098f8 <L_shift+0xc>
 800990e:	bd70      	pop	{r4, r5, r6, pc}

08009910 <__match>:
 8009910:	b530      	push	{r4, r5, lr}
 8009912:	6803      	ldr	r3, [r0, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800991a:	b914      	cbnz	r4, 8009922 <__match+0x12>
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	2001      	movs	r0, #1
 8009920:	bd30      	pop	{r4, r5, pc}
 8009922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009926:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800992a:	2d19      	cmp	r5, #25
 800992c:	bf98      	it	ls
 800992e:	3220      	addls	r2, #32
 8009930:	42a2      	cmp	r2, r4
 8009932:	d0f0      	beq.n	8009916 <__match+0x6>
 8009934:	2000      	movs	r0, #0
 8009936:	e7f3      	b.n	8009920 <__match+0x10>

08009938 <__hexnan>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	680b      	ldr	r3, [r1, #0]
 800993e:	6801      	ldr	r1, [r0, #0]
 8009940:	115e      	asrs	r6, r3, #5
 8009942:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009946:	f013 031f 	ands.w	r3, r3, #31
 800994a:	b087      	sub	sp, #28
 800994c:	bf18      	it	ne
 800994e:	3604      	addne	r6, #4
 8009950:	2500      	movs	r5, #0
 8009952:	1f37      	subs	r7, r6, #4
 8009954:	4682      	mov	sl, r0
 8009956:	4690      	mov	r8, r2
 8009958:	9301      	str	r3, [sp, #4]
 800995a:	f846 5c04 	str.w	r5, [r6, #-4]
 800995e:	46b9      	mov	r9, r7
 8009960:	463c      	mov	r4, r7
 8009962:	9502      	str	r5, [sp, #8]
 8009964:	46ab      	mov	fp, r5
 8009966:	784a      	ldrb	r2, [r1, #1]
 8009968:	1c4b      	adds	r3, r1, #1
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	b342      	cbz	r2, 80099c0 <__hexnan+0x88>
 800996e:	4610      	mov	r0, r2
 8009970:	9105      	str	r1, [sp, #20]
 8009972:	9204      	str	r2, [sp, #16]
 8009974:	f7ff fd94 	bl	80094a0 <__hexdig_fun>
 8009978:	2800      	cmp	r0, #0
 800997a:	d151      	bne.n	8009a20 <__hexnan+0xe8>
 800997c:	9a04      	ldr	r2, [sp, #16]
 800997e:	9905      	ldr	r1, [sp, #20]
 8009980:	2a20      	cmp	r2, #32
 8009982:	d818      	bhi.n	80099b6 <__hexnan+0x7e>
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	459b      	cmp	fp, r3
 8009988:	dd13      	ble.n	80099b2 <__hexnan+0x7a>
 800998a:	454c      	cmp	r4, r9
 800998c:	d206      	bcs.n	800999c <__hexnan+0x64>
 800998e:	2d07      	cmp	r5, #7
 8009990:	dc04      	bgt.n	800999c <__hexnan+0x64>
 8009992:	462a      	mov	r2, r5
 8009994:	4649      	mov	r1, r9
 8009996:	4620      	mov	r0, r4
 8009998:	f7ff ffa8 	bl	80098ec <L_shift>
 800999c:	4544      	cmp	r4, r8
 800999e:	d952      	bls.n	8009a46 <__hexnan+0x10e>
 80099a0:	2300      	movs	r3, #0
 80099a2:	f1a4 0904 	sub.w	r9, r4, #4
 80099a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80099aa:	f8cd b008 	str.w	fp, [sp, #8]
 80099ae:	464c      	mov	r4, r9
 80099b0:	461d      	mov	r5, r3
 80099b2:	9903      	ldr	r1, [sp, #12]
 80099b4:	e7d7      	b.n	8009966 <__hexnan+0x2e>
 80099b6:	2a29      	cmp	r2, #41	@ 0x29
 80099b8:	d157      	bne.n	8009a6a <__hexnan+0x132>
 80099ba:	3102      	adds	r1, #2
 80099bc:	f8ca 1000 	str.w	r1, [sl]
 80099c0:	f1bb 0f00 	cmp.w	fp, #0
 80099c4:	d051      	beq.n	8009a6a <__hexnan+0x132>
 80099c6:	454c      	cmp	r4, r9
 80099c8:	d206      	bcs.n	80099d8 <__hexnan+0xa0>
 80099ca:	2d07      	cmp	r5, #7
 80099cc:	dc04      	bgt.n	80099d8 <__hexnan+0xa0>
 80099ce:	462a      	mov	r2, r5
 80099d0:	4649      	mov	r1, r9
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff ff8a 	bl	80098ec <L_shift>
 80099d8:	4544      	cmp	r4, r8
 80099da:	d936      	bls.n	8009a4a <__hexnan+0x112>
 80099dc:	f1a8 0204 	sub.w	r2, r8, #4
 80099e0:	4623      	mov	r3, r4
 80099e2:	f853 1b04 	ldr.w	r1, [r3], #4
 80099e6:	f842 1f04 	str.w	r1, [r2, #4]!
 80099ea:	429f      	cmp	r7, r3
 80099ec:	d2f9      	bcs.n	80099e2 <__hexnan+0xaa>
 80099ee:	1b3b      	subs	r3, r7, r4
 80099f0:	f023 0303 	bic.w	r3, r3, #3
 80099f4:	3304      	adds	r3, #4
 80099f6:	3401      	adds	r4, #1
 80099f8:	3e03      	subs	r6, #3
 80099fa:	42b4      	cmp	r4, r6
 80099fc:	bf88      	it	hi
 80099fe:	2304      	movhi	r3, #4
 8009a00:	4443      	add	r3, r8
 8009a02:	2200      	movs	r2, #0
 8009a04:	f843 2b04 	str.w	r2, [r3], #4
 8009a08:	429f      	cmp	r7, r3
 8009a0a:	d2fb      	bcs.n	8009a04 <__hexnan+0xcc>
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	b91b      	cbnz	r3, 8009a18 <__hexnan+0xe0>
 8009a10:	4547      	cmp	r7, r8
 8009a12:	d128      	bne.n	8009a66 <__hexnan+0x12e>
 8009a14:	2301      	movs	r3, #1
 8009a16:	603b      	str	r3, [r7, #0]
 8009a18:	2005      	movs	r0, #5
 8009a1a:	b007      	add	sp, #28
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	3501      	adds	r5, #1
 8009a22:	2d08      	cmp	r5, #8
 8009a24:	f10b 0b01 	add.w	fp, fp, #1
 8009a28:	dd06      	ble.n	8009a38 <__hexnan+0x100>
 8009a2a:	4544      	cmp	r4, r8
 8009a2c:	d9c1      	bls.n	80099b2 <__hexnan+0x7a>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a34:	2501      	movs	r5, #1
 8009a36:	3c04      	subs	r4, #4
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	f000 000f 	and.w	r0, r0, #15
 8009a3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009a42:	6020      	str	r0, [r4, #0]
 8009a44:	e7b5      	b.n	80099b2 <__hexnan+0x7a>
 8009a46:	2508      	movs	r5, #8
 8009a48:	e7b3      	b.n	80099b2 <__hexnan+0x7a>
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0dd      	beq.n	8009a0c <__hexnan+0xd4>
 8009a50:	f1c3 0320 	rsb	r3, r3, #32
 8009a54:	f04f 32ff 	mov.w	r2, #4294967295
 8009a58:	40da      	lsrs	r2, r3
 8009a5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009a5e:	4013      	ands	r3, r2
 8009a60:	f846 3c04 	str.w	r3, [r6, #-4]
 8009a64:	e7d2      	b.n	8009a0c <__hexnan+0xd4>
 8009a66:	3f04      	subs	r7, #4
 8009a68:	e7d0      	b.n	8009a0c <__hexnan+0xd4>
 8009a6a:	2004      	movs	r0, #4
 8009a6c:	e7d5      	b.n	8009a1a <__hexnan+0xe2>

08009a6e <__ascii_mbtowc>:
 8009a6e:	b082      	sub	sp, #8
 8009a70:	b901      	cbnz	r1, 8009a74 <__ascii_mbtowc+0x6>
 8009a72:	a901      	add	r1, sp, #4
 8009a74:	b142      	cbz	r2, 8009a88 <__ascii_mbtowc+0x1a>
 8009a76:	b14b      	cbz	r3, 8009a8c <__ascii_mbtowc+0x1e>
 8009a78:	7813      	ldrb	r3, [r2, #0]
 8009a7a:	600b      	str	r3, [r1, #0]
 8009a7c:	7812      	ldrb	r2, [r2, #0]
 8009a7e:	1e10      	subs	r0, r2, #0
 8009a80:	bf18      	it	ne
 8009a82:	2001      	movne	r0, #1
 8009a84:	b002      	add	sp, #8
 8009a86:	4770      	bx	lr
 8009a88:	4610      	mov	r0, r2
 8009a8a:	e7fb      	b.n	8009a84 <__ascii_mbtowc+0x16>
 8009a8c:	f06f 0001 	mvn.w	r0, #1
 8009a90:	e7f8      	b.n	8009a84 <__ascii_mbtowc+0x16>
	...

08009a94 <_Balloc>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	69c6      	ldr	r6, [r0, #28]
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	b976      	cbnz	r6, 8009abc <_Balloc+0x28>
 8009a9e:	2010      	movs	r0, #16
 8009aa0:	f7fe fb50 	bl	8008144 <malloc>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	61e0      	str	r0, [r4, #28]
 8009aa8:	b920      	cbnz	r0, 8009ab4 <_Balloc+0x20>
 8009aaa:	4b18      	ldr	r3, [pc, #96]	@ (8009b0c <_Balloc+0x78>)
 8009aac:	4818      	ldr	r0, [pc, #96]	@ (8009b10 <_Balloc+0x7c>)
 8009aae:	216b      	movs	r1, #107	@ 0x6b
 8009ab0:	f001 f858 	bl	800ab64 <__assert_func>
 8009ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab8:	6006      	str	r6, [r0, #0]
 8009aba:	60c6      	str	r6, [r0, #12]
 8009abc:	69e6      	ldr	r6, [r4, #28]
 8009abe:	68f3      	ldr	r3, [r6, #12]
 8009ac0:	b183      	cbz	r3, 8009ae4 <_Balloc+0x50>
 8009ac2:	69e3      	ldr	r3, [r4, #28]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009aca:	b9b8      	cbnz	r0, 8009afc <_Balloc+0x68>
 8009acc:	2101      	movs	r1, #1
 8009ace:	fa01 f605 	lsl.w	r6, r1, r5
 8009ad2:	1d72      	adds	r2, r6, #5
 8009ad4:	0092      	lsls	r2, r2, #2
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f001 f862 	bl	800aba0 <_calloc_r>
 8009adc:	b160      	cbz	r0, 8009af8 <_Balloc+0x64>
 8009ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ae2:	e00e      	b.n	8009b02 <_Balloc+0x6e>
 8009ae4:	2221      	movs	r2, #33	@ 0x21
 8009ae6:	2104      	movs	r1, #4
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f001 f859 	bl	800aba0 <_calloc_r>
 8009aee:	69e3      	ldr	r3, [r4, #28]
 8009af0:	60f0      	str	r0, [r6, #12]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e4      	bne.n	8009ac2 <_Balloc+0x2e>
 8009af8:	2000      	movs	r0, #0
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	6802      	ldr	r2, [r0, #0]
 8009afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b02:	2300      	movs	r3, #0
 8009b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b08:	e7f7      	b.n	8009afa <_Balloc+0x66>
 8009b0a:	bf00      	nop
 8009b0c:	08032ef7 	.word	0x08032ef7
 8009b10:	08032f0e 	.word	0x08032f0e

08009b14 <_Bfree>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	69c6      	ldr	r6, [r0, #28]
 8009b18:	4605      	mov	r5, r0
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	b976      	cbnz	r6, 8009b3c <_Bfree+0x28>
 8009b1e:	2010      	movs	r0, #16
 8009b20:	f7fe fb10 	bl	8008144 <malloc>
 8009b24:	4602      	mov	r2, r0
 8009b26:	61e8      	str	r0, [r5, #28]
 8009b28:	b920      	cbnz	r0, 8009b34 <_Bfree+0x20>
 8009b2a:	4b09      	ldr	r3, [pc, #36]	@ (8009b50 <_Bfree+0x3c>)
 8009b2c:	4809      	ldr	r0, [pc, #36]	@ (8009b54 <_Bfree+0x40>)
 8009b2e:	218f      	movs	r1, #143	@ 0x8f
 8009b30:	f001 f818 	bl	800ab64 <__assert_func>
 8009b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b38:	6006      	str	r6, [r0, #0]
 8009b3a:	60c6      	str	r6, [r0, #12]
 8009b3c:	b13c      	cbz	r4, 8009b4e <_Bfree+0x3a>
 8009b3e:	69eb      	ldr	r3, [r5, #28]
 8009b40:	6862      	ldr	r2, [r4, #4]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b48:	6021      	str	r1, [r4, #0]
 8009b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b4e:	bd70      	pop	{r4, r5, r6, pc}
 8009b50:	08032ef7 	.word	0x08032ef7
 8009b54:	08032f0e 	.word	0x08032f0e

08009b58 <__multadd>:
 8009b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5c:	690d      	ldr	r5, [r1, #16]
 8009b5e:	4607      	mov	r7, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	461e      	mov	r6, r3
 8009b64:	f101 0c14 	add.w	ip, r1, #20
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b6e:	b299      	uxth	r1, r3
 8009b70:	fb02 6101 	mla	r1, r2, r1, r6
 8009b74:	0c1e      	lsrs	r6, r3, #16
 8009b76:	0c0b      	lsrs	r3, r1, #16
 8009b78:	fb02 3306 	mla	r3, r2, r6, r3
 8009b7c:	b289      	uxth	r1, r1
 8009b7e:	3001      	adds	r0, #1
 8009b80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b84:	4285      	cmp	r5, r0
 8009b86:	f84c 1b04 	str.w	r1, [ip], #4
 8009b8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b8e:	dcec      	bgt.n	8009b6a <__multadd+0x12>
 8009b90:	b30e      	cbz	r6, 8009bd6 <__multadd+0x7e>
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	42ab      	cmp	r3, r5
 8009b96:	dc19      	bgt.n	8009bcc <__multadd+0x74>
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	3101      	adds	r1, #1
 8009b9e:	f7ff ff79 	bl	8009a94 <_Balloc>
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	b928      	cbnz	r0, 8009bb2 <__multadd+0x5a>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8009bdc <__multadd+0x84>)
 8009baa:	480d      	ldr	r0, [pc, #52]	@ (8009be0 <__multadd+0x88>)
 8009bac:	21ba      	movs	r1, #186	@ 0xba
 8009bae:	f000 ffd9 	bl	800ab64 <__assert_func>
 8009bb2:	6922      	ldr	r2, [r4, #16]
 8009bb4:	3202      	adds	r2, #2
 8009bb6:	f104 010c 	add.w	r1, r4, #12
 8009bba:	0092      	lsls	r2, r2, #2
 8009bbc:	300c      	adds	r0, #12
 8009bbe:	f7ff fbbc 	bl	800933a <memcpy>
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	f7ff ffa5 	bl	8009b14 <_Bfree>
 8009bca:	4644      	mov	r4, r8
 8009bcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bd0:	3501      	adds	r5, #1
 8009bd2:	615e      	str	r6, [r3, #20]
 8009bd4:	6125      	str	r5, [r4, #16]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bdc:	08032e86 	.word	0x08032e86
 8009be0:	08032f0e 	.word	0x08032f0e

08009be4 <__s2b>:
 8009be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009be8:	460c      	mov	r4, r1
 8009bea:	4615      	mov	r5, r2
 8009bec:	461f      	mov	r7, r3
 8009bee:	2209      	movs	r2, #9
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	db09      	blt.n	8009c14 <__s2b+0x30>
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff ff47 	bl	8009a94 <_Balloc>
 8009c06:	b940      	cbnz	r0, 8009c1a <__s2b+0x36>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	4b19      	ldr	r3, [pc, #100]	@ (8009c70 <__s2b+0x8c>)
 8009c0c:	4819      	ldr	r0, [pc, #100]	@ (8009c74 <__s2b+0x90>)
 8009c0e:	21d3      	movs	r1, #211	@ 0xd3
 8009c10:	f000 ffa8 	bl	800ab64 <__assert_func>
 8009c14:	0052      	lsls	r2, r2, #1
 8009c16:	3101      	adds	r1, #1
 8009c18:	e7f0      	b.n	8009bfc <__s2b+0x18>
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	6143      	str	r3, [r0, #20]
 8009c1e:	2d09      	cmp	r5, #9
 8009c20:	f04f 0301 	mov.w	r3, #1
 8009c24:	6103      	str	r3, [r0, #16]
 8009c26:	dd16      	ble.n	8009c56 <__s2b+0x72>
 8009c28:	f104 0909 	add.w	r9, r4, #9
 8009c2c:	46c8      	mov	r8, r9
 8009c2e:	442c      	add	r4, r5
 8009c30:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c34:	4601      	mov	r1, r0
 8009c36:	3b30      	subs	r3, #48	@ 0x30
 8009c38:	220a      	movs	r2, #10
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	f7ff ff8c 	bl	8009b58 <__multadd>
 8009c40:	45a0      	cmp	r8, r4
 8009c42:	d1f5      	bne.n	8009c30 <__s2b+0x4c>
 8009c44:	f1a5 0408 	sub.w	r4, r5, #8
 8009c48:	444c      	add	r4, r9
 8009c4a:	1b2d      	subs	r5, r5, r4
 8009c4c:	1963      	adds	r3, r4, r5
 8009c4e:	42bb      	cmp	r3, r7
 8009c50:	db04      	blt.n	8009c5c <__s2b+0x78>
 8009c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c56:	340a      	adds	r4, #10
 8009c58:	2509      	movs	r5, #9
 8009c5a:	e7f6      	b.n	8009c4a <__s2b+0x66>
 8009c5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c60:	4601      	mov	r1, r0
 8009c62:	3b30      	subs	r3, #48	@ 0x30
 8009c64:	220a      	movs	r2, #10
 8009c66:	4630      	mov	r0, r6
 8009c68:	f7ff ff76 	bl	8009b58 <__multadd>
 8009c6c:	e7ee      	b.n	8009c4c <__s2b+0x68>
 8009c6e:	bf00      	nop
 8009c70:	08032e86 	.word	0x08032e86
 8009c74:	08032f0e 	.word	0x08032f0e

08009c78 <__hi0bits>:
 8009c78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	bf36      	itet	cc
 8009c80:	0403      	lslcc	r3, r0, #16
 8009c82:	2000      	movcs	r0, #0
 8009c84:	2010      	movcc	r0, #16
 8009c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c8a:	bf3c      	itt	cc
 8009c8c:	021b      	lslcc	r3, r3, #8
 8009c8e:	3008      	addcc	r0, #8
 8009c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c94:	bf3c      	itt	cc
 8009c96:	011b      	lslcc	r3, r3, #4
 8009c98:	3004      	addcc	r0, #4
 8009c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c9e:	bf3c      	itt	cc
 8009ca0:	009b      	lslcc	r3, r3, #2
 8009ca2:	3002      	addcc	r0, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	db05      	blt.n	8009cb4 <__hi0bits+0x3c>
 8009ca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009cac:	f100 0001 	add.w	r0, r0, #1
 8009cb0:	bf08      	it	eq
 8009cb2:	2020      	moveq	r0, #32
 8009cb4:	4770      	bx	lr

08009cb6 <__lo0bits>:
 8009cb6:	6803      	ldr	r3, [r0, #0]
 8009cb8:	4602      	mov	r2, r0
 8009cba:	f013 0007 	ands.w	r0, r3, #7
 8009cbe:	d00b      	beq.n	8009cd8 <__lo0bits+0x22>
 8009cc0:	07d9      	lsls	r1, r3, #31
 8009cc2:	d421      	bmi.n	8009d08 <__lo0bits+0x52>
 8009cc4:	0798      	lsls	r0, r3, #30
 8009cc6:	bf49      	itett	mi
 8009cc8:	085b      	lsrmi	r3, r3, #1
 8009cca:	089b      	lsrpl	r3, r3, #2
 8009ccc:	2001      	movmi	r0, #1
 8009cce:	6013      	strmi	r3, [r2, #0]
 8009cd0:	bf5c      	itt	pl
 8009cd2:	6013      	strpl	r3, [r2, #0]
 8009cd4:	2002      	movpl	r0, #2
 8009cd6:	4770      	bx	lr
 8009cd8:	b299      	uxth	r1, r3
 8009cda:	b909      	cbnz	r1, 8009ce0 <__lo0bits+0x2a>
 8009cdc:	0c1b      	lsrs	r3, r3, #16
 8009cde:	2010      	movs	r0, #16
 8009ce0:	b2d9      	uxtb	r1, r3
 8009ce2:	b909      	cbnz	r1, 8009ce8 <__lo0bits+0x32>
 8009ce4:	3008      	adds	r0, #8
 8009ce6:	0a1b      	lsrs	r3, r3, #8
 8009ce8:	0719      	lsls	r1, r3, #28
 8009cea:	bf04      	itt	eq
 8009cec:	091b      	lsreq	r3, r3, #4
 8009cee:	3004      	addeq	r0, #4
 8009cf0:	0799      	lsls	r1, r3, #30
 8009cf2:	bf04      	itt	eq
 8009cf4:	089b      	lsreq	r3, r3, #2
 8009cf6:	3002      	addeq	r0, #2
 8009cf8:	07d9      	lsls	r1, r3, #31
 8009cfa:	d403      	bmi.n	8009d04 <__lo0bits+0x4e>
 8009cfc:	085b      	lsrs	r3, r3, #1
 8009cfe:	f100 0001 	add.w	r0, r0, #1
 8009d02:	d003      	beq.n	8009d0c <__lo0bits+0x56>
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	4770      	bx	lr
 8009d08:	2000      	movs	r0, #0
 8009d0a:	4770      	bx	lr
 8009d0c:	2020      	movs	r0, #32
 8009d0e:	4770      	bx	lr

08009d10 <__i2b>:
 8009d10:	b510      	push	{r4, lr}
 8009d12:	460c      	mov	r4, r1
 8009d14:	2101      	movs	r1, #1
 8009d16:	f7ff febd 	bl	8009a94 <_Balloc>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	b928      	cbnz	r0, 8009d2a <__i2b+0x1a>
 8009d1e:	4b05      	ldr	r3, [pc, #20]	@ (8009d34 <__i2b+0x24>)
 8009d20:	4805      	ldr	r0, [pc, #20]	@ (8009d38 <__i2b+0x28>)
 8009d22:	f240 1145 	movw	r1, #325	@ 0x145
 8009d26:	f000 ff1d 	bl	800ab64 <__assert_func>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	6144      	str	r4, [r0, #20]
 8009d2e:	6103      	str	r3, [r0, #16]
 8009d30:	bd10      	pop	{r4, pc}
 8009d32:	bf00      	nop
 8009d34:	08032e86 	.word	0x08032e86
 8009d38:	08032f0e 	.word	0x08032f0e

08009d3c <__multiply>:
 8009d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d40:	4617      	mov	r7, r2
 8009d42:	690a      	ldr	r2, [r1, #16]
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	bfa8      	it	ge
 8009d4a:	463b      	movge	r3, r7
 8009d4c:	4689      	mov	r9, r1
 8009d4e:	bfa4      	itt	ge
 8009d50:	460f      	movge	r7, r1
 8009d52:	4699      	movge	r9, r3
 8009d54:	693d      	ldr	r5, [r7, #16]
 8009d56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	eb05 060a 	add.w	r6, r5, sl
 8009d62:	42b3      	cmp	r3, r6
 8009d64:	b085      	sub	sp, #20
 8009d66:	bfb8      	it	lt
 8009d68:	3101      	addlt	r1, #1
 8009d6a:	f7ff fe93 	bl	8009a94 <_Balloc>
 8009d6e:	b930      	cbnz	r0, 8009d7e <__multiply+0x42>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4b41      	ldr	r3, [pc, #260]	@ (8009e78 <__multiply+0x13c>)
 8009d74:	4841      	ldr	r0, [pc, #260]	@ (8009e7c <__multiply+0x140>)
 8009d76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d7a:	f000 fef3 	bl	800ab64 <__assert_func>
 8009d7e:	f100 0414 	add.w	r4, r0, #20
 8009d82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009d86:	4623      	mov	r3, r4
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4573      	cmp	r3, lr
 8009d8c:	d320      	bcc.n	8009dd0 <__multiply+0x94>
 8009d8e:	f107 0814 	add.w	r8, r7, #20
 8009d92:	f109 0114 	add.w	r1, r9, #20
 8009d96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009d9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009d9e:	9302      	str	r3, [sp, #8]
 8009da0:	1beb      	subs	r3, r5, r7
 8009da2:	3b15      	subs	r3, #21
 8009da4:	f023 0303 	bic.w	r3, r3, #3
 8009da8:	3304      	adds	r3, #4
 8009daa:	3715      	adds	r7, #21
 8009dac:	42bd      	cmp	r5, r7
 8009dae:	bf38      	it	cc
 8009db0:	2304      	movcc	r3, #4
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	428b      	cmp	r3, r1
 8009dba:	d80c      	bhi.n	8009dd6 <__multiply+0x9a>
 8009dbc:	2e00      	cmp	r6, #0
 8009dbe:	dd03      	ble.n	8009dc8 <__multiply+0x8c>
 8009dc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d055      	beq.n	8009e74 <__multiply+0x138>
 8009dc8:	6106      	str	r6, [r0, #16]
 8009dca:	b005      	add	sp, #20
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	f843 2b04 	str.w	r2, [r3], #4
 8009dd4:	e7d9      	b.n	8009d8a <__multiply+0x4e>
 8009dd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009dda:	f1ba 0f00 	cmp.w	sl, #0
 8009dde:	d01f      	beq.n	8009e20 <__multiply+0xe4>
 8009de0:	46c4      	mov	ip, r8
 8009de2:	46a1      	mov	r9, r4
 8009de4:	2700      	movs	r7, #0
 8009de6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009dea:	f8d9 3000 	ldr.w	r3, [r9]
 8009dee:	fa1f fb82 	uxth.w	fp, r2
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	fb0a 330b 	mla	r3, sl, fp, r3
 8009df8:	443b      	add	r3, r7
 8009dfa:	f8d9 7000 	ldr.w	r7, [r9]
 8009dfe:	0c12      	lsrs	r2, r2, #16
 8009e00:	0c3f      	lsrs	r7, r7, #16
 8009e02:	fb0a 7202 	mla	r2, sl, r2, r7
 8009e06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e10:	4565      	cmp	r5, ip
 8009e12:	f849 3b04 	str.w	r3, [r9], #4
 8009e16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009e1a:	d8e4      	bhi.n	8009de6 <__multiply+0xaa>
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	50e7      	str	r7, [r4, r3]
 8009e20:	9b03      	ldr	r3, [sp, #12]
 8009e22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e26:	3104      	adds	r1, #4
 8009e28:	f1b9 0f00 	cmp.w	r9, #0
 8009e2c:	d020      	beq.n	8009e70 <__multiply+0x134>
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	4647      	mov	r7, r8
 8009e32:	46a4      	mov	ip, r4
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	f8b7 b000 	ldrh.w	fp, [r7]
 8009e3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009e40:	fb09 220b 	mla	r2, r9, fp, r2
 8009e44:	4452      	add	r2, sl
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e4c:	f84c 3b04 	str.w	r3, [ip], #4
 8009e50:	f857 3b04 	ldr.w	r3, [r7], #4
 8009e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e58:	f8bc 3000 	ldrh.w	r3, [ip]
 8009e5c:	fb09 330a 	mla	r3, r9, sl, r3
 8009e60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009e64:	42bd      	cmp	r5, r7
 8009e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e6a:	d8e5      	bhi.n	8009e38 <__multiply+0xfc>
 8009e6c:	9a01      	ldr	r2, [sp, #4]
 8009e6e:	50a3      	str	r3, [r4, r2]
 8009e70:	3404      	adds	r4, #4
 8009e72:	e79f      	b.n	8009db4 <__multiply+0x78>
 8009e74:	3e01      	subs	r6, #1
 8009e76:	e7a1      	b.n	8009dbc <__multiply+0x80>
 8009e78:	08032e86 	.word	0x08032e86
 8009e7c:	08032f0e 	.word	0x08032f0e

08009e80 <__pow5mult>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	4615      	mov	r5, r2
 8009e86:	f012 0203 	ands.w	r2, r2, #3
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	460e      	mov	r6, r1
 8009e8e:	d007      	beq.n	8009ea0 <__pow5mult+0x20>
 8009e90:	4c25      	ldr	r4, [pc, #148]	@ (8009f28 <__pow5mult+0xa8>)
 8009e92:	3a01      	subs	r2, #1
 8009e94:	2300      	movs	r3, #0
 8009e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e9a:	f7ff fe5d 	bl	8009b58 <__multadd>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	10ad      	asrs	r5, r5, #2
 8009ea2:	d03d      	beq.n	8009f20 <__pow5mult+0xa0>
 8009ea4:	69fc      	ldr	r4, [r7, #28]
 8009ea6:	b97c      	cbnz	r4, 8009ec8 <__pow5mult+0x48>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f7fe f94b 	bl	8008144 <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	61f8      	str	r0, [r7, #28]
 8009eb2:	b928      	cbnz	r0, 8009ec0 <__pow5mult+0x40>
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <__pow5mult+0xac>)
 8009eb6:	481e      	ldr	r0, [pc, #120]	@ (8009f30 <__pow5mult+0xb0>)
 8009eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ebc:	f000 fe52 	bl	800ab64 <__assert_func>
 8009ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	60c4      	str	r4, [r0, #12]
 8009ec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed0:	b94c      	cbnz	r4, 8009ee6 <__pow5mult+0x66>
 8009ed2:	f240 2171 	movw	r1, #625	@ 0x271
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f7ff ff1a 	bl	8009d10 <__i2b>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	07eb      	lsls	r3, r5, #31
 8009eec:	d50a      	bpl.n	8009f04 <__pow5mult+0x84>
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ff22 	bl	8009d3c <__multiply>
 8009ef8:	4631      	mov	r1, r6
 8009efa:	4680      	mov	r8, r0
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff fe09 	bl	8009b14 <_Bfree>
 8009f02:	4646      	mov	r6, r8
 8009f04:	106d      	asrs	r5, r5, #1
 8009f06:	d00b      	beq.n	8009f20 <__pow5mult+0xa0>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	b938      	cbnz	r0, 8009f1c <__pow5mult+0x9c>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ff13 	bl	8009d3c <__multiply>
 8009f16:	6020      	str	r0, [r4, #0]
 8009f18:	f8c0 9000 	str.w	r9, [r0]
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	e7e4      	b.n	8009eea <__pow5mult+0x6a>
 8009f20:	4630      	mov	r0, r6
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	bf00      	nop
 8009f28:	0803312c 	.word	0x0803312c
 8009f2c:	08032ef7 	.word	0x08032ef7
 8009f30:	08032f0e 	.word	0x08032f0e

08009f34 <__lshift>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6849      	ldr	r1, [r1, #4]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	4607      	mov	r7, r0
 8009f46:	4691      	mov	r9, r2
 8009f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f4c:	f108 0601 	add.w	r6, r8, #1
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	db0b      	blt.n	8009f6c <__lshift+0x38>
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff fd9d 	bl	8009a94 <_Balloc>
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	b948      	cbnz	r0, 8009f72 <__lshift+0x3e>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b28      	ldr	r3, [pc, #160]	@ (800a004 <__lshift+0xd0>)
 8009f62:	4829      	ldr	r0, [pc, #164]	@ (800a008 <__lshift+0xd4>)
 8009f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f68:	f000 fdfc 	bl	800ab64 <__assert_func>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	e7ee      	b.n	8009f50 <__lshift+0x1c>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f100 0114 	add.w	r1, r0, #20
 8009f78:	f100 0210 	add.w	r2, r0, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	db33      	blt.n	8009fea <__lshift+0xb6>
 8009f82:	6920      	ldr	r0, [r4, #16]
 8009f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f88:	f104 0314 	add.w	r3, r4, #20
 8009f8c:	f019 091f 	ands.w	r9, r9, #31
 8009f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f98:	d02b      	beq.n	8009ff2 <__lshift+0xbe>
 8009f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f9e:	468a      	mov	sl, r1
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8009fa8:	4310      	orrs	r0, r2
 8009faa:	f84a 0b04 	str.w	r0, [sl], #4
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	459c      	cmp	ip, r3
 8009fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fb8:	d8f3      	bhi.n	8009fa2 <__lshift+0x6e>
 8009fba:	ebac 0304 	sub.w	r3, ip, r4
 8009fbe:	3b15      	subs	r3, #21
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	f104 0015 	add.w	r0, r4, #21
 8009fca:	4560      	cmp	r0, ip
 8009fcc:	bf88      	it	hi
 8009fce:	2304      	movhi	r3, #4
 8009fd0:	50ca      	str	r2, [r1, r3]
 8009fd2:	b10a      	cbz	r2, 8009fd8 <__lshift+0xa4>
 8009fd4:	f108 0602 	add.w	r6, r8, #2
 8009fd8:	3e01      	subs	r6, #1
 8009fda:	4638      	mov	r0, r7
 8009fdc:	612e      	str	r6, [r5, #16]
 8009fde:	4621      	mov	r1, r4
 8009fe0:	f7ff fd98 	bl	8009b14 <_Bfree>
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fee:	3301      	adds	r3, #1
 8009ff0:	e7c5      	b.n	8009f7e <__lshift+0x4a>
 8009ff2:	3904      	subs	r1, #4
 8009ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ffc:	459c      	cmp	ip, r3
 8009ffe:	d8f9      	bhi.n	8009ff4 <__lshift+0xc0>
 800a000:	e7ea      	b.n	8009fd8 <__lshift+0xa4>
 800a002:	bf00      	nop
 800a004:	08032e86 	.word	0x08032e86
 800a008:	08032f0e 	.word	0x08032f0e

0800a00c <__mcmp>:
 800a00c:	690a      	ldr	r2, [r1, #16]
 800a00e:	4603      	mov	r3, r0
 800a010:	6900      	ldr	r0, [r0, #16]
 800a012:	1a80      	subs	r0, r0, r2
 800a014:	b530      	push	{r4, r5, lr}
 800a016:	d10e      	bne.n	800a036 <__mcmp+0x2a>
 800a018:	3314      	adds	r3, #20
 800a01a:	3114      	adds	r1, #20
 800a01c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a02c:	4295      	cmp	r5, r2
 800a02e:	d003      	beq.n	800a038 <__mcmp+0x2c>
 800a030:	d205      	bcs.n	800a03e <__mcmp+0x32>
 800a032:	f04f 30ff 	mov.w	r0, #4294967295
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	42a3      	cmp	r3, r4
 800a03a:	d3f3      	bcc.n	800a024 <__mcmp+0x18>
 800a03c:	e7fb      	b.n	800a036 <__mcmp+0x2a>
 800a03e:	2001      	movs	r0, #1
 800a040:	e7f9      	b.n	800a036 <__mcmp+0x2a>
	...

0800a044 <__mdiff>:
 800a044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4689      	mov	r9, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	4611      	mov	r1, r2
 800a04e:	4648      	mov	r0, r9
 800a050:	4614      	mov	r4, r2
 800a052:	f7ff ffdb 	bl	800a00c <__mcmp>
 800a056:	1e05      	subs	r5, r0, #0
 800a058:	d112      	bne.n	800a080 <__mdiff+0x3c>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff fd19 	bl	8009a94 <_Balloc>
 800a062:	4602      	mov	r2, r0
 800a064:	b928      	cbnz	r0, 800a072 <__mdiff+0x2e>
 800a066:	4b3f      	ldr	r3, [pc, #252]	@ (800a164 <__mdiff+0x120>)
 800a068:	f240 2137 	movw	r1, #567	@ 0x237
 800a06c:	483e      	ldr	r0, [pc, #248]	@ (800a168 <__mdiff+0x124>)
 800a06e:	f000 fd79 	bl	800ab64 <__assert_func>
 800a072:	2301      	movs	r3, #1
 800a074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a078:	4610      	mov	r0, r2
 800a07a:	b003      	add	sp, #12
 800a07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a080:	bfbc      	itt	lt
 800a082:	464b      	movlt	r3, r9
 800a084:	46a1      	movlt	r9, r4
 800a086:	4630      	mov	r0, r6
 800a088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a08c:	bfba      	itte	lt
 800a08e:	461c      	movlt	r4, r3
 800a090:	2501      	movlt	r5, #1
 800a092:	2500      	movge	r5, #0
 800a094:	f7ff fcfe 	bl	8009a94 <_Balloc>
 800a098:	4602      	mov	r2, r0
 800a09a:	b918      	cbnz	r0, 800a0a4 <__mdiff+0x60>
 800a09c:	4b31      	ldr	r3, [pc, #196]	@ (800a164 <__mdiff+0x120>)
 800a09e:	f240 2145 	movw	r1, #581	@ 0x245
 800a0a2:	e7e3      	b.n	800a06c <__mdiff+0x28>
 800a0a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0a8:	6926      	ldr	r6, [r4, #16]
 800a0aa:	60c5      	str	r5, [r0, #12]
 800a0ac:	f109 0310 	add.w	r3, r9, #16
 800a0b0:	f109 0514 	add.w	r5, r9, #20
 800a0b4:	f104 0e14 	add.w	lr, r4, #20
 800a0b8:	f100 0b14 	add.w	fp, r0, #20
 800a0bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0c4:	9301      	str	r3, [sp, #4]
 800a0c6:	46d9      	mov	r9, fp
 800a0c8:	f04f 0c00 	mov.w	ip, #0
 800a0cc:	9b01      	ldr	r3, [sp, #4]
 800a0ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0d6:	9301      	str	r3, [sp, #4]
 800a0d8:	fa1f f38a 	uxth.w	r3, sl
 800a0dc:	4619      	mov	r1, r3
 800a0de:	b283      	uxth	r3, r0
 800a0e0:	1acb      	subs	r3, r1, r3
 800a0e2:	0c00      	lsrs	r0, r0, #16
 800a0e4:	4463      	add	r3, ip
 800a0e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0f4:	4576      	cmp	r6, lr
 800a0f6:	f849 3b04 	str.w	r3, [r9], #4
 800a0fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0fe:	d8e5      	bhi.n	800a0cc <__mdiff+0x88>
 800a100:	1b33      	subs	r3, r6, r4
 800a102:	3b15      	subs	r3, #21
 800a104:	f023 0303 	bic.w	r3, r3, #3
 800a108:	3415      	adds	r4, #21
 800a10a:	3304      	adds	r3, #4
 800a10c:	42a6      	cmp	r6, r4
 800a10e:	bf38      	it	cc
 800a110:	2304      	movcc	r3, #4
 800a112:	441d      	add	r5, r3
 800a114:	445b      	add	r3, fp
 800a116:	461e      	mov	r6, r3
 800a118:	462c      	mov	r4, r5
 800a11a:	4544      	cmp	r4, r8
 800a11c:	d30e      	bcc.n	800a13c <__mdiff+0xf8>
 800a11e:	f108 0103 	add.w	r1, r8, #3
 800a122:	1b49      	subs	r1, r1, r5
 800a124:	f021 0103 	bic.w	r1, r1, #3
 800a128:	3d03      	subs	r5, #3
 800a12a:	45a8      	cmp	r8, r5
 800a12c:	bf38      	it	cc
 800a12e:	2100      	movcc	r1, #0
 800a130:	440b      	add	r3, r1
 800a132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a136:	b191      	cbz	r1, 800a15e <__mdiff+0x11a>
 800a138:	6117      	str	r7, [r2, #16]
 800a13a:	e79d      	b.n	800a078 <__mdiff+0x34>
 800a13c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a140:	46e6      	mov	lr, ip
 800a142:	0c08      	lsrs	r0, r1, #16
 800a144:	fa1c fc81 	uxtah	ip, ip, r1
 800a148:	4471      	add	r1, lr
 800a14a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a14e:	b289      	uxth	r1, r1
 800a150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a154:	f846 1b04 	str.w	r1, [r6], #4
 800a158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a15c:	e7dd      	b.n	800a11a <__mdiff+0xd6>
 800a15e:	3f01      	subs	r7, #1
 800a160:	e7e7      	b.n	800a132 <__mdiff+0xee>
 800a162:	bf00      	nop
 800a164:	08032e86 	.word	0x08032e86
 800a168:	08032f0e 	.word	0x08032f0e

0800a16c <__ulp>:
 800a16c:	b082      	sub	sp, #8
 800a16e:	ed8d 0b00 	vstr	d0, [sp]
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	4b0f      	ldr	r3, [pc, #60]	@ (800a1b4 <__ulp+0x48>)
 800a176:	4013      	ands	r3, r2
 800a178:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	dc08      	bgt.n	800a192 <__ulp+0x26>
 800a180:	425b      	negs	r3, r3
 800a182:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a186:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a18a:	da04      	bge.n	800a196 <__ulp+0x2a>
 800a18c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a190:	4113      	asrs	r3, r2
 800a192:	2200      	movs	r2, #0
 800a194:	e008      	b.n	800a1a8 <__ulp+0x3c>
 800a196:	f1a2 0314 	sub.w	r3, r2, #20
 800a19a:	2b1e      	cmp	r3, #30
 800a19c:	bfda      	itte	le
 800a19e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1a2:	40da      	lsrle	r2, r3
 800a1a4:	2201      	movgt	r2, #1
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	ec41 0b10 	vmov	d0, r0, r1
 800a1b0:	b002      	add	sp, #8
 800a1b2:	4770      	bx	lr
 800a1b4:	7ff00000 	.word	0x7ff00000

0800a1b8 <__b2d>:
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	6906      	ldr	r6, [r0, #16]
 800a1be:	f100 0814 	add.w	r8, r0, #20
 800a1c2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a1c6:	1f37      	subs	r7, r6, #4
 800a1c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f7ff fd53 	bl	8009c78 <__hi0bits>
 800a1d2:	f1c0 0320 	rsb	r3, r0, #32
 800a1d6:	280a      	cmp	r0, #10
 800a1d8:	600b      	str	r3, [r1, #0]
 800a1da:	491b      	ldr	r1, [pc, #108]	@ (800a248 <__b2d+0x90>)
 800a1dc:	dc15      	bgt.n	800a20a <__b2d+0x52>
 800a1de:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1e2:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1e6:	45b8      	cmp	r8, r7
 800a1e8:	ea43 0501 	orr.w	r5, r3, r1
 800a1ec:	bf34      	ite	cc
 800a1ee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1f2:	2300      	movcs	r3, #0
 800a1f4:	3015      	adds	r0, #21
 800a1f6:	fa02 f000 	lsl.w	r0, r2, r0
 800a1fa:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1fe:	4303      	orrs	r3, r0
 800a200:	461c      	mov	r4, r3
 800a202:	ec45 4b10 	vmov	d0, r4, r5
 800a206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20a:	45b8      	cmp	r8, r7
 800a20c:	bf3a      	itte	cc
 800a20e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a212:	f1a6 0708 	subcc.w	r7, r6, #8
 800a216:	2300      	movcs	r3, #0
 800a218:	380b      	subs	r0, #11
 800a21a:	d012      	beq.n	800a242 <__b2d+0x8a>
 800a21c:	f1c0 0120 	rsb	r1, r0, #32
 800a220:	fa23 f401 	lsr.w	r4, r3, r1
 800a224:	4082      	lsls	r2, r0
 800a226:	4322      	orrs	r2, r4
 800a228:	4547      	cmp	r7, r8
 800a22a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a22e:	bf8c      	ite	hi
 800a230:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a234:	2200      	movls	r2, #0
 800a236:	4083      	lsls	r3, r0
 800a238:	40ca      	lsrs	r2, r1
 800a23a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a23e:	4313      	orrs	r3, r2
 800a240:	e7de      	b.n	800a200 <__b2d+0x48>
 800a242:	ea42 0501 	orr.w	r5, r2, r1
 800a246:	e7db      	b.n	800a200 <__b2d+0x48>
 800a248:	3ff00000 	.word	0x3ff00000

0800a24c <__d2b>:
 800a24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a250:	460f      	mov	r7, r1
 800a252:	2101      	movs	r1, #1
 800a254:	ec59 8b10 	vmov	r8, r9, d0
 800a258:	4616      	mov	r6, r2
 800a25a:	f7ff fc1b 	bl	8009a94 <_Balloc>
 800a25e:	4604      	mov	r4, r0
 800a260:	b930      	cbnz	r0, 800a270 <__d2b+0x24>
 800a262:	4602      	mov	r2, r0
 800a264:	4b23      	ldr	r3, [pc, #140]	@ (800a2f4 <__d2b+0xa8>)
 800a266:	4824      	ldr	r0, [pc, #144]	@ (800a2f8 <__d2b+0xac>)
 800a268:	f240 310f 	movw	r1, #783	@ 0x30f
 800a26c:	f000 fc7a 	bl	800ab64 <__assert_func>
 800a270:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a274:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a278:	b10d      	cbz	r5, 800a27e <__d2b+0x32>
 800a27a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	f1b8 0300 	subs.w	r3, r8, #0
 800a284:	d023      	beq.n	800a2ce <__d2b+0x82>
 800a286:	4668      	mov	r0, sp
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	f7ff fd14 	bl	8009cb6 <__lo0bits>
 800a28e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a292:	b1d0      	cbz	r0, 800a2ca <__d2b+0x7e>
 800a294:	f1c0 0320 	rsb	r3, r0, #32
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	430b      	orrs	r3, r1
 800a29e:	40c2      	lsrs	r2, r0
 800a2a0:	6163      	str	r3, [r4, #20]
 800a2a2:	9201      	str	r2, [sp, #4]
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	61a3      	str	r3, [r4, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2201      	moveq	r2, #1
 800a2ae:	2202      	movne	r2, #2
 800a2b0:	6122      	str	r2, [r4, #16]
 800a2b2:	b1a5      	cbz	r5, 800a2de <__d2b+0x92>
 800a2b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2b8:	4405      	add	r5, r0
 800a2ba:	603d      	str	r5, [r7, #0]
 800a2bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a2c0:	6030      	str	r0, [r6, #0]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	b003      	add	sp, #12
 800a2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	6161      	str	r1, [r4, #20]
 800a2cc:	e7ea      	b.n	800a2a4 <__d2b+0x58>
 800a2ce:	a801      	add	r0, sp, #4
 800a2d0:	f7ff fcf1 	bl	8009cb6 <__lo0bits>
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	6163      	str	r3, [r4, #20]
 800a2d8:	3020      	adds	r0, #32
 800a2da:	2201      	movs	r2, #1
 800a2dc:	e7e8      	b.n	800a2b0 <__d2b+0x64>
 800a2de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a2e6:	6038      	str	r0, [r7, #0]
 800a2e8:	6918      	ldr	r0, [r3, #16]
 800a2ea:	f7ff fcc5 	bl	8009c78 <__hi0bits>
 800a2ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2f2:	e7e5      	b.n	800a2c0 <__d2b+0x74>
 800a2f4:	08032e86 	.word	0x08032e86
 800a2f8:	08032f0e 	.word	0x08032f0e

0800a2fc <__ratio>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	b085      	sub	sp, #20
 800a302:	e9cd 1000 	strd	r1, r0, [sp]
 800a306:	a902      	add	r1, sp, #8
 800a308:	f7ff ff56 	bl	800a1b8 <__b2d>
 800a30c:	9800      	ldr	r0, [sp, #0]
 800a30e:	a903      	add	r1, sp, #12
 800a310:	ec55 4b10 	vmov	r4, r5, d0
 800a314:	f7ff ff50 	bl	800a1b8 <__b2d>
 800a318:	9b01      	ldr	r3, [sp, #4]
 800a31a:	6919      	ldr	r1, [r3, #16]
 800a31c:	9b00      	ldr	r3, [sp, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	1ac9      	subs	r1, r1, r3
 800a322:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a326:	1a9b      	subs	r3, r3, r2
 800a328:	ec5b ab10 	vmov	sl, fp, d0
 800a32c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a330:	2b00      	cmp	r3, #0
 800a332:	bfce      	itee	gt
 800a334:	462a      	movgt	r2, r5
 800a336:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a33a:	465a      	movle	r2, fp
 800a33c:	462f      	mov	r7, r5
 800a33e:	46d9      	mov	r9, fp
 800a340:	bfcc      	ite	gt
 800a342:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a346:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a34a:	464b      	mov	r3, r9
 800a34c:	4652      	mov	r2, sl
 800a34e:	4620      	mov	r0, r4
 800a350:	4639      	mov	r1, r7
 800a352:	f7f6 fa8b 	bl	800086c <__aeabi_ddiv>
 800a356:	ec41 0b10 	vmov	d0, r0, r1
 800a35a:	b005      	add	sp, #20
 800a35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a360 <__copybits>:
 800a360:	3901      	subs	r1, #1
 800a362:	b570      	push	{r4, r5, r6, lr}
 800a364:	1149      	asrs	r1, r1, #5
 800a366:	6914      	ldr	r4, [r2, #16]
 800a368:	3101      	adds	r1, #1
 800a36a:	f102 0314 	add.w	r3, r2, #20
 800a36e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a372:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a376:	1f05      	subs	r5, r0, #4
 800a378:	42a3      	cmp	r3, r4
 800a37a:	d30c      	bcc.n	800a396 <__copybits+0x36>
 800a37c:	1aa3      	subs	r3, r4, r2
 800a37e:	3b11      	subs	r3, #17
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	3211      	adds	r2, #17
 800a386:	42a2      	cmp	r2, r4
 800a388:	bf88      	it	hi
 800a38a:	2300      	movhi	r3, #0
 800a38c:	4418      	add	r0, r3
 800a38e:	2300      	movs	r3, #0
 800a390:	4288      	cmp	r0, r1
 800a392:	d305      	bcc.n	800a3a0 <__copybits+0x40>
 800a394:	bd70      	pop	{r4, r5, r6, pc}
 800a396:	f853 6b04 	ldr.w	r6, [r3], #4
 800a39a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a39e:	e7eb      	b.n	800a378 <__copybits+0x18>
 800a3a0:	f840 3b04 	str.w	r3, [r0], #4
 800a3a4:	e7f4      	b.n	800a390 <__copybits+0x30>

0800a3a6 <__any_on>:
 800a3a6:	f100 0214 	add.w	r2, r0, #20
 800a3aa:	6900      	ldr	r0, [r0, #16]
 800a3ac:	114b      	asrs	r3, r1, #5
 800a3ae:	4298      	cmp	r0, r3
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	db11      	blt.n	800a3d8 <__any_on+0x32>
 800a3b4:	dd0a      	ble.n	800a3cc <__any_on+0x26>
 800a3b6:	f011 011f 	ands.w	r1, r1, #31
 800a3ba:	d007      	beq.n	800a3cc <__any_on+0x26>
 800a3bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3c0:	fa24 f001 	lsr.w	r0, r4, r1
 800a3c4:	fa00 f101 	lsl.w	r1, r0, r1
 800a3c8:	428c      	cmp	r4, r1
 800a3ca:	d10b      	bne.n	800a3e4 <__any_on+0x3e>
 800a3cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d803      	bhi.n	800a3dc <__any_on+0x36>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	bd10      	pop	{r4, pc}
 800a3d8:	4603      	mov	r3, r0
 800a3da:	e7f7      	b.n	800a3cc <__any_on+0x26>
 800a3dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3e0:	2900      	cmp	r1, #0
 800a3e2:	d0f5      	beq.n	800a3d0 <__any_on+0x2a>
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	e7f6      	b.n	800a3d6 <__any_on+0x30>

0800a3e8 <_malloc_usable_size_r>:
 800a3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ec:	1f18      	subs	r0, r3, #4
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bfbc      	itt	lt
 800a3f2:	580b      	ldrlt	r3, [r1, r0]
 800a3f4:	18c0      	addlt	r0, r0, r3
 800a3f6:	4770      	bx	lr

0800a3f8 <__ascii_wctomb>:
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	b141      	cbz	r1, 800a410 <__ascii_wctomb+0x18>
 800a3fe:	2aff      	cmp	r2, #255	@ 0xff
 800a400:	d904      	bls.n	800a40c <__ascii_wctomb+0x14>
 800a402:	228a      	movs	r2, #138	@ 0x8a
 800a404:	601a      	str	r2, [r3, #0]
 800a406:	f04f 30ff 	mov.w	r0, #4294967295
 800a40a:	4770      	bx	lr
 800a40c:	700a      	strb	r2, [r1, #0]
 800a40e:	2001      	movs	r0, #1
 800a410:	4770      	bx	lr

0800a412 <__ssputs_r>:
 800a412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a416:	688e      	ldr	r6, [r1, #8]
 800a418:	461f      	mov	r7, r3
 800a41a:	42be      	cmp	r6, r7
 800a41c:	680b      	ldr	r3, [r1, #0]
 800a41e:	4682      	mov	sl, r0
 800a420:	460c      	mov	r4, r1
 800a422:	4690      	mov	r8, r2
 800a424:	d82d      	bhi.n	800a482 <__ssputs_r+0x70>
 800a426:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a42a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a42e:	d026      	beq.n	800a47e <__ssputs_r+0x6c>
 800a430:	6965      	ldr	r5, [r4, #20]
 800a432:	6909      	ldr	r1, [r1, #16]
 800a434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a438:	eba3 0901 	sub.w	r9, r3, r1
 800a43c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a440:	1c7b      	adds	r3, r7, #1
 800a442:	444b      	add	r3, r9
 800a444:	106d      	asrs	r5, r5, #1
 800a446:	429d      	cmp	r5, r3
 800a448:	bf38      	it	cc
 800a44a:	461d      	movcc	r5, r3
 800a44c:	0553      	lsls	r3, r2, #21
 800a44e:	d527      	bpl.n	800a4a0 <__ssputs_r+0x8e>
 800a450:	4629      	mov	r1, r5
 800a452:	f7fd fea9 	bl	80081a8 <_malloc_r>
 800a456:	4606      	mov	r6, r0
 800a458:	b360      	cbz	r0, 800a4b4 <__ssputs_r+0xa2>
 800a45a:	6921      	ldr	r1, [r4, #16]
 800a45c:	464a      	mov	r2, r9
 800a45e:	f7fe ff6c 	bl	800933a <memcpy>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	6126      	str	r6, [r4, #16]
 800a470:	6165      	str	r5, [r4, #20]
 800a472:	444e      	add	r6, r9
 800a474:	eba5 0509 	sub.w	r5, r5, r9
 800a478:	6026      	str	r6, [r4, #0]
 800a47a:	60a5      	str	r5, [r4, #8]
 800a47c:	463e      	mov	r6, r7
 800a47e:	42be      	cmp	r6, r7
 800a480:	d900      	bls.n	800a484 <__ssputs_r+0x72>
 800a482:	463e      	mov	r6, r7
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	4632      	mov	r2, r6
 800a488:	4641      	mov	r1, r8
 800a48a:	f000 fb51 	bl	800ab30 <memmove>
 800a48e:	68a3      	ldr	r3, [r4, #8]
 800a490:	1b9b      	subs	r3, r3, r6
 800a492:	60a3      	str	r3, [r4, #8]
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	4433      	add	r3, r6
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	2000      	movs	r0, #0
 800a49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a0:	462a      	mov	r2, r5
 800a4a2:	f7fd ff15 	bl	80082d0 <_realloc_r>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d1e0      	bne.n	800a46e <__ssputs_r+0x5c>
 800a4ac:	6921      	ldr	r1, [r4, #16]
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	f7fe ff5a 	bl	8009368 <_free_r>
 800a4b4:	230c      	movs	r3, #12
 800a4b6:	f8ca 3000 	str.w	r3, [sl]
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c0:	81a3      	strh	r3, [r4, #12]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	e7e9      	b.n	800a49c <__ssputs_r+0x8a>

0800a4c8 <_svfiprintf_r>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	4698      	mov	r8, r3
 800a4ce:	898b      	ldrh	r3, [r1, #12]
 800a4d0:	061b      	lsls	r3, r3, #24
 800a4d2:	b09d      	sub	sp, #116	@ 0x74
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	d510      	bpl.n	800a4fe <_svfiprintf_r+0x36>
 800a4dc:	690b      	ldr	r3, [r1, #16]
 800a4de:	b973      	cbnz	r3, 800a4fe <_svfiprintf_r+0x36>
 800a4e0:	2140      	movs	r1, #64	@ 0x40
 800a4e2:	f7fd fe61 	bl	80081a8 <_malloc_r>
 800a4e6:	6028      	str	r0, [r5, #0]
 800a4e8:	6128      	str	r0, [r5, #16]
 800a4ea:	b930      	cbnz	r0, 800a4fa <_svfiprintf_r+0x32>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	b01d      	add	sp, #116	@ 0x74
 800a4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fa:	2340      	movs	r3, #64	@ 0x40
 800a4fc:	616b      	str	r3, [r5, #20]
 800a4fe:	2300      	movs	r3, #0
 800a500:	9309      	str	r3, [sp, #36]	@ 0x24
 800a502:	2320      	movs	r3, #32
 800a504:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a508:	f8cd 800c 	str.w	r8, [sp, #12]
 800a50c:	2330      	movs	r3, #48	@ 0x30
 800a50e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6ac <_svfiprintf_r+0x1e4>
 800a512:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a516:	f04f 0901 	mov.w	r9, #1
 800a51a:	4623      	mov	r3, r4
 800a51c:	469a      	mov	sl, r3
 800a51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a522:	b10a      	cbz	r2, 800a528 <_svfiprintf_r+0x60>
 800a524:	2a25      	cmp	r2, #37	@ 0x25
 800a526:	d1f9      	bne.n	800a51c <_svfiprintf_r+0x54>
 800a528:	ebba 0b04 	subs.w	fp, sl, r4
 800a52c:	d00b      	beq.n	800a546 <_svfiprintf_r+0x7e>
 800a52e:	465b      	mov	r3, fp
 800a530:	4622      	mov	r2, r4
 800a532:	4629      	mov	r1, r5
 800a534:	4638      	mov	r0, r7
 800a536:	f7ff ff6c 	bl	800a412 <__ssputs_r>
 800a53a:	3001      	adds	r0, #1
 800a53c:	f000 80a7 	beq.w	800a68e <_svfiprintf_r+0x1c6>
 800a540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a542:	445a      	add	r2, fp
 800a544:	9209      	str	r2, [sp, #36]	@ 0x24
 800a546:	f89a 3000 	ldrb.w	r3, [sl]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 809f 	beq.w	800a68e <_svfiprintf_r+0x1c6>
 800a550:	2300      	movs	r3, #0
 800a552:	f04f 32ff 	mov.w	r2, #4294967295
 800a556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a55a:	f10a 0a01 	add.w	sl, sl, #1
 800a55e:	9304      	str	r3, [sp, #16]
 800a560:	9307      	str	r3, [sp, #28]
 800a562:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a566:	931a      	str	r3, [sp, #104]	@ 0x68
 800a568:	4654      	mov	r4, sl
 800a56a:	2205      	movs	r2, #5
 800a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a570:	484e      	ldr	r0, [pc, #312]	@ (800a6ac <_svfiprintf_r+0x1e4>)
 800a572:	f7f5 fe45 	bl	8000200 <memchr>
 800a576:	9a04      	ldr	r2, [sp, #16]
 800a578:	b9d8      	cbnz	r0, 800a5b2 <_svfiprintf_r+0xea>
 800a57a:	06d0      	lsls	r0, r2, #27
 800a57c:	bf44      	itt	mi
 800a57e:	2320      	movmi	r3, #32
 800a580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a584:	0711      	lsls	r1, r2, #28
 800a586:	bf44      	itt	mi
 800a588:	232b      	movmi	r3, #43	@ 0x2b
 800a58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a58e:	f89a 3000 	ldrb.w	r3, [sl]
 800a592:	2b2a      	cmp	r3, #42	@ 0x2a
 800a594:	d015      	beq.n	800a5c2 <_svfiprintf_r+0xfa>
 800a596:	9a07      	ldr	r2, [sp, #28]
 800a598:	4654      	mov	r4, sl
 800a59a:	2000      	movs	r0, #0
 800a59c:	f04f 0c0a 	mov.w	ip, #10
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a6:	3b30      	subs	r3, #48	@ 0x30
 800a5a8:	2b09      	cmp	r3, #9
 800a5aa:	d94b      	bls.n	800a644 <_svfiprintf_r+0x17c>
 800a5ac:	b1b0      	cbz	r0, 800a5dc <_svfiprintf_r+0x114>
 800a5ae:	9207      	str	r2, [sp, #28]
 800a5b0:	e014      	b.n	800a5dc <_svfiprintf_r+0x114>
 800a5b2:	eba0 0308 	sub.w	r3, r0, r8
 800a5b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	9304      	str	r3, [sp, #16]
 800a5be:	46a2      	mov	sl, r4
 800a5c0:	e7d2      	b.n	800a568 <_svfiprintf_r+0xa0>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	1d19      	adds	r1, r3, #4
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	9103      	str	r1, [sp, #12]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	bfbb      	ittet	lt
 800a5ce:	425b      	neglt	r3, r3
 800a5d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d4:	9307      	strge	r3, [sp, #28]
 800a5d6:	9307      	strlt	r3, [sp, #28]
 800a5d8:	bfb8      	it	lt
 800a5da:	9204      	strlt	r2, [sp, #16]
 800a5dc:	7823      	ldrb	r3, [r4, #0]
 800a5de:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5e0:	d10a      	bne.n	800a5f8 <_svfiprintf_r+0x130>
 800a5e2:	7863      	ldrb	r3, [r4, #1]
 800a5e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e6:	d132      	bne.n	800a64e <_svfiprintf_r+0x186>
 800a5e8:	9b03      	ldr	r3, [sp, #12]
 800a5ea:	1d1a      	adds	r2, r3, #4
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	9203      	str	r2, [sp, #12]
 800a5f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5f4:	3402      	adds	r4, #2
 800a5f6:	9305      	str	r3, [sp, #20]
 800a5f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6bc <_svfiprintf_r+0x1f4>
 800a5fc:	7821      	ldrb	r1, [r4, #0]
 800a5fe:	2203      	movs	r2, #3
 800a600:	4650      	mov	r0, sl
 800a602:	f7f5 fdfd 	bl	8000200 <memchr>
 800a606:	b138      	cbz	r0, 800a618 <_svfiprintf_r+0x150>
 800a608:	9b04      	ldr	r3, [sp, #16]
 800a60a:	eba0 000a 	sub.w	r0, r0, sl
 800a60e:	2240      	movs	r2, #64	@ 0x40
 800a610:	4082      	lsls	r2, r0
 800a612:	4313      	orrs	r3, r2
 800a614:	3401      	adds	r4, #1
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a61c:	4824      	ldr	r0, [pc, #144]	@ (800a6b0 <_svfiprintf_r+0x1e8>)
 800a61e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a622:	2206      	movs	r2, #6
 800a624:	f7f5 fdec 	bl	8000200 <memchr>
 800a628:	2800      	cmp	r0, #0
 800a62a:	d036      	beq.n	800a69a <_svfiprintf_r+0x1d2>
 800a62c:	4b21      	ldr	r3, [pc, #132]	@ (800a6b4 <_svfiprintf_r+0x1ec>)
 800a62e:	bb1b      	cbnz	r3, 800a678 <_svfiprintf_r+0x1b0>
 800a630:	9b03      	ldr	r3, [sp, #12]
 800a632:	3307      	adds	r3, #7
 800a634:	f023 0307 	bic.w	r3, r3, #7
 800a638:	3308      	adds	r3, #8
 800a63a:	9303      	str	r3, [sp, #12]
 800a63c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63e:	4433      	add	r3, r6
 800a640:	9309      	str	r3, [sp, #36]	@ 0x24
 800a642:	e76a      	b.n	800a51a <_svfiprintf_r+0x52>
 800a644:	fb0c 3202 	mla	r2, ip, r2, r3
 800a648:	460c      	mov	r4, r1
 800a64a:	2001      	movs	r0, #1
 800a64c:	e7a8      	b.n	800a5a0 <_svfiprintf_r+0xd8>
 800a64e:	2300      	movs	r3, #0
 800a650:	3401      	adds	r4, #1
 800a652:	9305      	str	r3, [sp, #20]
 800a654:	4619      	mov	r1, r3
 800a656:	f04f 0c0a 	mov.w	ip, #10
 800a65a:	4620      	mov	r0, r4
 800a65c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a660:	3a30      	subs	r2, #48	@ 0x30
 800a662:	2a09      	cmp	r2, #9
 800a664:	d903      	bls.n	800a66e <_svfiprintf_r+0x1a6>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0c6      	beq.n	800a5f8 <_svfiprintf_r+0x130>
 800a66a:	9105      	str	r1, [sp, #20]
 800a66c:	e7c4      	b.n	800a5f8 <_svfiprintf_r+0x130>
 800a66e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a672:	4604      	mov	r4, r0
 800a674:	2301      	movs	r3, #1
 800a676:	e7f0      	b.n	800a65a <_svfiprintf_r+0x192>
 800a678:	ab03      	add	r3, sp, #12
 800a67a:	9300      	str	r3, [sp, #0]
 800a67c:	462a      	mov	r2, r5
 800a67e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b8 <_svfiprintf_r+0x1f0>)
 800a680:	a904      	add	r1, sp, #16
 800a682:	4638      	mov	r0, r7
 800a684:	f3af 8000 	nop.w
 800a688:	1c42      	adds	r2, r0, #1
 800a68a:	4606      	mov	r6, r0
 800a68c:	d1d6      	bne.n	800a63c <_svfiprintf_r+0x174>
 800a68e:	89ab      	ldrh	r3, [r5, #12]
 800a690:	065b      	lsls	r3, r3, #25
 800a692:	f53f af2d 	bmi.w	800a4f0 <_svfiprintf_r+0x28>
 800a696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a698:	e72c      	b.n	800a4f4 <_svfiprintf_r+0x2c>
 800a69a:	ab03      	add	r3, sp, #12
 800a69c:	9300      	str	r3, [sp, #0]
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4b05      	ldr	r3, [pc, #20]	@ (800a6b8 <_svfiprintf_r+0x1f0>)
 800a6a2:	a904      	add	r1, sp, #16
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	f000 f879 	bl	800a79c <_printf_i>
 800a6aa:	e7ed      	b.n	800a688 <_svfiprintf_r+0x1c0>
 800a6ac:	08032f67 	.word	0x08032f67
 800a6b0:	08032f71 	.word	0x08032f71
 800a6b4:	00000000 	.word	0x00000000
 800a6b8:	0800a413 	.word	0x0800a413
 800a6bc:	08032f6d 	.word	0x08032f6d

0800a6c0 <_printf_common>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	4616      	mov	r6, r2
 800a6c6:	4698      	mov	r8, r3
 800a6c8:	688a      	ldr	r2, [r1, #8]
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	bfb8      	it	lt
 800a6d4:	4613      	movlt	r3, r2
 800a6d6:	6033      	str	r3, [r6, #0]
 800a6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6dc:	4607      	mov	r7, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	b10a      	cbz	r2, 800a6e6 <_printf_common+0x26>
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	6033      	str	r3, [r6, #0]
 800a6e6:	6823      	ldr	r3, [r4, #0]
 800a6e8:	0699      	lsls	r1, r3, #26
 800a6ea:	bf42      	ittt	mi
 800a6ec:	6833      	ldrmi	r3, [r6, #0]
 800a6ee:	3302      	addmi	r3, #2
 800a6f0:	6033      	strmi	r3, [r6, #0]
 800a6f2:	6825      	ldr	r5, [r4, #0]
 800a6f4:	f015 0506 	ands.w	r5, r5, #6
 800a6f8:	d106      	bne.n	800a708 <_printf_common+0x48>
 800a6fa:	f104 0a19 	add.w	sl, r4, #25
 800a6fe:	68e3      	ldr	r3, [r4, #12]
 800a700:	6832      	ldr	r2, [r6, #0]
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	42ab      	cmp	r3, r5
 800a706:	dc26      	bgt.n	800a756 <_printf_common+0x96>
 800a708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a70c:	6822      	ldr	r2, [r4, #0]
 800a70e:	3b00      	subs	r3, #0
 800a710:	bf18      	it	ne
 800a712:	2301      	movne	r3, #1
 800a714:	0692      	lsls	r2, r2, #26
 800a716:	d42b      	bmi.n	800a770 <_printf_common+0xb0>
 800a718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a71c:	4641      	mov	r1, r8
 800a71e:	4638      	mov	r0, r7
 800a720:	47c8      	blx	r9
 800a722:	3001      	adds	r0, #1
 800a724:	d01e      	beq.n	800a764 <_printf_common+0xa4>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	6922      	ldr	r2, [r4, #16]
 800a72a:	f003 0306 	and.w	r3, r3, #6
 800a72e:	2b04      	cmp	r3, #4
 800a730:	bf02      	ittt	eq
 800a732:	68e5      	ldreq	r5, [r4, #12]
 800a734:	6833      	ldreq	r3, [r6, #0]
 800a736:	1aed      	subeq	r5, r5, r3
 800a738:	68a3      	ldr	r3, [r4, #8]
 800a73a:	bf0c      	ite	eq
 800a73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a740:	2500      	movne	r5, #0
 800a742:	4293      	cmp	r3, r2
 800a744:	bfc4      	itt	gt
 800a746:	1a9b      	subgt	r3, r3, r2
 800a748:	18ed      	addgt	r5, r5, r3
 800a74a:	2600      	movs	r6, #0
 800a74c:	341a      	adds	r4, #26
 800a74e:	42b5      	cmp	r5, r6
 800a750:	d11a      	bne.n	800a788 <_printf_common+0xc8>
 800a752:	2000      	movs	r0, #0
 800a754:	e008      	b.n	800a768 <_printf_common+0xa8>
 800a756:	2301      	movs	r3, #1
 800a758:	4652      	mov	r2, sl
 800a75a:	4641      	mov	r1, r8
 800a75c:	4638      	mov	r0, r7
 800a75e:	47c8      	blx	r9
 800a760:	3001      	adds	r0, #1
 800a762:	d103      	bne.n	800a76c <_printf_common+0xac>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76c:	3501      	adds	r5, #1
 800a76e:	e7c6      	b.n	800a6fe <_printf_common+0x3e>
 800a770:	18e1      	adds	r1, r4, r3
 800a772:	1c5a      	adds	r2, r3, #1
 800a774:	2030      	movs	r0, #48	@ 0x30
 800a776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a77a:	4422      	add	r2, r4
 800a77c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a784:	3302      	adds	r3, #2
 800a786:	e7c7      	b.n	800a718 <_printf_common+0x58>
 800a788:	2301      	movs	r3, #1
 800a78a:	4622      	mov	r2, r4
 800a78c:	4641      	mov	r1, r8
 800a78e:	4638      	mov	r0, r7
 800a790:	47c8      	blx	r9
 800a792:	3001      	adds	r0, #1
 800a794:	d0e6      	beq.n	800a764 <_printf_common+0xa4>
 800a796:	3601      	adds	r6, #1
 800a798:	e7d9      	b.n	800a74e <_printf_common+0x8e>
	...

0800a79c <_printf_i>:
 800a79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a0:	7e0f      	ldrb	r7, [r1, #24]
 800a7a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7a4:	2f78      	cmp	r7, #120	@ 0x78
 800a7a6:	4691      	mov	r9, r2
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	469a      	mov	sl, r3
 800a7ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7b2:	d807      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7b4:	2f62      	cmp	r7, #98	@ 0x62
 800a7b6:	d80a      	bhi.n	800a7ce <_printf_i+0x32>
 800a7b8:	2f00      	cmp	r7, #0
 800a7ba:	f000 80d1 	beq.w	800a960 <_printf_i+0x1c4>
 800a7be:	2f58      	cmp	r7, #88	@ 0x58
 800a7c0:	f000 80b8 	beq.w	800a934 <_printf_i+0x198>
 800a7c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7cc:	e03a      	b.n	800a844 <_printf_i+0xa8>
 800a7ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7d2:	2b15      	cmp	r3, #21
 800a7d4:	d8f6      	bhi.n	800a7c4 <_printf_i+0x28>
 800a7d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a7dc <_printf_i+0x40>)
 800a7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7dc:	0800a835 	.word	0x0800a835
 800a7e0:	0800a849 	.word	0x0800a849
 800a7e4:	0800a7c5 	.word	0x0800a7c5
 800a7e8:	0800a7c5 	.word	0x0800a7c5
 800a7ec:	0800a7c5 	.word	0x0800a7c5
 800a7f0:	0800a7c5 	.word	0x0800a7c5
 800a7f4:	0800a849 	.word	0x0800a849
 800a7f8:	0800a7c5 	.word	0x0800a7c5
 800a7fc:	0800a7c5 	.word	0x0800a7c5
 800a800:	0800a7c5 	.word	0x0800a7c5
 800a804:	0800a7c5 	.word	0x0800a7c5
 800a808:	0800a947 	.word	0x0800a947
 800a80c:	0800a873 	.word	0x0800a873
 800a810:	0800a901 	.word	0x0800a901
 800a814:	0800a7c5 	.word	0x0800a7c5
 800a818:	0800a7c5 	.word	0x0800a7c5
 800a81c:	0800a969 	.word	0x0800a969
 800a820:	0800a7c5 	.word	0x0800a7c5
 800a824:	0800a873 	.word	0x0800a873
 800a828:	0800a7c5 	.word	0x0800a7c5
 800a82c:	0800a7c5 	.word	0x0800a7c5
 800a830:	0800a909 	.word	0x0800a909
 800a834:	6833      	ldr	r3, [r6, #0]
 800a836:	1d1a      	adds	r2, r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6032      	str	r2, [r6, #0]
 800a83c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a844:	2301      	movs	r3, #1
 800a846:	e09c      	b.n	800a982 <_printf_i+0x1e6>
 800a848:	6833      	ldr	r3, [r6, #0]
 800a84a:	6820      	ldr	r0, [r4, #0]
 800a84c:	1d19      	adds	r1, r3, #4
 800a84e:	6031      	str	r1, [r6, #0]
 800a850:	0606      	lsls	r6, r0, #24
 800a852:	d501      	bpl.n	800a858 <_printf_i+0xbc>
 800a854:	681d      	ldr	r5, [r3, #0]
 800a856:	e003      	b.n	800a860 <_printf_i+0xc4>
 800a858:	0645      	lsls	r5, r0, #25
 800a85a:	d5fb      	bpl.n	800a854 <_printf_i+0xb8>
 800a85c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a860:	2d00      	cmp	r5, #0
 800a862:	da03      	bge.n	800a86c <_printf_i+0xd0>
 800a864:	232d      	movs	r3, #45	@ 0x2d
 800a866:	426d      	negs	r5, r5
 800a868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a86c:	4858      	ldr	r0, [pc, #352]	@ (800a9d0 <_printf_i+0x234>)
 800a86e:	230a      	movs	r3, #10
 800a870:	e011      	b.n	800a896 <_printf_i+0xfa>
 800a872:	6821      	ldr	r1, [r4, #0]
 800a874:	6833      	ldr	r3, [r6, #0]
 800a876:	0608      	lsls	r0, r1, #24
 800a878:	f853 5b04 	ldr.w	r5, [r3], #4
 800a87c:	d402      	bmi.n	800a884 <_printf_i+0xe8>
 800a87e:	0649      	lsls	r1, r1, #25
 800a880:	bf48      	it	mi
 800a882:	b2ad      	uxthmi	r5, r5
 800a884:	2f6f      	cmp	r7, #111	@ 0x6f
 800a886:	4852      	ldr	r0, [pc, #328]	@ (800a9d0 <_printf_i+0x234>)
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	bf14      	ite	ne
 800a88c:	230a      	movne	r3, #10
 800a88e:	2308      	moveq	r3, #8
 800a890:	2100      	movs	r1, #0
 800a892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a896:	6866      	ldr	r6, [r4, #4]
 800a898:	60a6      	str	r6, [r4, #8]
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	db05      	blt.n	800a8aa <_printf_i+0x10e>
 800a89e:	6821      	ldr	r1, [r4, #0]
 800a8a0:	432e      	orrs	r6, r5
 800a8a2:	f021 0104 	bic.w	r1, r1, #4
 800a8a6:	6021      	str	r1, [r4, #0]
 800a8a8:	d04b      	beq.n	800a942 <_printf_i+0x1a6>
 800a8aa:	4616      	mov	r6, r2
 800a8ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a8b4:	5dc7      	ldrb	r7, [r0, r7]
 800a8b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8ba:	462f      	mov	r7, r5
 800a8bc:	42bb      	cmp	r3, r7
 800a8be:	460d      	mov	r5, r1
 800a8c0:	d9f4      	bls.n	800a8ac <_printf_i+0x110>
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d10b      	bne.n	800a8de <_printf_i+0x142>
 800a8c6:	6823      	ldr	r3, [r4, #0]
 800a8c8:	07df      	lsls	r7, r3, #31
 800a8ca:	d508      	bpl.n	800a8de <_printf_i+0x142>
 800a8cc:	6923      	ldr	r3, [r4, #16]
 800a8ce:	6861      	ldr	r1, [r4, #4]
 800a8d0:	4299      	cmp	r1, r3
 800a8d2:	bfde      	ittt	le
 800a8d4:	2330      	movle	r3, #48	@ 0x30
 800a8d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8de:	1b92      	subs	r2, r2, r6
 800a8e0:	6122      	str	r2, [r4, #16]
 800a8e2:	f8cd a000 	str.w	sl, [sp]
 800a8e6:	464b      	mov	r3, r9
 800a8e8:	aa03      	add	r2, sp, #12
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	f7ff fee7 	bl	800a6c0 <_printf_common>
 800a8f2:	3001      	adds	r0, #1
 800a8f4:	d14a      	bne.n	800a98c <_printf_i+0x1f0>
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	b004      	add	sp, #16
 800a8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a900:	6823      	ldr	r3, [r4, #0]
 800a902:	f043 0320 	orr.w	r3, r3, #32
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	4832      	ldr	r0, [pc, #200]	@ (800a9d4 <_printf_i+0x238>)
 800a90a:	2778      	movs	r7, #120	@ 0x78
 800a90c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	6831      	ldr	r1, [r6, #0]
 800a914:	061f      	lsls	r7, r3, #24
 800a916:	f851 5b04 	ldr.w	r5, [r1], #4
 800a91a:	d402      	bmi.n	800a922 <_printf_i+0x186>
 800a91c:	065f      	lsls	r7, r3, #25
 800a91e:	bf48      	it	mi
 800a920:	b2ad      	uxthmi	r5, r5
 800a922:	6031      	str	r1, [r6, #0]
 800a924:	07d9      	lsls	r1, r3, #31
 800a926:	bf44      	itt	mi
 800a928:	f043 0320 	orrmi.w	r3, r3, #32
 800a92c:	6023      	strmi	r3, [r4, #0]
 800a92e:	b11d      	cbz	r5, 800a938 <_printf_i+0x19c>
 800a930:	2310      	movs	r3, #16
 800a932:	e7ad      	b.n	800a890 <_printf_i+0xf4>
 800a934:	4826      	ldr	r0, [pc, #152]	@ (800a9d0 <_printf_i+0x234>)
 800a936:	e7e9      	b.n	800a90c <_printf_i+0x170>
 800a938:	6823      	ldr	r3, [r4, #0]
 800a93a:	f023 0320 	bic.w	r3, r3, #32
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	e7f6      	b.n	800a930 <_printf_i+0x194>
 800a942:	4616      	mov	r6, r2
 800a944:	e7bd      	b.n	800a8c2 <_printf_i+0x126>
 800a946:	6833      	ldr	r3, [r6, #0]
 800a948:	6825      	ldr	r5, [r4, #0]
 800a94a:	6961      	ldr	r1, [r4, #20]
 800a94c:	1d18      	adds	r0, r3, #4
 800a94e:	6030      	str	r0, [r6, #0]
 800a950:	062e      	lsls	r6, r5, #24
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	d501      	bpl.n	800a95a <_printf_i+0x1be>
 800a956:	6019      	str	r1, [r3, #0]
 800a958:	e002      	b.n	800a960 <_printf_i+0x1c4>
 800a95a:	0668      	lsls	r0, r5, #25
 800a95c:	d5fb      	bpl.n	800a956 <_printf_i+0x1ba>
 800a95e:	8019      	strh	r1, [r3, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	4616      	mov	r6, r2
 800a966:	e7bc      	b.n	800a8e2 <_printf_i+0x146>
 800a968:	6833      	ldr	r3, [r6, #0]
 800a96a:	1d1a      	adds	r2, r3, #4
 800a96c:	6032      	str	r2, [r6, #0]
 800a96e:	681e      	ldr	r6, [r3, #0]
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	2100      	movs	r1, #0
 800a974:	4630      	mov	r0, r6
 800a976:	f7f5 fc43 	bl	8000200 <memchr>
 800a97a:	b108      	cbz	r0, 800a980 <_printf_i+0x1e4>
 800a97c:	1b80      	subs	r0, r0, r6
 800a97e:	6060      	str	r0, [r4, #4]
 800a980:	6863      	ldr	r3, [r4, #4]
 800a982:	6123      	str	r3, [r4, #16]
 800a984:	2300      	movs	r3, #0
 800a986:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a98a:	e7aa      	b.n	800a8e2 <_printf_i+0x146>
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	4632      	mov	r2, r6
 800a990:	4649      	mov	r1, r9
 800a992:	4640      	mov	r0, r8
 800a994:	47d0      	blx	sl
 800a996:	3001      	adds	r0, #1
 800a998:	d0ad      	beq.n	800a8f6 <_printf_i+0x15a>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	079b      	lsls	r3, r3, #30
 800a99e:	d413      	bmi.n	800a9c8 <_printf_i+0x22c>
 800a9a0:	68e0      	ldr	r0, [r4, #12]
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	4298      	cmp	r0, r3
 800a9a6:	bfb8      	it	lt
 800a9a8:	4618      	movlt	r0, r3
 800a9aa:	e7a6      	b.n	800a8fa <_printf_i+0x15e>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	47d0      	blx	sl
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	d09d      	beq.n	800a8f6 <_printf_i+0x15a>
 800a9ba:	3501      	adds	r5, #1
 800a9bc:	68e3      	ldr	r3, [r4, #12]
 800a9be:	9903      	ldr	r1, [sp, #12]
 800a9c0:	1a5b      	subs	r3, r3, r1
 800a9c2:	42ab      	cmp	r3, r5
 800a9c4:	dcf2      	bgt.n	800a9ac <_printf_i+0x210>
 800a9c6:	e7eb      	b.n	800a9a0 <_printf_i+0x204>
 800a9c8:	2500      	movs	r5, #0
 800a9ca:	f104 0619 	add.w	r6, r4, #25
 800a9ce:	e7f5      	b.n	800a9bc <_printf_i+0x220>
 800a9d0:	08032f78 	.word	0x08032f78
 800a9d4:	08032f89 	.word	0x08032f89

0800a9d8 <__sflush_r>:
 800a9d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	0716      	lsls	r6, r2, #28
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	d454      	bmi.n	800aa92 <__sflush_r+0xba>
 800a9e8:	684b      	ldr	r3, [r1, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dc02      	bgt.n	800a9f4 <__sflush_r+0x1c>
 800a9ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	dd48      	ble.n	800aa86 <__sflush_r+0xae>
 800a9f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	d045      	beq.n	800aa86 <__sflush_r+0xae>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa00:	682f      	ldr	r7, [r5, #0]
 800aa02:	6a21      	ldr	r1, [r4, #32]
 800aa04:	602b      	str	r3, [r5, #0]
 800aa06:	d030      	beq.n	800aa6a <__sflush_r+0x92>
 800aa08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa0a:	89a3      	ldrh	r3, [r4, #12]
 800aa0c:	0759      	lsls	r1, r3, #29
 800aa0e:	d505      	bpl.n	800aa1c <__sflush_r+0x44>
 800aa10:	6863      	ldr	r3, [r4, #4]
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa16:	b10b      	cbz	r3, 800aa1c <__sflush_r+0x44>
 800aa18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa1a:	1ad2      	subs	r2, r2, r3
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa20:	6a21      	ldr	r1, [r4, #32]
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b0      	blx	r6
 800aa26:	1c43      	adds	r3, r0, #1
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	d106      	bne.n	800aa3a <__sflush_r+0x62>
 800aa2c:	6829      	ldr	r1, [r5, #0]
 800aa2e:	291d      	cmp	r1, #29
 800aa30:	d82b      	bhi.n	800aa8a <__sflush_r+0xb2>
 800aa32:	4a2a      	ldr	r2, [pc, #168]	@ (800aadc <__sflush_r+0x104>)
 800aa34:	40ca      	lsrs	r2, r1
 800aa36:	07d6      	lsls	r6, r2, #31
 800aa38:	d527      	bpl.n	800aa8a <__sflush_r+0xb2>
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	6062      	str	r2, [r4, #4]
 800aa3e:	04d9      	lsls	r1, r3, #19
 800aa40:	6922      	ldr	r2, [r4, #16]
 800aa42:	6022      	str	r2, [r4, #0]
 800aa44:	d504      	bpl.n	800aa50 <__sflush_r+0x78>
 800aa46:	1c42      	adds	r2, r0, #1
 800aa48:	d101      	bne.n	800aa4e <__sflush_r+0x76>
 800aa4a:	682b      	ldr	r3, [r5, #0]
 800aa4c:	b903      	cbnz	r3, 800aa50 <__sflush_r+0x78>
 800aa4e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa52:	602f      	str	r7, [r5, #0]
 800aa54:	b1b9      	cbz	r1, 800aa86 <__sflush_r+0xae>
 800aa56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d002      	beq.n	800aa64 <__sflush_r+0x8c>
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7fe fc82 	bl	8009368 <_free_r>
 800aa64:	2300      	movs	r3, #0
 800aa66:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa68:	e00d      	b.n	800aa86 <__sflush_r+0xae>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b0      	blx	r6
 800aa70:	4602      	mov	r2, r0
 800aa72:	1c50      	adds	r0, r2, #1
 800aa74:	d1c9      	bne.n	800aa0a <__sflush_r+0x32>
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0c6      	beq.n	800aa0a <__sflush_r+0x32>
 800aa7c:	2b1d      	cmp	r3, #29
 800aa7e:	d001      	beq.n	800aa84 <__sflush_r+0xac>
 800aa80:	2b16      	cmp	r3, #22
 800aa82:	d11e      	bne.n	800aac2 <__sflush_r+0xea>
 800aa84:	602f      	str	r7, [r5, #0]
 800aa86:	2000      	movs	r0, #0
 800aa88:	e022      	b.n	800aad0 <__sflush_r+0xf8>
 800aa8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa8e:	b21b      	sxth	r3, r3
 800aa90:	e01b      	b.n	800aaca <__sflush_r+0xf2>
 800aa92:	690f      	ldr	r7, [r1, #16]
 800aa94:	2f00      	cmp	r7, #0
 800aa96:	d0f6      	beq.n	800aa86 <__sflush_r+0xae>
 800aa98:	0793      	lsls	r3, r2, #30
 800aa9a:	680e      	ldr	r6, [r1, #0]
 800aa9c:	bf08      	it	eq
 800aa9e:	694b      	ldreq	r3, [r1, #20]
 800aaa0:	600f      	str	r7, [r1, #0]
 800aaa2:	bf18      	it	ne
 800aaa4:	2300      	movne	r3, #0
 800aaa6:	eba6 0807 	sub.w	r8, r6, r7
 800aaaa:	608b      	str	r3, [r1, #8]
 800aaac:	f1b8 0f00 	cmp.w	r8, #0
 800aab0:	dde9      	ble.n	800aa86 <__sflush_r+0xae>
 800aab2:	6a21      	ldr	r1, [r4, #32]
 800aab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aab6:	4643      	mov	r3, r8
 800aab8:	463a      	mov	r2, r7
 800aaba:	4628      	mov	r0, r5
 800aabc:	47b0      	blx	r6
 800aabe:	2800      	cmp	r0, #0
 800aac0:	dc08      	bgt.n	800aad4 <__sflush_r+0xfc>
 800aac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaca:	81a3      	strh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aad4:	4407      	add	r7, r0
 800aad6:	eba8 0800 	sub.w	r8, r8, r0
 800aada:	e7e7      	b.n	800aaac <__sflush_r+0xd4>
 800aadc:	20400001 	.word	0x20400001

0800aae0 <_fflush_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	690b      	ldr	r3, [r1, #16]
 800aae4:	4605      	mov	r5, r0
 800aae6:	460c      	mov	r4, r1
 800aae8:	b913      	cbnz	r3, 800aaf0 <_fflush_r+0x10>
 800aaea:	2500      	movs	r5, #0
 800aaec:	4628      	mov	r0, r5
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	b118      	cbz	r0, 800aafa <_fflush_r+0x1a>
 800aaf2:	6a03      	ldr	r3, [r0, #32]
 800aaf4:	b90b      	cbnz	r3, 800aafa <_fflush_r+0x1a>
 800aaf6:	f7fe fab3 	bl	8009060 <__sinit>
 800aafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0f3      	beq.n	800aaea <_fflush_r+0xa>
 800ab02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab04:	07d0      	lsls	r0, r2, #31
 800ab06:	d404      	bmi.n	800ab12 <_fflush_r+0x32>
 800ab08:	0599      	lsls	r1, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_fflush_r+0x32>
 800ab0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab0e:	f7fe fc0a 	bl	8009326 <__retarget_lock_acquire_recursive>
 800ab12:	4628      	mov	r0, r5
 800ab14:	4621      	mov	r1, r4
 800ab16:	f7ff ff5f 	bl	800a9d8 <__sflush_r>
 800ab1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab1c:	07da      	lsls	r2, r3, #31
 800ab1e:	4605      	mov	r5, r0
 800ab20:	d4e4      	bmi.n	800aaec <_fflush_r+0xc>
 800ab22:	89a3      	ldrh	r3, [r4, #12]
 800ab24:	059b      	lsls	r3, r3, #22
 800ab26:	d4e1      	bmi.n	800aaec <_fflush_r+0xc>
 800ab28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab2a:	f7fe fbfd 	bl	8009328 <__retarget_lock_release_recursive>
 800ab2e:	e7dd      	b.n	800aaec <_fflush_r+0xc>

0800ab30 <memmove>:
 800ab30:	4288      	cmp	r0, r1
 800ab32:	b510      	push	{r4, lr}
 800ab34:	eb01 0402 	add.w	r4, r1, r2
 800ab38:	d902      	bls.n	800ab40 <memmove+0x10>
 800ab3a:	4284      	cmp	r4, r0
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	d807      	bhi.n	800ab50 <memmove+0x20>
 800ab40:	1e43      	subs	r3, r0, #1
 800ab42:	42a1      	cmp	r1, r4
 800ab44:	d008      	beq.n	800ab58 <memmove+0x28>
 800ab46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab4e:	e7f8      	b.n	800ab42 <memmove+0x12>
 800ab50:	4402      	add	r2, r0
 800ab52:	4601      	mov	r1, r0
 800ab54:	428a      	cmp	r2, r1
 800ab56:	d100      	bne.n	800ab5a <memmove+0x2a>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab62:	e7f7      	b.n	800ab54 <memmove+0x24>

0800ab64 <__assert_func>:
 800ab64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab66:	4614      	mov	r4, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	@ (800ab90 <__assert_func+0x2c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	68d8      	ldr	r0, [r3, #12]
 800ab72:	b14c      	cbz	r4, 800ab88 <__assert_func+0x24>
 800ab74:	4b07      	ldr	r3, [pc, #28]	@ (800ab94 <__assert_func+0x30>)
 800ab76:	9100      	str	r1, [sp, #0]
 800ab78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab7c:	4906      	ldr	r1, [pc, #24]	@ (800ab98 <__assert_func+0x34>)
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f000 f822 	bl	800abc8 <fiprintf>
 800ab84:	f000 f832 	bl	800abec <abort>
 800ab88:	4b04      	ldr	r3, [pc, #16]	@ (800ab9c <__assert_func+0x38>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e7f3      	b.n	800ab76 <__assert_func+0x12>
 800ab8e:	bf00      	nop
 800ab90:	200001e0 	.word	0x200001e0
 800ab94:	08032f9a 	.word	0x08032f9a
 800ab98:	08032fa7 	.word	0x08032fa7
 800ab9c:	08032fd5 	.word	0x08032fd5

0800aba0 <_calloc_r>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	fba1 5402 	umull	r5, r4, r1, r2
 800aba6:	b934      	cbnz	r4, 800abb6 <_calloc_r+0x16>
 800aba8:	4629      	mov	r1, r5
 800abaa:	f7fd fafd 	bl	80081a8 <_malloc_r>
 800abae:	4606      	mov	r6, r0
 800abb0:	b928      	cbnz	r0, 800abbe <_calloc_r+0x1e>
 800abb2:	4630      	mov	r0, r6
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	220c      	movs	r2, #12
 800abb8:	6002      	str	r2, [r0, #0]
 800abba:	2600      	movs	r6, #0
 800abbc:	e7f9      	b.n	800abb2 <_calloc_r+0x12>
 800abbe:	462a      	mov	r2, r5
 800abc0:	4621      	mov	r1, r4
 800abc2:	f7fe fae7 	bl	8009194 <memset>
 800abc6:	e7f4      	b.n	800abb2 <_calloc_r+0x12>

0800abc8 <fiprintf>:
 800abc8:	b40e      	push	{r1, r2, r3}
 800abca:	b503      	push	{r0, r1, lr}
 800abcc:	4601      	mov	r1, r0
 800abce:	ab03      	add	r3, sp, #12
 800abd0:	4805      	ldr	r0, [pc, #20]	@ (800abe8 <fiprintf+0x20>)
 800abd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd6:	6800      	ldr	r0, [r0, #0]
 800abd8:	9301      	str	r3, [sp, #4]
 800abda:	f000 f837 	bl	800ac4c <_vfiprintf_r>
 800abde:	b002      	add	sp, #8
 800abe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe4:	b003      	add	sp, #12
 800abe6:	4770      	bx	lr
 800abe8:	200001e0 	.word	0x200001e0

0800abec <abort>:
 800abec:	b508      	push	{r3, lr}
 800abee:	2006      	movs	r0, #6
 800abf0:	f000 fa00 	bl	800aff4 <raise>
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7fa fb3b 	bl	8005270 <_exit>

0800abfa <__sfputc_r>:
 800abfa:	6893      	ldr	r3, [r2, #8]
 800abfc:	3b01      	subs	r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	b410      	push	{r4}
 800ac02:	6093      	str	r3, [r2, #8]
 800ac04:	da08      	bge.n	800ac18 <__sfputc_r+0x1e>
 800ac06:	6994      	ldr	r4, [r2, #24]
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	db01      	blt.n	800ac10 <__sfputc_r+0x16>
 800ac0c:	290a      	cmp	r1, #10
 800ac0e:	d103      	bne.n	800ac18 <__sfputc_r+0x1e>
 800ac10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac14:	f000 b932 	b.w	800ae7c <__swbuf_r>
 800ac18:	6813      	ldr	r3, [r2, #0]
 800ac1a:	1c58      	adds	r0, r3, #1
 800ac1c:	6010      	str	r0, [r2, #0]
 800ac1e:	7019      	strb	r1, [r3, #0]
 800ac20:	4608      	mov	r0, r1
 800ac22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <__sfputs_r>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	4614      	mov	r4, r2
 800ac30:	18d5      	adds	r5, r2, r3
 800ac32:	42ac      	cmp	r4, r5
 800ac34:	d101      	bne.n	800ac3a <__sfputs_r+0x12>
 800ac36:	2000      	movs	r0, #0
 800ac38:	e007      	b.n	800ac4a <__sfputs_r+0x22>
 800ac3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac3e:	463a      	mov	r2, r7
 800ac40:	4630      	mov	r0, r6
 800ac42:	f7ff ffda 	bl	800abfa <__sfputc_r>
 800ac46:	1c43      	adds	r3, r0, #1
 800ac48:	d1f3      	bne.n	800ac32 <__sfputs_r+0xa>
 800ac4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ac4c <_vfiprintf_r>:
 800ac4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac50:	460d      	mov	r5, r1
 800ac52:	b09d      	sub	sp, #116	@ 0x74
 800ac54:	4614      	mov	r4, r2
 800ac56:	4698      	mov	r8, r3
 800ac58:	4606      	mov	r6, r0
 800ac5a:	b118      	cbz	r0, 800ac64 <_vfiprintf_r+0x18>
 800ac5c:	6a03      	ldr	r3, [r0, #32]
 800ac5e:	b90b      	cbnz	r3, 800ac64 <_vfiprintf_r+0x18>
 800ac60:	f7fe f9fe 	bl	8009060 <__sinit>
 800ac64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	d405      	bmi.n	800ac76 <_vfiprintf_r+0x2a>
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	059a      	lsls	r2, r3, #22
 800ac6e:	d402      	bmi.n	800ac76 <_vfiprintf_r+0x2a>
 800ac70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac72:	f7fe fb58 	bl	8009326 <__retarget_lock_acquire_recursive>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	071b      	lsls	r3, r3, #28
 800ac7a:	d501      	bpl.n	800ac80 <_vfiprintf_r+0x34>
 800ac7c:	692b      	ldr	r3, [r5, #16]
 800ac7e:	b99b      	cbnz	r3, 800aca8 <_vfiprintf_r+0x5c>
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f000 f938 	bl	800aef8 <__swsetup_r>
 800ac88:	b170      	cbz	r0, 800aca8 <_vfiprintf_r+0x5c>
 800ac8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac8c:	07dc      	lsls	r4, r3, #31
 800ac8e:	d504      	bpl.n	800ac9a <_vfiprintf_r+0x4e>
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	b01d      	add	sp, #116	@ 0x74
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	89ab      	ldrh	r3, [r5, #12]
 800ac9c:	0598      	lsls	r0, r3, #22
 800ac9e:	d4f7      	bmi.n	800ac90 <_vfiprintf_r+0x44>
 800aca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aca2:	f7fe fb41 	bl	8009328 <__retarget_lock_release_recursive>
 800aca6:	e7f3      	b.n	800ac90 <_vfiprintf_r+0x44>
 800aca8:	2300      	movs	r3, #0
 800acaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acac:	2320      	movs	r3, #32
 800acae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800acb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb6:	2330      	movs	r3, #48	@ 0x30
 800acb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ae68 <_vfiprintf_r+0x21c>
 800acbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acc0:	f04f 0901 	mov.w	r9, #1
 800acc4:	4623      	mov	r3, r4
 800acc6:	469a      	mov	sl, r3
 800acc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800accc:	b10a      	cbz	r2, 800acd2 <_vfiprintf_r+0x86>
 800acce:	2a25      	cmp	r2, #37	@ 0x25
 800acd0:	d1f9      	bne.n	800acc6 <_vfiprintf_r+0x7a>
 800acd2:	ebba 0b04 	subs.w	fp, sl, r4
 800acd6:	d00b      	beq.n	800acf0 <_vfiprintf_r+0xa4>
 800acd8:	465b      	mov	r3, fp
 800acda:	4622      	mov	r2, r4
 800acdc:	4629      	mov	r1, r5
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ffa2 	bl	800ac28 <__sfputs_r>
 800ace4:	3001      	adds	r0, #1
 800ace6:	f000 80a7 	beq.w	800ae38 <_vfiprintf_r+0x1ec>
 800acea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acec:	445a      	add	r2, fp
 800acee:	9209      	str	r2, [sp, #36]	@ 0x24
 800acf0:	f89a 3000 	ldrb.w	r3, [sl]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 809f 	beq.w	800ae38 <_vfiprintf_r+0x1ec>
 800acfa:	2300      	movs	r3, #0
 800acfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ad00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad04:	f10a 0a01 	add.w	sl, sl, #1
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	9307      	str	r3, [sp, #28]
 800ad0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad10:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad12:	4654      	mov	r4, sl
 800ad14:	2205      	movs	r2, #5
 800ad16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad1a:	4853      	ldr	r0, [pc, #332]	@ (800ae68 <_vfiprintf_r+0x21c>)
 800ad1c:	f7f5 fa70 	bl	8000200 <memchr>
 800ad20:	9a04      	ldr	r2, [sp, #16]
 800ad22:	b9d8      	cbnz	r0, 800ad5c <_vfiprintf_r+0x110>
 800ad24:	06d1      	lsls	r1, r2, #27
 800ad26:	bf44      	itt	mi
 800ad28:	2320      	movmi	r3, #32
 800ad2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad2e:	0713      	lsls	r3, r2, #28
 800ad30:	bf44      	itt	mi
 800ad32:	232b      	movmi	r3, #43	@ 0x2b
 800ad34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad38:	f89a 3000 	ldrb.w	r3, [sl]
 800ad3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad3e:	d015      	beq.n	800ad6c <_vfiprintf_r+0x120>
 800ad40:	9a07      	ldr	r2, [sp, #28]
 800ad42:	4654      	mov	r4, sl
 800ad44:	2000      	movs	r0, #0
 800ad46:	f04f 0c0a 	mov.w	ip, #10
 800ad4a:	4621      	mov	r1, r4
 800ad4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad50:	3b30      	subs	r3, #48	@ 0x30
 800ad52:	2b09      	cmp	r3, #9
 800ad54:	d94b      	bls.n	800adee <_vfiprintf_r+0x1a2>
 800ad56:	b1b0      	cbz	r0, 800ad86 <_vfiprintf_r+0x13a>
 800ad58:	9207      	str	r2, [sp, #28]
 800ad5a:	e014      	b.n	800ad86 <_vfiprintf_r+0x13a>
 800ad5c:	eba0 0308 	sub.w	r3, r0, r8
 800ad60:	fa09 f303 	lsl.w	r3, r9, r3
 800ad64:	4313      	orrs	r3, r2
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	46a2      	mov	sl, r4
 800ad6a:	e7d2      	b.n	800ad12 <_vfiprintf_r+0xc6>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	1d19      	adds	r1, r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	9103      	str	r1, [sp, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	bfbb      	ittet	lt
 800ad78:	425b      	neglt	r3, r3
 800ad7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad7e:	9307      	strge	r3, [sp, #28]
 800ad80:	9307      	strlt	r3, [sp, #28]
 800ad82:	bfb8      	it	lt
 800ad84:	9204      	strlt	r2, [sp, #16]
 800ad86:	7823      	ldrb	r3, [r4, #0]
 800ad88:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad8a:	d10a      	bne.n	800ada2 <_vfiprintf_r+0x156>
 800ad8c:	7863      	ldrb	r3, [r4, #1]
 800ad8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad90:	d132      	bne.n	800adf8 <_vfiprintf_r+0x1ac>
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	1d1a      	adds	r2, r3, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	9203      	str	r2, [sp, #12]
 800ad9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad9e:	3402      	adds	r4, #2
 800ada0:	9305      	str	r3, [sp, #20]
 800ada2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae78 <_vfiprintf_r+0x22c>
 800ada6:	7821      	ldrb	r1, [r4, #0]
 800ada8:	2203      	movs	r2, #3
 800adaa:	4650      	mov	r0, sl
 800adac:	f7f5 fa28 	bl	8000200 <memchr>
 800adb0:	b138      	cbz	r0, 800adc2 <_vfiprintf_r+0x176>
 800adb2:	9b04      	ldr	r3, [sp, #16]
 800adb4:	eba0 000a 	sub.w	r0, r0, sl
 800adb8:	2240      	movs	r2, #64	@ 0x40
 800adba:	4082      	lsls	r2, r0
 800adbc:	4313      	orrs	r3, r2
 800adbe:	3401      	adds	r4, #1
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc6:	4829      	ldr	r0, [pc, #164]	@ (800ae6c <_vfiprintf_r+0x220>)
 800adc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adcc:	2206      	movs	r2, #6
 800adce:	f7f5 fa17 	bl	8000200 <memchr>
 800add2:	2800      	cmp	r0, #0
 800add4:	d03f      	beq.n	800ae56 <_vfiprintf_r+0x20a>
 800add6:	4b26      	ldr	r3, [pc, #152]	@ (800ae70 <_vfiprintf_r+0x224>)
 800add8:	bb1b      	cbnz	r3, 800ae22 <_vfiprintf_r+0x1d6>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	3307      	adds	r3, #7
 800adde:	f023 0307 	bic.w	r3, r3, #7
 800ade2:	3308      	adds	r3, #8
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade8:	443b      	add	r3, r7
 800adea:	9309      	str	r3, [sp, #36]	@ 0x24
 800adec:	e76a      	b.n	800acc4 <_vfiprintf_r+0x78>
 800adee:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf2:	460c      	mov	r4, r1
 800adf4:	2001      	movs	r0, #1
 800adf6:	e7a8      	b.n	800ad4a <_vfiprintf_r+0xfe>
 800adf8:	2300      	movs	r3, #0
 800adfa:	3401      	adds	r4, #1
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	4619      	mov	r1, r3
 800ae00:	f04f 0c0a 	mov.w	ip, #10
 800ae04:	4620      	mov	r0, r4
 800ae06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0a:	3a30      	subs	r2, #48	@ 0x30
 800ae0c:	2a09      	cmp	r2, #9
 800ae0e:	d903      	bls.n	800ae18 <_vfiprintf_r+0x1cc>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0c6      	beq.n	800ada2 <_vfiprintf_r+0x156>
 800ae14:	9105      	str	r1, [sp, #20]
 800ae16:	e7c4      	b.n	800ada2 <_vfiprintf_r+0x156>
 800ae18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e7f0      	b.n	800ae04 <_vfiprintf_r+0x1b8>
 800ae22:	ab03      	add	r3, sp, #12
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	462a      	mov	r2, r5
 800ae28:	4b12      	ldr	r3, [pc, #72]	@ (800ae74 <_vfiprintf_r+0x228>)
 800ae2a:	a904      	add	r1, sp, #16
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f3af 8000 	nop.w
 800ae32:	4607      	mov	r7, r0
 800ae34:	1c78      	adds	r0, r7, #1
 800ae36:	d1d6      	bne.n	800ade6 <_vfiprintf_r+0x19a>
 800ae38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae3a:	07d9      	lsls	r1, r3, #31
 800ae3c:	d405      	bmi.n	800ae4a <_vfiprintf_r+0x1fe>
 800ae3e:	89ab      	ldrh	r3, [r5, #12]
 800ae40:	059a      	lsls	r2, r3, #22
 800ae42:	d402      	bmi.n	800ae4a <_vfiprintf_r+0x1fe>
 800ae44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae46:	f7fe fa6f 	bl	8009328 <__retarget_lock_release_recursive>
 800ae4a:	89ab      	ldrh	r3, [r5, #12]
 800ae4c:	065b      	lsls	r3, r3, #25
 800ae4e:	f53f af1f 	bmi.w	800ac90 <_vfiprintf_r+0x44>
 800ae52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae54:	e71e      	b.n	800ac94 <_vfiprintf_r+0x48>
 800ae56:	ab03      	add	r3, sp, #12
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4b05      	ldr	r3, [pc, #20]	@ (800ae74 <_vfiprintf_r+0x228>)
 800ae5e:	a904      	add	r1, sp, #16
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff fc9b 	bl	800a79c <_printf_i>
 800ae66:	e7e4      	b.n	800ae32 <_vfiprintf_r+0x1e6>
 800ae68:	08032f67 	.word	0x08032f67
 800ae6c:	08032f71 	.word	0x08032f71
 800ae70:	00000000 	.word	0x00000000
 800ae74:	0800ac29 	.word	0x0800ac29
 800ae78:	08032f6d 	.word	0x08032f6d

0800ae7c <__swbuf_r>:
 800ae7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7e:	460e      	mov	r6, r1
 800ae80:	4614      	mov	r4, r2
 800ae82:	4605      	mov	r5, r0
 800ae84:	b118      	cbz	r0, 800ae8e <__swbuf_r+0x12>
 800ae86:	6a03      	ldr	r3, [r0, #32]
 800ae88:	b90b      	cbnz	r3, 800ae8e <__swbuf_r+0x12>
 800ae8a:	f7fe f8e9 	bl	8009060 <__sinit>
 800ae8e:	69a3      	ldr	r3, [r4, #24]
 800ae90:	60a3      	str	r3, [r4, #8]
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	071a      	lsls	r2, r3, #28
 800ae96:	d501      	bpl.n	800ae9c <__swbuf_r+0x20>
 800ae98:	6923      	ldr	r3, [r4, #16]
 800ae9a:	b943      	cbnz	r3, 800aeae <__swbuf_r+0x32>
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 f82a 	bl	800aef8 <__swsetup_r>
 800aea4:	b118      	cbz	r0, 800aeae <__swbuf_r+0x32>
 800aea6:	f04f 37ff 	mov.w	r7, #4294967295
 800aeaa:	4638      	mov	r0, r7
 800aeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	6922      	ldr	r2, [r4, #16]
 800aeb2:	1a98      	subs	r0, r3, r2
 800aeb4:	6963      	ldr	r3, [r4, #20]
 800aeb6:	b2f6      	uxtb	r6, r6
 800aeb8:	4283      	cmp	r3, r0
 800aeba:	4637      	mov	r7, r6
 800aebc:	dc05      	bgt.n	800aeca <__swbuf_r+0x4e>
 800aebe:	4621      	mov	r1, r4
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7ff fe0d 	bl	800aae0 <_fflush_r>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d1ed      	bne.n	800aea6 <__swbuf_r+0x2a>
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	3b01      	subs	r3, #1
 800aece:	60a3      	str	r3, [r4, #8]
 800aed0:	6823      	ldr	r3, [r4, #0]
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	701e      	strb	r6, [r3, #0]
 800aed8:	6962      	ldr	r2, [r4, #20]
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	429a      	cmp	r2, r3
 800aede:	d004      	beq.n	800aeea <__swbuf_r+0x6e>
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	07db      	lsls	r3, r3, #31
 800aee4:	d5e1      	bpl.n	800aeaa <__swbuf_r+0x2e>
 800aee6:	2e0a      	cmp	r6, #10
 800aee8:	d1df      	bne.n	800aeaa <__swbuf_r+0x2e>
 800aeea:	4621      	mov	r1, r4
 800aeec:	4628      	mov	r0, r5
 800aeee:	f7ff fdf7 	bl	800aae0 <_fflush_r>
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d0d9      	beq.n	800aeaa <__swbuf_r+0x2e>
 800aef6:	e7d6      	b.n	800aea6 <__swbuf_r+0x2a>

0800aef8 <__swsetup_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4b29      	ldr	r3, [pc, #164]	@ (800afa0 <__swsetup_r+0xa8>)
 800aefc:	4605      	mov	r5, r0
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	460c      	mov	r4, r1
 800af02:	b118      	cbz	r0, 800af0c <__swsetup_r+0x14>
 800af04:	6a03      	ldr	r3, [r0, #32]
 800af06:	b90b      	cbnz	r3, 800af0c <__swsetup_r+0x14>
 800af08:	f7fe f8aa 	bl	8009060 <__sinit>
 800af0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af10:	0719      	lsls	r1, r3, #28
 800af12:	d422      	bmi.n	800af5a <__swsetup_r+0x62>
 800af14:	06da      	lsls	r2, r3, #27
 800af16:	d407      	bmi.n	800af28 <__swsetup_r+0x30>
 800af18:	2209      	movs	r2, #9
 800af1a:	602a      	str	r2, [r5, #0]
 800af1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	e033      	b.n	800af90 <__swsetup_r+0x98>
 800af28:	0758      	lsls	r0, r3, #29
 800af2a:	d512      	bpl.n	800af52 <__swsetup_r+0x5a>
 800af2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af2e:	b141      	cbz	r1, 800af42 <__swsetup_r+0x4a>
 800af30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <__swsetup_r+0x46>
 800af38:	4628      	mov	r0, r5
 800af3a:	f7fe fa15 	bl	8009368 <_free_r>
 800af3e:	2300      	movs	r3, #0
 800af40:	6363      	str	r3, [r4, #52]	@ 0x34
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	2300      	movs	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	b94b      	cbnz	r3, 800af72 <__swsetup_r+0x7a>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af68:	d003      	beq.n	800af72 <__swsetup_r+0x7a>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4628      	mov	r0, r5
 800af6e:	f000 f883 	bl	800b078 <__smakebuf_r>
 800af72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af76:	f013 0201 	ands.w	r2, r3, #1
 800af7a:	d00a      	beq.n	800af92 <__swsetup_r+0x9a>
 800af7c:	2200      	movs	r2, #0
 800af7e:	60a2      	str	r2, [r4, #8]
 800af80:	6962      	ldr	r2, [r4, #20]
 800af82:	4252      	negs	r2, r2
 800af84:	61a2      	str	r2, [r4, #24]
 800af86:	6922      	ldr	r2, [r4, #16]
 800af88:	b942      	cbnz	r2, 800af9c <__swsetup_r+0xa4>
 800af8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af8e:	d1c5      	bne.n	800af1c <__swsetup_r+0x24>
 800af90:	bd38      	pop	{r3, r4, r5, pc}
 800af92:	0799      	lsls	r1, r3, #30
 800af94:	bf58      	it	pl
 800af96:	6962      	ldrpl	r2, [r4, #20]
 800af98:	60a2      	str	r2, [r4, #8]
 800af9a:	e7f4      	b.n	800af86 <__swsetup_r+0x8e>
 800af9c:	2000      	movs	r0, #0
 800af9e:	e7f7      	b.n	800af90 <__swsetup_r+0x98>
 800afa0:	200001e0 	.word	0x200001e0

0800afa4 <_raise_r>:
 800afa4:	291f      	cmp	r1, #31
 800afa6:	b538      	push	{r3, r4, r5, lr}
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	d904      	bls.n	800afb8 <_raise_r+0x14>
 800afae:	2316      	movs	r3, #22
 800afb0:	6003      	str	r3, [r0, #0]
 800afb2:	f04f 30ff 	mov.w	r0, #4294967295
 800afb6:	bd38      	pop	{r3, r4, r5, pc}
 800afb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800afba:	b112      	cbz	r2, 800afc2 <_raise_r+0x1e>
 800afbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afc0:	b94b      	cbnz	r3, 800afd6 <_raise_r+0x32>
 800afc2:	4628      	mov	r0, r5
 800afc4:	f000 f830 	bl	800b028 <_getpid_r>
 800afc8:	4622      	mov	r2, r4
 800afca:	4601      	mov	r1, r0
 800afcc:	4628      	mov	r0, r5
 800afce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afd2:	f000 b817 	b.w	800b004 <_kill_r>
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d00a      	beq.n	800aff0 <_raise_r+0x4c>
 800afda:	1c59      	adds	r1, r3, #1
 800afdc:	d103      	bne.n	800afe6 <_raise_r+0x42>
 800afde:	2316      	movs	r3, #22
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7e7      	b.n	800afb6 <_raise_r+0x12>
 800afe6:	2100      	movs	r1, #0
 800afe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afec:	4620      	mov	r0, r4
 800afee:	4798      	blx	r3
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7e0      	b.n	800afb6 <_raise_r+0x12>

0800aff4 <raise>:
 800aff4:	4b02      	ldr	r3, [pc, #8]	@ (800b000 <raise+0xc>)
 800aff6:	4601      	mov	r1, r0
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	f7ff bfd3 	b.w	800afa4 <_raise_r>
 800affe:	bf00      	nop
 800b000:	200001e0 	.word	0x200001e0

0800b004 <_kill_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	@ (800b024 <_kill_r+0x20>)
 800b008:	2300      	movs	r3, #0
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	f7fa f91d 	bl	8005250 <_kill>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d102      	bne.n	800b020 <_kill_r+0x1c>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b103      	cbz	r3, 800b020 <_kill_r+0x1c>
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	20000b00 	.word	0x20000b00

0800b028 <_getpid_r>:
 800b028:	f7fa b90a 	b.w	8005240 <_getpid>

0800b02c <__swhatbuf_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	460c      	mov	r4, r1
 800b030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b034:	2900      	cmp	r1, #0
 800b036:	b096      	sub	sp, #88	@ 0x58
 800b038:	4615      	mov	r5, r2
 800b03a:	461e      	mov	r6, r3
 800b03c:	da0d      	bge.n	800b05a <__swhatbuf_r+0x2e>
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b044:	f04f 0100 	mov.w	r1, #0
 800b048:	bf14      	ite	ne
 800b04a:	2340      	movne	r3, #64	@ 0x40
 800b04c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b050:	2000      	movs	r0, #0
 800b052:	6031      	str	r1, [r6, #0]
 800b054:	602b      	str	r3, [r5, #0]
 800b056:	b016      	add	sp, #88	@ 0x58
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	466a      	mov	r2, sp
 800b05c:	f000 f848 	bl	800b0f0 <_fstat_r>
 800b060:	2800      	cmp	r0, #0
 800b062:	dbec      	blt.n	800b03e <__swhatbuf_r+0x12>
 800b064:	9901      	ldr	r1, [sp, #4]
 800b066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b06a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b06e:	4259      	negs	r1, r3
 800b070:	4159      	adcs	r1, r3
 800b072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b076:	e7eb      	b.n	800b050 <__swhatbuf_r+0x24>

0800b078 <__smakebuf_r>:
 800b078:	898b      	ldrh	r3, [r1, #12]
 800b07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b07c:	079d      	lsls	r5, r3, #30
 800b07e:	4606      	mov	r6, r0
 800b080:	460c      	mov	r4, r1
 800b082:	d507      	bpl.n	800b094 <__smakebuf_r+0x1c>
 800b084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	6123      	str	r3, [r4, #16]
 800b08c:	2301      	movs	r3, #1
 800b08e:	6163      	str	r3, [r4, #20]
 800b090:	b003      	add	sp, #12
 800b092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b094:	ab01      	add	r3, sp, #4
 800b096:	466a      	mov	r2, sp
 800b098:	f7ff ffc8 	bl	800b02c <__swhatbuf_r>
 800b09c:	9f00      	ldr	r7, [sp, #0]
 800b09e:	4605      	mov	r5, r0
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7fd f880 	bl	80081a8 <_malloc_r>
 800b0a8:	b948      	cbnz	r0, 800b0be <__smakebuf_r+0x46>
 800b0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ae:	059a      	lsls	r2, r3, #22
 800b0b0:	d4ee      	bmi.n	800b090 <__smakebuf_r+0x18>
 800b0b2:	f023 0303 	bic.w	r3, r3, #3
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	e7e2      	b.n	800b084 <__smakebuf_r+0xc>
 800b0be:	89a3      	ldrh	r3, [r4, #12]
 800b0c0:	6020      	str	r0, [r4, #0]
 800b0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0c6:	81a3      	strh	r3, [r4, #12]
 800b0c8:	9b01      	ldr	r3, [sp, #4]
 800b0ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b0ce:	b15b      	cbz	r3, 800b0e8 <__smakebuf_r+0x70>
 800b0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	f000 f81d 	bl	800b114 <_isatty_r>
 800b0da:	b128      	cbz	r0, 800b0e8 <__smakebuf_r+0x70>
 800b0dc:	89a3      	ldrh	r3, [r4, #12]
 800b0de:	f023 0303 	bic.w	r3, r3, #3
 800b0e2:	f043 0301 	orr.w	r3, r3, #1
 800b0e6:	81a3      	strh	r3, [r4, #12]
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	431d      	orrs	r5, r3
 800b0ec:	81a5      	strh	r5, [r4, #12]
 800b0ee:	e7cf      	b.n	800b090 <__smakebuf_r+0x18>

0800b0f0 <_fstat_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d07      	ldr	r5, [pc, #28]	@ (800b110 <_fstat_r+0x20>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	602b      	str	r3, [r5, #0]
 800b0fe:	f7fa f907 	bl	8005310 <_fstat>
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d102      	bne.n	800b10c <_fstat_r+0x1c>
 800b106:	682b      	ldr	r3, [r5, #0]
 800b108:	b103      	cbz	r3, 800b10c <_fstat_r+0x1c>
 800b10a:	6023      	str	r3, [r4, #0]
 800b10c:	bd38      	pop	{r3, r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	20000b00 	.word	0x20000b00

0800b114 <_isatty_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d06      	ldr	r5, [pc, #24]	@ (800b130 <_isatty_r+0x1c>)
 800b118:	2300      	movs	r3, #0
 800b11a:	4604      	mov	r4, r0
 800b11c:	4608      	mov	r0, r1
 800b11e:	602b      	str	r3, [r5, #0]
 800b120:	f7fa f906 	bl	8005330 <_isatty>
 800b124:	1c43      	adds	r3, r0, #1
 800b126:	d102      	bne.n	800b12e <_isatty_r+0x1a>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b103      	cbz	r3, 800b12e <_isatty_r+0x1a>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	20000b00 	.word	0x20000b00

0800b134 <_init>:
 800b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b136:	bf00      	nop
 800b138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13a:	bc08      	pop	{r3}
 800b13c:	469e      	mov	lr, r3
 800b13e:	4770      	bx	lr

0800b140 <_fini>:
 800b140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b142:	bf00      	nop
 800b144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b146:	bc08      	pop	{r3}
 800b148:	469e      	mov	lr, r3
 800b14a:	4770      	bx	lr
